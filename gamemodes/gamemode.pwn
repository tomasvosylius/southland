/*

	Ðià SA-MP þaidimo modifikacijà sukûrë Tomas "f0cus" Vosylius.
	Kûrimo data: pradþia 2016 vasaris.

	Modifikacija skirta County Roleplay projektui (CRP.lt); (Vëliau ir Southland.lt(2017-2018) bei Southland.lt(2020) projektams)
	Modifikacijà galima naudoti su sàlyga, jei paliekami kreditai kûrëjui;

	Ðie programiniai kodai ir failai yra kuriami atsakingai, stengiantis sukurti
	veikiantá, funkcionalø, naujoviðkà serverá.
	Dauguma kodo eiluèiø yra komentuojamos, kad ðá suprasti bûtø lengviau.
*/

// ==============================================================================#
// Includinam funkciju failus
#pragma warning disable 203, 239, 217, 214
#define YSI_NO_HEAP_MALLOC
#define CGEN_MEMORY 		(100000)

#include <a_samp>
#if defined MAX_PLAYERS
	#undef MAX_PLAYERS
#endif
#define MAX_PLAYERS 150

#include <a_mysql>

#include <FileManager>
#include <streamer>
#include <crashdetect>
#include <YSI_Data\y_iterate>
#include <YSI_Coding\y_va>
#include <YSI_Coding\y_inline>
#include <YSI_Coding\y_timers>
#include <YSI_Coding\y_stringhash>
#include <YSI_Visual\y_dialog>
#include <sscanf2>
#include <pawn.CMD>
#include <md5>
#include <geolocation>
#include <strlib>
#include <zones>
#include <callbacks>
#include <arrow>
#include <evi>
#include <gvar>
#include <colandreas>
#include <timestamp>
#include <mSelection>
#include <screen>
#include <requests>
#include <garage_block>

#define ZMSG_MAX_CHAT_LENGTH	96
#define ZMSG_SEPARATORS_LIST	' '
#define ZMSG_HYPHEN_END			" ..."
#define ZMSG_HYPHEN_START		"... "
#include <zmessage>

native WP_Hash(buffer[], len, const str[]);
native gpci(playerid, serial[], len);
// ==============================================================================
// Serveris
#define CODE_VERSION 		1.2.1
#define CODE_VERSION_P 		1147
#define SERVER_DEBUG_LEVEL 	3 		// [0:nieko] [1:errorai, gm klaidos] [2:visi callbackai] [3:funkcijos]
//#define BETA_TEST_MODE 	// galima /reportbug naudot
#define ENABLE_GPS 	 	// leidziam /gps komanda

// Svarbiausi defines, iskart po incldue butini
#if defined INVALID_3DTEXT_ID   
	#undef INVALID_3DTEXT_ID
#endif
#define INVALID_3DTEXT_ID Text3D:0xFFFF

// ==============================================================================
// Limitai
#define MAX_GRAFFITI 					300
#define MAX_CHARACTERS 					15
#define MAX_HOUSES 						700
#define MAX_DEALER_HOUSES 				100
#define MAX_BUSINESS 					500
#define MAX_BUSINESS_WARES 				20
#define MAX_PARKINGS 					100
#define MAX_ROADBLOCKS	 				100
#define MAX_ENTERS_EXITS				300
#define MAX_AVAILABLE_WARES 			25
#define MAX_JOBS						10
#define MAX_MAP_ICONS					100
#define MAX_GARAGES 					200
#define MAX_ATMS						50
#define MAX_HOUSE_FURNITURES 			12000
#define MAX_BUSINESS_FURNITURES 		12000
#define MAX_GARAGE_FURNITURES 			12000
#define MAX_FACTIONS					10
#define MAX_FACTION_RANKS				20
#define MAX_BUG_REPORT_TEXT	 			1024
#define MAX_SALONS 						10
#define MAX_PAYPHONES 					50
#define MAX_SALON_MODELS				200
#define MAX_WEAPONS_PER_ORDER 			20 	// strpack things
#define MAX_DRUGS_PER_ORDER 			100 // strpack things
#define MAX_RANDOM_SPAWNS 				5
#define MAX_PLAYER_GROUPS				3
#define MAX_ADMIN_GROUPS 						8
#define MAX_HOUSE_EXTRA_ENTERS			2
#define MAX_BUSINESS_EXTRA_ENTERS		2
#define MAX_TEXTURE_SLOTS				6
#define MAX_PLAYER_IP 					21
#define MAX_SHELLS 						5
#define MAX_WATER_AREAS 				303
// namu baldai
#define MAX_HFURNITURE 					150
#define MAX_HFURNITURE_BRONZE 			250
#define MAX_HFURNITURE_SILVER 			350
#define MAX_HFURNITURE_GOLD 			500
// verslo baldai
#define MAX_BFURNITURE 					150
#define MAX_BFURNITURE_BRONZE 			250
#define MAX_BFURNITURE_SILVER 			350
#define MAX_BFURNITURE_GOLD 			500
// garazo baldai
#define MAX_GFURNITURE					70
#define MAX_GFURNITURE_BRONZE 			100
#define MAX_GFURNITURE_SILVER 			200
#define MAX_GFURNITURE_GOLD 			300
// Donators, remejai
#define MAX_AFK_TIME_NO_DONATOR			8
#define MAX_AFK_TIME_SILVER_USER		14	
#define MAX_AFK_TIME_GOLD_USER			20
#define TIME_TO_RESET_DONATOR 			2592000 // 30days

// Inventorius
#define MAX_INVENTORY_SLOTS 				15
#define MAX_HOUSE_INVENTORY_SLOTS 			15
#define MAX_DEALER_HOUSE_INVENTORY_SLOTS 	15
#define MAX_BUSINESS_INVENTORY_SLOTS 		15
#define MAX_VEHICLE_INVENTORY_SLOTS 		15
#define MAX_VEHICLE_WEAPON_SLOTS 			15
#define MAX_INVENTORY_SLOTS_AT_ALL 			15 // Kuris is auksciau yra didziausias
#define MAX_CLOTHES_INVENTORY_SLOTS			15
#define MAX_PLAYER_CONTACTS					30
#define MAX_DROPPED_ITEMS 					500
// Broadcast
#define MAX_DISTANCE_BETWEEN_BROADCASTERS 	15.0
// Nustatymai
#define MIN_SAVINGS_MONEY_TO_PUT		50000
#define MAX_SAVINGS_MONEY_TO_PUT		300000
#define MAX_SAVINGS_COLLECTED			1000000

#define ENABLE_BANK_CARD_CREATION		false
#define GARAGE_VIRTUAL_WORLD 			10000
#define HOUSE_VIRTUAL_WORLD 			20000
#define BUSINESS_VIRTUAL_WORLD 			30000
#define DEALER_HOUSE_VIRTUAL_WORLD 		40000
#define DEFAULT_MASK_NUMBER 			10200
#define DEFAULT_MECHANIC_NUMBER 		3333
#define DEFAULT_STUDIO_NUMBER 			5555
#define DEFAULT_TAXI_NUMBER 			4114
#define DEFAULT_TAXI_LICENCE_PRICE		3000
#define DEFAULT_PLAYER_COLOR			0x99999911
#define DEFAULT_CAR_RENT_PRICE			8

#define WARNS_TO_BAN 					3
#define TIME_TO_DELETE_DROPS			18000 // 5val.  	60sec= 1mmin // kas kiek UNIX sec issitrins visi objektai
#define MINUTES_TO_PLAY_FOR_PAYDAY 				15 // kiek minuciu reik prazaist, kad gautum payday
#define ADMIN_PERMISSIONS_PER_PAGE		18 // kiek permisionu per page rodyt ( << >> )
#define MAX_FURNITURE_PER_PAGE 			180
#define MAX_HOUSES_PER_PAGE 			100
#define MAX_BUSINESS_PER_PAGE 			100
// ==============================================================================
// Defaultai

// Spawn types
#define SPAWN_TYPE_DEFAULT 					0
#define SPAWN_TYPE_HOUSE 					1
#define SPAWN_TYPE_BUSINESS					2
#define SPAWN_TYPE_FACTION 					3

#define SPAWN_TYPE_DEFAULT_ID_DEFAULT		0
#define SPAWN_TYPE_DEFAULT_ID_JEFFERSON		1
#define SPAWN_TYPE_DEFAULT_ID_EAST_LS		2
#define SPAWN_TYPE_DEFAULT_ID_WEST_LS		3

// kiti
#define DEFAULT_BUSINESS_FUEL_ORDER		1.75 // kiek trukumas_litru*sita_reiksme kainuos uzsakymas
#define DEFAULT_BUSINESS_FUEL_CAPACITY 	10000 // kiek litru telpa degalinej
#define DEFAULT_POLICE_WEAPONS_PRICE	19000
#define DEFAULT_POLICE_SKINS_PRICE		10000
#define DEFAULT_POLICE_SPECIAL_PRICE 	31000
#define DEFAULT_DMV_PRICE 				1100
#define DEFAULT_BANK_CARD_PRICE 		50
#define DEFAULT_AD_PRICE 				100
#define DEFAULT_PAYDAYS_TO_EMPTY_POLICE_WEAPONS	120
#define DEFAULT_PAYDAYS_TO_EMPTY_POLICE_SKINS	216
#define DEFAULT_PAYDAYS_TO_EMPTY_POLICE_SPECIAL	336
// jei neuzkrauna random is sql, naudojam sitas visoms:
#define DEFAULT_ANY_SALON_X 			2245.26
#define DEFAULT_ANY_SALON_Y 			-2147.63
#define DEFAULT_ANY_SALON_Z 			13.55
#define DEFAULT_ANY_SALON_A 			0.0
// baras
#define DEFAULT_BAR_STEAK_PRICE 		20
#define DEFAULT_BAR_SNACK_PRICE 		7
#define DEFAULT_BAR_SANDWICH_PRICE 		5
#define DEFAULT_BAR_PIZZA_PRICE 		9
#define DEFAULT_BAR_PANCAKES_PRICE 		7
#define DEFAULT_BAR_BEER_PRICE 			2
#define DEFAULT_BAR_JUICE_PRICE 		2
#define DEFAULT_BAR_WINE_PRICE 			10
// numeris
#define PAYPHONE_DEFAULT_NUMBER 		100500
#define PHONE_DEFAULT_NUMBER 			110000
// namai
#define DEFAULT_HOUSE_PICKUP			19605
// verslai
#define DEFAULT_BUSINESS_PICKUP			1239	
#define MAX_BUSINESS_FOR_PLAYER 		2
#define MAX_BUSINESS_FOR_PLAYER_BRONZE 	4	
#define MAX_BUSINESS_FOR_PLAYER_SILVER 	6	
#define MAX_BUSINESS_FOR_PLAYER_GOLD 	12	
// Masinos
#define DEFAULT_LOCK_NEEDED_TO_FIND 	3 // kelinto alarm lygio masinai reik kad eitu v find
#define MAX_SPAWNED_CARS 				3
#define MAX_SPAWNED_CARS_BRONZE 		4
#define MAX_SPAWNED_CARS_SILVER 		6
#define MAX_SPAWNED_CARS_GOLD 			8
#define MAX_INSURANCE_LEVEL				3
#define MAX_LOCK_LEVEL					4
#define MAX_OWNED_VEHICLES				10
#define VEHICLE_ARRAY_LIMIT				20
#define FURNITURE_ARRAY_LIMIT 			150
#define VEHICLE_BUY_PARK_PRICE 			300
#define VEHICLE_REGISTER_PRICE 			150
#define TRUNKS_SPACE_POLICE_WEAPONS		200
// ==============================================================================
// Dialogai
#define DIALOG_NONE 					0
#define DIALOG_PASSWORD 				1
#define DIALOG_FURNITURE_MAIN			4
#define DIALOG_FURNITURE_OWNED			5
#define DIALOG_FURNITURE_EDIT_MAIN		6
#define DIALOG_FURNITURE_CATEGORIES		7
#define DIALOG_FURNITURE_BUYABLE		8
#define DIALOG_FURNITURE_CHANGE_NAME	9
#define DIALOG_FURNITURE_CHANGE_RX		10
#define DIALOG_FURNITURE_CHANGE_RY		11
#define DIALOG_FURNITURE_CHANGE_RZ		12
#define DIALOG_FURNITURE_TEXTURES		13
#define DIALOG_FURNITURE_TEXTURE_EDIT	14
#define DIALOG_FURNITURE_COLORS_LIST	15
#define DIALOG_FURNITURE_TEXTURES_LIST	16
#define DIALOG_FURNITURE_EDIT_SELECTED	17
#define DIALOG_FURNITURE_CHANGE_RX_M	18
#define DIALOG_FURNITURE_CHANGE_RY_M	19
#define DIALOG_FURNITURE_CHANGE_RZ_M	20
#define DIALOG_CARGO_LIST				21
#define DIALOG_FARMER_SELECT_JOB		22
#define DIALOG_MECHANIC_SELECT_COLORS	23
#define DIALOG_INVENTORY				24
#define DIALOG_INVENTORY_ITEM			25
#define DIALOG_TRUNK 					26
#define DIALOG_TRUNK_ITEM 				27
#define DIALOG_INVENTORY_GIVE			28
#define DIALOG_FM_MAIN					29
#define DIALOG_FM_RANKS_AND_USERS		30
#define DIALOG_FM_INVENTORY 			31
#define DIALOG_FM_USERS_MAIN			32
#define DIALOG_FM_USER_ADD 				33
#define DIALOG_FM_USER_EDIT 			34
#define DIALOG_FM_RANKS_MAIN 			35
#define DIALOG_FM_RANK_EDIT				36
#define DIALOG_FM_BUDGET_MAIN 			37
#define DIALOG_FM_BUDGET_TAKE 			38
#define DIALOG_FM_BUDGET_PUT 			39
#define DIALOG_FM_VEHICLES_MAIN			40
#define DIALOG_FM_VEHICLES_LIST			41
#define DIALOG_FM_VEHICLES_SHOP			42
#define DIALOG_FM_VEHICLE_EDIT 			43
#define DIALOG_FM_VEHICLE_SET_RANK		44
#define DIALOG_FM_VEHICLE_SET_UNIT 		45
#define DIALOG_FM_WEAPONS_MAIN 			46
#define DIALOG_FM_USER_RANK				47
#define DIALOG_FM_WEAPONS_TYPE			48
#define DIALOG_HOUSE_INVENTORY			50
#define DIALOG_HOUSE_INVENTORY_ITEM 	51
#define DIALOG_BUSINESS_INVENTORY		52
#define DIALOG_BUSINESS_INVENTORY_ITEM 	53
#define DIALOG_PLAYER_OPTIONS			54
#define DIALOG_REPORTS_LIST				55
#define DIALOG_REPORT_ACTION			56
#define DIALOG_REPORT_REASON 			57
#define DIALOG_FM_VEHICLE_COLOR			58
#define DIALOG_WEAPON_STORE				59
#define DIALOG_CLOTHES_MAIN				60
#define DIALOG_CLOTHES_LIST 			61
#define DIALOG_CLOTHE_EDIT 				62
#define DIALOG_CLOTHE_CHANGE_BONE 		63
#define DIALOG_CLOTHES_LIST_EDIT		64
#define DIALOG_AM_MAIN					65
#define DIALOG_AM_SPAWN_MAIN			81
#define DIALOG_ATM_WITHDRAW 			82
#define DIALOG_ATM_DEPOSIT 				83
#define DIALOG_ATM_MONEY 				84
#define DIALOG_AM_GARAGES_MAIN 			87
#define DIALOG_AM_GARAGES_ALL 			88
#define DIALOG_AM_GARAGE_EDIT_MAIN 		89
#define DIALOG_AM_GARAGE_EDIT_PRICE 	90
#define DIALOG_AM_GARAGE_EDIT_OWNER 	91
#define DIALOG_AM_HOUSES_MAIN 			92
#define DIALOG_AM_HOUSES_ALL 			93
#define DIALOG_AM_HOUSE_EDIT_MAIN 		94
#define DIALOG_AM_HOUSE_EDIT_PRICE 		95
#define DIALOG_AM_HOUSE_EDIT_OWNER 		96
#define DIALOG_AM_HOUSE_INV 			97
#define DIALOG_AM_HOUSE_INV_EDIT 		98
#define DIALOG_AM_HOUSE_INV_ITEM 		99
#define DIALOG_AM_HOUSE_INV_AMOUNT 		100
#define DIALOG_AM_BUSINESS_MAIN 		101
#define DIALOG_AM_BUSINESS_ALL 			102
#define DIALOG_AM_BUSINESS_EDIT_MAIN 	103
#define DIALOG_AM_BUSINESS_EDIT_PRICE 	104
#define DIALOG_AM_BUSINESS_EDIT_OWNER 	105
#define DIALOG_AM_BUSINESS_INV 			106
#define DIALOG_AM_BUSINESS_INV_MAIN 	107
#define DIALOG_AM_BUSINESS_INV_AMOUNT 	108
#define DIALOG_AM_BUSINESS_INV_EDIT 	109
#define DIALOG_AM_BUSINESS_INV_ITEM 	110
#define DIALOG_AM_BUSINESS_EDIT_TYPE 	111
#define DIALOG_AM_BUSINESS_EDIT_NAME 	112
#define DIALOG_AM_BUSINESS_WARES_ALL 	113
#define DIALOG_AM_BUSINESS_WARE 	 	114
#define DIALOG_AM_BUSINESS_WARE_ITEM  	115
#define DIALOG_AM_BUSINESS_WARE_AMOUNT 	116
#define DIALOG_AM_BUSINESS_NEW_WARE 	117
#define DIALOG_AM_SALONS_MAIN 			118
#define DIALOG_AM_SALON_CREATE 			119
#define DIALOG_AM_SALON_EDIT 			120
#define DIALOG_AM_SALONS_ALL			121
#define DIALOG_AM_SALONS_VEHICLES_ALL 	122
#define DIALOG_AM_SALON_VEHICLE_EDIT 	123
#define DIALOG_AM_SALON_VEHICLE_MODEL 	124
#define DIALOG_AM_SALON_VEHICLE_PRICE 	125
#define DIALOG_AM_SALON_VEHICLE_ADD 	126
#define DIALOG_AM_SALON_VEHICLE_DONATOR 127
#define DIALOG_AM_SALON_SPAWNS_ALL 		128
#define DIALOG_AM_SALON_SPAWN_EDIT 		129
#define DIALOG_AM_SALON_EDIT_NAME 		130
#define DIALOG_BANK_MAIN 				131
#define DIALOG_BANK_DEPOSIT 			132
#define DIALOG_BANK_WITHDRAW 			133
#define DIALOG_BANK_HISTORY 			134
#define DIALOG_BANK_SAVINGS 			135
#define DIALOG_BANK_TRANSACTION_NAME 	136
#define DIALOG_BANK_TRANSACTION_AMOUNT 	137
#define DIALOG_HM_MAIN 					138
#define DIALOG_HM_DUBKEYS_MAIN 			139
#define DIALOG_HM_DUBKEY_ADD 			140
#define DIALOG_HM_DUBKEYS_ALL 			141
#define DIALOG_HM_DUBKEY_EDIT_MAIN 		142
#define DIALOG_HM_UPDATES_MAIN 			143

#define DIALOG_AFURNITURE_MAIN 			145
#define DIALOG_HM_SAFE_MAIN  			146
#define DIALOG_HM_SAFE_DEPOSIT 			147
#define DIALOG_HM_SAFE_WITHDRAW 		148
#define DIALOG_HM_SELL_MAIN 			149
#define DIALOG_BM_MAIN 					150
#define DIALOG_BM_WORKERS_MAIN 			151
#define DIALOG_BM_WORKERS_ALL 			152
#define DIALOG_BM_WORKER_MAIN 			153
#define DIALOG_BM_WORKER_PRIVILEGE 		154
#define DIALOG_BM_WORKER_ADD 			155
#define DIALOG_BM_WARES_MAIN 			156
#define DIALOG_BM_WARES_ALL 			157
#define DIALOG_BM_WARE_ITEM 			158
#define DIALOG_BM_WARE_PRICE 			159
#define DIALOG_BM_WARE_EDIT 			160
#define DIALOG_AM_BUSINESS_EDIT_LEVEL 	161
#define DIALOG_BM_WARES_ORDER 			162
#define DIALOG_BM_WARES_ORDER_TYPE 		163

#define DIALOG_BM_BUDGET_MAIN 			169
#define DIALOG_BM_BUDGET_DEPOSIT 		170
#define DIALOG_BM_BUDGET_WITHDRAW 		171
#define DIALOG_AM_BUSINESS_LEVELS_MAIN 	172
#define DIALOG_AM_BUSINESS_LEVEL_EDIT 	173

#define DIALOG_AM_FACTION_MAIN 			176
#define DIALOG_AM_INTERIOR_ADD 			177
#define DIALOG_AM_INTERIOR_EDIT 		178
#define DIALOG_AM_GROUPS_MAIN 			179
#define DIALOG_AM_GROUP_ADD 			180
#define DIALOG_AM_GROUPS_ALL 			181
#define DIALOG_AM_GROUP_EDIT_MAIN 		182
#define DIALOG_AM_GROUP_EDIT_PRIVILEGES 183
#define DIALOG_AM_GROUP_EDIT_COMMANDS 	184
#define DIALOG_AM_GROUP_EDIT_NAME 		185
#define DIALOG_AM_ICONS_MAIN 			186
#define DIALOG_AM_ICONS_ALL 			187
#define DIALOG_AM_ICON_EDIT_MAIN 		188
#define DIALOG_AM_ICON_EDIT_NAME 		189
#define DIALOG_AM_ICON_EDIT_DISTANCE 	190
#define DIALOG_AM_ICON_EDIT_TYPE 		191
#define DIALOG_AM_FACTIONS_ALL 			192
#define DIALOG_AM_FACTION_EDIT_MAIN 	193
#define DIALOG_AM_FACTION_ADD 			194
#define DIALOG_AM_FACTION_EDIT_NAME 	195
#define DIALOG_AM_FACTION_RANKS_ALL 	196
#define DIALOG_AM_FACTION_RANK_EDIT_NAME 	197
#define DIALOG_AM_FACTION_RANK_EDIT_SALARY 	198
#define DIALOG_AM_FACTION_RANK_ADD 			199
#define DIALOG_AM_SIGNAL_MAIN 				200
#define DIALOG_AM_PAYPHONE_MAIN 			201
#define DIALOG_AM_PAYPHONES_ALL 			202
#define DIALOG_AM_PAYPHONE_EDIT 			203
#define DIALOG_AM_FACTION_RANK_EDIT_MAIN 	204
#define DIALOG_AM_FACTION_EDIT_TYPE 		205
#define DIALOG_PHONE_CONTACTS_MAIN 			206
#define DIALOG_PHONE_CONTACTS_ADD_NAME 		207
#define DIALOG_PHONE_CONTACTS_EDIT_NAME 	208
#define DIALOG_PHONE_CONTACTS_EDIT_NUMBER 	209
#define DIALOG_PHONE_CONTACTS_ALL 			210
#define DIALOG_PHONE_CONTACTS_ADD_NUMBER 	211
#define DIALOG_PHONE_CONTACT_EDIT_MAIN 		212
#define DIALOG_AM_FACTION_SALONS_MAIN 		213
#define DIALOG_AM_FACTION_SALONS_LIST 		214
#define DIALOG_AM_FACTION_SALONS_EDIT 		215
#define DIALOG_AM_FACTION_SALONS_ADD 		216
#define DIALOG_AM_FACTIONS_SALON_EDIT_MODEL 217
#define DIALOG_AM_FACTIONS_SALON_EDIT_PRICE 218
#define DIALOG_AM_ICON_ADD 					219
#define DIALOG_AM_PARKING_MAIN 				220
#define DIALOG_AM_PARKING_ADD 				221
#define DIALOG_AM_PARKINGS_ALL 				222
#define DIALOG_AM_PARKING_EDIT_NAME 		223
#define DIALOG_AM_PARKING_EDIT_MAIN 		224
#define DIALOG_PHONE_OPTIONS_MAIN 			225
#define DIALOG_PHONE_SMS_MAIN 				226
#define DIALOG_PHONE_SMS_SENT_ALL 			227
#define DIALOG_PHONE_SMS_SENT_MORE 			228
#define DIALOG_PHONE_SMS_RECEIVED_ALL  		229
#define DIALOG_PHONE_SMS_RECEIVED_MORE 		230
#define DIALOG_PHONE_SMS_NEW_CONTACTS_ALL 	231
#define DIALOG_PHONE_SMS_NEW_TEXT 			232
#define DIALOG_PHONE_SMS_NEW_RECEIVER_MAIN 	233
#define DIALOG_PHONE_SMS_NEW_RECEIVER_INPUT 234
#define DIALOG_PHONE_CALL_CONTACTS 			235
#define DIALOG_AM_BM_MAIN 					236
#define DIALOG_AM_BM_DEALERS_ALL			237
#define DIALOG_AM_BM_DEALER_EDIT_MAIN		238
#define DIALOG_AM_BM_DEALER_EDIT_GUNS_ALL	239
#define DIALOG_AM_BM_HOUSES_ALL 			240
#define DIALOG_AM_BM_VEHICLES_ALL 			241
#define DIALOG_AM_BM_VEHICLE_EDIT_MAIN 		242
#define DIALOG_AM_BM_VEHICLE_EDIT_TYPE 		243
#define DIALOG_AM_BM_VEHICLE_EDIT_PRICE 	244
#define DIALOG_AM_BM_VEHICLE_ADD 			245
#define DIALOG_AM_BM_HOUSES_MAIN 			246
#define DIALOG_AM_BM_HOUSE_ADD 				247
#define DIALOG_AM_BM_DEALER_EDIT_GUNS_ADD 	248
#define DIALOG_AM_BM_DEALER_EDIT_GUN_MAIN	249
#define DIALOG_AM_BM_DEALER_ADD 			250
#define DIALOG_AM_BM_DEALER_VEHICLES_ALL 	251
#define DIALOG_AM_BM_DEALER_VEHICLE_EDIT_MAIN 252
#define DIALOG_AM_BM_DEALER_EDIT_GUN_MAX 	253
#define DIALOG_AM_BM_DEALER_EDIT_GUN_PRICE 	254
#define DIALOG_AM_BM_DEALER_EDIT_TYPE 		255
#define DIALOG_AM_BM_DEALER_HOUSES_ALL 		256
#define DIALOG_DM_MAIN 						257
#define DIALOG_DM_HOUSES_MAIN 				258
#define DIALOG_DM_HOUSES_OWNED_ALL 			259
#define DIALOG_DM_HOUSES_OWNED_EDIT_MAIN 	260
#define DIALOG_DM_DRUGS_MAIN 				261
#define DIALOG_DM_HOUSES_BUY_ALL 			262
#define DIALOG_PAY_FOR_FUEL 				263
#define DIALOG_BM_CHANGE_FUEL_PRICE 		264
#define DIALOG_DM_HOUSES_BUY 				265
#define DIALOG_HM_RENT_MAIN 				266
#define DIALOG_HM_RENT_EDIT_LIMIT			267
#define DIALOG_HM_RENT_EDIT_ALL 			268
#define DIALOG_HM_RENT_EDIT_PERSON 			269
#define DIALOG_HM_RENT_EDIT_PRICE 			270
#define DIALOG_DM_GUNS_ORDER_LIST 			271
#define DIALOG_DM_GUNS_MAIN 				272
#define DIALOG_DM_GUNS_SELECT_DELIVERY 		273
#define DIALOG_AM_BM_HOUSE_EDIT_MAIN 		274
#define DIALOG_AM_BM_HOUSE_EDIT_PRICE 		275
#define DIALOG_AM_BM_HOUSE_EDIT_OWNER 		276
#define DIALOG_AM_BM_HOUSE_EDIT_TYPE 		277
#define DIALOG_BM_FUEL_ORDER_CONFIRM 		280
#define DIALOG_BM_FUEL_MAIN 				281
#define DIALOG_AM_BM_DEALER_EDIT_DRUGS_ALL 	282
#define DIALOG_AM_BM_DEALER_EDIT_DRUG_PRICE 283
#define DIALOG_AM_BM_DEALER_EDIT_DRUG_ADD  	284
#define DIALOG_AM_BM_DEALER_EDIT_DRUG_MAX 	285
#define DIALOG_AM_BM_DEALER_EDIT_GUN_AMOUNT  286
#define DIALOG_AM_BM_DEALER_EDIT_DRUG_AMOUNT 287
#define DIALOG_AM_BM_DEALER_GUN_MAIN 		288
#define DIALOG_AM_BM_DEALER_DRUG_MAIN 		289
#define DIALOG_AM_BM_DEALER_EDIT_MAX_GUNS 	290
#define DIALOG_AM_BM_DEALER_EDIT_MAX_DRUGS 	291
#define DIALOG_AM_BM_DEALER_EDIT_DRUG_MAIN 	292
#define DIALOG_DM_DRUGS_ORDER_LIST 			293
#define DIALOG_BM_SELL_MAIN 				294
#define DIALOG_BUY_CLOTHES_MAIN 			295
#define DIALOG_BUY_CLOTHES_CONFIRM 			296
#define DIALOG_DM_DRUGS_SELECT_DELIVERY 	297
#define DIALOG_BUY_MAIN 					298
#define DIALOG_AM_BUSINESS_WARE_EDIT_AMOUNT 299
#define DIALOG_AM_BUSINESS_WARE_EDIT_MIN_PRICE 	300
#define DIALOG_AM_BUSINESS_WARE_EDIT_MAX_PRICE 	301
#define DIALOG_AM_BM_DEALER_DRUG_SPAWNS 	302
#define DIALOG_AM_BM_DEALER_DRUG_SPAWN_EDIT 303
#define DIALOG_AM_BM_DEALER_GUN_SPAWNS 		304
#define DIALOG_AM_BM_DEALER_GUN_SPAWN_EDIT 	305
#define DIALOG_MDC_INPUT 					306
#define DIALOG_BM_WORKER_EDIT_SALARY 		307
#define DIALOG_DM_VEHICLES_BUY_ALL			308
#define DIALOG_GM_MAIN 						309
#define DIALOG_GM_SELL_MAIN 				310
#define DIALOG_PAY_FINE 					311
#define DIALOG_PAY_FINE_TYPE 				312
#define DIALOG_WEAPON_TRUNK 				316
#define DIALOG_FM_USER_PRIVILEGES 			317
#define DIALOG_AM_OTHER_POLICE_WEAPONS 		318
#define DIALOG_AM_OTHER_POLICE_SKINS 		319
#define DIALOG_AM_OTHER_POLICE_SPECIAL 		320
#define DIALOG_GPS 							321
#define DIALOG_VEHICLE_SCRAP 				322
#define DIALOG_BUY_WEAPONS_MAIN 			323
#define DIALOG_AM_BM_VEHICLE_EDIT_MODEL 	324
#define DIALOG_VEHICLE_AUDIO_MAIN 			325
#define DIALOG_VEHICLE_AUDIO_STATIONS 		326
#define DIALOG_VEHICLE_AUDIO_INPUT 			327
#define DIALOG_VEHICLE_AUDIO_VOLUME 		328
#define DIALOG_AM_OTHER_MAX_CHARACTERS 		329
#define DIALOG_BM_ENTER_PRICE_EDIT 			330
//#define dialoglast #define lastdialog #define last dialog
// ==============================================================================
// Darbai
#define JOB_MECHANIC					1
#define JOB_TRUCKER 					2
#define JOB_FARMER 						3
#define SIDE_JOB_THIEF 					1
// XP
#define DEFAULT_JOB_TRUCKER_XP_TO_LVL2 	16
#define DEFAULT_JOB_TRUCKER_XP_TO_LVL3 	16
#define DEFAULT_JOB_TRUCKER_XP_TO_LVL4 	16
// koordinates
#define DEFAULT_MECHANIC_REPAIR_SPOT 	2160.17, -1916.58, 13.53
#define DEFAULT_MECHANIC_REPAINT_SPOT 	2160.17, -1916.58, 13.53
#define DEFAULT_POLICE_WEAPON_BUY_SPOT	277.8176, 2023.3016, 17.6406
#define DEFAULT_POLICE_SKINS_BUY_SPOT	277.9161,1956.1644,17.6406
#define DEFAULT_POLICE_SPECIAL_BUY_SPOT	278.6557,1991.2023,17.6406
#define DEFAULT_POLICE_STORE			2247.2883,-47.7723,26.5035
#define DEFAULT_GUN_ORDER_SPOT 			2827.68, -1170.57, 25.24 // jei nera random prideta
#define DEFAULT_DRUGS_ORDER_SPOT 		-2107.24, -195.46, 35.32 // jei nera random
#define MECHANIC_REPAINT_ZONE_RADIUS	30.0
#define MECHANIC_REPAIR_ZONE_RADIUS		30.0
// Kainos
// ==============================================================================
#define DEFAULT_REPAINT_PRICE 			75
#define DEFAULT_REPAIR_PRICE 			75
#define MECHANICS_SHADOW_PRICE 			300
#define MECHANICS_MEGA_PRICE 			300
#define MECHANICS_RIMSHINE_PRICE 		300
#define MECHANICS_WIRES_PRICE 			300
#define MECHANICS_CLASSIC_PRICE 		300
#define MECHANICS_TWIST_PRICE 			300
#define MECHANICS_CUTTER_PRICE 			300
#define MECHANICS_SWITCH_PRICE 			300
#define MECHANICS_GROVE_PRICE 			300
#define MECHANICS_IMPORT_PRICE 			300
#define MECHANICS_DOLLAR_PRICE 			300
#define MECHANICS_TRANCE_PRICE 			300
#define MECHANICS_ATOMIC_PRICE 			300
#define MECHANICS_AHAB_PRICE 			300
#define MECHANICS_VIRTUAL_PRICE 		300
#define MECHANICS_ACCESS_PRICE 			300
#define MECHANICS_OFFROAD_PRICE 		300
#define MECHANICS_HIDRAULICS_PRICE 		300
#define MECHANICS_CHANGE_ENGINE_PRICE 	1500
#define MECHANICS_CHANGE_BATTERY_PRICE 	500
#define MECHANICS_REPAIR_ENGINE_PRICE 	10 // per %
#define MECHANICS_REPAIR_BATTERY_PRICE 	5 // per %
#define HOUSE_UPDATE_CLOTHES_PRICE 		2000
#define HOUSE_UPDATE_SAFE_PRICE 		5000
#define HOUSE_UPDATE_EAT_PRICE 			3000
// ==============================================================================
// Defines
#define CONNECTION_STATE_NOT_CONNECTED 	0
#define CONNECTION_STATE_CONNECTED 		1
#define CONNECTION_STATE_LOGGED 		2
// Daiktai
#define ITEM_PHONE						50
#define ITEM_CIGARETTE 					51
#define ITEM_LIGHTER 					52
#define ITEM_RADIO 						53
#define ITEM_COCAINE 					54
#define ITEM_HEROINE					55
#define ITEM_MARIJUANA 					56
#define ITEM_MDMA 						57
#define ITEM_CRACK 						58
#define ITEM_METHAMPHETAMINE 			59
#define ITEM_GUM 						60
#define ITEM_SHELLS 					61
#define ITEM_WOOL 						62
#define ITEM_SYRINGE 					63
#define ITEM_DICE  						64
#define ITEM_SPRUNK						65
#define ITEM_WINE						67
#define ITEM_BEER 						68
#define ITEM_MASK 						69
#define ITEM_CAR_AUDIO 					70
#define ITEM_HOUSE_AUDIO 				71
#define ITEM_ROD 						72
#define ITEM_BAIT 						73
#define ITEM_XANAX 						74
#define ITEM_FUEL 						75
#define ITEM_TOOLBOX 					76
// Remejai
#define DONATOR_NONE 					0
#define DONATOR_BRONZE	 				1
#define DONATOR_SILVER 					2
#define DONATOR_GOLD					3
// Invalids
#define INVALID_FURNITURE 				-1
#undef INVALID_OBJECT_ID
#define INVALID_OBJECT_ID 				-1
#define INVALID_HOUSE_ID				-1
#define INVALID_BUSINESS_ID				-1
#define INVALID_GARAGE_ID 	 			-1
// Pickup tipas
#define PICKUP_TYPE_NONE 				0
#define PICKUP_TYPE_SALON 				1
#define PICKUP_TYPE_HOUSE				2
#define PICKUP_TYPE_BUSINESS			3
#define PICKUP_TYPE_JOB					4
#define PICKUP_TYPE_BANK 				5
// Verslo tipas
#define BUSINESS_TYPE_NONE 				0
#define BUSINESS_TYPE_FUEL 				1
#define BUSINESS_TYPE_BAR 				2
#define BUSINESS_TYPE_SHOP 				3
#define BUSINESS_TYPE_CLOTHES 			4
#define BUSINESS_TYPE_WEAPONS 			5
#define BUSINESS_TYPE_SPORT 			6
// Policijos atsargu tipas
#define VEHICLE_CARGO_POLICE_WEAPONS	1
#define VEHICLE_CARGO_POLICE_SKINS		2
#define VEHICLE_CARGO_POLICE_SPECIAL	3
// Narkotai
#define MAX_DRUG_TYPES 					7
#define DRUG_COCAINE 					0
#define DRUG_HEROINE 					1
#define DRUG_MARIJUANA 					2
#define DRUG_MDMA 						3
#define DRUG_CRACK 						4
#define DRUG_METHAMPHETAMINE 			5
#define DRUG_XANAX 						6
// Offers
#define OFFER_TYPE_VEHICLE_BUY 			1
#define OFFER_TYPE_FRISK 				2
#define OFFER_TYPE_POLICE_FINE 			3
#define OFFER_TYPE_SUP 					4
// Darbo tipas
#define JOB_CARGO_TYPE_LEGAL 			1
#define JOB_CARGO_TYPE_ILLEGAL 			2
// Darbo veiksmai
#define JOB_ACTION_LOAD_CARGO 			1
#define JOB_ACTION_UNLOAD_CARGO			2
#define JOB_ACTION_CARGO_CRATES_TAKE	3
#define JOB_ACTION_CARGO_CRATES_PUT		4
#define JOB_ACTION_TAKE_COMBAIN 		5
#define JOB_ACTION_COLLECT_COMBAIN		6
#define JOB_ACTION_TAKE_BAG				7
#define JOB_ACTION_PUT_BAG 				8
#define JOB_ACTION_TAKE_REPAINT			9
#define JOB_ACTION_REPAINT_VEHICLE		10
#define JOB_ACTION_TAKE_REPAIR			11
#define JOB_ACTION_PUT_PARTS_VEHICLE	12
#define JOB_ACTION_REPAIR_VEHICLE		13
#define JOB_ACTION_TAKE_WHEELS			14
#define JOB_ACTION_PUT_WHEELS_VEHICLE 	15
#define JOB_ACTION_TUNE_VEHICLE			16
#define JOB_ACTION_CARGO_LEAVE_CAR 		17
#define JOB_ACTION_TAKE_BATTERY 		18
#define JOB_ACTION_TAKE_BATTERY_REPAIR	19
#define JOB_ACTION_TAKE_ENGINE 			20
#define JOB_ACTION_TAKE_ENGINE_REPAIR	21
#define JOB_ACTION_PUT_ENGINE 			22
#define JOB_ACTION_PUT_ENGINE_REPAIR	23
#define JOB_ACTION_PUT_BATTERY 			24
#define JOB_ACTION_PUT_BATTERY_REPAIR	25
#define JOB_ACTION_ENGINE_REPAIR 		26
#define JOB_ACTION_BATTERY_REPAIR 		27
#define JOB_ACTION_ENGINE_CHANGE 		28
#define JOB_ACTION_BATTERY_CHANGE 		29
// Zaidejo kameros statusas
#define PLAYER_VIEW_STATUS_NONE 				0
#define PLAYER_VIEW_STATUS_TRAILER_SHIP 		1
#define PLAYER_VIEW_STATUS_TRAILER_VEHICLE		2
#define PLAYER_VIEW_STATUS_TRAILER_PLANE 		3
#define PLAYER_VIEW_STATUS_TRAILER_TRAIN 		4
#define PLAYER_VIEW_STATUS_CCTV 				5
#define PLAYER_VIEW_STATUS_FURNITURE			6


#define PLAYER_STATUS_DEFAULT			0
#define PLAYER_STATUS_ALMOST_DEATH		1
#define PLAYER_STATUS_DEATH 			2
#define DEFAULT_DEATH_TIME_SECONDS		600

#define SCREEN_TYPE_NONE 				0
#define SCREEN_TYPE_VEHICLE_SALON		1

#define FACTION_TYPE_NONE 				0
#define FACTION_TYPE_POLICE				1
#define FACTION_TYPE_FIRE				2
#define FACTION_TYPE_GOVERNMENT			3
#define FACTION_TYPE_ILLEGAL 			4
#define FACTION_TYPE_LEGAL 				5
#define FACTION_TYPE_SAN_NEWS			6

#define EDITING_TYPE_DYNAMIC_FURNITURE	1
#define EDITING_TYPE_DYNAMIC_ATM 		2
#define EDITING_TYPE_DYNAMIC_PAYPHONE 	3

#define WHEELSFRONT_LEFT	0
#define WHEELSFRONT_RIGHT	1
#define WHEELSMID_LEFT		2
#define WHEELSMID_RIGHT		3
#define WHEELSREAR_LEFT		4
#define WHEELSREAR_RIGHT	5

#define WHEELS_SELECT_Rimshine 	 		1
#define WHEELS_SELECT_Wires 			2
#define WHEELS_SELECT_Classic 			3
#define WHEELS_SELECT_Twist 			4
#define WHEELS_SELECT_Cutter 			5
#define WHEELS_SELECT_Switch 			6
#define WHEELS_SELECT_Grove 			7
#define WHEELS_SELECT_Import 			8
#define WHEELS_SELECT_Dollar 			9
#define WHEELS_SELECT_Trance 			10
#define WHEELS_SELECT_Atomic 			11
#define WHEELS_SELECT_Ahab 				12
#define WHEELS_SELECT_Virtual 			13
#define WHEELS_SELECT_Access 			14
#define WHEELS_SELECT_Offroad 			15
#define WHEELS_SELECT_Hidraulics 		16
#define WHEELS_SELECT_Mega 	 			17

#define PHONE_PAGE_MAIN 				1
#define PHONE_PAGE_DIAL 				2
#define PHONE_PAGE_CALLING 				3
#define PHONE_PAGE_CALL 				4
#define INVENTORY_PAGE_MAIN 			1
#define INVENTORY_PAGE_GUNS 			2
#define INVENTORY_PAGE_DRUGS 			3
#define INVENTORY_TYPE_PLAYER 			1
#define INVENTORY_TYPE_VEHICLE 			2
#define INVENTORY_TYPE_HOUSE 			3
#define INVENTORY_TYPE_BUSINESS			4
#define INVENTORY_TYPE_DEALER_HOUSE 	5
#define ESC_TYPE_NONE 					0
#define ESC_TYPE_VLIST					1
#define ESC_TYPE_VSHOP					2
#define ESC_TYPE_FURNITURE				3
#define ESC_TYPE_MECHTUNE				4
#define ESC_TYPE_LOGIN					5
#define ESC_TYPE_ATM					6
#define ESC_TYPE_DMV 					7
#define ESC_TYPE_PHONE 					8
#define ESC_TYPE_MDC 					9
#define ESC_TYPE_PAYPHONE 				10
#define ESC_TYPE_CHARSELECT 			11
#define ESC_TYPE_CHARCREATE 			12

#define CHECKPOINT_TYPE_VEHICLE 			1
#define CHECKPOINT_TYPE_JOB 				2
#define CHECKPOINT_TYPE_CARGO_LOAD 			3
#define CHECKPOINT_TYPE_CARGO_UNLOAD 		4
#define CHECKPOINT_TYPE_CARGO_CRATES_TAKE 	5
#define CHECKPOINT_TYPE_CARGO_CRATES_PUT 	6
#define CHECKPOINT_TYPE_FARMER_SPOT			7
#define CHECKPOINT_TYPE_FARMER_TAKE_BAG		8
#define CHECKPOINT_TYPE_FARMER_PUT_BAG		9
#define CHECKPOINT_TYPE_TAKE_REPAINT		10
#define CHECKPOINT_TYPE_REPAINT_VEHICLE 	11
#define CHECKPOINT_TYPE_TAKE_REPAIR 		12
#define CHECKPOINT_TYPE_PUT_PARTS_VEHICLE	13
#define CHECKPOINT_TYPE_TAKE_WHEELS			14
#define CHECKPOINT_TYPE_PUT_WHEELS 			15
#define CHECKPOINT_TYPE_PD_WEAPONS_AMMO		16
#define CHECKPOINT_TYPE_PD_SKINS			17
#define CHECKPOINT_TYPE_PD_SPECIAL 			18
#define CHECKPOINT_TYPE_PUT_PD_WEAPONS		19
#define CHECKPOINT_TYPE_DMV 				20
#define CHECKPOINT_TYPE_DEALER_HOUSE 		21
#define CHECKPOINT_TYPE_DEALER_HOUSE_BUY 	22
#define CHECKPOINT_TYPE_TAKE_BATTERY		23
#define CHECKPOINT_TYPE_TAKE_ENGINE			24
#define CHECKPOINT_TYPE_PUT_ENGINE_VEHICLE 	25
#define CHECKPOINT_TYPE_PUT_BATTERY_VEHICLE 26
#define CHECKPOINT_TYPE_TAKE_GUN_ORDER 		27
#define CHECKPOINT_TYPE_TAKE_DRUG_ORDER 	28
#define CHECKPOINT_TYPE_PD_REQUESTEDBK		29

#define CHECK_TYPE_INSIDE_AND_OUTSIDE 	1
#define CHECK_TYPE_OUTSIDE 				2
#define CHECK_TYPE_INSIDE 				31

#define ENGINE_UPGRADE					0
#define BRAKES_UPGRADE					1


#define IB_NOT_ENOUGH_MONEY				"NETURITE","PAKANKAMAI PINIGU ($%d)"
#define IB_NO_JOB 						"NETURITE","DARBO"
#define IB_NOT_DEALER 					"NETURITE","TIEKEJO STATUSO"
#define IB_NOT_IN_HOUSE_OR_BUSINESS 	"NESATE","VERSLE ARBA NAME"
#define IB_NOT_IN_VEHICLE				"NESATE","TR. PRIEMONEJE"
#define IB_WRONG_PLAYER					"NEGALIMAS","ZAIDEJAS"
#define IB_WRONG_VEHICLE				"NEGALIMA","TR. PRIEMONE"
#define IB_NOT_ON_JOB_DUTY				"NESATE","ON DUTY"
#define IB_NOT_IN_MECHANICS				"NESATE","MECHANIKU GARAZE"
#define IB_NOT_CLOSE_VEHICLE			"NESATE","SALIA TR. PRIEMONES"
#define IB_NOT_CLOSE_PLAYER				"NESATE","SALIA ZAIDEJO"
#define IB_GET_OUT_VEHICLE				"ISLIPKITE","IS TR. PRIEMONES"
#define IB_VEHICLE_LOCKED				"~w~TR.PRIEMONE","~r~UZRAKINTA"
#define IB_OPEN_TRUNK					"ATIDARYKITE","BAGAZINE"
#define IB_NOT_ADMIN					"NESATE","ADMINISTRATORIUS"
#define IB_NOT_HELPER					"NESATE","PAGALBININKAS"
#define IB_NOT_DONATOR					"NESATE","REMEJAS"
#define IB_NOT_IN_FACTION				"NESATE","FRAKCIJOJE"
#define IB_NO_HOUSE_KEYS				"NETURITE","NAMO RAKTU"
#define IB_NO_BUSINESS_KEYS				"NETURITE","VERSLO RAKTU"
#define IB_NO_PRIVILEGE					"NETURITE","TEISES"
#define IB_PHONE_OFF 					"ISJUNGTAS","TELEFONAS"
#define IB_NOT_CLOSE_DOORS 				"NESATE","SALIA DURU"
// ==============================================================================
// MySQL prisijungimai
// #define USING_VIRTUAL_PRIVATE_SERVER
// #define VPS_TEST

#if defined USING_VIRTUAL_PRIVATE_SERVER
	#if defined VPS_TEST
		//#define DELETE_AFTER_INIT
		// #define MYSQL_HOSTNAME "localhost"
		// #define MYSQL_USERNAME "server_test"
		// #define MYSQL_PASSWORD "OKWAoZS8cftiw4d1"
		// #define MYSQL_DATABASE "test_server"

		// #define MYSQL_LOG_HOSTNAME "localhost"
		// #define MYSQL_LOG_USERNAME "server_test"
		// #define MYSQL_LOG_PASSWORD "OKWAoZS8cftiw4d1"
		// #define MYSQL_LOG_DATABASE "test_logs"
	#else 
		#define MYSQL_HOSTNAME "localhost"
		#define MYSQL_USERNAME "server_user"
		#define MYSQL_PASSWORD "OKWAoZS8cftiw4d1"
		#define MYSQL_DATABASE "southland"

		#define MYSQL_LOG_HOSTNAME "localhost"
		#define MYSQL_LOG_USERNAME "server_user"
		#define MYSQL_LOG_PASSWORD "OKWAoZS8cftiw4d1"
		#define MYSQL_LOG_DATABASE "southland_logs"
	#endif
#else
	#define MYSQL_HOSTNAME "localhost"
	#define MYSQL_USERNAME "root"
	#define MYSQL_PASSWORD ""
	#define MYSQL_DATABASE "southland"

	#define MYSQL_LOG_HOSTNAME "localhost"
	#define MYSQL_LOG_USERNAME "root"
	#define MYSQL_LOG_PASSWORD ""
	#define MYSQL_LOG_DATABASE "southland_logs"
#endif


// ==============================================================================
// Libraries
#include "libraries/samp.pwn"
#include "libraries/macros.pwn"
#include "libraries/als.pwn"

#define AC_ENABLE_WEAPONS			true
#define AC_ENABLE_MONEY				true
#define AC_ENABLE_AIRBREAK			true
#define AC_ENABLE_HEALTH			true
#define AC_ENABLE_SPEED				true
#define AC_ENABLE_INV				true
#define AC_ENABLE_JETPACK			false
#define AC_ENABLE_DIALOGS			false
#define AC_ENABLE_FLOOD				false
#define AC_ENABLE_NPC				false
#define AC_ENABLE_FAKEKILL			true
#define AC_ENABLE_RAPIDFIRE			true
#define AC_ENABLE_WARP_INTO_CAR		true
#define AC_ENABLE_AIMBOT			true
#define AC_ENABLE_TROLLBOSS			true
#define AC_ENABLE_ANTIMOD			true
#define AC_ENABLE_PARACHUTE_DAMAGE	true
#define AC_ENABLE_GOGGLES_FIX		true
#define AC_ENABLE_SEAT_CHANGER		true
#define AC_ENABLE_CAR_CHANGER		true
#define AC_ENABLE_PICKUP_TELEPORT	true
#define AC_ENABLE_TELEPORTER		false
#define AC_ENABLE_VW_INT			false

// ==============================================================================
// Projekto pavadinimas ir pns
#define PROJECT_NAME								"southland"
#define PROJECT_DOMAIN								"lt"
#define DEFAULT_IBAN_PREFIX 						SA
#define DEFAULT_FACTION_VEHICLE_NUMBER_PREFIX 		FAC
#define DEFAULT_JOB_VEHICLE_NUMBER_PREFIX			JOB
#define DEFAULT_WEAPON_UNIQUE_ID_PREFIX 			5SA00

// Forwards
// ==============================================================================
forward OnPlayerJobTimeExpired(playerid, jobid, actionid, type);

forward OnPlayerUseInventoryItem(playerid, slotid);
forward OnPlayerDropInventoryItem(playerid, type, itter, slotid);
forward OnPlayerPutInventoryItem(playerid, slotid, to_type, to_itter);
forward OnPlayerTakeInventoryItem(playerid, from_type, from_itter, from_slot);
forward OnPlayerGiveInventoryItem(playerid, slotid);
// ==============================================================================
// Enumerators sukurimas
enum (<<=1)
{
	CMD_TYPE_ADMIN = 1,
	CMD_TYPE_MUTABLE,
	CMD_TYPE_NOT_LOGGABLE,
	CMD_TYPE_ANIMATION,
	CMD_TYPE_ALLOW_NEWBIE
};

enum E_SHELL_DATA
{
	shellCount,
	Text3D:shellLabel,
	shellObject,
	shellTime,
	shellUniqueId,
	Float:shellPos[3]
};
new Shells[MAX_SHELLS][E_SHELL_DATA];

enum E_ATM_DATA
{
	atmId,
	atmObject,
	Float:atmX,
	Float:atmY,
	Float:atmZ,
	Float:atmRX,
	Float:atmRY,
	Float:atmRZ,
	atmVW,
	atmInt,
	atmCanDeposit,
	atmWithdrawLimit
};
new ATMs[MAX_ATMS][E_ATM_DATA];

enum E_ENTER_EXIT_DATA
{
	eeName[32],
	eeId,
	Float:eeEnterX,
	Float:eeEnterY,
	Float:eeEnterZ,
	eeEnterVW,
	eeEnterInt,
	eeEnterPickupType,
	eeEnterPickup,
	Float:eeExitX,
	Float:eeExitY,
	Float:eeExitZ,
	eeExitVW,
	eeExitInt,
	Text3D:eeEnterLabel,
	Text3D:eeExitLabel
};
new EntersExits[MAX_ENTERS_EXITS][E_ENTER_EXIT_DATA];

enum E_ATTACHED_CLOTHES_DATA
{
	attachedBone,
	attachedInventorySlot,
	Float:attachedOffsetX,
	Float:attachedOffsetY,
	Float:attachedOffsetZ,
	Float:attachedRotX,
	Float:attachedRotY,
	Float:attachedRotZ,
	Float:attachedScaleX,
	Float:attachedScaleY,
	Float:attachedScaleZ,
};
new ClothesInventory[MAX_PLAYERS][MAX_CLOTHES_INVENTORY_SLOTS];
new AttachedClothes[MAX_PLAYERS][9][E_ATTACHED_CLOTHES_DATA];

enum E_PLAYER_EXTRA_DATA
{
	peChewingGum,
	peUsingSunGlasses,
	peUsingEyeDrops,
	peCuffed,
	peDeath,
	peTazer,
	peTazed,
	peFillTimer,
	peFilling,
	peFillingAt,
	peHideAdmin,
	peMask,
	peMuted,
	peSpeedLimit,
	peBelt,
	//peDutyObject,
	Text3D:peMaskLabel,
	Text3D:peDeathLabel,
	Text3D:peDutyLabel,
	Text3D:pePoliceBadgeText,
	peDrag,
	peAdCooldown,
	peBlind,
	peSpamTime,
	peJobDutyCooldown,
	peVest,
	peDMVSpeed,
	peBeforeTazerWeaponId,
	peBeforeTazerWeaponAmmo,
	peAcceptedBk,
	peRequestedBk,
	peIsFishing
};
new PlayerExtra[MAX_PLAYERS][E_PLAYER_EXTRA_DATA];

enum E_PLAYER_DATA
{
	pId,
	pUserId,
	pPassword[130],
	pSalt[30],
	pGender,
	pFishes,
	pFishedLimit,
	pXP,
	pLevel,
	pName[MAX_PLAYER_NAME+1],
	pUcpUser,
	pBirthDate,
	pForumName[24],
	pTaxiLic,
	pOrigin[30],
	pPhoneNumber,
	pHoursPlayed,
	pPayDayCollected,
	pConnection,
	pDonatorTime,
	pPoliceBadge,
	pRadioChannel,
	bool:pIsApproved,
	pCurrentStatus,
	pWrongPassword,
	pBank,
	pSkin,
	pAdminDuty,
	pBankCard,
	pWarns,
	pPayCheck,
	pFactionPermissions[3],
	pDealer,
	pCarLic,
	pMotoLic,
	pStolenCars,
	pBoatLic,
	pFlyLic,
	pPayDayTime,
	pAskQuestionTime,
	pJailTime,
	pSavings,
	pJailType,
	pInterior,
	pVW,
	pSpawnType,
	pSpawnId,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pDeathX,
	Float:pDeathY,
	Float:pDeathZ,
	Float:pMarkX,
	Float:pMarkY,
	Float:pMarkZ,
	pViewStatus,
	pAfterLogin,
	
	pDonator,
	pNameChanges,
	pNumberChanges,
	pPlateChanges,

	pGraffitiAllowed,

	pJob,
	pJobContract,
	pJobXP,
	pJobLevel,
	pJobDuty,
	pJobCurrentType,
	pJobCurrentAction,
	pJobVehicle,
	pJobDestination,
	pJobActionTime,
	pJobActionIndex,
	pJobTimer,
	pSideJob,
	pFaction,
	pFactionLeader,
	pCarsSpawned,
	pAttachObject,
	pHaveCars,
	pTaxiLicense,
	pIp[MAX_PLAYER_IP+1],
	pDiscordVerified,
	pTutorialDone
};
new PlayerInfo[MAX_PLAYERS][E_PLAYER_DATA];

enum E_PLAYER_DRUGS_DATA
{
	drugOnDuty,
	drugUsedLastTime,
	drugLastDoze,
	drugAddHP,
	drugUsedTimes,
	drugUnused,
	drugLevel
};
new PlayerDrugs[MAX_PLAYERS][MAX_DRUG_TYPES][E_PLAYER_DRUGS_DATA];


enum E_PHONE_DATA
{
	phoneTalkingTo,
	phoneRinging,
	phoneRingingTime,
	phoneCallOwner,
	phoneNumberHidden,
	phoneEstimated,
	phoneDisabled,
	phoneMuted,
	phoneRingType
};
new PhoneInfo[MAX_PLAYERS][E_PHONE_DATA];

enum E_PAYPHONE_DATA
{
	payPhoneId,
	Text3D:payPhoneLabel,
	Float:payPhoneX,
	Float:payPhoneY,
	Float:payPhoneZ,
	Float:payPhoneRX,
	Float:payPhoneRY,
	Float:payPhoneRZ,
	payPhoneObject
};
new PayPhoneInfo[MAX_PAYPHONES][E_PAYPHONE_DATA];

enum E_PARKING_DATA
{
	parkingId,
	parkingName[24],
	parkingInterior,
	parkingVW,
	parkingExterior,
	parkingOutVW,
	Float:parkingEnterX,
	Float:parkingEnterY,
	Float:parkingEnterZ,
	Float:parkingExitX,
	Float:parkingExitY,
	Float:parkingExitZ,
	Text3D:parkingLabel
};
new ParkingInfo[MAX_PARKINGS][E_PARKING_DATA];

enum E_CONTACTS_DATA
{
	contactNumber,
	contactName[24]
};
new PlayerContacts[MAX_PLAYERS][MAX_PLAYER_CONTACTS][E_CONTACTS_DATA];

enum E_GROUP_DATA
{
	groupId,
	groupName[30]
};
new GroupsInfo[MAX_ADMIN_GROUPS][E_GROUP_DATA];
new PlayerGroups[MAX_PLAYERS][MAX_PLAYER_GROUPS];

enum E_FACTION_DATA
{
	fId,
	fName[48],
	fHasChat,
	fChatEnabled,
	fType,
	fBudget,
	fWares[3],
	Float:fSpawnX,
	Float:fSpawnY,
	Float:fSpawnZ
};
new FactionInfo[MAX_FACTIONS][E_FACTION_DATA],
	FactionRankSalaries[MAX_FACTIONS][MAX_FACTION_RANKS],
	FactionRankIds[MAX_FACTIONS][MAX_FACTION_RANKS],
	FactionRankNames[MAX_FACTIONS][MAX_FACTION_RANKS][84];

enum E_INVENTORY_DATA
{
	invId,
	invAmount,
	invExtraId
};
new InventoryInfo[MAX_PLAYERS][MAX_INVENTORY_SLOTS][E_INVENTORY_DATA];
new VehicleInventory[MAX_VEHICLES][MAX_VEHICLE_INVENTORY_SLOTS][E_INVENTORY_DATA];

enum E_DROPPED_ITEMS_DATA
{
	droppedItemId,
	droppedItemAmount,
	droppedItemExtraId,
	droppedItemPlayerId,
	droppedItemObject,
	droppedItemTime,
	droppedItemMysqlId,
	Float:droppedItemX,
	Float:droppedItemY,
	Float:droppedItemZ
};
new DroppedItems[MAX_DROPPED_ITEMS][E_DROPPED_ITEMS_DATA];

enum E_MAP_ICON_DATA
{
	mapIconId,
	mapIconName[24],
	Float:mapIconX,
	Float:mapIconY,
	Float:mapIconZ,
	mapIconColor,
	mapIconType,
	mapIconVW,
	mapIconInterior,
	Float:mapIconStreamDistance,
	mapIconIcon
};
new MapIconInfo[MAX_MAP_ICONS][E_MAP_ICON_DATA];

enum E_CHAT_OFF_DATA
{
	AdminChat,
	ACChat,
	FactionChat,
	BroadcastChat
};
new ChatsOff[MAX_PLAYERS][E_CHAT_OFF_DATA];

enum E_GARAGE_DATA
{
	gId,
	gOwner,
	gPrice,
	gOutVW,
	gExterior,
	gVW,
	gInterior,
	gLocked,
	gSale,
	Text3D:gLabel,
	Float:gEnterX,
	Float:gEnterY,
	Float:gEnterZ,
	Float:gCarEnterX,
	Float:gCarEnterY,
	Float:gCarEnterZ,
	Float:gCarEnterA,
	Float:gExitX,
	Float:gExitY,
	Float:gExitZ,
	Float:gCarExitX,
	Float:gCarExitY,
	Float:gCarExitZ,
	Float:gCarExitA
};
new GarageInfo[MAX_GARAGES][E_GARAGE_DATA];

enum E_HOUSE_DATA
{
	hId,
	hOwner,
	hInterior,
	hExterior,
	hVW,
	hOutVW,
	hPickup,
	hSafe,
	Text3D:hLabel,
	hUpdateEat,
	hUpdateSafe,
	hUpdateClothes,
	hPrice,
	hLocked,
	hSale,
	hRent,
	hRentLimit,
	hRentPrice,
	Float:hEnterX,
	Float:hEnterY,
	Float:hEnterZ,
	Float:hExitX,
	Float:hExitY,
	Float:hExitZ,
	// Extra enters-exits
	hExtraExterior[MAX_HOUSE_EXTRA_ENTERS],
	hExtraInterior[MAX_HOUSE_EXTRA_ENTERS],
	hExtraVW[MAX_HOUSE_EXTRA_ENTERS],
	hExtraOutVW[MAX_HOUSE_EXTRA_ENTERS],
	Float:hExtraEnterX[MAX_HOUSE_EXTRA_ENTERS],
	Float:hExtraEnterY[MAX_HOUSE_EXTRA_ENTERS],
	Float:hExtraEnterZ[MAX_HOUSE_EXTRA_ENTERS],
	Float:hExtraExitX[MAX_HOUSE_EXTRA_ENTERS],
	Float:hExtraExitY[MAX_HOUSE_EXTRA_ENTERS],
	Float:hExtraExitZ[MAX_HOUSE_EXTRA_ENTERS]
};
new HouseInfo[MAX_HOUSES][E_HOUSE_DATA];
new HouseInventory[MAX_HOUSES][MAX_HOUSE_INVENTORY_SLOTS][E_INVENTORY_DATA];

enum E_DEALER_HOUSE_DATA
{
	dealerHouseId,
	dealerHouseOwner,
	dealerHouseType,
	Float:dealerHouseEnterX,
	Float:dealerHouseEnterY,
	Float:dealerHouseEnterZ,
	Float:dealerHouseExitX,
	Float:dealerHouseExitY,
	Float:dealerHouseExitZ,
	dealerHouseInterior,
	dealerHouseVW,
	dealerHouseExterior,
	dealerHouseOutVW,
	dealerHouseLocked,
	dealerHousePrice
};
new DealerHouseInfo[MAX_DEALER_HOUSES][E_DEALER_HOUSE_DATA];
new DealerHouseInventory[MAX_DEALER_HOUSES][MAX_DEALER_HOUSE_INVENTORY_SLOTS][E_INVENTORY_DATA];

enum E_AVAILABLE_WARES_DATA
{
	awItem,
	awAmount,
	awMinPrice,
	awMaxPrice
};
new AvailableWares[MAX_AVAILABLE_WARES][E_AVAILABLE_WARES_DATA];

enum E_BUSINESS_DATA
{
	bId,
	bOwner,
	bLocked,
	bInterior,
	bName[24],
	bSlogan[128],
	bVW,
	bUpdateEat,
	bUpdateClothes,
	bExterior,
	bOutVW,
	bType,
	bBudget,
	bSafe,
	bPickup,
	Text3D:bLabel,
	bPrice,
	bEnterPrice,
	bLevel,
	bFuelPrice,
	bFuel,
	bSale,
	Float:bEnterX,
	Float:bEnterY,
	Float:bEnterZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	Float:bWaresX,
	Float:bWaresY,
	Float:bWaresZ,
	Float:bCratesX,
	Float:bCratesY,
	Float:bCratesZ,
	Float:bExtraX,
	Float:bExtraY,
	Float:bExtraZ,
	// Extra enters-exits
	bExtraExterior[MAX_BUSINESS_EXTRA_ENTERS],
	bExtraInterior[MAX_BUSINESS_EXTRA_ENTERS],
	bExtraVW[MAX_BUSINESS_EXTRA_ENTERS],
	bExtraOutVW[MAX_BUSINESS_EXTRA_ENTERS],
	Float:bExtraEnterX[MAX_BUSINESS_EXTRA_ENTERS],
	Float:bExtraEnterY[MAX_BUSINESS_EXTRA_ENTERS],
	Float:bExtraEnterZ[MAX_BUSINESS_EXTRA_ENTERS],
	Float:bExtraExitX[MAX_BUSINESS_EXTRA_ENTERS],
	Float:bExtraExitY[MAX_BUSINESS_EXTRA_ENTERS],
	Float:bExtraExitZ[MAX_BUSINESS_EXTRA_ENTERS]
};
enum E_BUSINESS_WARES_DATA
{
	bWareId,
	bWareAmount,
	bWarePrice
};
new BusinessInfo[MAX_BUSINESS][E_BUSINESS_DATA];
new BusinessInventory[MAX_BUSINESS][MAX_BUSINESS_INVENTORY_SLOTS][E_INVENTORY_DATA];
new BusinessWares[MAX_BUSINESS][MAX_BUSINESS_WARES][E_BUSINESS_WARES_DATA];

enum E_VEHICLE_DATA
{
	vId,
	vOwner,
	vNumbers[10],
	Float:vFuel,
	Float:vKM,
	vSpawnedBy,
	vJob,
	vFaction,
	vTicket,
	vRequiredLevel,
	vInt,
	vCargoType,
	vCargoId,
	vLock,
	vPrice,
	vExtraId,
	vDealer,
	vAddSiren,
	vRespawnTime,
	vLocked,
	vEngined,
	vInsurance,
	vObjects[4],
	vUpgrade[2],
	vUnitText[15],
	Text3D:vUnitLabel,
	Float:vBatteryStatus,
	Float:vEngineStatus,
	Float:vSyncX,
	Float:vSyncY,
	Float:vSyncZ,
	Float:vSyncA,
	Float:vLastMileageX,
	Float:vLastMileageY
};
new VehicleInfo[MAX_VEHICLES][E_VEHICLE_DATA];

enum E_FACTION_TRUNK_WEAPONS_DATA
{
	ftwWeaponId,
	ftwAmmo,
	ftwPermission[3],
	bool:ftwAllowedInVehicle
};
new VehicleWeaponsInventory[MAX_VEHICLES][MAX_VEHICLE_WEAPON_SLOTS][E_FACTION_TRUNK_WEAPONS_DATA];

enum E_HOUSE_FURNITURE_DATA
{
	hfId,
	hfModel,
	hfOwner,
	hfType,
	hfObject,
	hfPrice,
	hfVW,
	hfName[34],
	hfInterior,
	hfColor[MAX_TEXTURE_SLOTS],
	hfTexture[MAX_TEXTURE_SLOTS],
	Float:hfPos[3],
	Float:hfRot[3]
};
new hFurnitureInfo[MAX_HOUSE_FURNITURES][E_HOUSE_FURNITURE_DATA];

enum E_BUSINESS_FURNITURE_DATA
{
	bfId,
	bfModel,
	bfOwner,
	bfType,
	bfObject,
	bfPrice,
	bfVW,
	bfName[34],
	bfInterior,
	bfColor[MAX_TEXTURE_SLOTS],
	bfTexture[MAX_TEXTURE_SLOTS],
	Float:bfPos[3],
	Float:bfRot[3]
};
new bFurnitureInfo[MAX_BUSINESS_FURNITURES][E_BUSINESS_FURNITURE_DATA];

enum E_GARAGE_FURNITURE_DATA
{
	gfId,
	gfModel,
	gfOwner,
	gfType,
	gfObject,
	gfPrice,
	gfVW,
	gfName[34],
	gfInterior,
	gfColor[MAX_TEXTURE_SLOTS],
	gfTexture[MAX_TEXTURE_SLOTS],
	Float:gfPos[3],
	Float:gfRot[3]
};
new gFurnitureInfo[MAX_GARAGE_FURNITURES][E_GARAGE_FURNITURE_DATA];

enum E_SELL_VEHICLE_DATA
{
	sellvehicleId,
	sellvehicleModel,
	sellvehiclePrice,
	sellvehicleDonator,
	sellvehicleSalon
};
new SellVehicleData[MAX_SALON_MODELS][E_SELL_VEHICLE_DATA];

enum E_SALON_DATA
{
	salonId,
	salonName[256],
	Float:salonX,
	Float:salonY,
	Float:salonZ,
	salonInterior,
	salonVW,
	salonPickup,
	salonGarbage
};
new SalonData[MAX_SALONS][E_SALON_DATA];


enum E_PICKUP_DATA
{
	pickupType,
	pickupUniqueId
};
new PickupData[MAX_PICKUPS][E_PICKUP_DATA];

enum E_JOB_DATA
{
	jobId,
	jobName[32],
	Float:jobX,
	Float:jobY,
	Float:jobZ,
	jobPayDay,
	jobMaxPayout,
	jobBonusCash,
	jobContract,
	Text3D:jobLabel,
	jobPickup
};

enum E_FURNITURE_LIST_DATA
{
	furnitureListCategory,
	furnitureListName[34],
	furnitureListModel,
	furnitureListPrice
};

enum E_FURNITURE_TEXTURES_DATA
{
	textureModel,
	textureFile[32],
	textureName[32]
};

enum E_FURNITURE_COLORS_DATA
{
	colorName[32],
	colorCode
};

enum E_CLOTHES_LIST_DATA
{
	clothesListCategory,
	clothesListName[34],
	clothesListModel,
	clothesListPrice
};

enum E_CARGO_LIST_DATA
{
	cargoName[32],
	cargoLevel,
	cargoTime,
	cargoPrice,
	Float:cargoLoadX,
	Float:cargoLoadY,
	Float:cargoLoadZ,
	Float:cargoUnloadX,
	Float:cargoUnloadY,
	Float:cargoUnloadZ,
	Float:cargoCratesUnloadX,
	Float:cargoCratesUnloadY,
	Float:cargoCratesUnloadZ
};

enum E_FACTION_TRUNK_WEAPONS_LIST
{
	ftwListFactionType,
	ftwListWeaponId,
	ftwListWeaponAmmo,
	bool:ftwListAllowedInVehicle,
	ftwListPermission[3],
	ftwListModels[10]
};

enum E_PLAYER_DAMAGES_INFO
{
	pd_issuerid,
	Float:pd_amount,
	pd_weaponid,
	pd_bodypart,
	pd_time
};
new PlayerDamages[MAX_PLAYERS][30][E_PLAYER_DAMAGES_INFO];
// ==============================================================================
// Global kintamieji
new Iterator:House<MAX_HOUSES>,
	Iterator:Business<MAX_BUSINESS>,
	Iterator:HFurniture<MAX_HOUSE_FURNITURES>,
	Iterator:BFurniture<MAX_BUSINESS_FURNITURES>,
	Iterator:GFurniture<MAX_GARAGE_FURNITURES>,
	Iterator:Salon<MAX_SALONS>,
	Iterator:SellVehicle<MAX_SALON_MODELS>,
	Iterator:DroppedItem<MAX_DROPPED_ITEMS>,
	Iterator:Faction<MAX_FACTIONS>,
	Iterator:EnterExit<MAX_ENTERS_EXITS>,
	Iterator:ATM<MAX_ATMS>,
	Iterator:Garage<MAX_GARAGES>,
	Iterator:PayPhone<MAX_PAYPHONES>,
	Iterator:Parking<MAX_PARKINGS>,
	Iterator:AdminGroup<MAX_ADMIN_GROUPS>,
	Iterator:DealerHouse<MAX_DEALER_HOUSES>,
	Iterator:Shell<MAX_SHELLS>,
	Iterator:Roadblock<MAX_ROADBLOCKS>,
	Iterator:PlayerDamages[MAX_PLAYERS]<30>;
new
	#if defined BETA_TEST_MODE
		bool:CollectingReportBugData[MAX_PLAYERS],
		CollectedReportBugData[MAX_PLAYERS][MAX_BUG_REPORT_TEXT],
	#endif
	Roadblocks[MAX_ROADBLOCKS],
	tmpFurniturePage[MAX_PLAYERS],

	tmpAmenuCurPage[MAX_PLAYERS],
	tmpAmenuIter[MAX_PLAYERS],
	bool:tmpAmenuNextPage[MAX_PLAYERS],

	bool:tmpFurnitureNextPage[MAX_PLAYERS],
	Float:FurniturePreview_RX[MAX_PLAYERS],
	Float:FurniturePreview_RY[MAX_PLAYERS],
	Float:FurniturePreview_RZ[MAX_PLAYERS],
	tmpType_Salon[MAX_PLAYERS],
	tmpTexture_MarkStart_CP[MAX_PLAYERS],
	tmpArray[MAX_PLAYERS][150],
	tmpEditing_Component_DMV[MAX_PLAYERS],
	tmpPage_Object[MAX_PLAYERS],
	last_halfpayday_hour,
	tmpPhone_InventoryPage[MAX_PLAYERS],
	tmpPassword[MAX_PLAYERS][128],
	tmpESC[MAX_PLAYERS],
	tmpIter[MAX_PLAYERS],
	LastVoteYes,
	LastVoteNo,
	LastVote,
	LastVotePlayer[MAX_PLAYERS],
	tmpSelected[MAX_PLAYERS],
	tmpDubStart_Price[MAX_PLAYERS],
	RemoteHash[9],
	SpectateOn[MAX_PLAYERS],
	MuteListPM[MAX_PLAYERS][MAX_PLAYERS],
	//SellVehicleZone,
	BankPickup,
	Text3D:BankLabel,
	Text3D:AdLabel,
	stats_police_calls,
	Offer[MAX_PLAYERS][4],
	bool:OOCChanelEnabled = false,
	bool:DisabledPM[MAX_PLAYERS],
	bool:FurnitureMultiSelectionEnabled[MAX_PLAYERS char],
	bool:ShowingInfoBar[MAX_PLAYERS char],
	bool:ShowingJailTimer[MAX_PLAYERS char],
	bool:ShowingJobGUI[MAX_PLAYERS char],
	bool:TextdrawDisabled_JailTimer[MAX_PLAYERS char],
	bool:TextdrawDisabled_Speedo[MAX_PLAYERS char],
	bool:TextdrawDisabled_InfoBar[MAX_PLAYERS char],
	bool:TextdrawDisabled_Tips[MAX_PLAYERS char],
	bool:SeenATMCommand[MAX_PLAYERS char],
	bool:SeenFillCommand[MAX_PLAYERS char],
	bool:SeenPayPhoneCommand[MAX_PLAYERS char],
	Checkpoint[MAX_PLAYERS],
	CheckpointData[MAX_PLAYERS],
	MySQL:chandler,
	MySQL:log_chandler,
	gConnectedPlayers,
	clskinslist,
	pdskinslist,
	mdskinslist,
	GoodMobileAreas[18],
	BadMobileAreas[15],
	PlayerFreeze[MAX_PLAYERS],
	Float:LastShellShotVector[MAX_PLAYERS][3],
	OldVehicle[MAX_PLAYERS],
	LastShotTime[MAX_PLAYERS],
	LastShellItter[MAX_PLAYERS],
	LastSpamBarPressed[MAX_PLAYERS],
	Float:tlc_md[3],
	Float:tlc_pd[3],
	// NoEnterPrice
	PlayerNoEnterPriceBusiness[MAX_PLAYERS][MAX_BUSINESS],
	// Rent
	RentedBy[MAX_VEHICLES],
	RentedVeh[MAX_PLAYERS],
	RentTimeUnused[MAX_PLAYERS],
	// Broadcast global
	broadcast_Status,
	broadcast_Owner,
	broadcast_Timer,
	// Broadcast player	
	bool:player_Broadcast[MAX_PLAYERS],
	bool:player_InviteToBroadcast[MAX_PLAYERS],
	player_BroadcastRole[MAX_PLAYERS],
	player_BroadcastAnonimousStr[MAX_PLAYERS][3],
	bool:player_BroadcastAnonimous[MAX_PLAYERS],
	player_WaitCharTextdraw[MAX_PLAYERS],
	// Charlist
	player_charList_Page[MAX_PLAYERS],
	player_CharArray[MAX_PLAYERS][MAX_CHARACTERS][2],
	player_NewChars[MAX_PLAYERS],
	player_DataChars[MAX_PLAYERS],
	player_charList_Selected[MAX_PLAYERS],
	bool:player_charList_ConfirmShown[MAX_PLAYERS],
	bool:player_charList_GUIShown[MAX_PLAYERS],
	player_CharName[MAX_PLAYERS][MAX_PLAYER_NAME + 1],
	player_CharGender[MAX_PLAYERS],
	player_CharOrigin[MAX_PLAYERS],
	player_CharDate[MAX_PLAYERS],
	player_CharSkin[MAX_PLAYERS],
	// Char create
	player_AnswerInput[MAX_PLAYERS],
	player_CharAnswers[MAX_PLAYERS][3][256],
	// Admin char confirm
	player_NewCharDetails[MAX_PLAYERS], // char ID in `players_new`
	player_NewCharUserId[MAX_PLAYERS], // char UserId


	// Server hour
	serverHour,

	// DONT CHANGE
	bool:truebool = true,
	bool:falsebool = false

;

new 
	BroadcastRoles[][32] = {
		{" "},
		{"P"},
		{"K"}
};

new bool:DrugsCanBeMixed[MAX_DRUG_TYPES][MAX_DRUG_TYPES] = {
	// COCA HERA 	ZOLE 	MDMA 	CRACK  	METH
	{true,	false,	true,	false,	false,	false},	// DRUG_COCAINE
	{false,	false,	true,	false,	false,	false},	// DRUG_HEROINE
	{true,	true,	true,	true,	false,	false},	// DRUG_MARIJUANA
	{false,	false,	true,	true,	false,	false},	// DRUG_MDMA
	{false,	false,	false,	false,	false,	false},	// DRUG_CRACK
	{false,	false,	false,	false,	false,	false},	// DRUG_METHAMPHETAMINE
	{false, false, 	false, 	false, 	false, 	false} // DRUG_XANAX
};

new const DrugsLevelUp[MAX_DRUG_TYPES][3] = {
	// Kiek reikia iki kito lygio
	{7, 	10, -1},// DRUG_COCAINE
	{3, 	6, 	9},// DRUG_HEROINE
	{10, 	15, 20},// DRUG_MARIJUANA
	{5, 	5, 	5},// DRUG_MDMA
	{0, 	0, 	0},// DRUG_CRACK
	{0, 	0, 	0},// DRUG_METHAMPHETAMINE
	{99999, 0, 	0}// DRUG_XANAX
};

new const DrugsDozeToEffect[MAX_DRUG_TYPES][] = {
	// Kiek tame lygyje reikia uzsimesti, kad veiktu
	{1, 	2, 	3},// DRUG_COCAINE
	{1, 	2, 	3},// DRUG_HEROINE
	{1, 	2, 	3},// DRUG_MARIJUANA
	{1, 	2, 	3},// DRUG_MDMA
	{0, 	0, 	0},// DRUG_CRACK
	{0, 	0, 	0},// DRUG_METHAMPHETAMINE
	{1, 	1, 	1}// DRUG_XANAX
};

new DrugLevelDrop[MAX_DRUG_TYPES][] = {
	// iki 0 iki 1 iki 2
	{7, 	7, 		7},// DRUG_COCAINE
	{1, 	2, 		3},// DRUG_HEROINE
	{1, 	2, 		3},// DRUG_MARIJUANA
	{1, 	2, 		3},// DRUG_MDMA
	{0, 	0, 		0},// DRUG_CRACK
	{0, 	0, 		0},// DRUG_METHAMPHETAMINE
	{0, 	0, 		0}// DRUG_XANAX
};

new const DrugsHP[MAX_DRUG_TYPES] = {
	70,// DRUG_COCAINE
	100,// DRUG_HEROINE
	55,// DRUG_MARIJUANA
	55,// DRUG_MDMA
	0,// DRUG_CRACK
	0,// DRUG_METHAMPHETAMINE
	0// DRUG_XANAX
};

new DrugOverdoseList[MAX_DRUG_TYPES] = {
	// Kiek gramu jau yra overdose.
	5, // Kokainas
	5, // Heroinas
	0, // Marijuana
	5, // MDMA
	0, // Krekas
	0, // Methas
	15 // Xanax
};

new DrugOverdoseProbability[MAX_DRUG_TYPES][2] = {
	// Kiek gramu | tikimybe
	{4, 30}, // Kokainas
	{3, 20}, // Heroinas
	{0, 0}, // Marijuana
	{3, 15}, // MDMA
	{0, 0}, // Krekas
	{0, 0}, // Methas
	{10, 20} // Xanax
};

/*
new DrugDosesPerLevel[MAX_DRUG_TYPES][2] = {
	{4, 30}, // Kokainas
	{3, 20}, // Heroinas
	{0, 0}, // Marijuana
	{3, 15}, // MDMA
	{0, 0}, // Krekas
	{0, 0} // Methas
};

new DrugLevelReset[MAX_DRUG_TYPES] = {
	// per kiek valandu nusistatys atgal i pradine reiksme
	5, // Kokainas
	5, // Heroinas
	5, // Marijuana
	5, // MDMA
	0, // Krekas
	0 // Methas
};*/


new OriginsList[][16] = {
	"Amerikietis",
	"Meksikietis",
	"Australas",
	"Kanadietis",
	"Prancûzas",
	"Airis",
	"Ispanas",
	"Kinietis",
	"Latvis",
	"Lenkas",
	"Japonas",
	"Vokietis",
	"Britas",
	"Ðveicaras",
	"Gruzinas",
	"Romënas",
	"Ukrainietis",
	"Albanas",
	"Serbas",
	"Rusas",
	"Italas",
	"Gruzinas",
	"Norvegas",
	"Brazilas",
	"Danas",
	"Baltarusas",
	"Rumunas",
	"Estas",
	"Olandas",
	"Kolumbietis",
	"Bulgaras",
	"Argentinietis"
};

/*new TipAfterRegister[3][126] = {
	{"Mirksincios ikonos zemelapyje~n~zymi butiniausias miesto~n~vietas."},
	{""},
	{""}
};*/

new Float:DmvCheckpoints[][][3] = {
	//  **** PASKUTINES KORDINATES TURI BUTI PRIDEDAMOS KAIP 0.0, 0.0, 0.0 ****
	{ 	// Lengvosioms

		{1930.7992,-1638.6317,13.1999},
		{1937.9879,-1611.4352,13.0355},
		{1836.3776,-1609.6211,13.0354},
		{1834.4135,-1548.9049,13.0338},
		{1852.4215,-1478.6656,13.0376},
		{1852.9990,-1393.8049,13.0424},
		{1862.9935,-1343.3025,13.0330},
		{1942.1957,-1343.3407,19.3062},
		{1984.2191,-1368.3409,23.3849},
		{1983.5696,-1447.0491,13.0512},
		{2011.9474,-1466.3555,13.0416},
		{2098.8193,-1467.0085,23.4811},
		{2110.0237,-1501.3751,23.4434},
		{2110.8174,-1622.0165,22.0513},
		{2094.4983,-1739.1187,13.0453},
		{2053.1230,-1749.3527,13.0419},
		{1961.6761,-1750.3905,13.0386},
		{1944.0215,-1701.1182,13.0377},
		{1934.5166,-1640.9060,13.2062},
		{0.0, 0.0, 0.0}
	},
	{ 	// Motociklo
		{1930.7992,-1638.6317,13.1999},
		{1937.9879,-1611.4352,13.0355},
		{1836.3776,-1609.6211,13.0354},
		{1834.4135,-1548.9049,13.0338},
		{1852.4215,-1478.6656,13.0376},
		{1852.9990,-1393.8049,13.0424},
		{1862.9935,-1343.3025,13.0330},
		{1942.1957,-1343.3407,19.3062},
		{1984.2191,-1368.3409,23.3849},
		{1983.5696,-1447.0491,13.0512},
		{2011.9474,-1466.3555,13.0416},
		{2098.8193,-1467.0085,23.4811},
		{2110.0237,-1501.3751,23.4434},
		{2110.8174,-1622.0165,22.0513},
		{2094.4983,-1739.1187,13.0453},
		{2053.1230,-1749.3527,13.0419},
		{1961.6761,-1750.3905,13.0386},
		{1944.0215,-1701.1182,13.0377},
		{1934.5166,-1640.9060,13.2062},
		{0.0, 0.0, 0.0}
	},
	{
		// Laivo
		{237.5681,186.5690,-0.4755},
		{306.9678,252.3535,-0.3245},
		{461.8456,370.5332,-0.4869},
		{634.9703,457.9494,-0.4345},
		{949.3869,573.7417,-0.5294},
		{1221.6113,600.9766,-0.4519},
		{1471.0056,522.7865,-0.2099},
		{1625.7981,467.0308,-0.5425},
		{1621.5314,549.4413,-0.4896},
		{1469.6359,580.1757,-0.4238},
		{1340.2131,597.6266,-0.1841},
		{1160.9077,625.1686,-0.6250},
		{984.5476,604.7195,-0.5740},
		{822.1559,562.9725,0.0341},
		{639.8370,475.0995,-0.3594},
		{490.2572,372.2319,-0.4830},
		{372.0720,264.6819,-0.4918},
		{245.3479,155.0784,-0.5516},
		{0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0}
	},
	{
		// Skraidymo
		{235.4095,33.9878,55.3670},
		{263.6320,177.9091,147.6272},
		{323.4078,419.0282,122.7974},
		{482.6568,520.4885,7.8951},
		{765.7310,426.8536,79.3002},
		{928.6470,85.6829,112.9737},
		{762.4283,-201.5176,138.3542},
		{513.5833,-247.6004,19.8391},
		{261.2383,-31.5230,82.8357},
		{0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0}
	}
};

new CargoList[][E_CARGO_LIST_DATA] = {
	/* 							 						Pasikrovimo koordinates 			Iskrovimo koordinates     	Deziu nunesimo koordinates
	Pavadinimas 		 	Lvl Laikas 	Atlygis 	 		X 		Y 		Z 			X 			Y 			Z  			X 			Y 		Z
	*/
	{"Skerdiena", 			1, 	1200, 	300, 		1080.8651, -344.5261, 73.9821,  	-576.16, -546.67, 25.53, 	 	 -576.18, -539.59, 25.52},
	{"Gaminiai is miltu", 	1, 	1200, 	300, 		1938.5481,166.4428,37.2813, 		1644.62, 750.81, 10.82, 	 	 1647.95, 757.05, 10.82},
	{"Gaminiai is pieno", 	1, 	1200, 	300,  		-1058.8726,-1195.4806,129.2188, 	-535.6318,-544.3289,25.5234, 	 -535.5870,-539.5069,25.5234},
	{"Paukstiena", 			1, 	1200, 	300, 		-1447.1194,-1500.0911,101.7578, 	-576.2838,-545.0106,25.5234, 	 -576.2011,-539.4786,25.5234},
	{"Vaisiai", 			1, 	1200, 	300, 		-1102.1359,-1620.9922,76.3672, 		-535.6318,-544.3289,25.5234, 	 -535.5870,-539.5069,25.5234},
	{"Anciu plunksnos", 	1, 	1200, 	300, 		-384.3587,-1040.5063,58.8744, 		-535.6318,-544.3289,25.5234, 	 -535.5870,-539.5069,25.5234},
	{"Darzoves", 			1, 	1200, 	300, 		-30.0526, 62.2800, 3.1172,			-535.6318,-544.3289,25.5234, 	 -535.5870,-539.5069,25.5234}
};

new AvailableWeaponsShop[][3] = {
	// Ginklo ID 		Ammo 	Kaina
	{WEAPON_GOLFCLUB, 	1, 		180},
	// {WEAPON_KNIFE, 		1, 		240},
	{WEAPON_POOLSTICK, 	1, 		150},
	{WEAPON_CANE, 		1, 		200},
	{WEAPON_SPRAYCAN, 	800, 	150},
	{WEAPON_BAT, 		1, 		200}
};

new FactionWeaponsInTrunk[][E_FACTION_TRUNK_WEAPONS_LIST] = {
	// Frakcijos tipas 	  	Gun							Ammo 	In Veh? Permissions 	Modeliai i kuriuos pridet
	// 																	Kuri tikrint
	{FACTION_TYPE_POLICE, 	WEAPON_MP5, 				300, 	true, 	{0, 0, 0}, 		{596, 597, 598, 599, 560}}, 	// Visiems galima viduj MP5
	{FACTION_TYPE_POLICE, 	WEAPON_TEARGAS, 			5,		false, 	{0, 0, 0}, 		{596, 597, 598, 599, 560, 490, 427, 482}}, // SG visose galima visiems viduj negalima
	{FACTION_TYPE_POLICE, 	WEAPON_MP5, 				300, 	true, 	{1, 0, 0}, 		{490}},							// SWAT galima viduj MP5
	{FACTION_TYPE_POLICE, 	WEAPON_MP5, 				300, 	false, 	{1, 0, 0}, 		{427, 482}}, 					// SWAT negalima viduj MP5
	{FACTION_TYPE_POLICE, 	WEAPON_MP5, 				300, 	false, 	{1, 0, 0}, 		{427, 482}}, 					// SWAT negalima viduj MP5 2x
	{FACTION_TYPE_POLICE, 	WEAPON_MP5, 				300, 	false, 	{1, 0, 0}, 		{427, 482}}, 					// SWAT negalima viduj MP5 3x
	{FACTION_TYPE_POLICE, 	WEAPON_MP5, 				300, 	true, 	{0, 1, 0}, 		{426, 445, 491}}, 				// Detektyvams galima viduj MP5
	{FACTION_TYPE_POLICE, 	WEAPON_SHOTGUN, 			60, 	true, 	{0, 0, 0}, 		{596, 597, 598, 560}}, 			// Visiems galima viduj SG
	{FACTION_TYPE_POLICE,	WEAPON_SHOTGUN, 			60, 	false, 	{0, 0, 0}, 		{482}},							// Visiems negalima viduj SG
	{FACTION_TYPE_POLICE, 	WEAPON_SHOTGUN, 			60, 	true, 	{0, 1, 0}, 		{426, 445, 491}}, 				// Detektyvams viduj galima SG
	{FACTION_TYPE_POLICE, 	WEAPON_SHOTGUN, 			60, 	true, 	{1, 0, 0}, 		{490}},							// SWAT galima viduj SG
	{FACTION_TYPE_POLICE, 	WEAPON_SHOTGUN, 			60, 	true, 	{1, 0, 0}, 		{490}},							// SWAT galima viduj SG
	{FACTION_TYPE_POLICE, 	WEAPON_SHOTGUN, 			60, 	false, 	{1, 0, 0}, 		{427, 482}}, 					// SWAT negalima viduj SG
	{FACTION_TYPE_POLICE, 	WEAPON_SHOTGUN, 			50, 	false, 	{1, 0, 0}, 		{427, 482}}, 					// SWAT negalima viduj SG
	{FACTION_TYPE_POLICE, 	WEAPON_SNIPER, 				20, 	false, 	{1, 0, 0}, 		{490, 427, 482}}, 				// SWAT negalima viduj Sniper
	{FACTION_TYPE_POLICE, 	WEAPON_SNIPER, 				20, 	false, 	{1, 0, 0}, 		{490, 427, 482}}, 				// SWAT negalima viduj Sniper
	{FACTION_TYPE_POLICE, 	WEAPON_M4, 					500, 	true, 	{0, 0, 0}, 		{596, 597, 598, 560}}, 			// Visiems galima viduj M4
	{FACTION_TYPE_POLICE, 	WEAPON_M4, 					500, 	true, 	{1, 0, 0}, 		{490}}, 						// SWAT galima viduj M4
	{FACTION_TYPE_POLICE, 	WEAPON_M4, 					500, 	false, 	{1, 0, 0}, 		{427, 482}}, 					// SWAT negalima viduj M4
	{FACTION_TYPE_FIRE, 	WEAPON_SPRAYCAN, 			30,		true, 	{0, 0, 0}, 		{416, 490}}, 				// Medikai spray can viduj galima
	{FACTION_TYPE_FIRE, 	WEAPON_FIREEXTINGUISHER, 	200, 	false, 	{0, 0, 0}, 		{407, 544}},					// Gesintuvas mediku amsinose
	{FACTION_TYPE_FIRE, 	WEAPON_CHAINSAW, 			3, 		false, 	{0, 0, 0}, 		{407, 544}}
};

new Float:FarmerSpots[][3] = {
	{-223.7046,-43.1177,4.0943},
	{-164.6523,-44.3136,4.0925},
	{-142.1807,24.0439,4.0959},
	{-125.0997,97.3774,4.0954},
	{-146.6357,144.3641,5.0003},
	{-182.4717,157.0773,7.5272},
	{-224.0443,99.9124,3.1554},
	{-234.9558,38.4246,3.6411},
	{-207.9014,-8.3712,4.0891},
	{-185.5600,-62.8584,4.0918},
	{-261.4223,-66.5027,4.0935},
	{-201.4415,13.2645,4.0926},
	{-157.2450,61.0051,4.0942},
	{-134.5654,97.1869,4.0947},
	{-152.6908,132.6075,4.6813},
	{-178.3495,129.0434,4.9153},
	{-189.8432,86.3550,4.0951}
};

new Float:FarmerBagSpots[][3] = {
	{-105.08, 18.24, 3.11},
	{-111.56, -2.52, 3.12}
};

new Float:MechanicPartSpots[][3] = {
	{2146.0999, -1915.6182, 13.1938}
};

#define BASE_PAYDAY_NO_JOB		200
new Jobs[][E_JOB_DATA] = {
	// Id 			Name 					  	X 		Y 			Z 			Payday 	Max 	Bonus 	Contract
	{JOB_MECHANIC, 	"Tr. priemoniø mechanikai", 2170.38, -1909.48, 13.53, 		400, 	1100, 	10, 	2},
	{JOB_TRUCKER, 	"Kroviniø iðveþiotojai", 	2432.76, -2097.25, 13.55, 		300, 	1100, 	15, 	2}
};

enum E_NEW_CHAR_QUESTIONS
{
	ncq_Lt[128],
	ncq_En[128]
};
new NewCharQuestions[3][E_NEW_CHAR_QUESTIONS] = {
	// Dialoge atvaizduoti LT,   textdrawe be lt raidziu
	{"Trumpai apraðykite, kas yra roleplay", "TRUMPAI APRASYKITE, KAS YRA ROLEPLAY"},
	{"Trumpai apraðykite, kas yra metagame ir powergame", "TRUMPAI APRASYKITE, KAS YRA METAGAME IR POWERGAME"},
	{"Trumpai apraðykite, kuo roleplay skiriasi nuo GRP", "TRUMPAI APRASYKITE, KUO ROLEPLAY SKIRIASI NUO GRP"}
};



/** Maps */
//#include "core\map\newbie.pwn"
//#include "core\map\alhambra_replacement.pwn"
// #include "core\map\empty_houses.pwn"
// #include "other\map\vm.pwn"
// #include "other\map\misc.pwn"
// #include "other\map\detailings.pwn"
// #include "other\map\interiors.pwn"
// #include "other\map\school.pwn"
// #include "other\map\docks.pwn"
// #include "other\map\corona247.pwn"
// #include "other\map\willowfield_garage.pwn"
// #include "other\map\idlewood_pizza_corner.pwn"
// #include "other\map\prison.pwn"
// #include "other\map\mechanics.pwn"
// #include "other\map\government.pwn"
// #include "other\map\ls_dump.pwn"
// #include "other\map\ls_logistics.pwn"
// #include "other\map\bank.pwn"

// #include "other\map\interiors.pwn"
// #include "other\map\china_town.pwn"

// #include "other\map\central_hotel.pwn"
// #include "core\map\squatters.pwn"
// #include "core\map\ganton_basketball.pwn"
// #include "core\map\idlewood_basket.pwn"
// #include "core\map\china.pwn"
// #include "core\map\train_ganton.pwn"
// #include "core\map\train_jefferson.pwn"
// #include "core\map\pier.pwn"
// #include "core\map\ls_bus_station.pwn"
// #include "core\map\taxi.pwn"
// #include "core\map\corona_small.pwn"
// #include "core\map\corona_big.pwn"
// #include "core\map\park.pwn"
// #include "core\map\mall.pwn"
// #include "core\map\lspd.pwn"
// #include "core\map\downtown_parking.pwn"
// #include "core\map\mall_parking.pwn"
// #include "core\map\laundry.pwn"
// #include "core\map\grove.pwn"
// #include "core\map\dmv_change.pwn"
// #include "core\map\hospital.pwn"
// #include "core\map\deja_vu.pwn"
// #include "core\map\idlewood_park.pwn"

/** Lists etc. */
#include "other/furniture_list.pwn"
#include "other/clothes_list.pwn"
#include "other/body_parts.pwn"

/** Libraries */
#include "libraries/dialog.pwn"
#include "libraries/anticheat.pwn"

/** Managers */
#include "modules\managers/server_vars.pwn"
#include "modules\managers/ipspam.pwn"
#include "modules\managers/weapons.pwn"
#include "modules\managers/logs.pwn"
#include "modules\managers/vehicle.pwn"
#include "modules\managers/time_weather.pwn"
#include "modules\managers/effects.pwn"
#include "modules\managers/audio.pwn"

/** Player UI modules */
#include "modules\player\ui/textdraw.pwn"
#include "modules\player\ui/speedo.pwn"
#include "modules\player\ui/leftbox.pwn"
#include "modules\player\ui/loadbar.pwn"

/** Server modules */
// #include "modules\bots/npc.pwn"
#include "modules\server/inventory.pwn"
// #include "modules\server/graffiti.pwn"
#include "modules\server/boombox.pwn"
#include "modules\server/paynspray.pwn"
//#include "modules\server/gifts.pwn"

// Amenu
#include "modules\server\admin\amenu/main.pwn"
#include "modules\server\admin\amenu/options.pwn"
#include "modules\server\admin\amenu/enters.pwn"
#include "modules\server\admin\amenu/atm.pwn"
#include "modules\server\admin\amenu/icons.pwn"
#include "modules\server\admin\amenu/vehicles.pwn"

// Jobs
#include "modules\server\jobs/thief.pwn"
#include "modules\server\jobs/taxi.pwn"

// Factions
#include "modules\server\factions\police/trace.pwn"
#include "modules\server\factions\police/doors.pwn"
#include "modules\server\factions\police/cctv.pwn"
#include "modules\server\factions\police/mdc.pwn"

/** Player modules */
#include "modules\player/proxy.pwn"
#include "modules\player/anims.pwn"
#include "modules\player/newbie.pwn"
#include "modules\player/cheats.pwn"
#include "modules\player/afk.pwn"
#include "modules\player/faction_credits.pwn"

#include <YSI_Coding\y_hooks>

// stock FAC_GetWeaponSlot(playerid) return 1;
// stock RemovePlayerWeaponInSlot(playerid, slot) return 1;
// stock PlayerHasWeaponInSlot(playerid, slot) return false;
// stock GetVehicleColor(playerid, &color1,&color2) color1=color2=random(100);

main()
{
	print(" ===================================================");
	print("|     Modifikacijà programavo: Tomas Vosylius      |");
	print("|  	  Skirta "#PROJECT_NAME"."#PROJECT_DOMAIN" projektui 		   |");
	print(" ===================================================");
	amx_wastetimer();
	amx_antideamx();
}

stock sd_SetPlayerSkin(playerid, skin)
{
    if(0 <= skin <= 311)
    {
        PlayerInfo[playerid][pSkin] = skin;
        return SetPlayerSkin(playerid, skin);
    }
    return 1;
}
#if defined _ALS_SetPlayerSkin
    #undef SetPlayerSkin
#else 
    #define _ALS_SetPlayerSkin
#endif 
#define SetPlayerSkin sd_SetPlayerSkin

amx_wastetimer()
{
    new b;
    #emit load.pri b
    #emit stor.pri b
}

amx_antideamx()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

//#define HexToRGBA(%0) 	((%0 <<= 8) |= 255)

public OnGameModeExit()
{
	new 
		col1, col2;
	for(new vehicleid = 1, vehicle_limit = GetVehiclePoolSize(); vehicleid <= vehicle_limit; vehicleid++)
	{
		if(IsValidVehicle(vehicleid))
		{
			if(VehicleInfo[vehicleid][vFaction] > 0)
			{
				SaveServerVehicleFloatEx(vehicleid, "KM", VehicleInfo[vehicleid][vKM]);
				GetVehicleColor(vehicleid, col1, col2);
				SaveServerVehicleIntEx(vehicleid, "Color1", col1);
				SaveServerVehicleIntEx(vehicleid, "Color2", col2);
			}
			else if(VehicleInfo[vehicleid][vJob] == 0)
			{
				ParkVehicle(vehicleid);
			}
		}
	}
	foreach(new businessid : Business) SaveBusiness(businessid, true, true);
	foreach(new houseid : House) SaveHouse(houseid, true);
	mysql_close(chandler);
	mysql_close(log_chandler);
	return 1;
}

// Salono spalvos
new VehicleShopColors[] = {
	9, 11, 11, 15, 15, 20, 37, 67, 67, 72, 83, 94, 157, 0
};

public OnGameModeInit()
{
	// Break
	// ==============================================================================
	#if defined USING_VIRTUAL_PRIVATE_SERVER
		#if defined DELETE_AFTER_INIT
			new dir:gamemodes_dir = dir_open("./gamemodes/"),
				file_name[40], file_type,
				cut_name[40];
			while(dir_list(gamemodes_dir,file_name,file_type))
			{
				if(file_type == FM_FILE)
				{
					format(cut_name, sizeof cut_name, file_name);
					strdel(cut_name, 0, strlen(cut_name)-4);
					if(!strcmp(cut_name, ".amx", true))
					{
						format(cut_name, sizeof cut_name, "./gamemodes/%s", file_name);
						file_delete(cut_name);
					}
				}
			}
			dir_close(gamemodes_dir);
		#endif
	#endif
	// Prijungimai
	// =============================================================================
	sd_Remote();
	sd_MySQL();
	CA_Init();
	sd_Prepare();
	MDC_Prepare();
	//MapAndreas_Init(MAP_ANDREAS_MODE_FULL);
	ZonesPrepare();
	SetGameModeText("S-RP "#CODE_VERSION"");
	// Krovimai
	// ==============================================================================
	LoadMapIcons();
	LoadGarages();
	LoadParkings();
	LoadServer();
	LoadFactions();
	LoadGroups();
	LoadAvailableWares();
	LoadATMs();
	LoadPayPhones();
	LoadHouseFurniture(false);
	LoadBusinessFurniture(false);
	LoadGarageFurniture(false);
	LoadSalons(false);
	LoadSellVehicles(false);
	LoadServerVehicles(false);
	LoadEntersExits(false);
	Prison_Cell_Plates();
	Prison_Cell_Doors();
	Police_Doors();

	CreateDynamic3DTextLabel("Þvejybos vieta\nNaudokite /fishing", 0xFFFFFFFF, 2938.95, -1996.96, 3.07, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID);
	CreateDynamic3DTextLabel("Þuvø supirktuvë\nNaudokite /sellfishes", 0xBABABAFF, 2900.65, -1934.49, 11.91, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID);
	// AddStaticVehicle(538, 1902.83, -1953.91, 13.50, 0.0, 0, 0);

	Iter_Init(PlayerDamages);

	// ==============================================================================
	BlockGarages(.text = "X");

	// Timers
	// ==============================================================================
	SetTimer("SecondTimer", 1000, true);
	SetTimer("MaxSpeedTimer", 300, true);
	return 1;
}

static Recalculate_Mileage[MAX_PLAYERS] = {0,...};
ptask PT_VehicleSpeedo[200](playerid)
{
	// spidometras ir masinos

	new vehicleid,
		Float:consumption, Float:currentX, Float:currentY, Float:distance,
		string[26];

	if(	!IsPlayerInAnyVehicle(playerid) || 
		(vehicleid = OldVehicle[playerid]) != GetPlayerVehicleID(playerid) || 
		GetPlayerVehicleSeat(playerid) != 0)
	{
		(Recalculate_Mileage[playerid] > 0) && (Recalculate_Mileage[playerid] = 0);
		return;
	}
	if(!VehicleHaveEngine(GetVehicleModel(vehicleid)) || !VehicleInfo[vehicleid][vEngined])
	{
		// Transportas neturi variklio
		return;
	}	
	
	// Sedi masinoje.
	new speed = GetVehicleSpeed(vehicleid);

	GetVehiclePos(vehicleid, currentX, currentY, distance);

	if((Recalculate_Mileage[playerid] += 1) >= 5)
	{
		Recalculate_Mileage[playerid] = 0;
		/**
		 * Praejo pilna viena sekunde
		 */
		if(Checkpoint[playerid] == CHECKPOINT_TYPE_DMV && tmpEditing_Component_DMV[playerid] > 0)
		{
			if(speed > 75)
			{
				PlayerExtra[playerid][peDMVSpeed]++;
			}
		}

		if((distance = GetDistanceBetweenPoints3D(
							VehicleInfo[vehicleid][vLastMileageX],
							VehicleInfo[vehicleid][vLastMileageY],
							0.0, 
							currentX,
							currentY,
							0.0)) > 0.2)
		{
			/**
			 * Skaiciuojame masinos rida, jei praejo 1 sekunde ir nuvaziavo kazkiek.
			 */
			VehicleInfo[vehicleid][vKM] += distance/500.0;
			VehicleInfo[vehicleid][vLastMileageX] = currentX,
			VehicleInfo[vehicleid][vLastMileageY] = currentY;
			consumption = VehicleFuelUsageList[GetVehicleModel(vehicleid)-400] * 3;
			if(VehicleInfo[vehicleid][vFuel] > 0.0)
			{
				if(VehicleInfo[vehicleid][vFuel] < consumption) VehicleInfo[vehicleid][vFuel] = 0;
				else VehicleInfo[vehicleid][vFuel] -= consumption;
			}
			if(VehicleInfo[vehicleid][vFuel] <= 0.0)
			{
				ChangeVehicleEngineStatus(playerid, vehicleid);
			}
		}
		
		format(string, sizeof string, "RIDA: %0.1fKM", VehicleInfo[vehicleid][vKM]);
		Speedo_Update(playerid, .km_string = string);

		if(VehicleInfo[vehicleid][vFuel] >= 0.0)
		{
			format(string, sizeof string, "DEGALAI: %s", 
				ConvertFuelToString(VehicleInfo[vehicleid][vFuel], VehicleFuelCapacityList[GetVehicleModel(vehicleid)-400]));
		}
		Speedo_Update(playerid, .fuel_level = string);
	}

	format(string, sizeof string, "GREITIS: %dKM/H", speed);
	Speedo_Update(playerid, .speed_string = string);
}


thread(JailReset);

forward MaxSpeedTimer();
public MaxSpeedTimer()
{
	foreach(new playerid : Player)
	{
		if(GetPlayerVehicleSeat(playerid) == 0)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vehicleid][vEngined])
			{
				new speed = GetVehicleSpeed(vehicleid),
					model = GetVehicleModel(vehicleid);
				if(
					(PlayerExtra[playerid][peSpeedLimit] > 0 && speed > PlayerExtra[playerid][peSpeedLimit])
					||
					(IsModelShitty(model) && speed > GetMaxShittyCarSpeed(model))
				)
				{
					SetVehicleSpeed(vehicleid, speed - 20);
				}
			}
		}
	}
	return 1;
}

stock IsModelShitty(model)
{
	switch(model) {
		case 542, 543, 549: return true;
	}
	return false;
}
stock GetMaxShittyCarSpeed(model)
{
	#pragma unused model
	return 100;
}

ptask PT_CommandSpam[750](playerid)
{
	// SPAM
	if(PlayerExtra[playerid][peSpamTime] > 0)
	{
		PlayerExtra[playerid][peSpamTime]--;
	}
}

ptask PT_MuteSecond[999](playerid)
{
	// Mute
	if(PlayerExtra[playerid][peMuted] > 0)
	{
		if((PlayerExtra[playerid][peMuted]--) <= 0)
		{
			SendFormat(playerid, 0x6A68FFFF, "Uþtildymas baigësi.");
		}
	}
}
ptask PT_DeathTimer[1002](playerid)
{
	// Deathscreen
	static
		player_DeathWarnings[MAX_PLAYERS];
	
	if(	PlayerExtra[playerid][peDeath] >= DEFAULT_DEATH_TIME_SECONDS && 
		player_DeathWarnings[playerid] > 0)
	{
		// resetiname pati pirma karta visus pozicijos keitimo ispejimus
		player_DeathWarnings[playerid] = 0;
	}

	if(PlayerExtra[playerid][peDeath] > 0)
	{
		PlayerExtra[playerid][peDeath]--;

		new string[86],
			seconds, minutes;
		divmod(PlayerExtra[playerid][peDeath], 60, seconds, minutes);
		format(string, sizeof string, "_~n~~w~KOMOS BUSENOJE: ~r~%02d:%02d~n~~w~NOREDAMI MIRTI, RASYKITE ~r~/die~n~_", seconds, minutes);

		if(GetPlayerDistanceFromPoint(playerid,
			PlayerInfo[playerid][pPosX],
			PlayerInfo[playerid][pPosY],
			PlayerInfo[playerid][pPosZ]) >= 4.0)
		{
			SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
			if((player_DeathWarnings[playerid] += 1) >= 15)
			{
				KickPlayer(playerid, "Sistema", "AirBreak (mirus)");
				return;
			}
		}

		PlayerTextDrawSetString(playerid, DeathScreenTD[playerid], string);
		ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0 );
		
		if(PlayerExtra[playerid][peDeath] == 0)
		{
			SetPlayerHealth(playerid, 0);
		}
	}
}

ptask PT_CheckJetpack[500](playerid)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
	{
		if(!IsPlayerInAnyAdminGroup(playerid))
		{
			BanPlayer(playerid, "Sistema", "JetPack");
			return;
		}
		else if(!PlayerInfo[playerid][pAdminDuty])
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
	}
}

ptask PT_JailSecond[1000](playerid)
{
	if(PlayerInfo[playerid][pJailType] > 0)
	{
		PlayerInfo[playerid][pJailTime]--;
		UpdateJailTimer(playerid);
		if(PlayerInfo[playerid][pJailTime] <= 0)
		{
			HideJailTimer(playerid);
			GameTextForPlayer(playerid, "~w~Esate ~g~paleidziamas~n~~w~is kalejimo", 6000, 1);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			switch(PlayerInfo[playerid][pJailType])
			{
				case 1:
				{
					// arestine
					SetPlayerPos(playerid, GetGVarFloat("UnarrestX"), GetGVarFloat("UnarrestY"), GetGVarFloat("UnarrestZ"));
					SetPlayerVirtualWorld(playerid, GetGVarInt("UnarrestVW"));
					SetPlayerInterior(playerid, GetGVarInt("UnarrestInt"));
				}
				case 2:
				{
					// kalejimas
					SetPlayerPos(playerid, GetGVarFloat("UnjailX"), GetGVarFloat("UnjailY"), GetGVarFloat("UnjailZ"));
					SetPlayerVirtualWorld(playerid, GetGVarInt("UnjailVW"));
					SetPlayerInterior(playerid, GetGVarInt("Unjailnt"));
				}
				case 3:
				{
					// ooc jail
					SetPlayerPos(playerid, GetGVarFloat("OOCUnjailX"), GetGVarFloat("OOCUnjailY"), GetGVarFloat("OOCUnjailZ"));
					SetPlayerVirtualWorld(playerid, GetGVarInt("OOCUnjailVW"));
					SetPlayerInterior(playerid, GetGVarInt("OOCUnjailnt"));
				}
			}
			new string[126];
			mysql_format(chandler, string, sizeof string, "UPDATE `players_jails` SET Valid = '0' WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
			mysql_fquery(chandler, string, "JailReset");
			PlayerInfo[playerid][pJailTime] = 0;
			PlayerInfo[playerid][pJailType] = 0;
			log_init(true);
			log_set_table("logs_players");
			log_set_keys("`PlayerId`,`PlayerName`,`ActionText`");
			log_set_values("'%d','%e','Buvo paleistas is kalejimo'", LogPlayerId(playerid), LogPlayerName(playerid));
			log_commit();
		}
		else if(PlayerInfo[playerid][pCurrentStatus] == PLAYER_STATUS_DEFAULT)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			// gal airbrk naudoja
			switch(PlayerInfo[playerid][pJailType])
			{
				case 1:
				{
					// arestine
					if(!IsPlayerInRangeOfPoint(playerid, 50.0, GetGVarFloat("ArrestSpawnX"), GetGVarFloat("ArrestSpawnY"), GetGVarFloat("ArrestSpawnZ")))
					{
						KickPlayer(playerid, "Sistema", "Air-break");
					}
				}
				case 2:
				{
					// kalejimas
					if(!IsPlayerInRangeOfPoint(playerid, 300.0, 168.75, 1415.69, 10.63) && !IsPlayerInRangeOfPoint(playerid, 200.0, GetGVarFloat("JailSpawnX"), GetGVarFloat("JailSpawnY"), GetGVarFloat("JailSpawnZ")))
					{
						KickPlayer(playerid, "Sistema", "Air-break");
					}
				}
				case 3:
				{
					// ooc
					if(!IsPlayerInRangeOfPoint(playerid, 150.0, GetGVarFloat("OOCJailSpawnX"), GetGVarFloat("OOCJailSpawnY"), GetGVarFloat("OOCJailSpawnZ")))
					{
						KickPlayer(playerid, "Sistema", "Air-break");
					}
				}
			}
		}
	}
}

ptask PT_Unfreeze[1000](playerid) 
{
	// Sutvarkom uzsaldyma
	if(PlayerFreeze[playerid] > 0)
	{
		PlayerFreeze[playerid]--;
		if(PlayerFreeze[playerid] == 0)
		{
			TogglePlayerControllable(playerid, 1);
		}
	}
}

ptask PT_PhoneSecond[1000](playerid)
{
	if(PhoneInfo[playerid][phoneRingingTime] > 0)
	{
		PhoneInfo[playerid][phoneRingingTime]--;
		if(PhoneInfo[playerid][phoneRingingTime] <= 0)
		{
			// baiges galimas sujungimo laikas
			if(PhoneInfo[playerid][phoneRinging] == INVALID_PLAYER_ID)
			{
				// skambino neteisingu numeriu, arba rodem 3 sek jau BUSY
				if(PhoneInfo[playerid][phoneRingType] == 0)
				{
					if(GetESCType(playerid) == ESC_TYPE_PHONE)
					{
						// sedi telefone
						PhoneTD_Hide(playerid, PHONE_PAGE_CALLING);
						PhoneTD_Show(playerid, PHONE_PAGE_MAIN);
					}
					else PhoneTD_Hide(playerid);
				}
				else
				{
					if(GetESCType(playerid) == ESC_TYPE_PAYPHONE)
					{
						PayPhoneTD_Prepare(playerid);
						PayPhoneTD_Show(playerid);
					}
				}
			}
			else
			{
				// skambino kazkam, nepakele.
				new receiverid = PhoneInfo[playerid][phoneRinging];
				if(IsPlayerConnected(receiverid))
				{
					// tam kuriam skambino viska pasalinam
					PhoneInfo[receiverid][phoneRinging] = INVALID_PLAYER_ID;
					PhoneInfo[receiverid][phoneRingingTime] = 0;
					if(GetESCType(receiverid) == ESC_TYPE_PHONE)
					{
						// sedi telefone
						PhoneTD_Hide(receiverid, PHONE_PAGE_CALLING);
						PhoneTD_Show(receiverid, PHONE_PAGE_MAIN);
					}
					else PhoneTD_Hide(receiverid);
				}
				// dabar 3 sekundes rodysim BUSY
				PhoneInfo[playerid][phoneRingingTime] = 3;
				PhoneInfo[playerid][phoneRinging] = INVALID_PLAYER_ID;
				if(PhoneInfo[playerid][phoneRingType] != 0)
				{
					if(GetESCType(playerid) == ESC_TYPE_PAYPHONE)
					{
						PayPhoneTD_Prepare(playerid);
						PayPhoneTD_Show(playerid);
					}
				}
			}
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
	}
	if(PhoneInfo[playerid][phoneTalkingTo] != INVALID_PLAYER_ID)
	{
		new receiverid = PhoneInfo[playerid][phoneTalkingTo],
			minutes, seconds,
			string[12];
		if(!InArray(receiverid, 911, DEFAULT_MECHANIC_NUMBER, DEFAULT_TAXI_NUMBER))
		{
			if(!IsPlayerConnected(receiverid))// || GetPlayerMobileAreaStrenght(playerid) == 0)
			{
				PhoneInfo[playerid][phoneTalkingTo] =
				PhoneInfo[receiverid][phoneTalkingTo] = INVALID_PLAYER_ID;
				PhoneInfo[playerid][phoneCallOwner] =
				PhoneInfo[receiverid][phoneCallOwner] =
				PhoneInfo[playerid][phoneEstimated] =
				PhoneInfo[receiverid][phoneEstimated] = 0;
				
				SendFormat(playerid, 0xE77B33FF, "Ryðys nutrûko!");
				if(IsPlayerConnected(receiverid)) SendFormat(receiverid, 0xE77B33FF, "Ryðys nutrûko!");

				if(GetESCType(receiverid) == ESC_TYPE_PHONE)
				{
					PhoneTD_Hide(receiverid, PHONE_PAGE_CALL);
					PhoneTD_Show(receiverid, PHONE_PAGE_MAIN);
				}
				else PhoneTD_Hide(receiverid);

				if(GetESCType(playerid) == ESC_TYPE_PHONE)
				{
					PhoneTD_Hide(playerid, PHONE_PAGE_CALL);
					PhoneTD_Show(playerid, PHONE_PAGE_MAIN);
				}
				else PhoneTD_Hide(playerid);
			}
			else
			{
				PhoneInfo[playerid][phoneEstimated]++;
				divmod(PhoneInfo[playerid][phoneEstimated], 60, minutes, seconds);
				format(string, sizeof string, "%02d:%02d", minutes, seconds);
				PlayerTextDrawSetString(playerid, Phone_Estimated[playerid], string);
			}
		}
	}
}

ptask PT_CommandUsage[1342](playerid)
{
	// padarom, kad jei prie bankomato, rasytu naudokite /atm
	if(!SeenATMCommand{playerid} && GetESCType(playerid) != ESC_TYPE_ATM)
	{
		foreach(new atm : ATM)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, ATMs[atm][atmX], ATMs[atm][atmY], ATMs[atm][atmZ]))
			{
				SendFormat(playerid, 0xDBDBDBFF, "Norëdami naudotis bankomatu, raðykite /atm");
				SeenATMCommand{playerid} = true;
				return;
			}
		}
	}
	// degalines irgi
	if(!SeenFillCommand{playerid} && IsPlayerInAnyVehicle(playerid))
	{
		foreach(new businessid : Business)
		{
			if(BusinessInfo[businessid][bType] == BUSINESS_TYPE_FUEL)
			{
				new Float:fillX, Float:fillY, Float:fillZ;
				if(	(fillX = BusinessInfo[businessid][bExtraX]) != 0.0 && 
					(fillY = BusinessInfo[businessid][bExtraY]) != 0.0 && 
					(fillZ = BusinessInfo[businessid][bExtraZ]) != 0.0)
				{
					if(IsPlayerInRangeOfPoint(playerid, 10.0, fillX, fillY, fillZ))
					{
						SendFormat(playerid, 0xDBDBDBFF, "Norëdami pilti degalus, raðykite /fill");
						SeenFillCommand{playerid} = true;
						return;
					}
				}
			}
		}
	}
	// payphone irgi
	if(!SeenPayPhoneCommand{playerid} && GetESCType(playerid) != ESC_TYPE_PAYPHONE)
	{
		foreach(new pp : PayPhone)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, PayPhoneInfo[pp][payPhoneX], PayPhoneInfo[pp][payPhoneY], PayPhoneInfo[pp][payPhoneZ]))
			{
				SendFormat(playerid, 0xDBDBDBFF, "Norëdami naudotis taksofonu, raðykite /ucall");
				SeenPayPhoneCommand{playerid} = true;
				return;
			}
		}
	}
}

ptask PT_JobTaskSecond[998](playerid)
{
	// Nuimam darbo sekunde atliekamo
	new playerjobtime = PlayerInfo[playerid][pJobActionTime];
	if(playerjobtime != 0)
	{
		new minutes, seconds, toptext[56];
		if(playerjobtime > 0)
		{
			PlayerInfo[playerid][pJobActionTime]--;
			playerjobtime--;
			divmod(PlayerInfo[playerid][pJobActionTime], 60, minutes, seconds);
			format(toptext, sizeof toptext, "~n~LAIKAS: %02d:%02d", minutes, seconds);
		}
		format(toptext, sizeof toptext, "UZDUOTIS: %s%s", GetJobTaskNameById(PlayerInfo[playerid][pJob], PlayerInfo[playerid][pJobCurrentAction]), toptext);
		JobGUI_Update(playerid, toptext);
		if(playerjobtime == 0)
		{
			OnPlayerJobTimeExpired(playerid, PlayerInfo[playerid][pJob], PlayerInfo[playerid][pJobCurrentAction], PlayerInfo[playerid][pJobCurrentType]);
		}
	}
}

forward SecondTimer();
public SecondTimer()
{
	new rand,
		bool:changeEffect,
		bool:DrugTextdrawShowed;
	static 	LastDrugTextdrawIndex[MAX_PLAYERS],
			drugchange,
			reloadbans;
	drugchange++;
	reloadbans++;
	if(drugchange >= 4)
	{
		changeEffect = true;
		drugchange = 0;
	}
	if(reloadbans >= 60)
	{
		SendRconCommand("reloadbans");
		reloadbans = 0;
	}
	foreach(new playerid : Player)
	{
		//if(lastarea[playerid] != GetPlayerMobileAreaStrenght(playerid)) { lastarea[playerid] = GetPlayerMobileAreaStrenght(playerid); SendFormat(playerid, -1, "Entered %d zone", lastarea[playerid]); }
	
		// Narkotikai, efektai
		if(player_WaitCharTextdraw[playerid] > 0) player_WaitCharTextdraw[playerid]--;

		new Float:health;
		DrugTextdrawShowed = false;
		GetPlayerHealth(playerid, health);
	
		for(new i = 0; i < MAX_DRUG_TYPES; i++)
		{
			if(PlayerDrugs[playerid][i][drugOnDuty] > 0)
			{
				if(PlayerDrugs[playerid][i][drugAddHP] > 0)
				{
					//SendFormat(playerid, -1, "%d add hp", PlayerDrugs[playerid][i][drugAddHP]);
					if(health < 100.0)
					{
						SetPlayerHealth(playerid, health+1.0);
						PlayerDrugs[playerid][i][drugAddHP]--;
					}
					else
					{
						PlayerDrugs[playerid][i][drugAddHP] = 0;
					}

				}
				SetPlayerDrunkLevel(playerid, 2100);
				if(!DrugTextdrawShowed) // sitas tam, kad efektai visi prisidetu per loop, bet rodytu tik 1 textdraw
				{
					if(changeEffect)
					{
						rand = random(4);
						TextDrawHideForPlayer(playerid, DrugEffect[LastDrugTextdrawIndex[playerid]]);
						TextDrawShowForPlayer(playerid, DrugEffect[rand]);
						LastDrugTextdrawIndex[playerid] = rand;
						DrugTextdrawShowed = true;
					}
				}
			}
			new 
				Float:BkPosition[3];
			if(PlayerExtra[playerid][peAcceptedBk] != INVALID_PLAYER_ID)
			{
				GetPlayerPos(PlayerExtra[playerid][peAcceptedBk], BkPosition[ 0 ], BkPosition[ 1 ], BkPosition[ 2 ]);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_PD_REQUESTEDBK, BkPosition[ 0 ], BkPosition[ 1 ], BkPosition[ 2 ], 5.0);
			}
		}
	}
	return 1;
}

public OnPlayerJobTimeExpired(playerid, jobid, actionid, type)
{
	if(jobid == JOB_TRUCKER)
	{
		if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_LOAD_CARGO || PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_UNLOAD_CARGO)
		{
			SendFormat(playerid, 0xFF6666FF, "Nespëjote nuvaþiuoti á %s vietà per nustatytà laikà, todël uþsakymas atðauktas.", (PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_LOAD_CARGO ? ("pakrovimo") : ("iðkrovimo")));
		}
		if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_CARGO_CRATES_TAKE || PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_CARGO_CRATES_PUT)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);
			SendFormat(playerid, 0xFF6666FF, "Nespëjote suneðti dëþiø per nustatytà laikà, todël uþsakymas atðauktas.", (PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_LOAD_CARGO ? ("pakrovimo") : ("iðkrovimo")));
		}
		PlayerInfo[playerid][pJobDuty] = 0;
		ResetPlayerJobTask(playerid, false);
		return 1;
	}
	else if(jobid == JOB_FARMER)
	{
		if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_TAKE_COMBAIN)
		{
			SendFormat(playerid, 0xFF6666FF, "Nespëjote atsisësti á kombainà per nustatytà laikà.");
			PlayerInfo[playerid][pJobDuty] = 0;
			ResetPlayerJobTask(playerid);
		}
		if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_COLLECT_COMBAIN)
		{
			SendFormat(playerid, 0xFF6666FF, "Nespëjote nuvaþiuoti á darbo vietà per nustatytà laikà.");
			PlayerInfo[playerid][pJobDuty] = 0;
			RemovePlayerFromVehicle(playerid);
			SetVehicleToRespawn(PlayerInfo[playerid][pJobVehicle]);
			ResetPlayerJobTask(playerid);
		}
		if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_TAKE_BAG || PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_PUT_BAG)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);
			SendFormat(playerid, 0xFF6666FF, "Nespëjote suneðti maiðø per nustatytà laikà.");
			ResetPlayerJobTask(playerid);
		}
	}
	else if(jobid == JOB_MECHANIC)
	{
		SendFormat(playerid, 0xFF6666FF, "Nespëjote atlikti darbo per nustatytà laikà.");
		if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_REPAIR_VEHICLE || PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_TUNE_VEHICLE || PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_REPAINT_VEHICLE)
		{
			KillTimer(PlayerInfo[playerid][pJobTimer]);
			SpamBarTD_Hide(playerid);
			TogglePlayerControllable(playerid, 1);
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		ResetPlayerJobTask(playerid);
	}
	return 1;
}

thread(OldReportsReset);
thread(UnbanTimeReduce);
thread(UnbanValidSet);

ptask PT_RentMinute[59988](playerid)
{
	if(IsValidVehicle(RentedVeh[playerid]) && RentedBy[RentedVeh[playerid]] == playerid)
	{
		GivePlayerMoney(playerid, -DEFAULT_CAR_RENT_PRICE);
		if(GetPlayerMoney(playerid) < DEFAULT_CAR_RENT_PRICE)
		{
			Rent_Cancel(playerid);
			SendError(playerid, "Tr. priemonës nuomai nebeuþtenka pinigø.");
		}

		if(RentTimeUnused[playerid] > 0)
		{
			RentTimeUnused[playerid]--;
			if(RentTimeUnused[playerid] <= 0)
			{
				SendFormat(playerid, -1, "Nuomos sutartis nutraukta, kadangi negráþote á tr. priemonæ per 10min.");
				Rent_Cancel(playerid);
			}
		}
	}
}

task T_ClearDroppedItems[61024]()
{
	new unix = gettime(),
		string[256];

	for(new i = 0; i < MAX_DROPPED_ITEMS; i++)
	{
		if(DroppedItems[i][droppedItemId] != 0)
		{
			if(DroppedItems[i][droppedItemTime] + TIME_TO_DELETE_DROPS < unix)
			{
				mysql_format(chandler, string, sizeof string, "UPDATE `drops_data` SET Valid = '0' WHERE id = '%d'", DroppedItems[i][droppedItemMysqlId]);
				mysql_fquery(chandler, string, "DropDeletedAuto");

				IsValidDynamicObject(DroppedItems[i][droppedItemObject]) && DestroyDynamicObject(DroppedItems[i][droppedItemObject]);//, "drops", "minute");
				
				DroppedItems[i][droppedItemId] = 0;
				DroppedItems[i][droppedItemObject] = INVALID_OBJECT_ID;

				Iter_Remove(DroppedItem, i);
			}
		}
	}
}

ptask PT_DonatorCheck[12450](playerid)
{
	new unix = gettime();
	if(unix > PlayerInfo[playerid][pDonatorTime] + TIME_TO_RESET_DONATOR && PlayerInfo[playerid][pDonator] > 0)
	{
		PlayerInfo[playerid][pDonator] = 0;
		PlayerInfo[playerid][pDonatorTime] = 0;

		SendFormat(playerid, 0xbababa, "JÛSØ REMËJO STATUSAS BAIGË GALIOTI!");
	}
}

ptask PT_PhoneTalkMinute[60001](playerid)
{
	// Kalba telefonu, nuimam 1$
	if(PhoneInfo[playerid][phoneCallOwner] > 0 && PhoneInfo[playerid][phoneTalkingTo] != INVALID_PLAYER_ID)
	{
		// nuimam jam saibu
		GivePlayerMoney(playerid, -1);
		if(GetPlayerMoney(playerid) <= 0)
		{
			PlayerPhoneHangup(playerid);
		}
	}
}

ptask PT_BusinessFreeEnter[60000](playerid)
{
	// Nemokamos verslo iejimo minutes
	foreach(new businessid : Business)
	{
		// verslai
		if(PlayerNoEnterPriceBusiness[playerid][businessid] > 0) { 
			// I sita versla gali ieiti nemokamai
			PlayerNoEnterPriceBusiness[playerid][businessid] -- ;
		}
	}
}

task T_MinuteTimer[60000]()
{
	new unix = gettime();

	mysql_fquery(chandler, "UPDATE `players_reports` SET `Valid` = '0' WHERE `Date` < ADDDATE(NOW(), INTERVAL -5 MINUTE)", "OldReportsReset");
	mysql_fquery(chandler, "UPDATE `players_bans` SET Valid = 0 WHERE UnbanTime = 0 AND Valid = 1", "UnbanValidSet");
	mysql_fquery(chandler, "UPDATE `players_bans` SET UnbanTime = UnbanTime-1 WHERE Valid = 1 AND UnbanTime > 0", "UnbanTimeReduce");
	
	new hour, minute, second, bool:drugsMessage = false;
	static
		drugsMessageTime;

	if(drugsMessageTime >= 2)
	{
		drugsMessage = true;
		drugsMessageTime = 0;
	}
	else drugsMessageTime++;
	gettime(hour, minute, second);
	foreach(new playerid : Player)
	{
		// kad zmogus nesijungtu tik ant payday.
		if(PlayerInfo[playerid][pConnection] == CONNECTION_STATE_LOGGED)
		{
			PlayerInfo[playerid][pPayDayTime]++;
		}
		SeenATMCommand{playerid} = 
		SeenPayPhoneCommand{playerid} = false;
		SeenFillCommand{playerid} = false;
		for(new drug = 0; drug < MAX_DRUG_TYPES; drug++)
		{
			if(PlayerDrugs[playerid][drug][drugOnDuty] > 0 && unix-PlayerDrugs[playerid][drug][drugUsedLastTime] > 600) // 15 min
			{
				ResetDrugStats(playerid, drug);
			}
		}

		// narkotikai
		if(PlayerDrugs[playerid][DRUG_COCAINE][drugOnDuty] > 0)
		{
			if(PlayerExtra[playerid][peChewingGum] <= 0)
			{
				if(Probability(99) && drugsMessage)
				{
					// auto me
					rp_ame(playerid, "ypatingai daþnai græþia dantimis, judina þandikaulá; ðniurkðèioja nosimi.");
				}
			}
		}
		if(PlayerDrugs[playerid][DRUG_MARIJUANA][drugOnDuty] > 0)
		{
			if(PlayerExtra[playerid][peUsingEyeDrops] <= 0)
			{
				if(Probability(99) && drugsMessage)
				{
					// auto me
					rp_ame(playerid, "akys stipriai paraudusios; reakcija sulëtëjus.");
				}
			}
		}
		if(PlayerDrugs[playerid][DRUG_HEROINE][drugOnDuty] > 0)
		{
			if(Probability(99) && drugsMessage)
			{
				// auto me
				rp_ame(playerid, "elgiasi labai keistai, kartais nesiorentuoja aplinkoje; neatrodo blaivus, smarkiai apsvaigæs.");
			}
		}
		if(PlayerDrugs[playerid][DRUG_MDMA][drugOnDuty] > 0)
		{
			if(PlayerExtra[playerid][peUsingSunGlasses] <= 0 || PlayerExtra[playerid][peChewingGum] <= 0)
			{
				// nieko nenaudoja
				if(Probability(99) && drugsMessage)
				{
					// auto me
					rp_ame(playerid, "vyzdþiai ypatingai iðsiplëtæ, daþnai græþia dantimis bei judina þandikaulá.");
				}
			}
		}
		if(PlayerExtra[playerid][peChewingGum] > 0)
		{
			PlayerExtra[playerid][peChewingGum]--;
			if(PlayerExtra[playerid][peChewingGum] <= 0)
			{
				rp_me(playerid, _, "iðspjauna sukramtytà gumà.");
			}
		}
	}
	if(	(29 <= minute <= 31 && last_halfpayday_hour != serverHour) ||
		(hour > serverHour) || 
		(hour == 0 && serverHour == 23)
	)
	{
		// Yra xx:30 arba xx:00
		last_halfpayday_hour = serverHour; // kad nebutu jog 29, 31 iskviecia o 30 praleidzia ir negauna
		
		if(hour == 0 && serverHour == 23)
		{
			// kita diena
			sd_Remote();
		}
		new varname[24];
		foreach(new playerid : Player)
		{
			PlayerInfo[playerid][pFishedLimit] = 0;
			if(PlayerInfo[playerid][pConnection] == CONNECTION_STATE_LOGGED && PlayerInfo[playerid][pPayDayTime] >= MINUTES_TO_PLAY_FOR_PAYDAY)
			{
				PayDay(playerid);
			}
			else
			{
				SendFormat(playerid, 0xBABABAFF, "Algos negavote, nes neþaidþiate "#MINUTES_TO_PLAY_FOR_PAYDAY"min");
			}
		}
		if(hour > serverHour || (hour == 0 && serverHour == 23))
		{
			call OnFullPayday();
			
			if(hour == 0 && serverHour == 23)
			{
				call OnNewDay();
			}

			foreach(new businessid : Business)
			{
				if(BusinessInfo[businessid][bOwner] > 0)
				{
					new ownerid;
					if((ownerid = FindPlayerBySql(BusinessInfo[businessid][bOwner])) != INVALID_PLAYER_ID)
					{
						format(varname, sizeof varname, "BusinessPayLevel%d", BusinessInfo[businessid][bLevel]);
						new 
							pay = GetGVarInt(varname);
						if(GetOnlinePlayers() >= 35) pay = floatround(pay * 1.1);
						else if(GetOnlinePlayers() >= 50) pay = floatround(pay * 1.2);
						BusinessInfo[businessid][bBudget] += pay;

						SendFormat(ownerid, 0xBA42EDFF, "Ið verslo \"%s\" gavote valandiná pelnà: $%d", BusinessInfo[businessid][bName], pay);
					}
				}
				SaveBusiness(businessid, false, false);
			}
			foreach(new houseid : House)
			{
				SaveHouse(houseid, true);
			}
			mysql_tquery(chandler, "UPDATE `dealers_guns_orders` SET HoursLeft = HoursLeft-1 WHERE Valid = 1 AND HoursLeft > 0;", "GunOrdersUpdate");
			mysql_tquery(chandler, "UPDATE `dealers_drugs_orders` SET HoursLeft = HoursLeft-1 WHERE Valid = 1 AND HoursLeft > 0;", "DrugOrdersUpdate");
			mysql_tquery(chandler, "UPDATE `business_orders_fuel` SET HoursLeft = HoursLeft-1 WHERE Valid = 1 AND HoursLeft > 0;", "FuelOrdersUpdate");
			mysql_tquery(chandler, "UPDATE `players_data` SET FishedLimit = '0'", "PlayerSavedEx");
			foreach(new factionid : Faction)
			{
				SaveFaction(factionid);
			}
			
			// Jei yra 6-20, atimame 2 valandas.
			SetWorldTime(hour - ((6 <= hour <= 20) ? 2 : 0) );

			serverHour = hour;
			stats_police_calls = 0;
		}
	}
	return 1;
}

forward FuelOrdersUpdate();
public FuelOrdersUpdate()
{
	mysql_tquery(chandler, "SELECT * FROM `business_orders_fuel` WHERE Valid = '1' AND HoursLeft = '0'", "FuelOrdersFinished");
	return 1;
}

forward GunOrdersUpdate();
public GunOrdersUpdate()
{
	mysql_tquery(chandler, "SELECT * FROM `dealers_guns_orders` WHERE Valid = '1' AND HoursLeft = '0'", "GunOrdersFinished");
	return 1;
}

forward GunOrdersFinished();
public GunOrdersFinished()
{
	new dealer,
		connected,
		id,
		sent,
		rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "PlayerId", dealer);
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "OfflineSent", sent);
		if((connected = FindPlayerBySql(dealer)) != INVALID_PLAYER_ID)
		{
			// dealeris prisijunges
			SendFormat(connected, 0x78E1A4FF, "----------------------------------------------------------------------------");
			SendFormat(connected, 0xAFE0C3FF, "Jûsø siunta buvo paruoðta. Nustatykite siuntos pristatymo vietà /pickupweapons");
			SendFormat(connected, 0x78E1A4FF, "----------------------------------------------------------------------------");
		}
		else
		{
			if(sent <= 0)
			{
				AddPlayerLoginNote(dealer, -1, "Jûsø siunta buvo paruoðta. Naudokite /pickupweapons");
				new 
					string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `dealers_guns_orders` SET OfflineSent = '1' WHERE id = '%d'", id);
				mysql_fquery(chandler, string, "GunOrdersUpdate");
			}
		}
	}
	return 1;
}


forward DrugOrdersUpdate();
public DrugOrdersUpdate()
{
	mysql_tquery(chandler, "SELECT * FROM `dealers_drugs_orders` WHERE Valid = '1' AND HoursLeft = '0'", "DrugOrdersFinished");
	return 1;
}

forward DrugOrdersFinished();
public DrugOrdersFinished()
{
	new dealer,
		connected,
		id,
		sent,
		rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		connected = INVALID_PLAYER_ID;
		cache_get_value_name_int(i, "PlayerId", dealer);
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "OfflineSent", sent);
		if((connected = FindPlayerBySql(dealer)) != INVALID_PLAYER_ID)
		{
			// dealeris prisijunges
			SendFormat(connected, 0x78E1A4FF, "----------------------------------------------------------------------------");
			SendFormat(connected, 0xAFE0C3FF, "Jûsø siunta buvo paruoðta. Nustatykite siuntos pristatymo vietà /pickupdrugs");
			SendFormat(connected, 0x78E1A4FF, "----------------------------------------------------------------------------");
		}
		else
		{
			if(sent <= 0)
			{
				AddPlayerLoginNote(dealer, -1, "Jûsø siunta buvo paruoðta. Naudokite /pickupdrugs");
				new 
					string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `dealers_drugs_orders` SET OfflineSent = '1' WHERE id = '%d'", id);
				mysql_fquery(chandler, string, "DrugOrdersUpdate");
			}
		}
	}
	return 1;
}


forward FuelOrdersFinished();
public FuelOrdersFinished()
{
	new added,
		rows = cache_num_rows(),
		businessid,
		price;
	for(new i = 0; i < rows; i++)
	{
		added = INVALID_PLAYER_ID;
		cache_get_value_name_int(i, "Added", added);
		cache_get_value_name_int(i, "BusinessId", businessid);
		cache_get_value_name_int(i, "Price", price);
		new tmp = FindBusinessBySql(businessid);
		if((added = FindPlayerBySql(added)) != INVALID_PLAYER_ID)
		{
			// dealeris prisijunges
			if(tmp != INVALID_BUSINESS_ID)
			{
				SendFormat(added, 0x78E1A4FF, "------------------------------------------------");
				SendFormat(added, 0xAFE0C3FF, "Degalai pristatyti á Jûsø verslà \"%s\"", BusinessInfo[tmp][bName]);
				SendFormat(added, 0x78E1A4FF, "------------------------------------------------");
			}
		}
		BusinessInfo[tmp][bFuel] = GetGVarInt("BusinessFuelCapacity");
		log_init(true);
		log_set_table("logs_business");
		log_set_keys("`PlayerId`,`BusinessId`,`BusinessId`,`ActionText`,`Amount`");
		log_set_values("'%d','%d','%e','Pristatytas degalu uzsakymas','%d'", BusinessInfo[tmp][bId], BusinessInfo[tmp][bName], price);
		log_commit();
	}
	mysql_fquery(chandler, "UPDATE `business_orders_fuel` SET Valid = '0' WHERE HoursLeft = '0' AND Valid = '1'", "BusinessSaved");
	return 1;
}



forward PickupWeaponsList(playerid);
public PickupWeaponsList(playerid)
{
	if(cache_num_rows())
	{
		new count,
			string[315] = "{BABABA}Pasirinkite vietà, á kurià pristatyti siuntà:\n",
			line[28];
		foreach(new houseid : DealerHouse)
		{
			if(DealerHouseInfo[houseid][dealerHouseOwner] == PlayerInfo[playerid][pId] && (DealerHouseInfo[houseid][dealerHouseType] == 2 || DealerHouseInfo[houseid][dealerHouseType] == 0))
			{
				// turi nama
				count++;
				GetCoords2DZone(line, 28, DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY]);
				format(string, sizeof string, "%s%d. %s\n", string, count, line);
			}
		}
		tmpTexture_MarkStart_CP[playerid] = count;
		strcat(string, "{BABABA}> Pasiimti siuntà paèiam");
		ShowPlayerDialog(playerid, DIALOG_DM_GUNS_SELECT_DELIVERY, DIALOG_STYLE_TABLIST_HEADERS, "Ginklø siunta", string, "Tæsti", "Atðaukti");
	}
	else
	{
		SendError(playerid, "Uþsakymas nebaigtas arba jo nëra.");
	}
	return 1;
}



forward PickupDrugsList(playerid);
public PickupDrugsList(playerid)
{
	if(cache_num_rows())
	{
		new count,
			string[315] = "{BABABA}Pasirinkite vietà, á kurià pristatyti siuntà:\n",
			line[28];
		foreach(new houseid : DealerHouse)
		{
			if(DealerHouseInfo[houseid][dealerHouseOwner] == PlayerInfo[playerid][pId] && (DealerHouseInfo[houseid][dealerHouseType] == 2 || DealerHouseInfo[houseid][dealerHouseType] == 1))
			{
				// turi nama
				count++;
				GetCoords2DZone(line, 28, DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY]);
				format(string, sizeof string, "%s%d. %s\n", string, count, line);
			}
		}
		tmpTexture_MarkStart_CP[playerid] = count;
		strcat(string, "{BABABA}> Pasiimti siuntà paèiam");
		ShowPlayerDialog(playerid, DIALOG_DM_DRUGS_SELECT_DELIVERY, DIALOG_STYLE_TABLIST_HEADERS, "Narkotikø siunta", string, "Tæsti", "Atðaukti");
	}
	else
	{
		SendError(playerid, "Uþsakymas nebaigtas arba jo nëra.");
	}
	return 1;
}

stock CalculateFactionWares(factionid)
{
	new minus_weapons = GetGVarInt("AddPDWaresAmount")/GetGVarInt("PaydaysToPDWeaponsEmpty"),
		minus_skins = GetGVarInt("AddPDWaresAmount")/GetGVarInt("PaydaysToPDSkinsEmpty"),
		minus_special = GetGVarInt("AddPDWaresAmount")/GetGVarInt("PaydaysToPDSpecialEmpty");
	//SendFormat(0, -1, "%d %d %d", minus_weapons, minus_skins, minus_special);
	if(FactionInfo[factionid][fWares][0] > 0)
	{
		if(FactionInfo[factionid][fWares][0] <= minus_weapons)
		{
			// ka tik baigesi ginklai
			FactionInfo[factionid][fWares][0] = 0;
			SendFactionMessage(FactionInfo[factionid][fId], 0x229CE3FF, true, "SANDËLYS: {55B1E7}Ginklø ir amunicijos atsargos baigësi.");
		}
		else FactionInfo[factionid][fWares][0] -= minus_weapons;
	}
	if(FactionInfo[factionid][fWares][1] > 0)
	{
		if(FactionInfo[factionid][fWares][1] <= minus_skins)
		{
			// ka tik baigesi ginklai
			FactionInfo[factionid][fWares][1] = 0;
			SendFactionMessage(FactionInfo[factionid][fId], 0x229CE3FF, true, "SANDËLYS: {55B1E7}Uniformø, aprangos ir spec. inventoriaus atsargos baigësi.");
		}
		else FactionInfo[factionid][fWares][1] -= minus_skins;
	}
	if(FactionInfo[factionid][fWares][2] > 0)
	{
		if(FactionInfo[factionid][fWares][2] <= minus_special)
		{
			// ka tik baigesi ginklai
			FactionInfo[factionid][fWares][2] = 0;
			SendFactionMessage(FactionInfo[factionid][fId], 0x229CE3FF, true, "SANDËLYS: {55B1E7}Specialiøjø operacijø ir kitos árangos atsargos baigësi.");
		}
		else FactionInfo[factionid][fWares][2] -= minus_special;
	}
	return 1;
}

stock LoadGroups()
{
	mysql_tquery(chandler, "SELECT * FROM `groups_data`", "GroupsLoad");
	return 1;
}

forward GroupsLoad();
public GroupsLoad()
{
	new rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		if(i >= MAX_ADMIN_GROUPS-1) { break; }
		cache_get_value_name_int(i, "id", GroupsInfo[i][groupId]);
		cache_get_value_name(i, "Name", GroupsInfo[i][groupName], 30);
		Iter_Add(AdminGroup, i);
	}
	printf("[load] %d grupiu", rows);
	return 1;
}

thread(DropDeletedAuto);


public OnPlayerDisconnect(playerid, reason)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] OnPlayerDisconnect(%s,%d,%d)", GetPlayerNameEx(playerid), reason, PlayerInfo[playerid][pConnection]);
	#endif
	if(IsPlayerNPC(playerid)) return 1;
	gConnectedPlayers--;
	foreach(new otherid : Player)
	{
		if(MuteListPM[otherid][playerid] != 0) MuteListPM[otherid][playerid] = 0;
	}
	if(PlayerInfo[playerid][pConnection] == CONNECTION_STATE_LOGGED)
	{
		call OnPlayerDespawnChar(playerid, reason, 0);
	}
    for(new i; i < 256; i++)
    {
    	PlayerTextDrawDestroy(playerid, PlayerText:i);
    }
	return 1;
}

hook OnPlayerDespawnChar(playerid, reason, changechar)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("OnPlayerDespawnChar(%s, %d, %d)", GetPlayerNameEx(playerid), reason, changechar);
	#endif

	if(changechar > 0)
	{
		new index = changechar - 1,
			id = player_CharArray[playerid][index][0];

		if(FindPlayerBySql(id) != INVALID_PLAYER_ID)
		{
			CharListTD_ShowMessage(playerid, "~w~Sis veikejas jau yra ~r~zaidime~w~!");
			return 1;
		}
	}

	new string[126];
	if(reason != 2)
	{
		format(string, sizeof string, "%s atsijungë (%s).", GetPlayerNameEx(playerid), changechar >= 1 ? ("pakeitë veikëjà") : (reason == 0 ? ("klaida") : ("atsijungë")));
		ProxDetector(8.0, playerid, string, 0xD4D4D4FF, 0xD4D4D4FF, 0xD4D4D4FF, 0xD4D4D4FF, 0xD4D4D4FF);
	}
	new call_receiver;
	if((call_receiver = PhoneInfo[playerid][phoneTalkingTo]) != INVALID_PLAYER_ID)
	{
		if(IsPlayerConnected(call_receiver))
		{
			if(IsPlayerConnected(call_receiver)) SendFormat(call_receiver, 0xE77B33FF, "Ryðys nutrûko!");

			PhoneInfo[call_receiver][phoneTalkingTo] = INVALID_PLAYER_ID;
			PhoneInfo[call_receiver][phoneCallOwner] =
			PhoneInfo[call_receiver][phoneEstimated] = 0;

			if(GetESCType(call_receiver) == ESC_TYPE_PHONE)
			{
				PhoneTD_Hide(call_receiver, PHONE_PAGE_CALL);
				PhoneTD_Show(call_receiver, PHONE_PAGE_MAIN);
			}
			else PhoneTD_Hide(call_receiver);
		
			// PhoneInfo[call_receiver][phoneTalkingTo] =
			// PhoneInfo[call_receiver][phoneRinging] = INVALID_PLAYER_ID;
			// PhoneInfo[call_receiver][phoneEstimated] =
			// PhoneInfo[call_receiver][phoneRingingTime] = 0;
		}
	}
	if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peMaskLabel])) DestroyDynamic3DTextLabel(PlayerExtra[playerid][peMaskLabel]);
	//if(IsValidObject(PlayerExtra[playerid][peDutyObject])) DestroyObject(PlayerExtra[playerid][peDutyObject]);
	if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peDutyLabel])) DestroyDynamic3DTextLabel(PlayerExtra[playerid][peDutyLabel]);
	if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][pePoliceBadgeText])) DestroyDynamic3DTextLabel(PlayerExtra[playerid][pePoliceBadgeText]);
	if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peDeathLabel])) DestroyDynamic3DTextLabel(PlayerExtra[playerid][peDeathLabel]);

	PlayerExtra[playerid][peMaskLabel] = 
	PlayerExtra[playerid][peDutyLabel] = 
	PlayerExtra[playerid][pePoliceBadgeText] = 
	PlayerExtra[playerid][peDeathLabel] = INVALID_3DTEXT_ID;

	PlayerExtra[playerid][peAcceptedBk] = INVALID_PLAYER_ID;

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	
	KillTimer(PlayerInfo[playerid][pJobTimer]);
	KillTimer(PlayerExtra[playerid][peFillTimer]);
	DisconnectPlayer(playerid);
	SaveAccount(playerid, true);
	SavePlayerHoldingWeapons(playerid);
	SetPlayerName(playerid, GetUserNameById(PlayerInfo[playerid][pUserId]));
	ResetData(playerid, changechar >= 1 ? false : true, changechar >= 1 ? false : true);

	if(player_NewCharDetails[playerid] > 0)
	{
		inline updateReviewedStatus() return 1;
		mysql_tquery_inline(chandler, using inline updateReviewedStatus, "\
			UPDATE `players_new` SET Reviewed = '0' WHERE Reviewed = '%d'", PlayerInfo[playerid][pUserId]
		);
	}

	if(changechar > 0)
	{
		call OnPlayerSpawnChar(playerid, changechar - 1);
	}
	return 1;
}


public OnVehicleSpawn(vehicleid)
{
	new model = GetVehicleModel(vehicleid);

	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] OnVehicleSpawn(%d, model: %d)", vehicleid, model);
	#endif

	if(VehicleInfo[vehicleid][vOwner] <= 0)
	{
		new col1, col2;
		GetVehicleColor(vehicleid, col1, col2);
		ChangeVehicleColor(vehicleid, col1, col2);
	}
	if(IsVehicleServer(vehicleid))
	{
		Vehicle_ResetTrunkWeapons(vehicleid);
		PutFactionWeaponsInVehicle(vehicleid);
		Vehicle_SetServerNumberPlate(vehicleid);

		VehicleInfo[vehicleid][vFuel] = VehicleFuelCapacityList[model-400];

		IsValidDynamic3DTextLabel(VehicleInfo[vehicleid][vUnitLabel]) && DestroyDynamic3DTextLabel(VehicleInfo[vehicleid][vUnitLabel]);
		VehicleInfo[vehicleid][vUnitLabel] = INVALID_3DTEXT_ID;
		if(strlen(VehicleInfo[vehicleid][vUnitText]))
		{
			new Float:x,
				Float:z,
				Float:y;
			GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, x, y, z);

			VehicleInfo[vehicleid][vUnitLabel] = CreateDynamic3DTextLabel(
				VehicleInfo[vehicleid][vUnitText],
				0xFFFFFFFF,
				0.425*x,
				-0.45*y,
				-0.1*z,
				15.0,
				INVALID_PLAYER_ID,
				vehicleid, 
				1
			);
		}
	}
	RentedBy[vehicleid] = INVALID_PLAYER_ID;
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] OnVehicleDeath(%d,%s)", vehicleid, (killerid == INVALID_PLAYER_ID ? ("unknown") : (GetPlayerNameEx(killerid))));
	#endif
	if(VehicleInfo[vehicleid][vOwner] > 0)
	{
		if(IsPlayerConnected(killerid))
		{
			new string[256];
			format(string, sizeof string, "[Áspëjimas] %s sunaikino tr. priemonæ %s(%s)", GetPlayerNameEx(killerid), GetModelName(GetVehicleModel(vehicleid)), VehicleInfo[vehicleid][vNumbers]);
			SendAdminMessage(0xFA7575FF, false, string);
		}
		log_init(true);
		log_set_table("logs_vehicles");
		log_set_keys("`PlayerId`,`PlayerName`,`VehicleId`,`VehicleName`,`ActionText`,`Insurance`");
		log_set_values("'%d','%e','%d','%s','Susprogdino tr. priemone','%d'", LogPlayerId(killerid), LogPlayerName(killerid), VehicleInfo[vehicleid][vId], GetModelName(GetVehicleModel(vehicleid)), VehicleInfo[vehicleid][vInsurance]);
		log_commit();
		new owner;
		if((owner = FindPlayerBySql(VehicleInfo[vehicleid][vOwner])) != INVALID_PLAYER_ID)
		{
			PlayerInfo[owner][pCarsSpawned]--;
			new numbers[56];
			if(strlen(VehicleInfo[vehicleid][vNumbers])) format(numbers, sizeof numbers, VehicleInfo[vehicleid][vNumbers]);
			else numbers = "neregistruota";
			SendFormat(owner, 0xBABABAFF, "Jûsø tr. priemonë {FFFFFF}%s{BABABA}(%s) buvo sunaikinta.", GetModelName(GetVehicleModel(vehicleid)), numbers);
		}
		VehicleInfo[vehicleid][vInsurance]--;
		if(VehicleInfo[vehicleid][vInsurance] < 0)
		{
			new string[118];
			mysql_format(chandler, string, sizeof string, "DELETE FROM vehicles_data WHERE id = '%d'", VehicleInfo[vehicleid][vId]);
			mysql_fquery(chandler, string, "VehicleDeletedEx");
			if(owner != INVALID_PLAYER_ID)
			{
				SendFormat(owner, 0xBABABAFF, "Kadangi transporto priemonë neturëjo draudimo, ji sunaikinta negráþtamai.");
				PlayerInfo[owner][pHaveCars] -- ;
			}
			else
			{
				format(string, sizeof string, "Jûsø tr. priemonë %s (numeriai: %s) buvo sunaikinta negráþtamai.", GetModelName(GetVehicleModel(vehicleid)), VehicleInfo[vehicleid][vNumbers]);
				AddPlayerLoginNote(VehicleInfo[vehicleid][vOwner], -1, string);
			}
		}
		else
		{
			SaveVehicleIntEx(vehicleid, "Insurance", VehicleInfo[vehicleid][vInsurance]);
			SaveVehicleIntEx(vehicleid, "SpawnedId", 0);
			SaveVehicleFloatEx(vehicleid, "KM", VehicleInfo[vehicleid][vKM]);
			// engine ir battery works
			new random_battery_percent = randomEx(2, 10);
			VehicleInfo[vehicleid][vBatteryStatus] -= (VehicleInfo[vehicleid][vBatteryStatus] >= float(random_battery_percent) ? float(random_battery_percent) : 0.0);
			VehicleInfo[vehicleid][vEngineStatus] -= (VehicleInfo[vehicleid][vEngineStatus] >= 25.0 ? 25.0 : VehicleInfo[vehicleid][vEngineStatus]);
			if((VehicleInfo[vehicleid][vEngineStatus] <= 0.0 || VehicleInfo[vehicleid][vBatteryStatus] <= 0.0) && owner != INVALID_PLAYER_ID)
			{
				SendFormat(owner, 0xC87373FF, "Jûsø tr. priemonës variklis arba akumuliatorius buvo nepataisomai sugadintas.");
				SendFormat(owner, 0xC87373FF, "Keitimo darbus gali atlikti mechanikai.");
			}
			SaveVehicleFloatEx(vehicleid, "EngineStatus", VehicleInfo[vehicleid][vEngineStatus]);
			SaveVehicleFloatEx(vehicleid, "BatteryStatus", VehicleInfo[vehicleid][vBatteryStatus]);
			if(VehicleInfo[vehicleid][vInsurance] == 0)
			{
				// buvo 1 lygis, dabar 0
				// remove tuning
				new componentid,
					component_string[24];
				for(new i; i < 14; i++)
				{
					if((componentid = GetVehicleComponentInSlot(vehicleid, i)) != 0) RemoveVehicleComponent(vehicleid, componentid);
					format(component_string, sizeof component_string, "Component%d", i);
					SaveVehicleIntEx(vehicleid, component_string, 0);
				}
			}
			else if(VehicleInfo[vehicleid][vInsurance] == 1)
			{
				// paliekam tuning
				// buvo 2 lygis paliekam tuning
			}
			else if(VehicleInfo[vehicleid][vInsurance] == 2)
			{
				// paliekam engine tuning
			}
		}
		NullVehicle(vehicleid);
		DestroyVehicle(vehicleid);
	}
	else
	{
		new __reset_Trunk[E_FACTION_TRUNK_WEAPONS_DATA];
		for(new i = 0; i < MAX_VEHICLE_WEAPON_SLOTS; i++) VehicleWeaponsInventory[vehicleid][i] = __reset_Trunk;
		
		if(VehicleInfo[vehicleid][vFaction] == -2)
		{
			new 	
				by = RentedBy[vehicleid];
			if(IsPlayerConnected(by))
			{
				SendFormat(by, 0x80DFABFF, "Jûsø nuomos tr. priemonë buvo susprogdinta. Gavote $500 baudà.");
				GivePlayerMoney(by, -500);
				Rent_Cancel(by);
			}
		}
		RentedBy[vehicleid] = INVALID_PLAYER_ID;
		for(new i = 0; i < 4; i++)
		{
			if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][i])) DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][i]);//, "vehicle", "death");
			VehicleInfo[vehicleid][vObjects][i] = INVALID_OBJECT_ID;
		}
		SaveServerVehicleFloatEx(vehicleid, "KM", VehicleInfo[vehicleid][vKM]);

		SetVehicleToRespawn(vehicleid);
	}
	if(IsVehicleServer(vehicleid))
	{
		foreach(new receiverid : Player)
		{
			if(PlayerInfo[receiverid][pJobVehicle] == vehicleid)
			{
				if(PlayerInfo[receiverid][pJobDuty] > 0)
				{
					SetPlayerSpecialAction(receiverid, SPECIAL_ACTION_NONE);
					PlayerInfo[receiverid][pJobCurrentAction] =
					PlayerInfo[receiverid][pJobDestination] =
					PlayerInfo[receiverid][pJobCurrentType] =
					PlayerInfo[receiverid][pJobDuty] =
					PlayerInfo[receiverid][pJobActionTime] =
					PlayerInfo[receiverid][pJobActionIndex] = 0;
					JobGUI_Hide(receiverid);
					KillTimer(PlayerInfo[receiverid][pJobTimer]);
					if(InArray(Checkpoint[receiverid],
						CHECKPOINT_TYPE_JOB,
						CHECKPOINT_TYPE_TAKE_REPAIR,
						CHECKPOINT_TYPE_TAKE_REPAINT,
						CHECKPOINT_TYPE_TAKE_WHEELS,
						CHECKPOINT_TYPE_FARMER_TAKE_BAG,
						CHECKPOINT_TYPE_FARMER_PUT_BAG,
						CHECKPOINT_TYPE_FARMER_SPOT,
						CHECKPOINT_TYPE_CARGO_CRATES_TAKE,
						CHECKPOINT_TYPE_CARGO_UNLOAD,
						CHECKPOINT_TYPE_CARGO_LOAD,
						CHECKPOINT_TYPE_CARGO_CRATES_TAKE,
						CHECKPOINT_TYPE_CARGO_CRATES_PUT)) DisablePlayerCheckpointEx(receiverid);
				}
				PlayerInfo[receiverid][pJobVehicle] = INVALID_VEHICLE_ID;
			}
		}
	}
	VehicleRadio[vehicleid][vehicleRadioPlay] = 0;
	return 1;
}

stock AddPlayerLoginNote(playerid, who, string[])
{
	new query[256];
	mysql_format(chandler, query, sizeof query, "INSERT INTO `players_login_notes` (`PlayerId`,`Added`,`DidRead`,`String`) VALUES ('%d','%d','0','%s')", playerid, who, string);
	mysql_tquery(chandler, query, "LoginNoteAdd");
	return 1;
}

thread(LoginNoteAdd);
thread(VehicleDeletedEx);

public OnPlayerStreamIn(playerid, forplayerid)
{
	ShowPlayerNameTagForPlayer(forplayerid, playerid, PlayerExtra[playerid][peMask] > 0 ? false : true);
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	SetVehicleParamsForPlayer(vehicleid, forplayerid, 0, VehicleInfo[vehicleid][vLocked]);
	return 1;
}

stock Rent_Cancel(playerid)
{
	new 
		vehicleid = RentedVeh[playerid];
	if(IsValidVehicle(vehicleid))
	{
		SetVehicleToRespawn(vehicleid);
		RentedBy[vehicleid] = INVALID_PLAYER_ID;
	}
	RentTimeUnused[playerid] = 0;
	RentedVeh[playerid] = INVALID_VEHICLE_ID;
	return 1;
}

stock GetTickDiff(newtick, oldtick)
{
	if (oldtick < 0 && newtick >= 0) {
		return newtick - oldtick;
	} else if (oldtick >= 0 && newtick < 0 || oldtick > newtick) {
		return (cellmax - oldtick + 1) - (cellmin - newtick);
	}
	return newtick - oldtick;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	/* Anticheat */
	/*if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_DRIVER)
	{
		return KickPlayer(playerid, "Sistema", "State Change Hack");
	}*/
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		// if(ac__EnteringVehicle[playerid] == INVALID_VEHICLE_ID || ac__EnteringVehicle[playerid] != GetPlayerVehicleID(playerid))
		// {
		// 	return KickPlayer(playerid, "Sistema", "Warp into car");
		// }
		// ac__EnteringVehicle[playerid] = INVALID_VEHICLE_ID;
		// if(GetTickDiff(GetTickCount(), ac__last_Into[playerid]) < 1000)
		// {
		// 	ac__last_Count[playerid] ++;
		// 	if(ac__last_Count[playerid] >= 3)
		// 	{
		// 		return BanPlayer(playerid, "Sistema", "Carspam");
		// 	}
		// }
		// ac__last_Into[playerid] = GetTickCount();

		new 
			model = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(IsModelPlane(model))
		{
			GivePlayerWeapon(playerid, WEAPON_PARACHUTE, 1, WEAPON_GIVE_TYPE_NO_INVENTORY, 0);
		}
	}

	/* Gamemode */
	if(newstate == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		
		if(PlayerExtra[playerid][peDeath] > 0)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z+0.1);
			return 0;
		}
		OldVehicle[playerid] = vehicleid;
		if(VehicleInfo[vehicleid][vFaction] == -2)
		{
			// Nuomos
			if(RentedBy[vehicleid] == playerid)
			{
				SendFormat(playerid, 0xBABABAFF, "Nuoma pratæsta.");
				RentTimeUnused[playerid] = 0;
			}
			else if(RentedBy[vehicleid] == INVALID_PLAYER_ID)
			{
				Rent_ShowConfirmDialog(playerid);
			}
		}
		if(VehicleInfo[vehicleid][vFaction] == -1)
		{
			// DVM masina
			if(PlayerInfo[playerid][pAdminDuty] <= 0)
			{
				if(IsModelBoat(GetVehicleModel(vehicleid)))
				{
					if(PlayerInfo[playerid][pBoatLic] == 0)
					{
						DMV_Show(playerid, GetVehicleModel(vehicleid), "VALTIES", "LD_DRV:brboat");
						tmpType_Salon[playerid] = 3;
					}
				}
				else if(IsModelPlane(GetVehicleModel(vehicleid)))
				{
					if(PlayerInfo[playerid][pFlyLic] == 0)
					{
						DMV_Show(playerid, GetVehicleModel(vehicleid), "SKRAIDYMO", "LD_DRV:brfly");
						tmpType_Salon[playerid] = 4;
					}
				}
				else if(IsModelBike(GetVehicleModel(vehicleid)))
				{
					if(PlayerInfo[playerid][pMotoLic] == 0)
					{
						DMV_Show(playerid, GetVehicleModel(vehicleid), "MOTOCIKLO", "LD_DRV:bronze");
						tmpType_Salon[playerid] = 2;
					}
				}
				else
				{
					if(PlayerInfo[playerid][pCarLic] == 0)
					{
						DMV_Show(playerid, GetVehicleModel(vehicleid), "VAIRAVIMO", "LD_DRV:bronze");
						tmpType_Salon[playerid] = 1;
					}
				}
			}
		}
		if(VehicleHaveEngine(GetVehicleModel(vehicleid)))
		{
			new string[26];
			format(string, sizeof string, "RIDA: %0.1fKM", VehicleInfo[vehicleid][vKM]);
			Speedo_Update(playerid, .km_string = string, .fuel_level = "DEGALAI:");
			Speedo_Show(playerid);

			if(VehicleInfo[vehicleid][vJob] == JOB_FARMER && PlayerInfo[playerid][pJob] == JOB_FARMER && PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_TAKE_COMBAIN)
			{
				PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_COLLECT_COMBAIN;
				PlayerInfo[playerid][pJobActionTime] = 30;
				PlayerInfo[playerid][pJobVehicle] = vehicleid;
				new index = random(sizeof FarmerSpots);
				PlayerInfo[playerid][pJobDestination] = index;
				SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_FARMER_SPOT, FarmerSpots[index][0], FarmerSpots[index][1], FarmerSpots[index][2], 2.3);
				SendFormat(playerid, 0xACE656FF, "Vaþiuokite á paþymëtus taðkus þemëlapyje.");
			}
		}
		else
		{
			SetEngineParams(vehicleid, 1);
		}
		if(HaveVehicleKey(playerid, vehicleid, .check_only_owner = false, .canbejob = false))
		{
			if(VehicleInfo[vehicleid][vTicket] > 0)
			{
				SendFormat(playerid, 0xECE168FF, " _________________________________________________");
				SendFormat(playerid, 0xECE168FF, "|");
				SendFormat(playerid, 0xECE168FF, "| Ðiai tr. priemonei iðraðytas baudos kvitas: $%d", VehicleInfo[vehicleid][vTicket]);
				SendFormat(playerid, 0xECE168FF, "| Sumokëti turite paraðæ /payticket");
				SendFormat(playerid, 0xECE168FF, "|_________________________________________________");
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(VehicleRadio[vehicleid][vehicleRadioPlay] > 0)
		{
			SetPlayerRadio(playerid, VehicleRadio[vehicleid][vehicleRadioLink]);
		}
	}
	if( (oldstate == PLAYER_STATE_DRIVER && newstate != PLAYER_STATE_PASSENGER) || 
		(oldstate == PLAYER_STATE_PASSENGER && newstate != PLAYER_STATE_DRIVER))
	{
		// islipo is masinos zodziu
		if(VehicleRadio[GetPlayerVehicleID(playerid)][vehicleRadioPlay] <= 0)
		{
			StopPlayerRadio(playerid);
		}
	}
	if(oldstate == PLAYER_STATE_DRIVER && newstate != PLAYER_STATE_DRIVER)
	{
		//OldVehicle[playerid] = INVALID_VEHICLE_ID;

		Speedo_Hide(playerid);
		if(RentedVeh[playerid] != INVALID_VEHICLE_ID && OldVehicle[playerid] == RentedVeh[playerid])
		{
			RentTimeUnused[playerid] = 10;
		}
		if(PlayerExtra[playerid][peBelt] > 0)
		{
			rp_me(playerid, _, "atsisega saugos dirþus.");
			PlayerExtra[playerid][peBelt] = 0;
		}
		if(PlayerInfo[playerid][pJobDuty] > 0)
		{
			switch(PlayerInfo[playerid][pJob])
			{
				case JOB_TRUCKER:
				{
					if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_CARGO_LEAVE_CAR)
					{
						new vehicleid = PlayerInfo[playerid][pJobVehicle],
							Float:carX,
							Float:carY,
							Float:carZ,
							Float:unloadX,
							Float:unloadY,
							Float:unloadZ;
						if(IsValidVehicle(vehicleid) && VehicleInfo[vehicleid][vJob] == PlayerInfo[playerid][pJob])
						{
							switch(PlayerInfo[playerid][pJobCurrentType])
							{
								case 1:
								{
									new businessid = PlayerInfo[playerid][pJobDestination];
									unloadX = BusinessInfo[businessid][bWaresX],
									unloadY = BusinessInfo[businessid][bWaresY],
									unloadZ = BusinessInfo[businessid][bWaresZ];
								}
								case 2:
								{
									new cargo = PlayerInfo[playerid][pJobDestination];
									unloadX = CargoList[cargo][cargoUnloadX],
									unloadY = CargoList[cargo][cargoUnloadY],
									unloadZ = CargoList[cargo][cargoUnloadZ];
								}
							}
							if(!IsVehicleInRangeOfPoint(vehicleid, 5.0, unloadX, unloadY, unloadZ))
							{
								SendFormat(playerid, 0xE98161FF, "Jûsø tr. priemonë per daug nutolusi nuo reikiamo taðko. Perstatykite jà.");
								PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_UNLOAD_CARGO;
								SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_CARGO_UNLOAD, unloadX, unloadY, unloadZ);
								return 1;
							}
							else
							{
								// uz masinos nustatom
								GetPosBehindVehicle(vehicleid, carX, carY, carZ, 1.0); // masinos galas
								SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_CARGO_CRATES_TAKE, carX, carY, carZ, 2.3);
								UpdateWaresOrderStatus(BusinessInfo[PlayerInfo[playerid][pJobDestination]][bId], 4);
								PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_CARGO_CRATES_TAKE;
								PlayerInfo[playerid][pJobActionIndex] = 1;
							}
						}
						else
						{
							// cancel job, masina sunaikinta
						}
					}
				}
			}
		}
	}
	return 1;
}

stock Rent_ShowConfirmDialog(playerid)
{
	dialog_Clear();
	dialog_AddLine("{BABABA}Ði tr. priemonë yra nuomos.");
	dialog_AddLine("Ar norite jà iðsinuomoti uþ "#DEFAULT_CAR_RENT_PRICE"/min?");
	dialog_AddLine("Nuomà nutraukti galësite su /cancelvehiclerent");
	
	inline rentDg(response, listitem)
	{
		if(response)
		{
			new 
				vehicleid = GetPlayerVehicleID(playerid);
			if(RentedVeh[playerid] != INVALID_VEHICLE_ID)
			{
				SendWarning(playerid, "Jûs jau nuomuojatës automobilá. Naudokite /cancelvehiclerent");
				RemovePlayerFromVehicle(playerid);
				return 1;
			}		
			else
			{
				RentedVeh[playerid] = vehicleid;
				RentedBy[vehicleid] = playerid;

				SendFormat(playerid, 0xBABABAFF, "Iðsinuomavote automobilá. Tai jums kainuos $25/min");
				SendFormat(playerid, 0xFFFFFFFF, "Norëdami atðaukti nuomà, naudokite /cancelvehiclerent");
				SendFormat(playerid, 0xBABABAFF, "Susprogdinus nuomos automobilá, gausite $500 baudà!");
			}
		}
		else RemovePlayerFromVehicle(playerid);
	}
	dialog_Show(playerid, using inline rentDg, DIALOG_STYLE_MSGBOX, "Nuoma", "Taip", "Ne");
	return 1;
}

CMD:cancelvehiclerent(playerid, params[])
{
	if(RentedVeh[playerid] != INVALID_VEHICLE_ID)
	{
		Rent_Cancel(playerid);
		SendFormat(playerid, 0xb0df67ff, "Sëkmingai nutraukëte nuomos sutartá.");
	}
	else SendError(playerid, "Nesate iðsinuomavæ automobilio.");
	return 1;
}

stock JobGUI_Update(playerid, toptext[] = "", bottext[] = "")
{
	if(strlen(toptext) >= 1) PlayerTextDrawSetString(playerid, JobGuiTD_TopText[playerid], toptext);
	if(strlen(bottext) >= 1) PlayerTextDrawSetString(playerid, JobGuiTD_BotText[playerid], bottext);
	if(!ShowingJobGUI{playerid})
	{
		JobGUI_Show(playerid);
	}
	return 1;
}

stock SpamBarTD_Update(playerid, value = -1)
{
	if(value != -1)
	{
		new string[6];
		format(string, sizeof string, "%d%%", value);
		PlayerTextDrawSetString(playerid, SpamBarTD_Value[playerid], string);
		PlayerTextDrawHide(playerid, SpamBarTD_Load[playerid]);
		PlayerTextDrawTextSize(playerid, SpamBarTD_Load[playerid], value*3, 14.000000);
		PlayerTextDrawShow(playerid, SpamBarTD_Load[playerid]);
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(IsModelPlane(GetVehicleModel(vehicleid)))
    {
		new
			weapons[13][4];
		for(new i = 0; i < 13; i++)
		{
			GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
			GetPlayerWeaponExtraData(playerid, i, weapons[i][2], weapons[i][3]);
		}
		ResetPlayerWeapons(playerid);
		for(new i = 0; i < 13; i++)
		{
			if(weapons[i][0] != 46)
			{
				GivePlayerWeapon(playerid, weapons[i][0], weapons[i][1], weapons[i][2], weapons[i][3]);
			}
		}
    }
    if(IsVehicleServer(vehicleid))
    {
    	if(PlayerInfo[playerid][pJob] == VehicleInfo[vehicleid][vJob] && PlayerInfo[playerid][pJobVehicle] == vehicleid)
    	{
    		if( (
					PlayerInfo[playerid][pJob] == JOB_TRUCKER && 
					!InArray(PlayerInfo[playerid][pJobCurrentAction], 
							JOB_ACTION_UNLOAD_CARGO,
							JOB_ACTION_LOAD_CARGO, 
							JOB_ACTION_CARGO_CRATES_TAKE,
							JOB_ACTION_CARGO_CRATES_TAKE,
							JOB_ACTION_CARGO_LEAVE_CAR)
				) 
				||
    			(
					PlayerInfo[playerid][pJob] == JOB_FARMER && 
					!InArray(PlayerInfo[playerid][pJobCurrentAction], 
							JOB_ACTION_COLLECT_COMBAIN)
				)
			)
    		{
	    		PlayerInfo[playerid][pJobVehicle] = INVALID_VEHICLE_ID;
	    	}
    	}
    }
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	KickPlayer(playerid, "Sistema", "Tr. priemonës tuningavimas");
	SetVehicleToRespawn(vehicleid);
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	// ac__EnteringVehicle[playerid] = vehicleid;
	if(VehicleInfo[vehicleid][vLocked] || PlayerExtra[playerid][peDeath] > 0)
	{
		CancelVehicleEnter(playerid);
		return 1;
		// ac__EnteringVehicle[playerid] = INVALID_VEHICLE_ID;
	}
	if(!ispassenger)
	{
		if(HaveAdminPermission(playerid, "EnterAnyVehicle") && PlayerInfo[playerid][pAdminDuty] == 1) return 1;
		new
			Float:x, Float:y, Float:z,
			model = GetVehicleModel(vehicleid);
		if(PlayerExtra[playerid][peCuffed] >= 1 || PlayerExtra[playerid][peDeath] > 0)
		{
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z+0.5);
			// ac__EnteringVehicle[playerid] = INVALID_VEHICLE_ID;
			return 1;
		}
		if(VehicleInfo[vehicleid][vFaction] == -1)
		{
			if( (IsModelBike(model) && PlayerInfo[playerid][pMotoLic] >= 1) ||
				(IsModelBoat(model) && PlayerInfo[playerid][pBoatLic] >= 1) ||
				(IsModelPlane(model) && PlayerInfo[playerid][pFlyLic] >= 1))
			{
				GetPlayerPos(playerid, x, y, z);
				SetPlayerPos(playerid, x, y, z+0.5);
				// ac__EnteringVehicle[playerid] = INVALID_VEHICLE_ID;
			}
			else if(PlayerInfo[playerid][pCarLic] >= 1 && !IsModelBoat(model) && !IsModelBike(model) && !IsModelPlane(model))
			{
				GetPlayerPos(playerid, x, y, z);
				SetPlayerPos(playerid, x, y, z+0.5);
				// ac__EnteringVehicle[playerid] = INVALID_VEHICLE_ID;
			}
			return 1;
		}
		if(!InArray(VehicleInfo[vehicleid][vFaction], 0, -1, -2))
		{
			if( (PlayerInfo[playerid][pFaction] != VehicleInfo[vehicleid][vFaction]) || 
				(VehicleInfo[vehicleid][vRequiredLevel] > PlayerInfo[playerid][pJobLevel]))
			{
				GetPlayerPos(playerid, x, y, z);
				SetPlayerPos(playerid, x, y, z+0.5);
				// ac__EnteringVehicle[playerid] = INVALID_VEHICLE_ID;
				return 1;
			}
		}
		if(VehicleInfo[vehicleid][vJob] != 0)
		{
			if(PlayerInfo[playerid][pJob] != VehicleInfo[vehicleid][vJob] || VehicleInfo[vehicleid][vRequiredLevel] > PlayerInfo[playerid][pJobLevel])
			{
				GetPlayerPos(playerid, x, y, z);
				SetPlayerPos(playerid, x, y, z+0.5);
				// ac__EnteringVehicle[playerid] = INVALID_VEHICLE_ID;
				return 1;
			}
		}
	}
	return 1;
}

public OnPlayerSprayAtVehicle(playerid, vehicleid)
{
	if(PlayerInfo[playerid][pJob] == JOB_MECHANIC && PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_REPAINT_VEHICLE)
	{
		new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
		if(vehicleid == jobvehicleid)
		{
			PlayerInfo[playerid][pJobActionIndex] += 5;
			new string[86];
			format(string, sizeof string, "~w~DAZYMAS: ~r~%d/100", PlayerInfo[playerid][pJobActionIndex]/10);
			GameTextForPlayer(playerid, string, 600, 3);
			if(PlayerInfo[playerid][pJobActionIndex] >= 1000)
			{
				ChangeVehicleColor(jobvehicleid, PlayerInfo[playerid][pJobCurrentType], PlayerInfo[playerid][pJobDestination]);
				SaveVehicleIntEx(vehicleid, "Color1", PlayerInfo[playerid][pJobCurrentType]);
				SaveVehicleIntEx(vehicleid, "Color2", PlayerInfo[playerid][pJobDestination]);
				SendFormat(playerid, 0x9BC154FF, "Sëkmingai perdaþëte tr. priemonæ.");
				ResetPlayerJobTask(playerid, true);
				log_init(true);
				log_set_table("logs_jobs");
				log_set_keys("`PlayerId`,`PlayerName`,`JobName`,`ExtraId`,`ActionText`,`Amount`");
				log_set_values("'%d','%e','Mechanikas','%d','Perdaze tr. priemone','%d'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[jobvehicleid][vId], PlayerInfo[playerid][pJobCurrentType]);
				log_commit();
				return 1;
			}
		}
	}
	return 1;
}

stock OnTruckerCancelWares(playerid, businessid)
{
	#pragma unused playerid
	UpdateWaresOrderStatus(BusinessInfo[businessid][bId], 1);
	return 1;
}

forward CratesLoading(playerid, vehicleid);
public CratesLoading(playerid, vehicleid)
{
	new model = GetVehicleModel(vehicleid),
		Float:unloadX,
		Float:unloadY,
		Float:unloadZ;
	if(!IsPlayerInAnyVehicle(playerid))
	{
		OnTruckerCancelWares(playerid, PlayerInfo[playerid][pJobDestination]);
		return 0;
	}
	if(model == 422 || model == 600 || model == 543)
	{
		// if bobcat
		for(new i = 0; i < 4; i++)
		{
			if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][i])) DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][i]);//, "vehicle", "job(CratesLoading)");
			VehicleInfo[vehicleid][vObjects][i] = CreateDynamicObject(2912, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000);//, .called = "vehicle", .extra = "job(CratesLoading)");
		}
		AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][0], vehicleid, -0.4, -0.9, -0.2, 0.000000, 0.000000, 0.000000);
		AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][1], vehicleid, 0.4, -0.9, -0.2, 0.000000, 0.000000, 0.000000);
		AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][2], vehicleid, -0.4, -1.8, -0.2, 0.000000, 0.000000, 0.000000);
		AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][3], vehicleid, 0.4, -1.8, -0.2, 0.000000, 0.000000, 0.000000);
	}
	GameTextForPlayer(playerid, "~g~NUVEZKITE~w~ KROVINI", 3000, 5);

	switch(PlayerInfo[playerid][pJobCurrentType])
	{
		case 1:
		{
			// verslui
			new businessid = PlayerInfo[playerid][pJobDestination];
			unloadX = BusinessInfo[businessid][bWaresX],
			unloadY = BusinessInfo[businessid][bWaresY],
			unloadZ = BusinessInfo[businessid][bWaresZ];
			UpdateWaresOrderStatus(BusinessInfo[PlayerInfo[playerid][pJobDestination]][bId], 3);
		}
		case 2:
		{
			// random
			new cargo = PlayerInfo[playerid][pJobDestination];
			unloadX = CargoList[cargo][cargoUnloadX],
			unloadY = CargoList[cargo][cargoUnloadY],
			unloadZ = CargoList[cargo][cargoUnloadZ];
		}
	}
	PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_UNLOAD_CARGO;
	SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_CARGO_UNLOAD, unloadX, unloadY, unloadZ, 2.3);
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] OnPlayerEnterCheckpoint(%s, %d)", GetPlayerNameEx(playerid), Checkpoint[playerid]);
	#endif
	switch(Checkpoint[playerid])
	{
		case CHECKPOINT_TYPE_PD_REQUESTEDBK:
		{
			PlayerExtra[playerid][peAcceptedBk] = INVALID_PLAYER_ID;
			DisablePlayerCheckpointEx(playerid);
		}
		case CHECKPOINT_TYPE_TAKE_DRUG_ORDER:
		{
			if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
			if(SendDrugsOrderTo(playerid, INVENTORY_TYPE_VEHICLE, GetPlayerVehicleID(playerid)))
			{
				SendFormat(playerid, 0xD4E980FF, "Siunta pakrauta á tr. priemonæ.");
			}
			else SendError(playerid, "Bagaþinëje tiek narkotikø netelpa arba atsirado kita klaida.");
			DisablePlayerCheckpointEx(playerid);
		}
		case CHECKPOINT_TYPE_TAKE_GUN_ORDER:
		{
			if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
			if(SendWeaponsOrderTo(playerid, INVENTORY_TYPE_VEHICLE, GetPlayerVehicleID(playerid)))
			{
				SendFormat(playerid, 0xD4E980FF, "Siunta pakrauta á tr. priemonæ.");
			}
			else SendError(playerid, "Bagaþinëje tiek ginklø netelpa arba atsirado kita klaida.");
			DisablePlayerCheckpointEx(playerid);
		}
		case CHECKPOINT_TYPE_DMV:
		{
			if(!IsPlayerInAnyVehicle(playerid) || VehicleInfo[GetPlayerVehicleID(playerid)][vFaction] != -1)
			{
				return DisablePlayerCheckpointEx(playerid);
			}
			else if(tmpEditing_Component_DMV[playerid] > 0)
			{
				new type = tmpType_Salon[playerid]-1;
				tmpTexture_MarkStart_CP[playerid]++;
				if(DmvCheckpoints[type][tmpTexture_MarkStart_CP[playerid]][0] == 0.0 && DmvCheckpoints[type][tmpTexture_MarkStart_CP[playerid]][1] == 0.0 && DmvCheckpoints[type][tmpTexture_MarkStart_CP[playerid]][2] == 0.0)
				{
					new vehicleid = INVALID_VEHICLE_ID,
						Float:health;
					tmpEditing_Component_DMV[playerid] = 0;
					DisablePlayerCheckpointEx(playerid);
					if((vehicleid = GetPlayerVehicleID(playerid)) != INVALID_VEHICLE_ID)
					{
						GetVehicleHealth(vehicleid, health);
						if(VehicleInfo[vehicleid][vFaction] != -1)
						{
							return 0;
						}
						SetVehicleToRespawn(vehicleid);
						if(health < 995.0)
						{
							MsgError(playerid, "VAIRAVIMO MOKYKLA", "Egzamino neiðlaikëte, kadangi tr. priemonë per daug sudauþyta.");
							return 1;
						}
						if(PlayerExtra[playerid][peDMVSpeed] > 0)
						{
							MsgError(playerid, "VAIRAVIMO MOKYKLA", "Egzamino neiðlaikëte, kadangi virðijote greitá.");
							PlayerExtra[playerid][peDMVSpeed] = 0;
							return 1;
						}
						switch(type+1)
						{
							case 1:
							{
								// masina
								PlayerInfo[playerid][pCarLic] = 1;
								SaveAccountIntEx(playerid, "CarLic", 1);
								SendFormat(playerid, 0x8BD5FFFF, "Sveikiname sëkmingai iðlaikius {48AFEB}automobilio vairavimo{8BD5FF} egzaminà.");
							}
							case 2:
							{
								// moco
								PlayerInfo[playerid][pMotoLic] = 1;
								SaveAccountIntEx(playerid, "MotoLic", 1);
								SendFormat(playerid, 0x8BD5FFFF, "Sveikiname sëkmingai iðlaikius {48AFEB}motociklo vairavimo{8BD5FF} egzaminà.");
							}
							case 3:
							{
								// laivo
								PlayerInfo[playerid][pBoatLic] = 1;
								SaveAccountIntEx(playerid, "BoatLic", 1);
								SendFormat(playerid, 0x8BD5FFFF, "Sveikiname sëkmingai iðlaikius {48AFEB}valties vairavimo{8BD5FF} egzaminà.");
							}
							case 4:
							{
								// skraidymo
								PlayerInfo[playerid][pFlyLic] = 1;
								SaveAccountIntEx(playerid, "FlyLic", 1);
								SendFormat(playerid, 0x8BD5FFFF, "Sveikiname sëkmingai iðlaikius {48AFEB}pilotavimo{8BD5FF} egzaminà.");
							}
						}
						GivePlayerMoney(playerid, -DEFAULT_DMV_PRICE);
						tmpEditing_Component_DMV[playerid] = 0;
						DisablePlayerCheckpointEx(playerid);
					}
				}
				else
				{
					SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_DMV,
										DmvCheckpoints[type][tmpTexture_MarkStart_CP[playerid]][0],
										DmvCheckpoints[type][tmpTexture_MarkStart_CP[playerid]][1],
										DmvCheckpoints[type][tmpTexture_MarkStart_CP[playerid]][2], 2.3);
				}
			}
		}
		case CHECKPOINT_TYPE_DEALER_HOUSE:
		{
			SendFormat(playerid, 0xBABABAFF, "Norëdami áeiti, raðykite /enter");
			DisablePlayerCheckpointEx(playerid);
		}
		case CHECKPOINT_TYPE_DEALER_HOUSE_BUY:
		{
			// ar dar neturi savininko
			new selected = CheckpointData[playerid];
			if(DealerHouseInfo[selected][dealerHouseOwner] <= 0 && selected >= 0)
			{
				if((DealerHouseInfo[selected][dealerHouseType] == PlayerInfo[playerid][pDealer] || DealerHouseInfo[selected][dealerHouseType] == 2 || PlayerInfo[playerid][pDealer] == 2))
				{
					// tinka tipas, viskas ok
					SendFormat(playerid, 0xBABABAFF, "Pasiekëte konspiraciná namà, norëdami já nusipirkti, raðykite {FFFFFF}/buydealerhouse");
					DisablePlayerCheckpointEx(playerid);
				}
			}
		}
		case CHECKPOINT_TYPE_CARGO_UNLOAD:
		{
			new vehicleid = INVALID_VEHICLE_ID;
			if(!IsPlayerInAnyVehicle(playerid) || (vehicleid = GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID || GetPlayerVehicleSeat(playerid) != 0 || VehicleInfo[vehicleid][vJob] != PlayerInfo[playerid][pJob] || vehicleid != PlayerInfo[playerid][pJobVehicle])
			{
				SendError(playerid, "Turite sedëti darbo tr. priemonëje.");
				return 1;
			}
			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
			FreezePlayer(playerid, 3);
			GameTextForPlayer(playerid, "~y~ISLIPKITE~w~ IS TRANSPORTO", 3000, 5);
			PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_CARGO_LEAVE_CAR;
			DisablePlayerCheckpointEx(playerid);
		}
		case CHECKPOINT_TYPE_CARGO_CRATES_TAKE:
		{
			new vehicleid = PlayerInfo[playerid][pJobVehicle],
				Float:unloadX,
				Float:unloadY,
				Float:unloadZ,
				Float:putX,
				Float:putY,
				Float:putZ;
			if(IsValidVehicle(vehicleid) && VehicleInfo[vehicleid][vJob] == PlayerInfo[playerid][pJob])
			{
				switch(PlayerInfo[playerid][pJobCurrentType])
				{
					case 1:
					{
						new businessid = PlayerInfo[playerid][pJobDestination];
						unloadX = BusinessInfo[businessid][bWaresX],
						unloadY = BusinessInfo[businessid][bWaresY],
						unloadZ = BusinessInfo[businessid][bWaresZ],
						putX = BusinessInfo[businessid][bCratesX],
						putY = BusinessInfo[businessid][bCratesY],
						putZ = BusinessInfo[businessid][bCratesZ];
					}
					case 2:
					{
						new cargo = PlayerInfo[playerid][pJobDestination];
						unloadX = CargoList[cargo][cargoUnloadX],
						unloadY = CargoList[cargo][cargoUnloadY],
						unloadZ = CargoList[cargo][cargoUnloadZ],
						putX = CargoList[cargo][cargoCratesUnloadX],
						putY = CargoList[cargo][cargoCratesUnloadY],
						putZ = CargoList[cargo][cargoCratesUnloadZ];
					}
				}
				if(!IsVehicleInRangeOfPoint(vehicleid, 5.0, unloadX, unloadY, unloadZ))
				{
					SendFormat(playerid, 0xE98161FF, "Jûsø tr. priemonë per daug nutolusi nuo reikiamo taðko. Perstatykite jà.");
					PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_UNLOAD_CARGO;
					SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_CARGO_UNLOAD, unloadX, unloadY, unloadZ);
					return 1;
				}
				else
				{
					SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_CARGO_CRATES_PUT, putX, putY, putZ, 2.3);
					PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_CARGO_CRATES_PUT;
					if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][PlayerInfo[playerid][pJobActionIndex]-1])) DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][PlayerInfo[playerid][pJobActionIndex]-1]);//, "vehicle", "job(CratesTake)");
					VehicleInfo[vehicleid][vObjects][PlayerInfo[playerid][pJobActionIndex]-1] = INVALID_OBJECT_ID;
					ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 1, 0, 0, 0);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					SetPlayerAttachedObject(playerid, 9, 2912, 1, -0.05, 0.62, 0.0, 0.000000, 84.217391, 0.000000, 1.000000, 1.00);
				}
			}
			else
			{
				ResetPlayerJobTask(playerid);
			}
		}
		case CHECKPOINT_TYPE_CARGO_CRATES_PUT:
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			ApplyAnimation(playerid,"CARRY","putdwn", 4.0, 0, 1, 0, 0, 0);
			RemovePlayerAttachedObject(playerid, 9);
			if(PlayerInfo[playerid][pJobActionIndex] >= 4)
			{
				// atnese viska
				new money;
				switch(PlayerInfo[playerid][pJobCurrentType])
				{
					case 1:
					{
						// verslui
						new string[126],
							owner = INVALID_PLAYER_ID;
						mysql_format(chandler, string, sizeof string, "SELECT Price FROM `business_orders` WHERE BusinessId = '%d'", BusinessInfo[PlayerInfo[playerid][pJobDestination]][bId]);
						new Cache:result = mysql_query(chandler, string, true);
						cache_set_active(result);
						cache_get_value_name_int(0, "Price", money);
						cache_delete(result);
						if(money == 0)
						{
							money = CargoList[random(sizeof CargoList)][cargoPrice];
						}
						else
						{
							// paimam 30 proc
							money = money/2;
						}
						new businessid = PlayerInfo[playerid][pJobDestination];
						for(new ware = 0; ware < MAX_BUSINESS_WARES; ware++)
						{
							if(BusinessWares[businessid][ware][bWareId] > 0)
							{
								BusinessWares[businessid][ware][bWareAmount] = 100;
							}
						}
						mysql_format(chandler, string, sizeof string, "DELETE FROM `business_orders` WHERE BusinessId = '%d'", BusinessInfo[businessid][bId]);
						mysql_fquery(chandler, string, "BusinessSaved");
						SaveBusinessWares(businessid);
						if((owner = FindPlayerBySql(BusinessInfo[businessid][bOwner])) == INVALID_PLAYER_ID)
						{
							format(string, sizeof string, "Pristatë jûsø uþsakymà á verslà \"%0.70s\".", BusinessInfo[businessid][bName]);
							AddPlayerLoginNote(owner, PlayerInfo[playerid][pId], string);
						}
						else
						{
							SendFormat(playerid, 0xFFF93CFF, "Prekës á jûsø verslà \"%s\" pristatytos. Atveþë: %s", BusinessInfo[businessid][bName],  GetPlayerNameEx(playerid, true, true));
						}
					}
					case 2:
					{
						// random
						money = CargoList[PlayerInfo[playerid][pJobDestination]][cargoPrice];
					}
				}
				PlayerInfo[playerid][pJobDuty] = 0;
				PlayerInfo[playerid][pJobActionTime] = 0;
				PlayerInfo[playerid][pJobCurrentAction] = 0;
				PlayerInfo[playerid][pJobDestination] = 0;
				ResetPlayerJobTask(playerid);
				PlayerExtra[playerid][peJobDutyCooldown] = 0;
				MsgSuccess(playerid, "UÞSAKYMAS", "Sëkmingai pristatëte kroviná. Gavote $%d", money);
				GivePlayerMoney(playerid, money);
			}
			else
			{
				new
					vehicleid = PlayerInfo[playerid][pJobVehicle],
					Float:carX,
					Float:carY,
					Float:carZ;
				if(IsValidVehicle(vehicleid) && VehicleInfo[vehicleid][vJob] == PlayerInfo[playerid][pJob])
				{
					PlayerInfo[playerid][pJobActionIndex]++;
					GetPosBehindVehicle(vehicleid, carX, carY, carZ, 1.0); // masinos galas
					SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_CARGO_CRATES_TAKE, carX, carY, carZ, 2.3);
					PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_CARGO_CRATES_TAKE;
				}
				else
				{
					// cancel viska
					ResetPlayerJobTask(playerid);
				}
			}
		}
		case CHECKPOINT_TYPE_CARGO_LOAD:
		{
			new Float:unloadX,
				Float:unloadY,
				Float:unloadZ,
				price,
				vehicleid = INVALID_VEHICLE_ID;
			if(!IsPlayerInAnyVehicle(playerid) || (vehicleid = GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID || GetPlayerVehicleSeat(playerid) != 0 || VehicleInfo[vehicleid][vJob] != PlayerInfo[playerid][pJob])
			{
				SendError(playerid, "Turite sedëti darbo tr. priemonëje.");
				return 1;
			}
			GameTextForPlayer(playerid, "~g~PALAUKITE~w~ - KRAUNAMOS PREKES", 3000, 5); // 3000ms 5 style
			SetTimerEx("CratesLoading", 6000, false, "dd", playerid, vehicleid);
			FreezePlayer(playerid, 7);
			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
			switch(PlayerInfo[playerid][pJobCurrentType])
			{
				case 1:
				{
					// verslui
					new businessid = PlayerInfo[playerid][pJobDestination],
						string[126];
					unloadX = BusinessInfo[businessid][bWaresX],
					unloadY = BusinessInfo[businessid][bWaresY],
					unloadZ = BusinessInfo[businessid][bWaresZ];
					mysql_format(chandler, string, sizeof string, "SELECT Price FROM `business_orders` WHERE BusinessId = '%d'", BusinessInfo[businessid][bId]);
					new Cache:result = mysql_query(chandler, string, true);
					cache_set_active(result);
					cache_get_value_name_int(0, "Price", price);
					cache_delete(result);
					UpdateWaresOrderStatus(BusinessInfo[businessid][bId], 2);
					price = price/4;
				}
				case 2:
				{
					// random CargoList
					new cargo = PlayerInfo[playerid][pJobDestination];
					unloadX = CargoList[cargo][cargoUnloadX],
					unloadX = CargoList[cargo][cargoUnloadY],
					unloadX = CargoList[cargo][cargoUnloadZ];
					price = CargoList[cargo][cargoPrice]/4;
				}
			}
			GivePlayerMoney(playerid, -price);
			MsgSuccess(playerid, "UÞSAKYMAS", "Sëkmingai pakrovëte kroviná. Sumokëjote $%d", price);
			PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_UNLOAD_CARGO;
			PlayerInfo[playerid][pJobVehicle] = vehicleid;
			SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_CARGO_UNLOAD, unloadX, unloadY, unloadZ, 2.3);
		}
		case CHECKPOINT_TYPE_VEHICLE:
		{
			InfoBox(playerid, "~g~SURADOTE", "TR. PRIEMONE");
			DisablePlayerCheckpointEx(playerid);
		}
		case CHECKPOINT_TYPE_PUT_PD_WEAPONS:
		{
			if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
			new vehicleid = GetPlayerVehicleID(playerid),
				cargo_type = VehicleInfo[vehicleid][vCargoType];
			if(cargo_type <= 0 || cargo_type > 3 || VehicleInfo[vehicleid][vFaction] != PlayerInfo[playerid][pFaction]) return MsgError(playerid, "UÞSAKYMAS", "Uþsakymas nëra ðioje tr. priemonëje.");
			new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
			if(factionid == -1) return 0;
			FactionInfo[factionid][fWares][cargo_type-1] = GetGVarInt("AddPDWaresAmount");
			log_init(true);
			log_set_table("logs_factions");
			log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraString`");
			log_set_values("'%d','%e','%d','%e','Atveze atsargas i garaza','%s'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), cargo_type == VEHICLE_CARGO_POLICE_WEAPONS ? ("Ginklai") : (cargo_type == VEHICLE_CARGO_POLICE_SKINS ? ("Apranga") : ("Special")));
			log_commit();
			SendFactionMessage(PlayerInfo[playerid][pFaction], 0x009AB5FF, true, "-------------------------------------------------------");
			SendFactionMessage(PlayerInfo[playerid][pFaction], 0x32B9D0FF, true, "DISPEÈERINË: {82CDDA}Krovinys sëkmingai perveþtas á sandëlá.");
			SendFactionMessage(PlayerInfo[playerid][pFaction], 0x009AB5FF, true, "-------------------------------------------------------");
			DisablePlayerCheckpointEx(playerid);
			SaveFaction(factionid);
		}
		case CHECKPOINT_TYPE_PD_WEAPONS_AMMO, CHECKPOINT_TYPE_PD_SKINS, CHECKPOINT_TYPE_PD_SPECIAL:
		{
			if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
			new vehicleid = GetPlayerVehicleID(playerid);
			if(VehicleTrunkSpace[((GetVehicleModel(vehicleid))-400)] < TRUNKS_SPACE_POLICE_WEAPONS) return MsgWarning(playerid, "UÞSAKYMAS", "Tr. priemonë nepakankamai talpi.");
			new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
			if(factionid == -1) return 0;
			else
			{
				switch(Checkpoint[playerid])
				{
					case CHECKPOINT_TYPE_PD_WEAPONS_AMMO:
					{
						if(FactionInfo[factionid][fBudget] < DEFAULT_POLICE_WEAPONS_PRICE) return InfoBox(playerid, "NEPAKANKAMAI", "PINIGU BIUDZETE");
						else
						{
							VehicleInfo[vehicleid][vCargoType] = VEHICLE_CARGO_POLICE_WEAPONS;
							FactionInfo[factionid][fBudget] -= DEFAULT_POLICE_WEAPONS_PRICE;
							log_init(true);
							log_set_table("logs_factions");
							log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraString`,`Amount`");
							log_set_values("'%d','%e','%d','%e','Paeme atsargas','Ginklus','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), DEFAULT_POLICE_WEAPONS_PRICE);
							log_commit();
						}
					}
					case CHECKPOINT_TYPE_PD_SKINS:
					{
						if(FactionInfo[factionid][fBudget] < DEFAULT_POLICE_SKINS_PRICE) return InfoBox(playerid, "NEPAKANKAMAI", "PINIGU BIUDZETE");
						else
						{
							VehicleInfo[vehicleid][vCargoType] = VEHICLE_CARGO_POLICE_SKINS;
							FactionInfo[factionid][fBudget] -= DEFAULT_POLICE_SKINS_PRICE;
							log_init(true);
							log_set_table("logs_factions");
							log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraString`,`Amount`");
							log_set_values("'%d','%e','%d','%e','Paeme atsargas','Apranga','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), DEFAULT_POLICE_SKINS_PRICE);
							log_commit();
						}
					}
					case CHECKPOINT_TYPE_PD_SPECIAL:
					{
						if(FactionInfo[factionid][fBudget] < DEFAULT_POLICE_SPECIAL_PRICE) return InfoBox(playerid, "NEPAKANKAMAI", "PINIGU BIUDZETE");
						else
						{
							VehicleInfo[vehicleid][vCargoType] = VEHICLE_CARGO_POLICE_SPECIAL;
							FactionInfo[factionid][fBudget] -= DEFAULT_POLICE_SPECIAL_PRICE;
							log_init(true);
							log_set_table("logs_factions");
							log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraString`,`Amount`");
							log_set_values("'%d','%e','%d','%e','Paeme atsargas','Special','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), DEFAULT_POLICE_SPECIAL_PRICE);
							log_commit();
						}
					}
				}
				DisablePlayerCheckpointEx(playerid);
				SendFactionMessage(PlayerInfo[playerid][pFaction], 0x009AB5FF, true, "-------------------------------------------------------");
				SendFactionMessage(PlayerInfo[playerid][pFaction], 0x32B9D0FF, true, "DISPEÈERINË: {82CDDA}Krovinys perveþamas á policijos sandëlá.");
				SendFactionMessage(PlayerInfo[playerid][pFaction], 0x009AB5FF, true, "-------------------------------------------------------");
				SendFormat(playerid, 0x39A8D7FF, "[UÞSAKYMAS] {4FB3DF}Gabenkite uþsakymà á policijos sandëlá.");
				SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_PUT_PD_WEAPONS, DEFAULT_POLICE_STORE, 2.3);
			}
		}
		case CHECKPOINT_TYPE_TAKE_ENGINE:
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendWarning(playerid, "Iðlipkite ið tr. priemonës.");
			new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
			if(MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(jobvehicleid, DEFAULT_MECHANIC_REPAIR_SPOT) || !IsValidVehicle(jobvehicleid))
			{
				SendFormat(playerid, 0xE47474FF, "Jûsø tvarkoma tr. priemonë nebëra garaþe.");
				DisablePlayerCheckpointEx(playerid);
				return ResetPlayerJobTask(playerid, true);
			}
			new Float:x, Float:y, Float:z;
			PlayerInfo[playerid][pJobCurrentAction] = (PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_TAKE_ENGINE ? JOB_ACTION_PUT_ENGINE : JOB_ACTION_PUT_ENGINE_REPAIR);
			PlayerInfo[playerid][pJobActionTime] = 30;
			GetPosFrontVehicle(PlayerInfo[playerid][pJobVehicle], x, y, z, 1.0);
			SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_PUT_ENGINE_VEHICLE, x, y, z, 2.3);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 1, 0, 0, 0);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerAttachedObject(playerid, 9, 19917, 1, -0.05, 0.62, 0.0, 0.000000, 90.0, 90.000000, 1.000000, 1.00);
		}
		case CHECKPOINT_TYPE_TAKE_BATTERY:
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendWarning(playerid, "Iðlipkite ið tr. priemonës.");
			new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
			if(MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(jobvehicleid, DEFAULT_MECHANIC_REPAIR_SPOT) || !IsValidVehicle(jobvehicleid))
			{
				SendFormat(playerid, 0xE47474FF, "Jûsø tvarkoma tr. priemonë nebëra garaþe.");
				DisablePlayerCheckpointEx(playerid);
				return ResetPlayerJobTask(playerid, true);
			}
			new Float:x, Float:y, Float:z;
			PlayerInfo[playerid][pJobCurrentAction] = (PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_TAKE_BATTERY ? JOB_ACTION_PUT_BATTERY : JOB_ACTION_PUT_BATTERY_REPAIR);
			PlayerInfo[playerid][pJobActionTime] = 30;
			GetPosFrontVehicle(PlayerInfo[playerid][pJobVehicle], x, y, z, 1.0);
			SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_PUT_BATTERY_VEHICLE, x, y, z, 2.3);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 1, 0, 0, 0);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerAttachedObject(playerid, 9, 19832, 1, -0.05, 0.62, 0.0, 0.000000, 90.0, 90.000000, 1.000000, 1.00);
		}
		case CHECKPOINT_TYPE_PUT_ENGINE_VEHICLE:
		{
			new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
			if(MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(jobvehicleid, DEFAULT_MECHANIC_REPAIR_SPOT) || !IsValidVehicle(jobvehicleid))
			{
				SendFormat(playerid, 0xE47474FF, "Jûsø tvarkoma tr. priemonë nebëra garaþe.");
				DisablePlayerCheckpointEx(playerid);
				return ResetPlayerJobTask(playerid, true);
			}
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			ApplyAnimation(playerid,"CARRY","putdwn", 4.0, 0, 1, 0, 0, 0);
			RemovePlayerAttachedObject(playerid, 9);
			if(GetVehicleBonnet(jobvehicleid) != 1 && !IsModelBike(GetVehicleModel(jobvehicleid))) return SendWarning(playerid, "Atidarykite tr. priemonës kapotà (/bonnet).");
			DisablePlayerCheckpointEx(playerid);
			TogglePlayerControllable(playerid, 0);
			SpamBarTD_Show(playerid);
			new Float:x, Float:y, Float:z;
			GetPosFrontVehicle(jobvehicleid, x, y, z, 0.5);
			SetPlayerPos(playerid, x, y, z);
			SetPlayerFaceVehicle(playerid, jobvehicleid);
			SetCameraBehindPlayer(playerid);
			if(PlayerInfo[playerid][pJobActionIndex] == 0)
			{
				// kadangi pirma kart tvarko, parasom ka daryt
				SendFormat(playerid, 0x90E0FFFF, "Spaudinëkite SPRINT mygtukà, kol þalias laukelis uþsipildys. Raðykite /stop norint baigti.");
			}
			PlayerInfo[playerid][pJobCurrentAction] = (PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_PUT_ENGINE_REPAIR ? JOB_ACTION_ENGINE_REPAIR : JOB_ACTION_ENGINE_CHANGE);
			PlayerInfo[playerid][pJobActionTime] = 50;
			PlayerInfo[playerid][pJobDestination] = 0;
			PlayerInfo[playerid][pJobTimer] = SetTimerEx("UpdateSpamBar", 500, true, "dd", playerid, PlayerInfo[playerid][pJobCurrentAction]);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 1, 1);
		}
		case CHECKPOINT_TYPE_PUT_BATTERY_VEHICLE:
		{
			new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
			if(MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(jobvehicleid, DEFAULT_MECHANIC_REPAIR_SPOT) || !IsValidVehicle(jobvehicleid))
			{
				SendFormat(playerid, 0xE47474FF, "Jûsø tvarkoma tr. priemonë nebëra garaþe.");
				DisablePlayerCheckpointEx(playerid);
				return ResetPlayerJobTask(playerid, true);
			}
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			ApplyAnimation(playerid,"CARRY","putdwn", 4.0, 0, 1, 0, 0, 0);
			RemovePlayerAttachedObject(playerid, 9);
			if(GetVehicleBonnet(jobvehicleid) != 1 && !IsModelBike(GetVehicleModel(jobvehicleid))) return SendWarning(playerid, "Atidarykite tr. priemonës kapotà.");
			DisablePlayerCheckpointEx(playerid);
			TogglePlayerControllable(playerid, 0);
			SpamBarTD_Show(playerid);
			new Float:x, Float:y, Float:z;
			GetPosFrontVehicle(jobvehicleid, x, y, z, 0.5);
			SetPlayerPos(playerid, x, y, z);
			SetPlayerFaceVehicle(playerid, jobvehicleid);
			SetCameraBehindPlayer(playerid);
			if(PlayerInfo[playerid][pJobActionIndex] == 0)
			{
				// kadangi pirma kart tvarko, parasom ka daryt
				SendFormat(playerid, 0x90E0FFFF, "Spaudinëkite SPRINT mygtukà, kol þalias laukelis uþsipildys. Raðykite /stop norint baigti.");
			}
			PlayerInfo[playerid][pJobCurrentAction] = (PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_PUT_BATTERY_REPAIR ? JOB_ACTION_BATTERY_REPAIR : JOB_ACTION_BATTERY_CHANGE);
			PlayerInfo[playerid][pJobActionTime] = 50;
			PlayerInfo[playerid][pJobDestination] = 0;
			PlayerInfo[playerid][pJobTimer] = SetTimerEx("UpdateSpamBar", 500, true, "dd", playerid, PlayerInfo[playerid][pJobCurrentAction]);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 1, 1);
		}
		case CHECKPOINT_TYPE_TAKE_REPAINT:
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendWarning(playerid, "Iðlipkite ið tr. priemonës.");
			if(MECHANIC_REPAINT_ZONE_RADIUS <= GetVehicleDistanceFromPoint(PlayerInfo[playerid][pJobVehicle], DEFAULT_MECHANIC_REPAINT_SPOT) || !IsValidVehicle(PlayerInfo[playerid][pJobVehicle]))
			{
				SendFormat(playerid, 0xE47474FF, "Jûsø tvarkoma tr. priemonë nebëra garaþe.");
				DisablePlayerCheckpointEx(playerid);
				return ResetPlayerJobTask(playerid, true);
			}
			if(PlayerHasWeaponInSlot(playerid, 9))
			{
				return SendWarning(playerid, "Pasidëkite ginklà á inventoriø ir bandykite dar kartà.");
			}
			ShowPlayerDialog(playerid, DIALOG_MECHANIC_SELECT_COLORS, DIALOG_STYLE_INPUT, "Perdaþymas", "{FFFFFF}Áveskite abiejø spalvø kodà, pvz: 0 10\n{BABABA}(wiki.sa-mp.com/wiki/Vehicle_Color_IDs)", "Tæsti", "Atðaukti");
		}
		case CHECKPOINT_TYPE_REPAINT_VEHICLE:
		{
			new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
			if(MECHANIC_REPAINT_ZONE_RADIUS <= GetVehicleDistanceFromPoint(jobvehicleid, DEFAULT_MECHANIC_REPAINT_SPOT) || !IsValidVehicle(jobvehicleid))
			{
				SendFormat(playerid, 0xE47474FF, "Jûsø perdaþoma tr. priemonë nebëra garaþe.");
				DisablePlayerCheckpointEx(playerid);
				return ResetPlayerJobTask(playerid, true);
			}
			SendFormat(playerid, 0x90E0FFFF, "Nusitaikykite á daþomà tr. priemonæ ir laikykite LMB vaikðèiodami aplink jà.");
			DisablePlayerCheckpointEx(playerid);
		}
		case CHECKPOINT_TYPE_TAKE_WHEELS:
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendWarning(playerid, "Iðlipkite ið tr. priemonës.");
			new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
			if((MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(jobvehicleid, DEFAULT_MECHANIC_REPAIR_SPOT) &&
				MECHANIC_REPAINT_ZONE_RADIUS <= GetVehicleDistanceFromPoint(jobvehicleid, DEFAULT_MECHANIC_REPAINT_SPOT)) ||
				!IsValidVehicle(jobvehicleid))
			{
				SendFormat(playerid, 0xE47474FF, "Jûsø tvarkoma tr. priemonë nebëra garaþe.");
				DisablePlayerCheckpointEx(playerid);
				return ResetPlayerJobTask(playerid, true);
			}
			new Float:x, Float:y, Float:z,
				object;
			switch(tmpSelected[playerid])
			{
				case 1: object = tmpEditing_Component_DMV[playerid] = 1073, tmpDubStart_Price[playerid] = MECHANICS_SHADOW_PRICE;
				case 2: object = tmpEditing_Component_DMV[playerid] = 1074, tmpDubStart_Price[playerid] = MECHANICS_MEGA_PRICE;
				case 3: object = tmpEditing_Component_DMV[playerid] = 1075, tmpDubStart_Price[playerid] = MECHANICS_RIMSHINE_PRICE;
				case 4: object = tmpEditing_Component_DMV[playerid] = 1076, tmpDubStart_Price[playerid] = MECHANICS_WIRES_PRICE;
				case 5: object = tmpEditing_Component_DMV[playerid] = 1077, tmpDubStart_Price[playerid] = MECHANICS_CLASSIC_PRICE;
				case 6: object = tmpEditing_Component_DMV[playerid] = 1078, tmpDubStart_Price[playerid] = MECHANICS_TWIST_PRICE;
				case 7: object = tmpEditing_Component_DMV[playerid] = 1079, tmpDubStart_Price[playerid] = MECHANICS_CUTTER_PRICE;
				case 8: object = tmpEditing_Component_DMV[playerid] = 1080, tmpDubStart_Price[playerid] = MECHANICS_SWITCH_PRICE;
				case 9: object = tmpEditing_Component_DMV[playerid] = 1081, tmpDubStart_Price[playerid] = MECHANICS_GROVE_PRICE;
				case 10: object = tmpEditing_Component_DMV[playerid] = 1082, tmpDubStart_Price[playerid] = MECHANICS_IMPORT_PRICE;
				case 11: object = tmpEditing_Component_DMV[playerid] = 1083, tmpDubStart_Price[playerid] = MECHANICS_DOLLAR_PRICE;
				case 12: object = tmpEditing_Component_DMV[playerid] = 1084, tmpDubStart_Price[playerid] = MECHANICS_TRANCE_PRICE;
				case 13: object = tmpEditing_Component_DMV[playerid] = 1085, tmpDubStart_Price[playerid] = MECHANICS_ATOMIC_PRICE;
				case 14: object = tmpEditing_Component_DMV[playerid] = 1096, tmpDubStart_Price[playerid] = MECHANICS_AHAB_PRICE;
				case 15: object = tmpEditing_Component_DMV[playerid] = 1097, tmpDubStart_Price[playerid] = MECHANICS_VIRTUAL_PRICE;
				case 16: object = tmpEditing_Component_DMV[playerid] = 1098, tmpDubStart_Price[playerid] = MECHANICS_ACCESS_PRICE;
				case 17: object = tmpEditing_Component_DMV[playerid] = 1025, tmpDubStart_Price[playerid] = MECHANICS_OFFROAD_PRICE;
				case 18: object = 1100, tmpEditing_Component_DMV[playerid] = 1087, tmpDubStart_Price[playerid] = MECHANICS_HIDRAULICS_PRICE;
			}
			if(PlayerInfo[playerid][pJobActionIndex] == 0)
			{
				GivePlayerMoney(playerid, -tmpDubStart_Price[playerid]);
			}
			PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_PUT_WHEELS_VEHICLE;
			PlayerInfo[playerid][pJobActionTime] = 30;
			GetPosFrontVehicle(PlayerInfo[playerid][pJobVehicle], x, y, z, 1.0);
			SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_PUT_WHEELS, x, y, z, 2.3);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 1, 0, 0, 0);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerAttachedObject(playerid, 9, object, 1, -0.05, 0.62, 0.0, 0.000000, 90.0, 90.000000, 1.000000, 1.00);
		}
		case CHECKPOINT_TYPE_PUT_WHEELS:
		{
			new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
			if((MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(jobvehicleid, DEFAULT_MECHANIC_REPAIR_SPOT) &&
				MECHANIC_REPAINT_ZONE_RADIUS <= GetVehicleDistanceFromPoint(jobvehicleid, DEFAULT_MECHANIC_REPAINT_SPOT)) ||
				!IsValidVehicle(jobvehicleid))
			{
				SendFormat(playerid, 0xE47474FF, "Jûsø tvarkoma tr. priemonë nebëra garaþe.");
				DisablePlayerCheckpointEx(playerid);
				return ResetPlayerJobTask(playerid, true);
			}
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			ApplyAnimation(playerid,"CARRY","putdwn", 4.0, 0, 1, 0, 0, 0);
			RemovePlayerAttachedObject(playerid, 9);
			DisablePlayerCheckpointEx(playerid);
			TogglePlayerControllable(playerid, 0);
			SpamBarTD_Show(playerid);
			new Float:x, Float:y, Float:z;
			GetPosFrontVehicle(jobvehicleid, x, y, z, 0.5);
			SetPlayerPos(playerid, x, y, z);
			SetPlayerFaceVehicle(playerid, jobvehicleid);
			SetCameraBehindPlayer(playerid);
			if(PlayerInfo[playerid][pJobActionIndex] == 0)
			{
				// kadangi pirma kart tvarko, parasom ka daryt
				SendFormat(playerid, 0x90E0FFFF, "Spaudinëkite SPRINT mygtukà, kol þalias laukelis uþsipildys. Raðykite /stop norint baigti.");
			}
			PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TUNE_VEHICLE;
			PlayerInfo[playerid][pJobActionTime] = 50;
			PlayerInfo[playerid][pJobDestination] = 0;
			PlayerInfo[playerid][pJobTimer] = SetTimerEx("UpdateSpamBar", 500, true, "dd", playerid, JOB_ACTION_TUNE_VEHICLE);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 1, 1);
		}
		case CHECKPOINT_TYPE_PUT_PARTS_VEHICLE:
		{
			new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
			if(MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(jobvehicleid, DEFAULT_MECHANIC_REPAIR_SPOT) || !IsValidVehicle(jobvehicleid))
			{
				SendFormat(playerid, 0xE47474FF, "Jûsø tvarkoma tr. priemonë nebëra garaþe.");
				DisablePlayerCheckpointEx(playerid);
				return ResetPlayerJobTask(playerid, true);
			}
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			ApplyAnimation(playerid,"CARRY","putdwn", 4.0, 0, 1, 0, 0, 0);
			RemovePlayerAttachedObject(playerid, 9);
			if(GetVehicleBonnet(jobvehicleid) != 1 && !IsModelBike(GetVehicleModel(jobvehicleid))) return SendWarning(playerid, "Atidarykite tr. priemonës kapotà.");
			DisablePlayerCheckpointEx(playerid);
			TogglePlayerControllable(playerid, 0);
			SpamBarTD_Show(playerid);
			new Float:x, Float:y, Float:z;
			GetPosFrontVehicle(jobvehicleid, x, y, z, 0.5);
			SetPlayerPos(playerid, x, y, z);
			SetPlayerFaceVehicle(playerid, jobvehicleid);
			SetCameraBehindPlayer(playerid);
			if(PlayerInfo[playerid][pJobActionIndex] == 0)
			{
				// kadangi pirma kart tvarko, parasom ka daryt
				SendFormat(playerid, 0x90E0FFFF, "Spaudinëkite SPRINT mygtukà, kol þalias laukelis uþsipildys. Raðykite /stop norint baigti.");
			}
			PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_REPAIR_VEHICLE;
			PlayerInfo[playerid][pJobActionTime] = 50;
			PlayerInfo[playerid][pJobDestination] = 0;
			PlayerInfo[playerid][pJobTimer] = SetTimerEx("UpdateSpamBar", 500, true, "dd", playerid, JOB_ACTION_REPAIR_VEHICLE);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 1, 1);
		}
		case CHECKPOINT_TYPE_TAKE_REPAIR:
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendWarning(playerid, "Iðlipkite ið tr. priemonës.");
			new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
			if(MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(jobvehicleid, DEFAULT_MECHANIC_REPAIR_SPOT) || !IsValidVehicle(jobvehicleid))
			{
				SendFormat(playerid, 0xE47474FF, "Jûsø tvarkoma tr. priemonë nebëra garaþe.");
				DisablePlayerCheckpointEx(playerid);
				return ResetPlayerJobTask(playerid, true);
			}
			new Float:x, Float:y, Float:z,
				objects[3] = {1090, 1135, 1148}; // 19917 variklis;
			PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_PUT_PARTS_VEHICLE;
			PlayerInfo[playerid][pJobActionTime] = 30;
			GetPosFrontVehicle(PlayerInfo[playerid][pJobVehicle], x, y, z, 1.0);
			SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_PUT_PARTS_VEHICLE, x, y, z, 2.3);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 1, 0, 0, 0);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerAttachedObject(playerid, 9, objects[PlayerInfo[playerid][pJobActionIndex]], 1, -0.05, 0.62, 0.0, 0.000000, 90.0, 90.000000, 1.000000, 1.00);
		}
		case CHECKPOINT_TYPE_FARMER_SPOT:
		{
			if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pJobVehicle] && VehicleInfo[GetPlayerVehicleID(playerid)][vJob] == JOB_FARMER)
			{
				new jobid = GetJobArrayIndexById(JOB_FARMER);
				if(PlayerInfo[playerid][pPayCheck]+Jobs[jobid][jobPayDay] >= Jobs[jobid][jobMaxPayout])
				{
					// pasieke limita ismokejimo, tegu vel pranesam.
					SendFormat(playerid, 0xEB7C6EFF, "Jûs jau pasiekæs uþdarbio limità, todël atlygis uþ darbà nebus priskaièiuojamas.");
				}
				else
				{
					SetVehicleVelocity(GetPlayerVehicleID(playerid), 0.0, 0.0, 0.0);
					FreezePlayer(playerid, 2);
					PlayerInfo[playerid][pPayCheck] += Jobs[jobid][jobBonusCash];
					SaveAccountIntEx(playerid, "PayCheck", PlayerInfo[playerid][pPayCheck]);
					SendFormat(playerid, 0x93E162FF, "Prie jûsø algos pridëta $%d", Jobs[jobid][jobBonusCash]);
					if(PlayerInfo[playerid][pPayCheck]+Jobs[jobid][jobPayDay] >= Jobs[jobid][jobMaxPayout])
					{
						// siuo vezimu pasieke limita.
						SendFormat(playerid, 0xEB7C6EFF, "Pasiekëte uþdarbio limità, Jums nebebus priskaièiuojamas atlygis.");
					}
				}
				PlayerInfo[playerid][pJobActionTime] = 30;
				new index = random(sizeof FarmerSpots), loop;
				while(index == PlayerInfo[playerid][pJobDestination] && sizeof FarmerSpots > 1)
				{
					loop++;
					index = random(sizeof FarmerSpots);
					if(loop > 20) { break; }
				}
				PlayerInfo[playerid][pJobDestination] = index;
				SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_FARMER_SPOT, FarmerSpots[index][0], FarmerSpots[index][1], FarmerSpots[index][2], 2.3);
			}
			else SendWarning(playerid, "Turite sedëti darbo tr. priemonëje");
			return 1;
		}
		case CHECKPOINT_TYPE_FARMER_TAKE_BAG:
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendWarning(playerid, "Iðlipkite ið tr. priemonës.");
			new index = random(sizeof FarmerBagSpots), loop;
			while(index == PlayerInfo[playerid][pJobDestination] && sizeof FarmerBagSpots > 1)
			{
				loop++;
				index = random(sizeof FarmerBagSpots);
				if(loop > 20) { break; }
			}
			PlayerInfo[playerid][pJobDestination] = index;
			PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_PUT_BAG;
			PlayerInfo[playerid][pJobActionTime] = 30;
			SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_FARMER_PUT_BAG, FarmerBagSpots[index][0], FarmerBagSpots[index][1], FarmerBagSpots[index][2], 2.3);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 1, 0, 0, 0);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerAttachedObject(playerid, 9, 2060, 1, -0.38, 0.85, 0.0, 0.000000, 84.217391, 0.000000, 1.000000, 1.00);
		}
		case CHECKPOINT_TYPE_FARMER_PUT_BAG:
		{
			new jobid = GetJobArrayIndexById(JOB_FARMER);
			if(PlayerInfo[playerid][pPayCheck]+Jobs[jobid][jobPayDay] >= Jobs[jobid][jobMaxPayout])
			{
				// pasieke limita ismokejimo, tegu vel pranesam.
				SendFormat(playerid, 0xEB7C6EFF, "Jûs jau pasiekæs uþdarbio limità, todël atlygis uþ darbà nebus priskaièiuojamas.");
			}
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			ApplyAnimation(playerid,"CARRY","putdwn", 4.0, 0, 1, 0, 0, 0);
			RemovePlayerAttachedObject(playerid, 9);
			PlayerInfo[playerid][pPayCheck] += Jobs[jobid][jobBonusCash];
			SaveAccountIntEx(playerid, "PayCheck", PlayerInfo[playerid][pPayCheck]);
			SendFormat(playerid, 0x93E162FF, "Prie jûsø algos pridëta $%d", Jobs[jobid][jobBonusCash]);
			if(PlayerInfo[playerid][pPayCheck]+Jobs[jobid][jobPayDay] >= Jobs[jobid][jobMaxPayout])
			{
				// siuo vezimu pasieke limita.
				SendFormat(playerid, 0xEB7C6EFF, "Pasiekëte uþdarbio limità, Jums nebebus priskaièiuojamas atlygis.");
			}
			new index = random(sizeof FarmerBagSpots), loop;
			while(index == PlayerInfo[playerid][pJobDestination] && sizeof FarmerBagSpots > 1)
			{
				loop++;
				index = random(sizeof FarmerBagSpots);
				if(loop > 20) { break; }
			}
			PlayerInfo[playerid][pJobDestination] = index;
			PlayerInfo[playerid][pJobActionTime] = 30;
			PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TAKE_BAG;
			SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_FARMER_TAKE_BAG, FarmerBagSpots[index][0], FarmerBagSpots[index][1], FarmerBagSpots[index][2], 2.3);
		}
		default: DisablePlayerCheckpointEx(playerid);
	}
	return 1;
}
thread(AttachedObjectUpdate);

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(!response || fScaleX >= 7.0 || fScaleY >= 7.0 || fScaleZ >= 7.0)
    {
    	if(fScaleX >= 7.0 || fScaleY >= 7.0 || fScaleZ >= 7.0)
    	{
    		return MsgError(playerid, "DRABUÞIAI", "Drabuþis per daug didelis.");
    	}
    	if(index < 9)
    	{
	    	SetPlayerAttachedObject(playerid, index, modelid, boneid,
	    		AttachedClothes[playerid][index][attachedOffsetX],
	    	 	AttachedClothes[playerid][index][attachedOffsetY],
	    	 	AttachedClothes[playerid][index][attachedOffsetZ],
	    	 	AttachedClothes[playerid][index][attachedRotX],
	    	 	AttachedClothes[playerid][index][attachedRotY],
	    	 	AttachedClothes[playerid][index][attachedRotZ],
	    	 	AttachedClothes[playerid][index][attachedScaleX],
	    	 	AttachedClothes[playerid][index][attachedScaleY],
	    	 	AttachedClothes[playerid][index][attachedScaleZ]);
	    }
    	return 1;
    }
    else
    {
    	if(index < 9)
    	{
	    	SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
    			AttachedClothes[playerid][index][attachedOffsetX] = fOffsetX,
    			AttachedClothes[playerid][index][attachedOffsetY] = fOffsetY,
	   			AttachedClothes[playerid][index][attachedOffsetZ] = fOffsetZ,
	    		AttachedClothes[playerid][index][attachedRotX] = fRotX,
	    		AttachedClothes[playerid][index][attachedRotY] = fRotY,
	    		AttachedClothes[playerid][index][attachedRotZ] = fRotZ,
	    		AttachedClothes[playerid][index][attachedScaleX] = fScaleX,
	    		AttachedClothes[playerid][index][attachedScaleY] = fScaleY,
	    		AttachedClothes[playerid][index][attachedScaleZ] = fScaleZ;
    		SaveAttachedClothes(playerid, index);
    		MsgSuccess(playerid, "DRABUÞIAI", "Atnaujinote pozicijà.");
    	}
    }
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	#if SERVER_DEBUG_LEVEL >= 2
	 	if(response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL) printf("[debug] OnPlayerEditDynamicObject(%s, %d, %d, %0.1f, %0.1f, %0.1f, %0.1f, %0.1f, %0.1f)", GetPlayerNameEx(playerid), objectid, response, x, y, z, rx, ry, rz);
	#endif
	new Float:oldx, Float:oldrx,
		Float:oldy, Float:oldry,
		Float:oldz, Float:oldrz;
	GetDynamicObjectPos(objectid, oldx, oldy, oldz);
	GetDynamicObjectRot(objectid, oldrx, oldry, oldrz);
	if(response == EDIT_RESPONSE_FINAL)
	{
		switch(tmpEditing_Component_DMV[playerid])
		{
			case EDITING_TYPE_DYNAMIC_PAYPHONE:
			{
				new pp = tmpSelected[playerid];
				if(IsValidDynamicObject(PayPhoneInfo[pp][payPhoneObject]))
				{
					SetDynamicObjectPos(PayPhoneInfo[pp][payPhoneObject], x, y, z);
					SetDynamicObjectRot(PayPhoneInfo[pp][payPhoneObject], rx, ry, rz);
					PayPhoneInfo[pp][payPhoneX] = x;
					PayPhoneInfo[pp][payPhoneY] = y;
					PayPhoneInfo[pp][payPhoneZ] = z;
					PayPhoneInfo[pp][payPhoneRX] = rx;
					PayPhoneInfo[pp][payPhoneRY] = ry;
					PayPhoneInfo[pp][payPhoneRZ] = rz;
					tmpEditing_Component_DMV[playerid] = 0;
					new string[186];
					mysql_format(chandler, string, sizeof string, "UPDATE `payphones_data` SET `X` = '%0.3f', `Y` = '%0.3f', `Z` = '%0.3f', `RX` = '%0.3f', `RY` = '%0.3f', `RZ` = '%0.3f' WHERE `id` = '%d'", x, y, z, rx, ry, rz, PayPhoneInfo[pp][payPhoneId]);
					mysql_fquery(chandler, string, "PayPhoneUpdate");
					FixPayPhoneLabel(pp);
					ShowPlayerAdminMenu(playerid);
				}
			}
			case EDITING_TYPE_DYNAMIC_FURNITURE:
			{
				// furniture
				switch(tmpType_Salon[playerid])
				{
					case 1:
					{
						// namas
						if(GetDistanceBetweenPoints3D(x, y, z, HouseInfo[tmpIter[playerid]][hExitX], HouseInfo[tmpIter[playerid]][hExitY], HouseInfo[tmpIter[playerid]][hExitZ]) > 100.0)
						{
							SendFormat(playerid, 0xBABABAFF, "Esate per daug nutolæ nuo pastato.");
							SetDynamicObjectPos(objectid, oldx, oldy, oldz);
							SetDynamicObjectRot(objectid, oldrx, oldry, oldrz);
							OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
							return 1;
						}
						new string[186],
							selected = tmpSelected[playerid];
						hFurnitureInfo[selected][hfPos][0] = x;
						hFurnitureInfo[selected][hfPos][1] = y;
						hFurnitureInfo[selected][hfPos][2] = z;
						hFurnitureInfo[selected][hfRot][0] = rx;
						hFurnitureInfo[selected][hfRot][1] = ry;
						hFurnitureInfo[selected][hfRot][2] = rz;
						tmpEditing_Component_DMV[playerid] = 0;
						SetDynamicObjectPos(hFurnitureInfo[selected][hfObject], x, y, z);
						SetDynamicObjectRot(hFurnitureInfo[selected][hfObject], rx, ry, rz);
						mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET X = '%f', Y = '%f', Z = '%f', RX = '%f', RY = '%f', RZ = '%f' WHERE id = '%d'", x, y, z, rx, ry, rz, hFurnitureInfo[selected][hfId]);
						mysql_fquery(chandler, string, "FurnitureSaved");
						InfoBox(playerid, "~g~ISSAUGOTA", "OBJEKTO POZICIJA");
						OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
					}
					case 2:
					{
						// verslas
						if(GetDistanceBetweenPoints3D(x, y, z, BusinessInfo[tmpIter[playerid]][bExitX], BusinessInfo[tmpIter[playerid]][bExitY], BusinessInfo[tmpIter[playerid]][bExitZ]) > 100.0)
						{
							SendFormat(playerid, 0xBABABAFF, "Esate per daug nutolæ nuo pastato.");
							SetDynamicObjectPos(objectid, oldx, oldy, oldz);
							SetDynamicObjectRot(objectid, oldrx, oldry, oldrz);
							OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
							return 1;
						}
						new string[186],
							selected = tmpSelected[playerid];
						bFurnitureInfo[selected][bfPos][0] = x;
						bFurnitureInfo[selected][bfPos][1] = y;
						bFurnitureInfo[selected][bfPos][2] = z;
						bFurnitureInfo[selected][bfRot][0] = rx;
						bFurnitureInfo[selected][bfRot][1] = ry;
						bFurnitureInfo[selected][bfRot][2] = rz;
						tmpEditing_Component_DMV[playerid] = 0;
						SetDynamicObjectPos(bFurnitureInfo[selected][bfObject], x, y, z);
						SetDynamicObjectRot(bFurnitureInfo[selected][bfObject], rx, ry, rz);
						mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET X = '%f', Y = '%f', Z = '%f', RX = '%f', RY = '%f', RZ = '%f' WHERE id = '%d'", x, y, z, rx, ry, rz, bFurnitureInfo[selected][bfId]);
						mysql_fquery(chandler, string, "FurnitureSaved");
						InfoBox(playerid, "~g~ISSAUGOTA", "OBJEKTO POZICIJA");
						OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
					}
					case 3:
					{
						// garazas
						if(GetDistanceBetweenPoints3D(x, y, z, GarageInfo[tmpIter[playerid]][gExitX], GarageInfo[tmpIter[playerid]][gExitY], GarageInfo[tmpIter[playerid]][gExitZ]) > 100.0)
						{
							SendFormat(playerid, 0xBABABAFF, "Esate per daug nutolæ nuo pastato.");
							SetDynamicObjectPos(objectid, oldx, oldy, oldz);
							SetDynamicObjectRot(objectid, oldrx, oldry, oldrz);
							OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
							return 1;
						}
						new string[186],
							selected = tmpSelected[playerid];
						gFurnitureInfo[selected][gfPos][0] = x;
						gFurnitureInfo[selected][gfPos][1] = y;
						gFurnitureInfo[selected][gfPos][2] = z;
						gFurnitureInfo[selected][gfRot][0] = rx;
						gFurnitureInfo[selected][gfRot][1] = ry;
						gFurnitureInfo[selected][gfRot][2] = rz;
						tmpEditing_Component_DMV[playerid] = 0;
						SetDynamicObjectPos(gFurnitureInfo[selected][gfObject], x, y, z);
						SetDynamicObjectRot(gFurnitureInfo[selected][gfObject], rx, ry, rz);
						mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET X = '%f', Y = '%f', Z = '%f', RX = '%f', RY = '%f', RZ = '%f' WHERE id = '%d'", x, y, z, rx, ry, rz, gFurnitureInfo[selected][gfId]);
						mysql_fquery(chandler, string, "FurnitureSaved");
						InfoBox(playerid, "~g~ISSAUGOTA", "OBJEKTO POZICIJA");
						OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
					}
				}
			}
			default:
			{
				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);
			}
		}
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
		SetDynamicObjectPos(objectid, oldx, oldy, oldz);
		SetDynamicObjectRot(objectid, oldrx, oldry, oldrz);
		if(tmpEditing_Component_DMV[playerid] == EDITING_TYPE_DYNAMIC_PAYPHONE) OnDialogResponse(playerid, DIALOG_AM_PAYPHONE_MAIN, 1, 0, "");
		if(tmpEditing_Component_DMV[playerid] == EDITING_TYPE_DYNAMIC_FURNITURE) OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
		if(tmpEditing_Component_DMV[playerid] == EDITING_TYPE_DYNAMIC_ATM) ShowPlayerAdminMenu(playerid);
		tmpEditing_Component_DMV[playerid] = 0;
	}
	return 1;
}



public OnPlayerText(playerid, text[])
{
	#if defined BETA_TEST_MODE
		if(CollectingReportBugData[playerid])
		{
			strcat(CollectedReportBugData[playerid], text);
			strcat(CollectedReportBugData[playerid], " ");
			new len = strlen(CollectedReportBugData[playerid]);
			//CollectedReportBugData[playerid][len >= MAX_BUG_REPORT_TEXT ? MAX_BUG_REPORT_TEXT-1 : len] = '\n';
			if(len >= MAX_BUG_REPORT_TEXT-24)
			{
				SendFormat(playerid, 0xBABABAFF, "Pripildëte praneðimo tekstà, jis uþbaigiamas automatiðkai.");
				pc_cmd_endbugreport(playerid, "");
			}
			else
			{
				SendFormat(playerid, 0xBABABAFF, "Ávestas tekstas pridëtas prie klaidos praneðimo.");
			}
			return 0;
		}
	#endif
	if(text[0] == '@' && HaveCommandPermission(playerid, "a") && text[1] != EOS)
	{
		strdel(text, 0, (text[1] == ' ' ? 2 : 1));
		new 
			name[24 + 1];
		if(strlen(PlayerInfo[playerid][pForumName])) format(name, sizeof name, "%s", PlayerInfo[playerid][pForumName]);
		else format(name, sizeof name, "%s", GetPlayerNameEx(playerid));

		SendAdminMessage(0xFFFDA1FF, false, "[%s %s(%d)]: %s", GetGroupName(PlayerGroups[playerid][0]), name, playerid, text);
		return 0;
	}
	else if(
		text[0] != EOS && 
		!Player_IsInTutorial(playerid) &&
		PlayerInfo[playerid][pConnection] == CONNECTION_STATE_LOGGED)
	{
		if(PlayerExtra[playerid][peMuted] > 0)
		{
			SendWarning(playerid, "Jûs esate uþtildytas dar %dmin.", PlayerExtra[playerid][peMuted]/60);
			return 0;
		}
		if(PlayerExtra[playerid][peDeath] > 0)
		{
			SendWarning(playerid, "Jûs esate komos bûsenoje.");
			return 0;
		}
		// kalba
		new string[256],
			vehicleid = INVALID_VEHICLE_ID,
			receiverid = INVALID_PLAYER_ID;
		log_init(true);
		log_set_table("logs_chat");
		log_set_keys("`PlayerId`,`PlayerName`,`Text`");
		log_set_values("'%d','%e','%e'", LogPlayerId(playerid), LogPlayerName(playerid), text);
		log_commit();
		format(string, sizeof string, "%s sako", GetPlayerNameEx(playerid, true, false));
		if((vehicleid = GetPlayerVehicleID(playerid)) != INVALID_VEHICLE_ID && VehicleHaveWindows(GetVehicleModel(vehicleid)) && IsPlayerInAnyVehicle(playerid))
		{
			format(string, sizeof string, "%s (%s)", string, IsWindowOpened(vehicleid) ? ("langas atidarytas") : ("langas uþdarytas"));
		}
		if((receiverid = PhoneInfo[playerid][phoneTalkingTo]) != INVALID_PLAYER_ID)
		{
			format(string, sizeof string, "%s (%s)", string, PhoneInfo[playerid][phoneRingType] == 0 ? ("telefonu") : ("taksofonu"));
		}
		format(string, sizeof string, "%s: %s", string, text);
		ProxDetector(IsPlayerInAnyVehicle(playerid) ? 6.0 : 10.0, playerid, string, 0xE9E9E9FF, 0xDADADAFF, 0xC7C7C7FF, 0xABABABFF, 0x929292FF);
		if(receiverid != INVALID_PLAYER_ID)
		{
			// antra karta darom koda. Pirmiausia i chata issiust reikejo viska su (telefonu): ir pns
			if(!InArray(receiverid, 911, DEFAULT_MECHANIC_NUMBER, DEFAULT_TAXI_NUMBER))
			{
				new to_receiver[256];
				format(to_receiver, sizeof to_receiver, "Paðnekovas %s sako: %s", GetNumberFromContacts(receiverid, PhoneInfo[playerid][phoneRingType] == 0 ? (PlayerInfo[playerid][pPhoneNumber]) : (GetPayPhoneNumber(PhoneInfo[playerid][phoneRingType]-1))), text);
				SendChatMessage(receiverid, 0xF7FF7BFF, to_receiver);
			}
			else
			{
				switch(receiverid)
				{
					case DEFAULT_MECHANIC_NUMBER:
					{
						new
							faction_player,
							Float:x, Float:y,
							service_string[256],
							number[14];
						GetPlayerPos(playerid, x, y, Float:faction_player);
						GetCoords2DZone(service_string, 28, x, y);
						if(PhoneInfo[playerid][phoneRingType] == 0)
						{
							format(number, sizeof number, "%d", PlayerInfo[playerid][pPhoneNumber]);
						}
						else
						{
							format(number, sizeof number, "%d", GetPayPhoneNumber(PhoneInfo[playerid][phoneRingType]));
						}
						format(service_string, sizeof service_string, "Numeris {6A98D8}%s{91BDFC} praneða (vieta: %s ):", number, service_string);
						
						foreach(new mech : Player)
						{
							if(PlayerInfo[mech][pJob] == JOB_MECHANIC)
							{
								SendChatMessage(mech, 0x468EE6FF, service_string);
								SendChatMessage(mech, 0x468EE6FF, text);
							}
						}

						SendFormat(playerid, 0x86DF69FF, "Praneðëte apie ávyká.");
						PlayerPhoneHangup(playerid);
					}	
					case DEFAULT_TAXI_NUMBER:
					{
						new
							faction_player,
							Float:x, Float:y,
							service_string[256],
							number[14];
						GetPlayerPos(playerid, x, y, Float:faction_player);
						GetCoords2DZone(service_string, 28, x, y);
						if(PhoneInfo[playerid][phoneRingType] == 0)
						{
							format(number, sizeof number, "%d", PlayerInfo[playerid][pPhoneNumber]);
						}
						else
						{
							format(number, sizeof number, "%d", GetPayPhoneNumber(PhoneInfo[playerid][phoneRingType]));
						}
						format(service_string, sizeof service_string, "Numeris {6A98D8}%s{91BDFC} kvieèia taksi (vieta: %s):", number, service_string);
						
						foreach(new taxi : Player)
						{
							if(PlayerInfo[taxi][pTaxiLic] > 0)
							{
								if(player_Taxi_Duty[taxi] != INVALID_VEHICLE_ID)
								{
									SendChatMessage(taxi, 0x468EE6FF, service_string);
									SendChatMessage(taxi, 0x468EE6FF, text);
								}
							}
						}

						SendFormat(playerid, 0x86DF69FF, "Praneðimas perduotas taksi.");
						PlayerPhoneHangup(playerid);
					}	
					case 911:
					{
						if(PhoneInfo[playerid][phoneEstimated] == 0)
						{
							if(strfind(text, "medikais", true) != -1 || strfind(text, "ugniagesiais", true) != -1)
							{
								SendFormat(playerid, 0xEEEEEEFF, "Buvote sujungtas su medikais/ugniagesiais. Praneðkite apie ávyká:");
								PhoneInfo[playerid][phoneEstimated] = 1;
							}
							else if(strfind(text, "policija", true) != -1)
							{
								SendFormat(playerid, 0xEEEEEEFF, "Buvote sujungtas su policija. Praneðkite apie ávyká:");
								PhoneInfo[playerid][phoneEstimated] = 2;
							}
							else if(strfind(text, "abu", true) != -1)
							{
								SendFormat(playerid, 0xEEEEEEFF, "Buvote sujungtas su policija ir medikais/ugniagesiais. Praneðkite apie ávyká:");
								PhoneInfo[playerid][phoneEstimated] = 3;
							}
							else
							{
								SendFormat(playerid, 0xEEEEEEFF, "Dispeèerinë: Pakartokite, su kuo norite bûti sujungtas? Policija, medikais ar abu?");
								PhoneInfo[playerid][phoneEstimated] = 0;
							}
						}
						else
						{
							new
								faction_player,
								Float:x, Float:y,
								send_to = PhoneInfo[playerid][phoneEstimated],
								service_string[256],
								number[14];
							GetPlayerPos(playerid, x, y, Float:faction_player);
							GetCoords2DZone(service_string, 28, x, y);
							if(PhoneInfo[playerid][phoneRingType] == 0)
							{
								format(number, sizeof number, "%d", PlayerInfo[playerid][pPhoneNumber]);
							}
							else
							{
								format(number, sizeof number, "%d", GetPayPhoneNumber(PhoneInfo[playerid][phoneRingType]));
							}
							format(service_string, sizeof service_string, "Numeris {6A98D8}%s{91BDFC} praneða apie ávyká (vieta: %s ((/tlc)) ):", number, service_string);
							if(send_to == 1 || send_to == 3)
							{
								SendFactionTypeMessage(FACTION_TYPE_FIRE, 0x468EE6FF, true, service_string);
								SendFactionTypeMessage(FACTION_TYPE_FIRE, 0x7EB1EFFF, true, text);

								GetPlayerPos(playerid, tlc_md[0], tlc_md[1], tlc_md[2]);
							}
							if(send_to == 2 || send_to == 3)
							{
								SendFactionTypeMessage(FACTION_TYPE_POLICE,  0x468EE6FF, true, service_string);
								SendFactionTypeMessage(FACTION_TYPE_POLICE, 0x7EB1EFFF, true, text);
							
								GetPlayerPos(playerid, tlc_pd[0], tlc_pd[1], tlc_pd[2]);
							}

							SendFormat(playerid, 0x86DF69FF, "Praneðëte apie ávyká.");
							PlayerPhoneHangup(playerid);
							stats_police_calls++;
						}
					}
				}
			}
		}
	}
	return 0;
}


public OnPlayerDeath(playerid, killerid, reason)
{
	#if SERVER_DEBUG_LEVEL >= 1
		printf("[debug] OnPlayerDeath(%s)", GetPlayerNameEx(playerid));//, killerid == INVALID_PLAYER_ID ? ("invalid") : (GetPlayerNameEx(killerid))  );
	#endif
	if(PlayerInfo[playerid][pJobDuty] > 1 && PlayerInfo[playerid][pJob] == JOB_TRUCKER && PlayerInfo[playerid][pJobCurrentType] == 1 && PlayerInfo[playerid][pJobDestination] > 0) OnTruckerCancelWares(playerid, PlayerInfo[playerid][pJobDestination]);
	if(PlayerInfo[playerid][pCurrentStatus] == 0)
	{
		// pirma kart
		if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peMaskLabel])) DestroyDynamic3DTextLabel(PlayerExtra[playerid][peMaskLabel]) , PlayerExtra[playerid][peMaskLabel] = INVALID_3DTEXT_ID;
		//if(IsValidObject(PlayerExtra[playerid][peDutyObject])) DestroyObject(PlayerExtra[playerid][peDutyObject]) , PlayerExtra[playerid][peDutyObject] = INVALID_OBJECT_ID;
		if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][pePoliceBadgeText])) DestroyDynamic3DTextLabel(PlayerExtra[playerid][pePoliceBadgeText]) , PlayerExtra[playerid][pePoliceBadgeText] = INVALID_3DTEXT_ID;
		//if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peDeathLabel])) DestroyDynamic3DTextLabel(PlayerExtra[playerid][peDeathLabel]) , PlayerExtra[playerid][peDeathLabel] = INVALID_3DTEXT_ID;
		if(PhoneInfo[playerid][phoneTalkingTo] != INVALID_PLAYER_ID || PhoneInfo[playerid][phoneRinging] != INVALID_PLAYER_ID)
		{
			PlayerPhoneHangup(playerid);
		}
		PlayerInfo[playerid][pCurrentStatus] = PLAYER_STATUS_ALMOST_DEATH;

		GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
		PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);

		new attempt = 1,
			Float:groundZ;

		while(attempt <= 5)
		{
			new result = CA_RayCastLine(
				// Start
				PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ] + (6.5*attempt) + ((attempt-1)*10.0),
				// End
				PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ] - (6.5*attempt) + ((attempt-1)*10.0),
				// Store
				PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], groundZ
			);

			if(result != 0)
			{
				PlayerInfo[playerid][pPosZ] = groundZ;
				break;
			}

			attempt++;
		}
	}
	else if(PlayerInfo[playerid][pCurrentStatus] == PLAYER_STATUS_ALMOST_DEATH)
	{
		PlayerTextDrawHide(playerid, DeathScreenTD[playerid]);
		PlayerInfo[playerid][pCurrentStatus] = PLAYER_STATUS_DEATH;
		Iter_Clear(PlayerDamages[playerid]);
		PlayerExtra[playerid][peDeath] = 0;
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] OnPlayerRequestSpawn(%s)", GetPlayerNameEx(playerid));
	#endif
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] OnPlayerRequestClass(%s, %d, %d)", GetPlayerNameEx(playerid), classid, PlayerInfo[playerid][pConnection]);
	#endif
	if(IsPlayerNPC(playerid)) return 1;

	if(PlayerInfo[playerid][pConnection] == CONNECTION_STATE_LOGGED)
	{
		SpawnPlayerEx(playerid, 0);
	}
	return 0;
}

public OnPlayerSpawn(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] OnPlayerSpawn(%s, %d)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pAfterLogin]);
	#endif
	
	if(IsPlayerNPC(playerid)) return 1;

	if(PlayerInfo[playerid][pAfterLogin] == 1)
	{
		if(PlayerInfo[playerid][pIsApproved])
		{
			LoadPlayerLoginNotes(playerid);
			PreparePlayerVehicles(playerid);

			new string[126];

			mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_inventory` WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
			mysql_tquery(chandler, string, "PlayerInventoryLoad", "d", playerid);

			mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_clothes` WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
			mysql_tquery(chandler, string, "PlayerClothesLoad", "d", playerid);

			mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_contacts` WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
			mysql_tquery(chandler, string, "PlayerContactsLoad", "d", playerid);

			mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_drugs` WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
			mysql_tquery(chandler, string, "PlayerDrugsLoad", "d", playerid);

			mysql_format(chandler, string, sizeof string, "SELECT `Packed` FROM `players_weapons` WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
			mysql_tquery(chandler, string, "PlayerWeaponsLoad", "d", playerid);

			call OnPlayerRequestDataLoad(playerid);

			#if defined ENABLE_GPS
				//SendFormat(playerid, 0xFF7300FF, "* {FFAD69}Dël maþesnës apkrovos administratoriams, serverio startavimo metu naudokitës komanda /gps");
			#endif
		}

		SetPlayerColor(playerid, DEFAULT_PLAYER_COLOR);
		SetPlayerArmour(playerid, 0.0);

		SetPlayerSkillLevel(playerid, 0, 1);
		SetPlayerSkillLevel(playerid, 6, 1);
	  	SetPlayerSkillLevel(playerid, 3, 1000);
		SetPlayerSkillLevel(playerid, 4, 0);
		SetPlayerSkillLevel(playerid, 5, 1000);
	  	SetPlayerSkillLevel(playerid, 7, 1000);
	  	SetPlayerSkillLevel(playerid, 8, 1000);
	  	SetPlayerSkillLevel(playerid, 9, 1000);
	  	SetPlayerSkillLevel(playerid, 10, 1000);

		call OnPlayerSpawnFirstTime(playerid);
		PlayerInfo[playerid][pAfterLogin] = 0;
	}
	if(PlayerInfo[playerid][pCurrentStatus] == PLAYER_STATUS_DEATH)
	{
		// ligoninej jau atsispawnino
		SendFormat(playerid, 0xF2A545FF, "Buvote paleistas ið ligoninës. Sumokëjote 150$ uþ gydymà.");
		SendFormat(playerid, 0xF2A545FF, "Praradote visus turëtus daiktus, iðskyrus telefonà.");

		Iter_Clear(PlayerDamages[playerid]);

		new string[126];
		mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_clothes` WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
		mysql_tquery(chandler, string, "PlayerClothesLoad", "d", playerid);
		new percents = randomEx(0, 15),
			money;
		if(percents > 0 && GetPlayerMoney(playerid) > 50)
		{
			money = GetPlayerMoney(playerid)/100*percents;
			SendFormat(playerid, 0xF27C45FF, "Pametëte %dproc. ($%d) turëtø grynøjø pinigø.", percents, money);
		}
		GivePlayerMoney(playerid, -150 - money);
		SetCameraBehindPlayer(playerid);
		PlayerInfo[playerid][pCurrentStatus] = 0;
		for(new td = 0; td < 4; td++) TextDrawHideForPlayer(playerid, DrugEffect[td]);
		if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peDeathLabel]))
		{
			DestroyDynamic3DTextLabel(PlayerExtra[playerid][peDeathLabel]);
		}
		PlayerExtra[playerid][peDeathLabel] = INVALID_3DTEXT_ID;
	}
	if(GetPlayerSkin(playerid) != PlayerInfo[playerid][pSkin]) SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	return 1;
}

stock SpawnPlayerEx(playerid, type = 0, bool:set = false)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] SpawnPlayerEx(%s, %d, appr: %d)", GetPlayerNameEx(playerid), type, PlayerInfo[playerid][pIsApproved]);
	#endif

	new skin = 1,
		jail_type = PlayerInfo[playerid][pJailType],
		jail_time = PlayerInfo[playerid][pJailTime],
		status = PlayerInfo[playerid][pCurrentStatus],
		Float:x, Float:y, Float:z,
		spawn_type 	= PlayerInfo[playerid][pSpawnType],
		spawn_id 	= PlayerInfo[playerid][pSpawnId];

	if(PlayerInfo[playerid][pIsApproved])
	{
		if(jail_type > 0 && jail_time > 0 && PlayerInfo[playerid][pCurrentStatus] != PLAYER_STATUS_ALMOST_DEATH)
		{
			switch(jail_type)
			{
				case 1:
				{
					// arestine
					x = GetGVarFloat("ArrestSpawnX"),
					y = GetGVarFloat("ArrestSpawnY"),
					z = GetGVarFloat("ArrestSpawnZ");
					SetPlayerVirtualWorld(playerid, GetGVarInt("ArrestSpawnVW"));
					SetPlayerInterior(playerid, GetGVarInt("ArrestSpawnInt"));
					SetSpawnInfo(playerid, playerid, PlayerInfo[playerid][pSkin], x, y, z, 0.0, 0, 0, 0, 0, 0, 0);
				}
				case 2:
				{
					// prison
					x = GetGVarFloat("JailSpawnX"),
					y = GetGVarFloat("JailSpawnY"),
					z = GetGVarFloat("JailSpawnZ");
					SetPlayerVirtualWorld(playerid, GetGVarInt("JailSpawnVW"));
					SetPlayerInterior(playerid, GetGVarInt("JailSpawnInt"));
					SetSpawnInfo(playerid, playerid, PlayerInfo[playerid][pSkin], x, y, z, 0.0, 0, 0, 0, 0, 0, 0);
				}
				case 3:
				{
					// oc
					x = GetGVarFloat("OOCJailSpawnX"),
					y = GetGVarFloat("OOCJailSpawnY"),
					z = GetGVarFloat("OOCJailSpawnZ");
					SetPlayerVirtualWorld(playerid, GetGVarInt("OOCJailSpawnVW"));
					SetPlayerInterior(playerid, GetGVarInt("OOCJailSpawnInt"));
					SetSpawnInfo(playerid, playerid, PlayerInfo[playerid][pSkin], x, y, z, 0.0, 0, 0, 0, 0, 0, 0);
				}
			}
		}
		else if(status > 0)
		{
			switch(status)
			{
				case PLAYER_STATUS_ALMOST_DEATH:
				{
					SetSpawnInfo(playerid, playerid, PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], 0.0, 0, 0, 0, 0, 0, 0);
					SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
					SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
					PlayerTextDrawShow(playerid, DeathScreenTD[playerid]);
					new 
						string[126];
					format(string, sizeof string, "(( MIRÆS ÞAIDËJAS\nSuþalojimø kiekis: %d (/damages %d) ))", Iter_Count(PlayerDamages[playerid]), playerid);
					PlayerExtra[playerid][peDeathLabel] = CreateDynamic3DTextLabel(string, 0xBF2D2DFF, 0.0, 0.0, 0.8, 8.0, playerid, INVALID_VEHICLE_ID, 1);
					Streamer_Update(playerid);
					PlayerExtra[playerid][peDeath] = DEFAULT_DEATH_TIME_SECONDS;
				}
				case PLAYER_STATUS_DEATH:
				{
					SetSpawnInfo(playerid, playerid, PlayerInfo[playerid][pSkin], GetGVarFloat("SpawnHospitalX"), GetGVarFloat("SpawnHospitalY"), GetGVarFloat("SpawnHospitalZ"), 0.0, 0, 0, 0, 0, 0, 0);
					SetPlayerVirtualWorld(playerid, GetGVarInt("SpawnHopitalVW"));
					SetPlayerInterior(playerid, GetGVarInt("SpawnHopitalInt"));
					if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peDeathLabel])) DestroyDynamic3DTextLabel(PlayerExtra[playerid][peDeathLabel]);
					for(new i = 0; i < MAX_DRUG_TYPES; i++)
					{
						PlayerDrugs[playerid][i][drugOnDuty] = 0;
						SetPlayerDrunkLevel(playerid, 0);
					}
					PlayerExtra[playerid][peDeathLabel] = INVALID_3DTEXT_ID;
					Iter_Clear(PlayerDamages[playerid]);
				}
			}
		}
		else
		{
			switch(spawn_type)
			{
				case SPAWN_TYPE_DEFAULT:
				{
					// default
					SetSpawnInfo(playerid, playerid, skin, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], 0.0, 0, 0, 0, 0, 0, 0);
					SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
					SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
				}
				case SPAWN_TYPE_HOUSE:
				{
					// namas
					new houseid = FindHouseBySql(spawn_id);
					if(houseid != INVALID_HOUSE_ID)
					{
						SetSpawnInfo(playerid, playerid, skin, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ], 0.0, 0, 0, 0, 0, 0, 0);
						SetPlayerInterior(playerid, HouseInfo[houseid][hExterior]);
						SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hOutVW]);
					}
					else
					{
						SetSpawnInfo(playerid, playerid, skin, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], 0.0, 0, 0, 0, 0, 0, 0);
						SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
						SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
					}
				}
				case SPAWN_TYPE_BUSINESS:
				{
					// verslas
					new businessid = FindBusinessBySql(spawn_id);
					if(businessid != INVALID_BUSINESS_ID)
					{
						SetSpawnInfo(playerid, playerid, skin, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ], 0.0, 0, 0, 0, 0, 0, 0);
						SetPlayerInterior(playerid, BusinessInfo[businessid][bExterior]);
						SetPlayerVirtualWorld(playerid, BusinessInfo[businessid][bOutVW]);
					}
					else
					{
						SetSpawnInfo(playerid, playerid, skin, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], 0.0, 0, 0, 0, 0, 0, 0);
						SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
						SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
					}
				}
				case SPAWN_TYPE_FACTION:
				{
					// frakcija
					new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
					if(factionid != -1)
					{
						SetSpawnInfo(playerid, playerid, skin, FactionInfo[factionid][fSpawnX], FactionInfo[factionid][fSpawnY], FactionInfo[factionid][fSpawnZ], 0.0, 0, 0, 0, 0, 0, 0);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
					else
					{
						SetSpawnInfo(playerid, playerid, skin, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], 0.0, 0, 0, 0, 0, 0, 0);
						SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
						SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
					}
				}
			}
		}
	}
	else
	{
		SetSpawnInfo(playerid, playerid, skin, -5583.91357, 1529.52417, 5.12383, 0.0, 0, 0, 0, 0, 0, 0);
	}
	if(set) PlayerInfo[playerid][pCurrentStatus] = PLAYER_STATUS_DEFAULT;
	return SpawnPlayer(playerid);
}

forward PlayerWeaponsLoad(playerid);
public PlayerWeaponsLoad(playerid)
{
	if(!cache_num_rows())
	{
		new string[126];
		mysql_format(chandler, string, sizeof string, "INSERT INTO `players_weapons` (`PlayerId`) VALUES ('%d')", PlayerInfo[playerid][pId]);
		mysql_query(chandler, string, false);
	}
	else
	{
		new
			packed[256],
			data[13][4];
		cache_get_value_name(0, "Packed", packed);
		sscanf(packed,"p<|>dddddddddddddddddddddddddddddddddddddddddddddddddddd",
			data[0][0],
			data[0][1],
			data[0][2],
			data[0][3],
			data[1][0],
			data[1][1],
			data[1][2],
			data[1][3],
			data[2][0],
			data[2][1],
			data[2][2],
			data[2][3],
			data[3][0],
			data[3][1],
			data[3][2],
			data[3][3],
			data[4][0],
			data[4][1],
			data[4][2],
			data[4][3],
			data[5][0],
			data[5][1],
			data[5][2],
			data[5][3],
			data[6][0],
			data[6][1],
			data[6][2],
			data[6][3],
			data[7][0],
			data[7][1],
			data[7][2],
			data[7][3],
			data[8][0],
			data[8][1],
			data[8][2],
			data[8][3],
			data[9][0],
			data[9][1],
			data[9][2],
			data[9][3],
			data[10][0],
			data[10][1],
			data[10][2],
			data[10][3],
			data[11][0],
			data[11][1],
			data[11][2],
			data[11][3],
			data[12][0],
			data[12][1],
			data[12][2],
			data[12][3]);
		for(new i = 0; i < 13; i++)
		{
			if(data[i][0] != 0 && data[i][1] > 0)
			{
				if(data[i][2] == WEAPON_GIVE_TYPE_NO_INVENTORY && PlayerInfo[playerid][pFaction] <= 0) { continue; }
				GivePlayerWeapon(playerid, data[i][0], data[i][1], data[i][2], data[i][3]);
			}
		}
	}
	return 1;
}

forward PlayerDrugsLoad(playerid);
public PlayerDrugsLoad(playerid)
{
	new index,
		string[126],
		find_type[MAX_DRUG_TYPES];
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_int(i, "Type", index);
		if(index >= 0 && index <= MAX_DRUG_TYPES)
		{
			find_type[index] = 1;
			cache_get_value_name_int(i, "UsedTimes", PlayerDrugs[playerid][index][drugUsedTimes]);
			cache_get_value_name_int(i, "Unused", PlayerDrugs[playerid][index][drugUnused]);
			cache_get_value_name_int(i, "Level", PlayerDrugs[playerid][index][drugLevel]);
		}
	}
	for(new i = 0; i < MAX_DRUG_TYPES; i++)
	{
		if(find_type[i] <= 0)
		{
			mysql_format(chandler, string, sizeof string, "INSERT INTO `players_drugs` (`PlayerId`,`Type`) VALUES ('%d','%d')", PlayerInfo[playerid][pId], i);
			mysql_fquery(chandler, string, "DrugsSaved");
		}
	}
	return 1;
}
thread(DrugsSaved);

forward PlayerContactsLoad(playerid);
public PlayerContactsLoad(playerid)
{
	if(!cache_num_rows())
	{
		new string[125];
		mysql_format(chandler, string, sizeof string, "INSERT INTO `players_contacts` (`PlayerId`) VALUES ('%d')", PlayerInfo[playerid][pId]);
		mysql_query(chandler, string, false);
	}
	else
	{
		new packed[1024];
		cache_get_value_name(0, "Packed", packed);
		sscanf(packed,"p<|>\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd\
			sd",
			PlayerContacts[playerid][0][contactName],
			PlayerContacts[playerid][0][contactNumber],
			PlayerContacts[playerid][1][contactName],
			PlayerContacts[playerid][1][contactNumber],
			PlayerContacts[playerid][2][contactName],
			PlayerContacts[playerid][2][contactNumber],
			PlayerContacts[playerid][3][contactName],
			PlayerContacts[playerid][3][contactNumber],
			PlayerContacts[playerid][4][contactName],
			PlayerContacts[playerid][4][contactNumber],
			PlayerContacts[playerid][5][contactName],
			PlayerContacts[playerid][5][contactNumber],
			PlayerContacts[playerid][6][contactName],
			PlayerContacts[playerid][6][contactNumber],
			PlayerContacts[playerid][7][contactName],
			PlayerContacts[playerid][7][contactNumber],
			PlayerContacts[playerid][8][contactName],
			PlayerContacts[playerid][8][contactNumber],
			PlayerContacts[playerid][9][contactName],
			PlayerContacts[playerid][9][contactNumber],
			PlayerContacts[playerid][10][contactName],
			PlayerContacts[playerid][10][contactNumber],
			PlayerContacts[playerid][11][contactName],
			PlayerContacts[playerid][11][contactNumber],
			PlayerContacts[playerid][12][contactName],
			PlayerContacts[playerid][12][contactNumber],
			PlayerContacts[playerid][13][contactName],
			PlayerContacts[playerid][13][contactNumber],
			PlayerContacts[playerid][14][contactName],
			PlayerContacts[playerid][14][contactNumber],
			PlayerContacts[playerid][15][contactName],
			PlayerContacts[playerid][15][contactNumber],
			PlayerContacts[playerid][16][contactName],
			PlayerContacts[playerid][16][contactNumber],
			PlayerContacts[playerid][17][contactName],
			PlayerContacts[playerid][17][contactNumber],
			PlayerContacts[playerid][18][contactName],
			PlayerContacts[playerid][18][contactNumber],
			PlayerContacts[playerid][19][contactName],
			PlayerContacts[playerid][19][contactNumber],
			PlayerContacts[playerid][20][contactName],
			PlayerContacts[playerid][20][contactNumber],
			PlayerContacts[playerid][21][contactName],
			PlayerContacts[playerid][21][contactNumber],
			PlayerContacts[playerid][21][contactName],
			PlayerContacts[playerid][21][contactNumber],
			PlayerContacts[playerid][22][contactName],
			PlayerContacts[playerid][22][contactNumber],
			PlayerContacts[playerid][23][contactName],
			PlayerContacts[playerid][23][contactNumber],
			PlayerContacts[playerid][24][contactName],
			PlayerContacts[playerid][24][contactNumber],
			PlayerContacts[playerid][25][contactName],
			PlayerContacts[playerid][25][contactNumber],
			PlayerContacts[playerid][26][contactName],
			PlayerContacts[playerid][26][contactNumber],
			PlayerContacts[playerid][27][contactName],
			PlayerContacts[playerid][27][contactNumber],
			PlayerContacts[playerid][28][contactName],
			PlayerContacts[playerid][28][contactNumber],
			PlayerContacts[playerid][29][contactName],
			PlayerContacts[playerid][29][contactNumber]);
	}
	return 1;
}

stock IsPhoneEnabled(playerid)
{
	return !!(!PhoneInfo[playerid][phoneDisabled]);
}

stock IsPlayerInAnyAdminGroup(playerid)
{
	if(PlayerGroups[playerid][0] != 0) return true;
	return false;
}

stock IsPlayerInAdminGroup(playerid, groupid, bool:checkbysql=true)
{
	if(checkbysql)
	{
		for(new i = 0; i < MAX_PLAYER_GROUPS; i++)
		{
			if(PlayerGroups[playerid][i] == groupid) return true;
		}
	}
	else
	{
		for(new i = 0; i < MAX_PLAYER_GROUPS; i++)
		{
			if(PlayerGroups[playerid][i] == GroupsInfo[groupid][groupId]) return true;
		}
	}
	return false;
}

stock HaveAdminPermission(playerid, perm[])
{
	new string[186],
		bool:return_value = false,
		line[24];
	mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `groups_permissions` WHERE `Permission` = '%s' AND (", perm); // AND Option = '1' neriekalingas. Jei nera privilegijos - nera ir row. Option column istrintas ir is sql
	for(new i = 0; i < MAX_PLAYER_GROUPS; i++)
	{
		format(line, sizeof line, "`GroupId` = '%d'", PlayerGroups[playerid][i]);
		if(i != MAX_PLAYER_GROUPS-1) strcat(line, " OR ");
		strcat(string, line);
	}
	strcat(string, ")");
	new Cache:result = mysql_query(chandler, string, true),
		Cache:sys = cache_save();
	if(cache_num_rows()) return_value = true;
	cache_delete(result);
	cache_set_active(sys);
	return return_value;
}
stock HaveCommandPermission(playerid, cmd[])
{

	// SELECT * FROM `groups_commands` WHERE `Command` = 'allowooc' AND `Option` = '0' AND `GroupId` = '1' OR `GroupId` = '0'

	new string[186],
		line[24];
	mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `groups_commands` WHERE `Command` = '%s' AND (", cmd);
	for(new i = 0; i < MAX_PLAYER_GROUPS; i++)
	{
		format(line, sizeof line, "`GroupId` = '%d'", PlayerGroups[playerid][i]);
		if(i != MAX_PLAYER_GROUPS-1) strcat(line, " OR ");
		strcat(string, line);
	}
	strcat(string, ")");
	new Cache:result = mysql_query(chandler, string, true),
		Cache:sys = cache_save();
	if(cache_num_rows())
	{
		cache_delete(result);
		cache_set_active(sys);
		return true;
	}
	cache_delete(result);
	cache_set_active(sys);
	return false;
}
public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	// before cmd
	#if SERVER_DEBUG_LEVEL >= 2
		if(!(flags & CMD_TYPE_NOT_LOGGABLE)) printf("[debug] OnPlayerCommandReceived(%s,%s(%s),%d)", GetPlayerNameEx(playerid), cmd, params);
	#endif
	if(	PlayerInfo[playerid][pConnection] != CONNECTION_STATE_LOGGED || 
		(Player_IsInTutorial(playerid) && !isequal(cmd, "skip", true)))
	{
		return 0;
	}
	if(PlayerExtra[playerid][peSpamTime] > 0)
	{
		SendWarning(playerid, "Nenaudokite komandø taip greitai.");
		return 0;
	}
	if(flags & CMD_TYPE_ADMIN)
	{
		if(!HaveCommandPermission(playerid, cmd))
		{
			InfoBox(playerid, "NETURITE", "TEISES");
			return 0;
		}
	}
	if(!(flags & CMD_TYPE_ALLOW_NEWBIE) && !PlayerInfo[playerid][pIsApproved])
	{
		SendFormat(playerid, 0xF5F5F5FF, "Jûsø veikëjas dar nëra patvitintas.");
		SendFormat(playerid, 0xEFEFEFFF, "Jûs galite naudoti tik roleplay komandas ir kalbëti.");
		return 0;
	}
	if((flags & CMD_TYPE_MUTABLE) && PlayerExtra[playerid][peMuted] > 0)
	{
		SendWarning(playerid, "Jûs esate uþtildytas dar %dmin.", PlayerExtra[playerid][peMuted]/60);
		return 0;
	}
	if((flags & CMD_TYPE_ANIMATION) && PlayerExtra[playerid][peDeath] > 0)
	{
		SendWarning(playerid, "Jûs esate komos bûsenoje.");
		return 0;
	}
	return 1;
}


public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	// printf("OnPlayerCommandPerformed(%s, %s, %s, %d, %d)", ret_GetPlayerName(playerid), cmd, params, result, flags);

	if(result == -1) { return SendError(playerid, "Tokios komandos nëra. Naudokite /help arba /ask"); }
	else
	{
		PlayerExtra[playerid][peSpamTime] = 1;
		if(!(flags & CMD_TYPE_NOT_LOGGABLE))
		{
			log_init(true);
			log_set_table("logs_cmd");
			log_set_keys("`PlayerId`,`PlayerName`,`Cmd`,`Params`,`Flags`");
			log_set_values("'%d','%e','%e','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), cmd, params, flags);
			log_commit();
		}
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(!IsPlayerInAnyAdminGroup(playerid)) return 1;
	if(IsPlayerInAnyVehicle(playerid)) return SendError(playerid, "Teleportacija tr. priemonëje neveikia.");
	new Float:z;
	CA_FindZ_For2DCoord(fX, fY, z);
	SetPlayerPos(playerid, fX, fY, z + 5.0);
	return 1;
}

public OnPlayerConnect(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] OnPlayerConnect(%s)", ret_GetPlayerName(playerid));
	#endif
	
	if(IsPlayerNPC(playerid))
	{
		SetPlayerColor(playerid, 0x000000FF);
		return 1;
	}

	SetPlayerColor(playerid, 0xffffffFF);
	gConnectedPlayers++;
	ResetData(playerid);
	ResetPlayerInventory(playerid);
	ClearChat(playerid, 15);
	TogglePlayerSpectating(playerid, true);
	InterpolateCameraPos(playerid, 		2102.66, -1032.10, 133.01, 2265.64, -1543.05, 131.90, 15000, CAMERA_MOVE);
	InterpolateCameraLookAt(playerid, 	1753.92, -1247.18, 131.90, 1967.84, -1197.94, 33.61, 15000, CAMERA_MOVE);
	if(!CheckBan(playerid))
	{
		if(PlayerInfo[playerid][pConnection] == CONNECTION_STATE_CONNECTED)
		{
			KickEx(playerid);
		}
		DMV_Create_Player(playerid);
		FurnitureTd_Create_Player(playerid);
		JailTimeTD_Create_Player(playerid);
		MechTune_Create_Player(playerid);
		VLTextdraw_Create_Player(playerid);
		VShop_Create_Player(playerid);
		WarningTD_Create_Player(playerid);
		SpamBarTD_Create_Player(playerid);
		PhoneTD_Create_Player(playerid);
		JobGuiTD_Create_Player(playerid);
		InfoBar_Create_Player(playerid);
		DeathScreen_Create_Player(playerid);
		PayPhoneTD_Create_Player(playerid);
		CharListTD_Create_Player(playerid);
		CharCreateTD_Create_Player(playerid);
		PreparePlayerData(playerid);
		SetTimerEx("LoginHalt", 3000, false, "d", playerid); // reikia palaukt, kol viska surenkam tada siunciam tquery viduje
	}
	return 1;
}

hook OnProxyResult(index, result)
{
	if(result == 1)
	{
		SendError(index, "Þaidimas su VPN yra draudþiamas.");
		KickEx(index);
	}
}

forward LoginHalt(playerid);
public LoginHalt(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] LoginHalt(%s, %s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
	#endif

	new country[56];
	GetIPCountry(GetPlayerIpEx(playerid), country, 56);
	/*
	 * Checkinam, ar gali jungtis is isvis 
	 */
	if(	!isequal(country, "Lithuania") && 
		!isequal(GetPlayerIpEx(playerid), "127.0.0.1") &&
		!isequal(GetPlayerIpEx(playerid), "255.255.255.255") &&
		!isequal(GetPlayerIpEx(playerid), "Unknown"))
	{
		// IP ne master, ne unknown ir ne LT
		new string[256];
		mysql_format(chandler, string, sizeof string, "\
			SELECT NULL FROM `server_whitelist` WHERE IP = '%e' OR Name = '%e' OR Country = '%e'",
			GetPlayerIpEx(playerid), GetPlayerNameEx(playerid), country);

		new Cache:result = mysql_query(chandler, string, true);
		if(!cache_num_rows())
		{
			SendFormat(playerid, 0xC43939FF, "Ðiuo IP negalite prisijungti á serverá. (%s, %s)", GetPlayerIpEx(playerid), country);
			KickEx(playerid);
		}
		cache_delete(result);
	}
	SendFormat(playerid, 0xBABABAFF, "Jungiatës ið %s IP:%s", country, GetPlayerIpEx(playerid));

	/*
	 * Tikrinam ar isvis yra toks useris
	 */
	new string[256];
	mysql_format(chandler, string, sizeof string, "\
		SELECT id,Salt,NameChanges,NumberChanges,PlateChanges,Donator,DonatorTime,\
		Group1,Group2,Group3 \
		FROM `users_data` WHERE Name = '%e'", GetPlayerNameEx(playerid));
	mysql_tquery(chandler, string, "CheckUserName", "d", playerid);
	return 1;
}

forward CheckUserName(playerid);
public CheckUserName(playerid)
{
	if(cache_num_rows())
	{
		cache_get_value_name_int(0, "id", PlayerInfo[playerid][pUserId]);
		cache_get_value_name_int(0, "NameChanges", PlayerInfo[playerid][pNameChanges]);
		cache_get_value_name_int(0, "NumberChanges", PlayerInfo[playerid][pNumberChanges]);
		cache_get_value_name_int(0, "PlateChanges", PlayerInfo[playerid][pPlateChanges]);
		cache_get_value_name_int(0, "DonatorTime", PlayerInfo[playerid][pDonatorTime]);

		new fetch_string[12];
		for(new i = 0; i < MAX_PLAYER_GROUPS; i++)
		{
			format(fetch_string, 12, "Group%d", i+1);
			cache_get_value_name_int(0, fetch_string, PlayerGroups[playerid][i]);
		}
		SortArray(PlayerGroups[playerid], 0, MAX_PLAYER_GROUPS);

		if(PlayerInfo[playerid][pDonatorTime] + TIME_TO_RESET_DONATOR < gettime())
		{
			PlayerInfo[playerid][pDonator] = 0;
			SaveUserIntEx(PlayerInfo[playerid][pUserId], "Donator", 0);
			SaveUserIntEx(PlayerInfo[playerid][pUserId], "DonatorTime", 0);
		}
		else 
		{
			cache_get_value_name_int(0, "Donator", PlayerInfo[playerid][pDonator]);
		} 

		new 
			already = INVALID_PLAYER_ID;
		if((already = GetPlayerByUserId(PlayerInfo[playerid][pUserId], playerid)) != INVALID_PLAYER_ID)
		{
			SendError(playerid, "Ðio vartotojas jau yra prisijungæs þaidime (%s).", PlayerInfo[playerid][pId] != 0 ? (GetPlayerNameEx(already)) : ("renkasi veikëjà"));
			KickEx(playerid);
			return 1;
		}
		else
		{
			cache_get_value_name(0, "Salt", PlayerInfo[playerid][pSalt], 30);
			Login_ShowPassword(playerid);
		}
	}
	else
	{
		if(!CheckNameUsageAnywhere(player_CharName[playerid], true))
		{
			User_Register_Show(playerid);
		}
		else SendError(playerid, "Ðis vardas jau yra naudojamas.");
	}
	return 1;
}

hook OnPlayerRegister(playerid)
{
	Register_ShowDiscordInput(playerid);
	return 1;
}

hook OnPlayerSpawnChar(playerid, selected)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("OnPlayerSpawnChar(%s, %d)", GetPlayerNameEx(playerid), selected);
	#endif
	new 
		index = player_charList_Page[playerid]*2 + selected,
		string[126],
		bool:is_confirmed = (player_CharArray[playerid][index][1] == 1 ? true : false),
		id = player_CharArray[playerid][index][0];

	if(!is_confirmed)
	{
		return SendError(playerid, "Ðis veikëjas yra nepatvirtintas.");
	}

	if(FindPlayerBySql(id) != INVALID_PLAYER_ID)
	{
		CharListTD_ShowMessage(playerid, "~w~Sis veikejas jau yra ~r~zaidime~w~!");
		return 1;
	}

	if(PlayerInfo[playerid][pId] == 0)
	{
		SendFormat(playerid, 0xFF7300FF, "* {FFAD69}Rekomenduojame perskaityti sistemø apraðymus forume www."#PROJECT_NAME"."#PROJECT_DOMAIN"");
		//if(Audio_IsClientConnected(playerid) == 0)
		//{
		//	SendFormat(playerid, 0xEA7F7FFF, "Jûs nenaudojate audio papildinio, kuris reikalingas þaidþiant mûsø serveryje. Já parsisiøsti galite ið www.Southland.lt");
		//}
		SendFormat(playerid, 0xBABABAFF, "Norëdami valdyti ekrane rodomus langus, raðykite /screen");
		/*if(GiftsEnabled)
		{
			pc_cmd_giftinfo(playerid, "");
		}*/
	}
	is_confirmed && mysql_format(chandler, string, sizeof string, "SELECT Name,id FROM `players_data` WHERE id = '%d'", id) || mysql_format(chandler, string, sizeof string, "SELECT Name,Skin,id FROM `players_new` WHERE id = '%d'", id); 
	mysql_tquery(chandler, string, "SpawnCharDataLoad", "dd", playerid, selected);
	return 1;
}
/*
CMD:giftinfo(playerid, params[])
{
	if(GiftsEnabled)
	{
		new dialog[1524];

		strcat(dialog, "{ff7878}Sveiki atvykæ á Southland.lt!\n{ffffff}Ðiuo metu serveryje vyksta kalëdinis dovanø ieðkojimas. Kiekvienas serverio þaidëjas\ngali ieðkoti ir atidaryti paslëptas dovanø dëþes.\n");
		strcat(dialog, "Dëþës yra paslëptos po visà San Andreas þemëlapá. Ieðkoti jø galite:\n{74d680}");
		strcat(dialog, "\t Po San Andreas tiltais\n\t Miðkuose bei kalnuose\n\t Tuneliuose\n\t Kitose neáprastose vietose\n \n");
		strcat(dialog, "{ffffff}Dovanø deþëse galësite rasti ðias dovanas:\n{378b29}");
		strcat(dialog, "\t1. [1x] PLAYERUNKNOWN'S BATTLEGROUNDS þaidimas *\n\t2. [1x] Counter-Strike: Global Offensive þaidimas *\n\t3. [1x] H1Z1 þaidimas *\n\t4. [1x] Gold remëjo statusas\n\t5. [2x] Silver remëjo statusai");
		strcat(dialog, "\n\t6. [3x] Bronze remëjo statusai\n\t7. [1x] 3 nemokami vardo keitimai\n\t7. [1x] Sanchez motociklas\n\t8. [1x] Quad motociklas\n\t9. [1x] $50.000 þaidimo valiutos\n\t10. [1x] $30.000 þaidimo valiutos\n \n");
		strcat(dialog, "{e1e1e1}* Radæ STEAM þaidimà, susisiekite su ákûrëju Old Cases, kuris jums atsiøs þaidimo GIFT\n** Dovanø ieðkojimas vyksta iki 2017.12.31 14:00\n*** Dovanas atidaryti gali tik 2val. praþaidæ þaidëjai. Vienas UCP vartotojas gali\natidaryti tik 1 dovanà.");

		SendFormat(playerid, 0xBABABAFF, "Informacija apie kalëdines dovanas: /giftinfo");

		Dialog_Show(playerid, NONE, DIALOG_STYLE_MSGBOX, "Kalëdos!", dialog, "Gerai", "");
		return 1;
	}
	return 0;
}
*/

forward SpawnCharDataLoad(playerid, selected);
public SpawnCharDataLoad(playerid, selected)
{
	new 
		index = player_charList_Page[playerid]*2 + selected,
		bool:is_confirmed = (player_CharArray[playerid][index][1] == 1 ? true : false);

	if(cache_num_rows())
	{
		new
			name[MAX_PLAYER_NAME + 1];
		cache_get_value_name_int(0, "id", PlayerInfo[playerid][pId]);
		cache_get_value_name(0, "Name", name);
		cache_get_value_name_int(0, "Skin", PlayerInfo[playerid][pSkin]);

		if(CheckAccountLock(playerid, name))
		{
			SendWarning(playerid, "Veikëjas yra uþrakintas.");
			KickEx(playerid);
			return 1;
		}


		if(strlen(name))
		{
			SetPlayerName(playerid, name);
			format(PlayerInfo[playerid][pName], 24, name);
			PlayerInfo[playerid][pConnection] = CONNECTION_STATE_LOGGED;
		
			if(is_confirmed)
			{
				LoadAccount(playerid);
			}
			else
			{
				SpawnUnconfirmedChar(playerid);
			}

			CharListTD_Hide(playerid);

			CancelSelectTextDraw(playerid);
			tmpESC[playerid] = 0;
		}			
	}
	return 1;
}

hook OnPlayerSelectChar(playerid, id)
{
	if(player_charList_Selected[playerid] != -1)
	{
		CharListTD_UnmarkSelected(playerid, player_charList_Selected[playerid]);
		CharListTD_HideControls(playerid);
	}
	CharListTD_MarkSelected(playerid, id);
	CharListTD_ShowControls(playerid, player_charList_Page[playerid], id);
	return 1;
}

hook OnPlayerLeaveCharSelect(playerid)
{
	if(PlayerInfo[playerid][pId] == 0)
	{
		ShowPlayerLeaveConfirm(playerid);
	}
	CharListTD_Hide(playerid);
	return 1;
}

stock ShowPlayerLeaveConfirm(playerid)
{
	player_charList_ConfirmShown[playerid] = true;
	dialog_Clear();
	dialog_AddLine("Ar tikrai norite palikti serverá?");
	inline confirmLeaveServer(response, listitem)
	{
		player_charList_ConfirmShown[playerid] = false;
		player_WaitCharTextdraw[playerid] = 1;

		if(response) 	Kick(playerid);
		else 			SelectTextDraw(playerid, CHARSELECT_COLOR);
	}
	dialog_Show(playerid, using inline confirmLeaveServer, DIALOG_STYLE_MSGBOX, "Patvirtinimas", "Taip", "Ne");
	return 1;
}

stock ShowPlayerCharCreateHelp(playerid)
{
	player_charList_GUIShown[playerid] = true;
	dialog_Clear();
	dialog_AddLine("Roleplay - realybës atkartojimas þaidime.");
	dialog_AddLine("Þaidþiant roleplay tipo serveryje jûsø tikslas yra savo veiksmus iðreikðti kuo realistiðkiau.");

	inline charCreateHelp(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;
		player_WaitCharTextdraw[playerid] = 1;
	}
	dialog_Show(playerid, using inline charCreateHelp, DIALOG_STYLE_MSGBOX, "[?] Trumpa info", "Gerai", "");
	return 1;
}

stock Dialog_PrepareAnswer(const given[])
{	
	new 
		text[256],
		line_lenght = 57,
		len = strlen(given),
		pos = -1,
		i = 1;

	strmid(text, given, 0, len);
	while((pos = (pos + line_lenght * i)) < len && pos != -1)
	{
		strins(text, "\n", pos);
		i ++ ;
		pos += 3;
	}
	return text;
}

stock Textdraw_PrepareAnswer(const given[])
{
	new 
		text[256],
		line_lenght = 57,
		len = strlen(given),
		pos = -1,
		i = 1;

	strmid(text, given, 0, len);
	while((pos = (pos + line_lenght * i)) < len && pos != -1)
	{
		strins(text, "~n~", pos);
		i ++ ;
		pos += 3;
	}
	return text;
}



stock User_SaveCharCountTotal(playerid)
{

	new 
		Cache:result,
		Cache:cur = cache_save(),
		string[126];
	
	for(new i = 0; i < MAX_CHARACTERS; i++) player_CharArray[playerid][i][0] = player_CharArray[playerid][i][1] = 0;

	// Unconfirmed
	mysql_format(chandler, string, sizeof string, "SELECT id FROM `players_data` WHERE UserId = '%d'", PlayerInfo[playerid][pUserId]);
	result = mysql_query(chandler, string, true);
	if((player_DataChars[playerid] = cache_num_rows()) > 0)
	{
		for(new i = 0; i < player_DataChars[playerid]; i++)
		{
			cache_get_value_name_int(i, "id", player_CharArray[playerid][i][0]);
			player_CharArray[playerid][i][1] = 1;
		}
	}
	cache_delete(result);


	// Confirmed
	mysql_format(chandler, string, sizeof string, "SELECT id FROM `players_new` WHERE UserId = '%d' AND Status = '0' LIMIT 1", PlayerInfo[playerid][pUserId]);
	result = mysql_query(chandler, string, true);
	if((player_NewChars[playerid] = cache_num_rows()) > 0)
	{
		cache_get_value_name_int(0, "id", player_CharArray[playerid][player_DataChars[playerid]][0]);
		player_CharArray[playerid][player_DataChars[playerid]][1] = 2;					
	}
	cache_delete(result);
	cache_set_active(cur);
	return (player_DataChars[playerid] + player_NewChars[playerid]);
}

stock User_GetNewCharacterStatus(playerid)
{
	new 
		return_value,
		string[126],
		Cache:cur = cache_save(),
		Cache:result;

	mysql_format(chandler, string, sizeof string, "SELECT Status FROM `players_new` WHERE UserId = '%d' AND Status < '2'", PlayerInfo[playerid][pUserId]);
	result = mysql_query(chandler, string, true);

	cache_set_active(result);

	if(cache_num_rows())
	{
		cache_get_value_name_int(0, "Status", return_value);
	}
	else return_value = -1;


	cache_delete(result);
	cache_set_active(cur);
	return return_value;
}

stock User_UpdateNewCharacterStatus(playerid, status)
{
	inline updateReviewedStatus() return 1;
	mysql_tquery_inline(chandler, using inline updateReviewedStatus, "\
		UPDATE `players_new` SET Status = '%d' WHERE UserId = '%d' AND Status < '2'",
		status, PlayerInfo[playerid][pUserId]
	);
	return 1;
}

stock User_GetNewCharacterReason(playerid)
{
	new 
		string[126],
		Cache:cur = cache_save();

	mysql_format(chandler, string, sizeof string, "SELECT Reason FROM `players_new` WHERE UserId = '%d' WHERE Status < '2'", PlayerInfo[playerid][pUserId]);
	new Cache:result = mysql_query(chandler, string, true);
	cache_set_active(result);
	if(cache_num_rows())
	{
		cache_get_value_name(0, "Reason", string);
	}
	cache_delete(result);
	cache_set_active(cur);
	return string;
}

stock Register_ShowDiscordInput(playerid)
{
	dialog_Clear();

	dialog_AddLine("{f1f1f1}Norëdami þaisti ðiame serveryje, turite sujungti savo vartotojà su Discord.");
	dialog_AddLine("{f1f1f1}1. Prisijunkite prie mûsø Discord serverio: {FAD831}invite.gg/southland");
	dialog_AddLine("{f1f1f1}2. Ásitikinkite, jog esate patvirtines Discord vartotojo tel. numerá.");
	dialog_AddLine("{949494}    Jûsø tel. numerio matyti mes negalime - galite bûti ramûs.");
	dialog_AddLine("{f1f1f1}3. Discord kanale paraðykite {FAD831}!verify %s", GetPlayerNameEx(playerid));
	dialog_SkipLine();
	dialog_AddLine("{f1f1f1}4. Áveskite {FA9231}gautà kodà:");

	inline inputDiscordCode(response, listitem)
	{
		if(response)
		{
			if(!strlen(dialog_Input())) return Register_ShowDiscordInput(playerid);

			inline checkCode()
			{
				if(cache_num_rows())
				{
					MsgSuccess(playerid, "Serveris", "Sëkmingai patvirtinote vartotojà! Gero þaidimo.");
					PlayerInfo[playerid][pDiscordVerified] = 2;

					inline verifyDc()
					{
						SendFormat(playerid, -1,  "Sëkmingai patvirtinote vartotojà! Dabar bûsite perkeltas á veikëjo kûrimà.");
						CharCreateTD_Show(playerid);
						return 1;
					}
					mysql_tquery_inline(chandler, using inline verifyDc, "\
						UPDATE `users_data` SET `DiscordVerified`='2' WHERE id = '%d'", PlayerInfo[playerid][pUserId]);
				}
				else 
				{
					SendError(playerid, "Patvirtinimo kodas neteisingas!");
					return Register_ShowDiscordInput(playerid);
				}
			}
			mysql_tquery_inline(chandler, using inline checkCode, "\
				SELECT NULL FROM `users_data` WHERE id = '%d' AND DiscordCode='%e' AND DiscordVerified!='2'",
				PlayerInfo[playerid][pUserId], dialog_Input());
		}
		else Kick(playerid);
	}
	dialog_Show(playerid, using inline inputDiscordCode, DIALOG_STYLE_INPUT, "Discord kodas", "Patvirtinti", "Iðeiti");
	return 1;
}

hook OnPlayerLogIn(playerid)
{
	new 
		string[126];

	if(PlayerInfo[playerid][pDiscordVerified] <= 1)
	{
		Register_ShowDiscordInput(playerid);
		return 1;
	}

	if(User_SaveCharCountTotal(playerid) > 0)
	{
		CheckDonations(playerid); // patikrins ar nieko nenusipirko neseniai

		// patikrint Status, ir jei tiesioig perskaityt reikejo metam i create
		new 
			status = User_GetNewCharacterStatus(playerid);
		if(status <= 1) // neperziuretas, priimtas arba nera isvis new charo
		{
			CharListTD_ShowSelect(playerid, 0, true);
		}
		else if(status == 2)
		{
			// atmestas
			CharCreateTD_Show(playerid);
		}
		if(status >= 1) User_UpdateNewCharacterStatus(playerid, status + 2);

		switch(status)
		{
			case 0:
			{
				// laukia
				format(string, sizeof string, "~w~Jusu naujas veikejas laukia ~y~perziuros.");
				CharListTD_ShowMessage(playerid, string);
			}
			case 1:
			{
				// prieme
				format(string, sizeof string, "~w~Jusu naujas veikejas buvo ~g~priimtas");
				CharListTD_ShowMessage(playerid, string);
			}
			case 2:
			{
				// atmete
				format(string, sizeof string, "~w~Jusu naujas veikejas buvo ~r~atmestas~w~. Priezastis:~n~~r~%s", Textdraw_PrepareAnswer(User_GetNewCharacterReason(playerid)));
				CharListTD_ShowMessage(playerid, string);
			}
		}
	}
	else
	{
		CharCreateTD_Show(playerid);
	}
	return 1;
}

stock CharCreateTD_Hide(playerid)
{
	TextDrawHideForPlayer(playerid, chars_g_td_mainbg);
	TextDrawHideForPlayer(playerid, create_g_td_model_bg);
	TextDrawHideForPlayer(playerid, create_g_td_skin);
	TextDrawHideForPlayer(playerid, create_g_td_skin_txt);
	TextDrawHideForPlayer(playerid, create_g_td_age);
	TextDrawHideForPlayer(playerid, create_g_td_age_txt);
	TextDrawHideForPlayer(playerid, create_g_td_name_txt);
	TextDrawHideForPlayer(playerid, create_g_td_name);
	TextDrawHideForPlayer(playerid, create_g_td_origin_txt);
	TextDrawHideForPlayer(playerid, create_g_td_origin);
	TextDrawHideForPlayer(playerid, create_g_td_send);
	TextDrawHideForPlayer(playerid, create_g_td_send_txt);
	TextDrawHideForPlayer(playerid, create_g_td_help);
	TextDrawHideForPlayer(playerid, create_g_td_back);
	TextDrawHideForPlayer(playerid, create_g_td_help_txt);
	TextDrawHideForPlayer(playerid, create_g_td_gender);
	TextDrawHideForPlayer(playerid, create_g_td_back_txt);
	for(new q = 0; q < 3; q++) 
	{
		TextDrawHideForPlayer(playerid, create_g_td_question[q]);	 
		TextDrawHideForPlayer(playerid, create_g_td_question_bg[q]);	 
		PlayerTextDrawHide(playerid, create_p_td_answer[playerid][q]);	
	}
	PlayerTextDrawHide(playerid, create_p_td_age[playerid]);
	PlayerTextDrawHide(playerid, create_p_td_skin[playerid]);
	PlayerTextDrawHide(playerid, create_p_td_model[playerid]);
	PlayerTextDrawHide(playerid, create_p_td_name[playerid]);
	PlayerTextDrawHide(playerid, create_p_td_origin[playerid]);
	PlayerTextDrawHide(playerid, create_p_td_gender[playerid]);
	tmpESC[playerid] = ESC_TYPE_NONE;
	return 1;
}

stock CharCreateTD_Show(playerid)
{
	TextDrawShowForPlayer(playerid, chars_g_td_mainbg);
	TextDrawShowForPlayer(playerid, create_g_td_model_bg);
	TextDrawShowForPlayer(playerid, create_g_td_skin);
	TextDrawShowForPlayer(playerid, create_g_td_skin_txt);
	TextDrawShowForPlayer(playerid, create_g_td_age);
	TextDrawShowForPlayer(playerid, create_g_td_age_txt);
	TextDrawShowForPlayer(playerid, create_g_td_name_txt);
	TextDrawShowForPlayer(playerid, create_g_td_name);
	TextDrawShowForPlayer(playerid, create_g_td_origin_txt);
	TextDrawShowForPlayer(playerid, create_g_td_origin);
	TextDrawShowForPlayer(playerid, create_g_td_send);
	TextDrawShowForPlayer(playerid, create_g_td_send_txt);
	TextDrawShowForPlayer(playerid, create_g_td_help);
	TextDrawShowForPlayer(playerid, create_g_td_back);
	TextDrawShowForPlayer(playerid, create_g_td_help_txt);
	TextDrawShowForPlayer(playerid, create_g_td_gender);
	TextDrawShowForPlayer(playerid, create_g_td_back_txt);

	for(new q = 0; q < 3; q++)
	{
		TextDrawShowForPlayer(playerid, create_g_td_question[q]);
		TextDrawShowForPlayer(playerid, create_g_td_question_bg[q]);
	}

	format(player_CharName[playerid], 1, "");
	player_CharName[playerid][0] = EOS;
	player_CharGender[playerid] = 0;
	player_CharOrigin[playerid] = -1;
	player_CharDate[playerid] = 0;
	player_CharSkin[playerid] = -1;
	for(new i = 0; i < 3; i++) format(player_CharAnswers[playerid][i], 1, "");


	PlayerTextDrawSetString(playerid, create_p_td_age[playerid], "Neivesta");
	PlayerTextDrawShow(playerid, create_p_td_age[playerid]);

	PlayerTextDrawSetString(playerid, create_p_td_skin[playerid], "Neivesta");
	PlayerTextDrawShow(playerid, create_p_td_skin[playerid]);

	PlayerTextDrawSetString(playerid, create_p_td_model[playerid], "Neivesta");
	PlayerTextDrawShow(playerid, create_p_td_model[playerid]);

	PlayerTextDrawSetString(playerid, create_p_td_name[playerid], "Neivesta");
	PlayerTextDrawShow(playerid, create_p_td_name[playerid]);

	PlayerTextDrawSetString(playerid, create_p_td_origin[playerid], "-");
	PlayerTextDrawShow(playerid, create_p_td_origin[playerid]);

	PlayerTextDrawSetPreviewModel(playerid, create_p_td_model[playerid], 735555);
	PlayerTextDrawShow(playerid, create_p_td_model[playerid]);	

	for(new q = 0; q < 3; q++)
	{
		PlayerTextDrawSetString(playerid, create_p_td_answer[playerid][q], "Trumpas atsakymas");
		PlayerTextDrawShow(playerid, create_p_td_answer[playerid][q]);
	}

	PlayerTextDrawSetString(playerid, create_p_td_gender[playerid], "-");
	PlayerTextDrawShow(playerid, create_p_td_gender[playerid]);

	tmpESC[playerid] = ESC_TYPE_CHARCREATE;
	SelectTextDraw(playerid, 0xBABABAFF);
	return 1;
}

hook OnPlayerLeaveCharCreate(playerid)
{
	if(PlayerInfo[playerid][pId] == 0 && GetCharCount(playerid) <= 0)
	{
		// negali atgal grizt, nes nera veikeju
		ShowPlayerLeaveConfirm(playerid);
	}
	else
	{
		CharCreateTD_Hide(playerid);
		CharListTD_ShowSelect(playerid, 0, true);
	}
	return 1;
}

stock GetCharCount(playerid)
{
	return player_NewChars[playerid] + player_DataChars[playerid];
}

stock CharCreate_ShowAnswerInput(playerid, q)
{	
	dialog_Clear();
	dialog_AddLine("{c9c9c9}Klausimas nr. %d:", q + 1);
	dialog_AddLine("{bbe0ea}%s", NewCharQuestions[q]);
	dialog_SkipLine();
	dialog_AddLine("Jûsø ávestas atsakymas:");
	dialog_AddLine(Dialog_PrepareAnswer(player_CharAnswers[playerid][q]));
	dialog_SkipLine();
	dialog_AddLine("Ávedus naujà tekstà, senasis iðsitrins. Atsakymà veskite kaip galima trumpesná!\t \t \t \t ");

	inline inputAnswer(response, listitem)
	{
		if(response)
		{
			if(strlen(dialog_Input()) <= 0)
				return CharCreate_ShowAnswerInput(playerid, q);

			strmid(player_CharAnswers[playerid][q], dialog_Input(), 0, strlen(dialog_Input()));
			
			strreplace(player_CharAnswers[playerid][q], "~", "-");
			strreplace(player_CharAnswers[playerid][q], "%", "#");
			strcat(player_CharAnswers[playerid][q], "_");

			PlayerTextDrawSetString(playerid, create_p_td_answer[playerid][q], Textdraw_PrepareAnswer(player_CharAnswers[playerid][q]));
		}
		player_charList_GUIShown[playerid] = false;
	}
	player_charList_GUIShown[playerid] = true;

	dialog_Show(playerid, using inline inputAnswer, DIALOG_STYLE_INPUT, "Atsakymas", "Pakeisti", "Uþdaryti");
	return 1;
}

stock CharCreate_ShowAgeInput(playerid)
{
	dialog_Clear();
	dialog_AddLine("{c9c9c9}Áveskite naujai kuriamo veikëjo gimimo metus {f0a046}(1930-2017)");

	inline inputAge(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;
		player_WaitCharTextdraw[playerid] = 1;

		if(response)
		{
			new 
				date;

			if(sscanf(dialog_Input(),"d",date) || !(1930 <= date <= 2017))
				return SendError(playerid, "Formatas netinkamas!");

			player_CharDate[playerid] = date;
			PlayerTextDrawSetString(playerid, create_p_td_age[playerid], va_return("%d", date));
		}
	}
	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline inputAge, DIALOG_STYLE_INPUT, "Veikëjo amþius", "Pakeisti", "Atðaukti");
	return 1;
}

stock CharCreate_ShowNameInput(playerid)
{
	dialog_Clear();
	dialog_AddLine("{c9c9c9}Áveskite naujai kuriamo veikëjo vardà ir pavardæ.");
	dialog_AddLine("{f0a046}Formatas: Vardas_Pavardë, 6-24 simboliai");

	inline inputName(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;
		player_WaitCharTextdraw[playerid] = 1;

		if(response)
		{
			if(!(6 < strlen(dialog_Input()) <= 24) || !CheckRoleplayName(dialog_Input()))
				return SendError(playerid, "Vardo formatas netinkamas!");

			format(player_CharName[playerid], 24, "%s", dialog_Input());
			PlayerTextDrawSetString(playerid, create_p_td_name[playerid], dialog_Input());
		}
	}
	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline inputName, DIALOG_STYLE_INPUT, "Veikëjo vardas", "Pakeisti", "Atðaukti");
	return 1;
}


stock CharCreate_ShowGenderSelect(playerid)
{
	dialog_Clear();
	dialog_AddOption(">", "Vyras");
	dialog_AddOption(">", "Moteris");

	inline selectGender(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;
		player_WaitCharTextdraw[playerid] = 1;
		if(response)
		{
			player_CharGender[playerid] = listitem + 1;
			PlayerTextDrawSetString(playerid, create_p_td_gender[playerid], listitem == 0 ? ("Vyras") : ("Moteris"));
		}
	}
	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline selectGender, DIALOG_STYLE_LIST, "Veikëjo lytis", "Pakeisti", "Atðaukti");
	return 1;
}

stock CharCreate_ShowSkinSelect(playerid)
{
	dialog_Clear();
	dialog_AddLine("{c9c9c9}Áveskite iðvaizdos numerá (1-312)");

	inline inputSkin(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;
		player_WaitCharTextdraw[playerid] = 1;

		if(response)
		{
			new 	
				skin;

			if(sscanf(dialog_Input(),"d",skin) || !(1 <= skin <= 312))
				return SendError(playerid, "Formatas netinkamas!");

			player_CharSkin[playerid] = skin;
				
			PlayerTextDrawSetString(playerid, create_p_td_skin[playerid], va_return("%d", skin));
			PlayerTextDrawSetPreviewModel(playerid, create_p_td_model[playerid], skin);
			PlayerTextDrawHide(playerid, create_p_td_model[playerid]);
			PlayerTextDrawShow(playerid, create_p_td_model[playerid]);
		}
	}

	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline inputSkin, DIALOG_STYLE_INPUT, "Veikëjo iðvaizda", "Pakeisti", "Atðaukti");
	return 1;
}

stock CharCreate_ShowOriginSelect(playerid)
{
	dialog_Clear();
	for(new i = 0; i < sizeof OriginsList; i++)
	{
		dialog_AddLine(OriginsList[i]);
	}

	inline selectOrigin(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;
		player_WaitCharTextdraw[playerid] = 1;

		if(response)
		{
			player_CharOrigin[playerid] = listitem + 1;
			PlayerTextDrawSetString(playerid, create_p_td_origin[playerid], formatlt(OriginsList[listitem]));
		}
	}

	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline selectOrigin, DIALOG_STYLE_LIST, "Veikëjo tautybë", "Pakeisti", "Atðaukti");
	return 1;
}

hook OnPlayerSubmitNewChar(playerid)
{
	// ADMINAMS

	if(GetCharCount(playerid) > GetGVarInt("MaxCharacters") && GetGVarInt("MaxCharacters") > 0) return SendWarning(playerid, "Veikëjø limitas pasiektas!");
	if(player_CharSkin[playerid] <= 0 || strlen(player_CharName[playerid]) < 3 || player_CharGender[playerid] <= 0 || player_CharDate[playerid] <= 0 || player_CharOrigin[playerid] <= -1 || !strlen(player_CharAnswers[playerid][0]) || !strlen(player_CharAnswers[playerid][1]) || !strlen(player_CharAnswers[playerid][2]))
	{
		return SendError(playerid, "Neuþpildëte anketos!");
	}
	if(CheckNameUsageAnywhere(player_CharName[playerid]))
	{
		return SendError(playerid, "Vardas jau yra naudojamas!");
	}
	else
	{
		new 
			string[1500],
			gpci_string[41];

		gpci(playerid, gpci_string, sizeof gpci_string);

		mysql_format(chandler, string, sizeof string, "INSERT INTO `players_new` (`Name`,`UserId`,`Skin`,`Origin`,`Gender`,`Years`,`Answer1`,`Answer2`,`Answer3`,`gpci`) ");
		mysql_format(chandler, string, sizeof string, "%sVALUES ('%e','%d','%d','%e','%d','%d','%e','%e','%e','%e')", string, player_CharName[playerid], PlayerInfo[playerid][pUserId], player_CharSkin[playerid], OriginsList[player_CharOrigin[playerid] - 1],  player_CharGender[playerid], player_CharDate[playerid], player_CharAnswers[playerid][0], player_CharAnswers[playerid][1], player_CharAnswers[playerid][2], gpci_string);
		mysql_tquery(chandler, string, "InsertNewChar", "d", playerid);

		// printf("InsertNewChar: %s", string);
	}
	return 1;
}

stock IsPhoneNumberExisting(number)
{
	new	Cache:cur = cache_save(),
		Cache:result,
		string[256];

	mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `players_data` WHERE PhoneNumber = '%d'", number);
	result = mysql_query(chandler, string, true);
	cache_set_active(result);
	if(cache_num_rows())
	{
		cache_delete(result);
		cache_set_active(cur);
		return true;
	}
	cache_delete(result);
	return false;
}

stock CheckNameUsageAnywhere(name[], check_user = false)
{
	new 
		Cache:cur = cache_save(),
		Cache:result,
		string[256];

	mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `players_data` WHERE Name = '%e'", name);
	result = mysql_query(chandler, string, true);
	cache_set_active(result);
	if(cache_num_rows())
	{
		cache_delete(result);
		cache_set_active(cur);
		return true;
	}
	cache_delete(result);

	mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `players_new` WHERE Name = '%e' AND Status = '0'", name);
	result = mysql_query(chandler, string, true);
	cache_set_active(result);
	if(cache_num_rows())
	{
		cache_delete(result);
		cache_set_active(cur);
		return true;
	}
	cache_delete(result);

	mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `players_locks` WHERE Name = '%e'", name);
	result = mysql_query(chandler, string, true);
	cache_set_active(result);
	if(cache_num_rows())
	{
		cache_delete(result);
		cache_set_active(cur);
		return true;
	}
	cache_delete(result);

	if(check_user)
	{
		mysql_format(chandler, string, sizeof string,"SELECT NULL FROM `users_data` WHERE Name = '%e'", name);
		result = mysql_query(chandler, string, true);
		cache_set_active(result);
		if(cache_num_rows())
		{
			cache_delete(result);
			cache_set_active(cur);
			return true;
		}
	}

	cache_set_active(cur);
	return false;
}

forward InsertNewChar(playerid);
public InsertNewChar(playerid)
{
	SendFormat(playerid, 0xb0df67ff, "Veikëjo anketa sëkmingai iðsiøsta! Laukite veikëjo patvirtinimo.");

	User_SaveCharCountTotal(playerid);
	CharCreateTD_Hide(playerid);
	CharListTD_ShowSelect(playerid, 0, true);

	if(IsPlayerInAnyAdminGroup(playerid))
	{
		// Administratoriu veikejai priimami automatiskai
		new sql = cache_insert_id();
		call OnCharAccepted(sql, PlayerInfo[playerid][pUserId], playerid);
	}
	else SendAdminMessage(0xF900CA99, true, "Naujas veikëjas laukia perþiûros! /newchars");
	return 1;
}

stock CharListTD_UnmarkSelected(playerid, id)
{ 
	#pragma unused id
	player_charList_Selected[playerid] = -1;
	return 1; 
}

stock CharListTD_MarkSelected(playerid, id) 
{ 
	player_charList_Selected[playerid] = id;
	return 1;	
}

stock CharListTD_HideControls(playerid)
{
 	TextDrawHideForPlayer(playerid, chars_g_td_play);
 	TextDrawHideForPlayer(playerid, chars_g_td_info);
 	TextDrawHideForPlayer(playerid, chars_g_td_donator);
 	TextDrawHideForPlayer(playerid, chars_g_td_play_txt);
 	TextDrawHideForPlayer(playerid, chars_g_td_info_txt);
 	TextDrawHideForPlayer(playerid, chars_g_td_donator_txt);
	PlayerTextDrawHide(playerid, chars_p_td_bigname[playerid]);
	PlayerTextDrawHide(playerid, chars_p_td_biginfo[playerid]);
}

stock DonatorMenu_Main(playerid, selected)
{
	new 
		index = player_charList_Page[playerid]*2 + selected,
		bool:is_confirmed = (player_CharArray[playerid][index][1] == 1 ? true : false);
	
	if(!is_confirmed)
	{
		return SendError(playerid, "Ðis veikëjas yra nepatvirtintas.");
	}

	dialog_Clear();
	dialog_AddLine("Informacija apie remëjus");
	dialog_AddLine("Veikëjo vardo keitimas (%d)", PlayerInfo[playerid][pNameChanges]);
	dialog_AddLine("Telefono numerio keitimas (%d)", PlayerInfo[playerid][pNumberChanges]);
	dialog_AddLine("Automobilio numeriø keitimas (%d)", PlayerInfo[playerid][pPlateChanges]);

	inline donatorMain(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;
		if(response)
		{
			dialog_Row("Informacija apie remëjus")
			{
				
				dialog_AddLine("Remëjo statusà gauna kiekvienas þmogus remiantis projektà.");
				dialog_AddLine("Remëjo statusas yra uþdedamas vartotojui ir já galima naudoti su visais veikëjais.");
				dialog_AddLine("Informacijà apie paramà, remëjø privilegijas rasite www.southland.lt > Parama");

				inline about(r1, l1)
				{
					player_charList_GUIShown[playerid] = false;
					return 1;
				}
				dialog_Show(playerid, using inline about, DIALOG_STYLE_MSGBOX, "Remëjo meniu > Informacija", "Uþdaryti", "");

				player_charList_GUIShown[playerid] = true;
			}
			dialog_Row("Veikëjo vardo keitimas")
			{
				// vardo keitimas
				if(PlayerInfo[playerid][pNameChanges] <= 0)
					return SendWarning(playerid, "Jûs nebeturite vardo keitimø.");

				DonatorMenu_SelectCharForName(playerid);
			}
			dialog_Row("Telefono numerio keitimas")
			{
				// numerio keitimas
				if(PlayerInfo[playerid][pNumberChanges] <= 0)
					return SendWarning(playerid, "Jûs nebeturite tel. numerio keitimø.");

				new 
					string[86];
				mysql_format(chandler, string, sizeof string, "SELECT id,Name FROM `players_data` WHERE UserId = '%d'", PlayerInfo[playerid][pUserId]);
				mysql_tquery(chandler, string, "PlayerDonatorCharsLoadForNumber", "d", playerid);
				
			}
			dialog_Row("Automobilio numeriø keitimas")
			{
				// masinos numeriu keitimas
				if(PlayerInfo[playerid][pPlateChanges] <= 0)
					return SendWarning(playerid, "Jûs nebeturite tr. priemonës numerio keitimø.");

				SendWarning(playerid, "Atsipraðome, taèiau ði funkcija laikinai neveikia!");
				//new 
				//	string[86];
				//mysql_format(chandler, string, sizeof string, "SELECT id,Name FROM `players_data` WHERE UserId = '%d'", PlayerInfo[playerid][pUserId]);
				//mysql_tquery(chandler, string, "PlayerDonatorCharsLoadForPlate", "d", playerid);
			}
		}
		else SelectTextDraw(playerid, CHARSELECT_COLOR);
	}	
	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline donatorMain, DIALOG_STYLE_LIST, "Remëjo meniu", "Tæsti", "Atðaukti");
	return 1;
}


forward PlayerDonatorCharsLoadForNumber(playerid);
public PlayerDonatorCharsLoadForNumber(playerid)
{
	new 
		line[48],
		id,
		rows = cache_num_rows();

	if(!rows) return SendWarning(playerid, "Atsirado klaida ieðkant jûsø veikëjo.");

	dialog_Clear();

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name(i, "Name", line);
		cache_get_value_name_int(i, "id", id);

		dialog_AddLine(line, sizeof line, "%d. %s(%d)", i + 1, line, id);
	}
	SendFormat(playerid, 0xBABABAFF, "Pasirinkite veikëjà, kurio numerá norite pakeisti. Likæ numeriø keitimai: %d", PlayerInfo[playerid][pNumberChanges]);
	
	inline selectChar(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;

		if(response)
		{
			inline getId()
			{
				if(cache_num_rows())
				{
					new charid;
					cache_get_value_name_int(0, "id", charid);
					DonatorMenu_ShowNumberInput(playerid, charid);
				}
				else SendWarning(playerid, "Atsirado klaida ieðkant jûsø veikëjo.");
			}
			mysql_tquery_inline(chandler, using inline getId, "\
				SELECT id FROM `players_data` WHERE UserId = '%d' ORDER BY id ASC LIMIT 1 OFFSET %d",
				PlayerInfo[playerid][pUserId], listitem
			);
		}
		else DonatorMenu_Main(playerid, player_charList_Selected[playerid]);
	}
	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline selectChar, DIALOG_STYLE_LIST, "Remëjo meniu > Numerio keitimas", "Tæsti", "Atðaukti");
	return 1;
}

stock DonatorMenu_ShowNumberInput(playerid, charid)
{
	dialog_Clear();
	dialog_AddLine("{c9c9c9}Áveskite naujà numerá.");
	dialog_AddLine("{ff0000}Numeris turi bûti tarp 100000 ir 999999");
	inline inputNumber(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;
	
		if(response)
		{
			new 
				number,
				online;
			if(sscanf(dialog_Input(),"d",number) || !(100000 <= number <= 999999))
				return SendWarning(playerid, "Numeris turi bûti tarp 100000 ir 999999."), DonatorMenu_ShowNumberInput(playerid, charid);

			if(IsPhoneNumberExisting(number))
				return SendWarning(playerid, "Ðis numeris jau yra naudojamas."), DonatorMenu_ShowNumberInput(playerid, charid);

			if((online = FindPlayerBySql(charid)) != INVALID_PLAYER_ID)
			{
				PlayerInfo[online][pPhoneNumber] = number;
			}

			PlayerInfo[playerid][pNumberChanges] --;
			SaveUserIntEx(PlayerInfo[playerid][pUserId], "NumberChanges", PlayerInfo[playerid][pNumberChanges]);

			SendFormat(playerid, 0xBABABAFF, "Numeris pakeistas á %d", number);

			inline updatePlayerNumber() return 1;

			mysql_tquery_inline(chandler, using inline updatePlayerNumber, "\
				UPDATE `players_data` SET PhoneNumber = '%d' WHERE id = '%d'", charid
			);
			
			mysql_tquery_inline(chandler, using inline updatePlayerNumber, "\
				DELETE FROM `unused_phone_numbers` WHERE Number = '%d'", number
			);

			log_init(true);
			log_set_table("logs_donators");
			log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`,`ExtraId`");
			log_set_values("'%d','%e','Pakeite veikejo numeri','%e'", LogPlayerId(playerid), LogPlayerName(playerid), GetNameBySql(charid), number);
			log_commit();
		}
		else DonatorMenu_Main(playerid, charid);
	}
	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline inputNumber, DIALOG_STYLE_INPUT, "Remëjo meniu > Numerio keitimas", "Keisti", "Gráþti");
	return 1;
}

/*
forward PlayerDonatorCharsLoadForPlate(playerid);
public PlayerDonatorCharsLoadForPlate(playerid)
{
	new 
		string[512],
		line[48],
		id,
		rows = cache_num_rows();
	if(!rows) return SendWarning(playerid, "Atsirado klaida ieðkant jûsø veikëjo.");
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name(i, "Name", line);
		cache_get_value_name_int(i, "id", id);

		format(line, sizeof line, "%d. %s(%d)\n", i + 1, line, id);
		strcat(string, line);
	}
	SendFormat(playerid, 0xBABABAFF, "Pasirinkite veikëjà, kurio tr. priemones norite matyti.");
	SendFormat(playerid, 0xBABABAFF, "Vëliau turësite pasirinkti ið veikëjo turimø automobiliø. Likæ numeriø keitimai: %d", PlayerInfo[playerid][pPlateChanges]);
	Dialog_Show(playerid, D_DonatorCharListPlate, DIALOG_STYLE_LIST, "Remëjo meniu > Automobilio numeriø keitimas", string, "Tæsti", "Atðaukti");
	player_charList_GUIShown[playerid] = true;
	return 1;
}

Dialog:D_DonatorCharListPlate(playerid, response, listitem, inputtext[])
{
	player_charList_GUIShown[playerid] = false;
	if(response)
	{
		new 
			string[126];
		mysql_format(chandler, string, sizeof string, "SELECT id FROM `players_data` WHERE UserId = '%d' ORDER BY id ASC LIMIT 1 OFFSET %d", PlayerInfo[playerid][pUserId], listitem);
		mysql_tquery(chandler, string, "DonatorSelectCharIdLoadPlate", "d", playerid);
	}
	else DonatorMenu_Main(playerid, player_charList_Selected[playerid]);
	return 1;
}

forward DonatorSelectCharIdLoadPlate(playerid);
public DonatorSelectCharIdLoadPlate(playerid)
{
	if(cache_num_rows())
	{
		cache_get_value_name_int(0, "id", tmpSelected[playerid]);
		new 
			string[126];		
		mysql_format(chandler, string, sizeof string, "SELECT id,Name,Numbers FROM `vehicles_data` WHERE OwnerId = '%d'", tmpSelected[playerid]);
		mysql_tquery(chandler, string, "DonatorVehiclesListLoad", "d", playerid);
	}
	else SendWarning(playerid, "Atsirado klaida ieðkant jûsø veikëjo.");
	return 1;
}

forward DonatorVehiclesListLoad(playerid);
public DonatorVehiclesListLoad(playerid)
{
	new 
		string[512],
		line[86],
		plate[24],
		id,
		rows = cache_num_rows();

	if(!rows) return SendWarning(playerid, "Ðis veikëjas neturi tr. priemoniø");

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name(i, "Name", line);
		cache_get_value_name(i, "Numbers", plate);
		cache_get_value_name_int(i, "id", id);

		format(line, sizeof line, "%d. %s(%d) [%s]\n", i + 1, line, id, plate);
		strcat(string, line);
	}
	Dialog_Show(playerid, D_DonatorVehicles, DIALOG_STYLE_LIST, "Pasirinkite tr. priemonæ", string, "Tæsti", "Atðaukti");
	player_charList_GUIShown[playerid] = true;
	return 1;
}

Dialog:D_DonatorVehicles(playerid, response, listitem, inputtext[])
{
	if(response)
	{

	}
	return 1;
}
*/




stock DonatorMenu_SelectCharForName(playerid)
{
	inline loadChars()
	{
		new 
			id,
			name[MAX_PLAYER_NAME + 1],
			rows = cache_num_rows();

		if(!rows) return SendWarning(playerid, "Atsirado klaida ieðkant jûsø veikëjo.");

		dialog_Clear();

		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name(i, "Name", name);
			cache_get_value_name_int(i, "id", id);

			dialog_AddLine("%d. %s(%d)", i + 1, name, id);
		}
		SendFormat(playerid, 0xBABABAFF, "Pasirinkite veikëjà, kurio vardà norite pakeisti. Likæ vardo keitimai: %d", PlayerInfo[playerid][pNameChanges]);

		inline selectChar(response, listitem)
		{
			player_charList_GUIShown[playerid] = false;
			if(response)
			{
				new 
					string[126];
				mysql_format(chandler, string, sizeof string, "SELECT id FROM `players_data` WHERE UserId = '%d' ORDER BY id ASC LIMIT 1 OFFSET %d", PlayerInfo[playerid][pUserId], listitem);
				mysql_tquery(chandler, string, "DonatorSelectCharIdLoad", "d", playerid);
			}
			else DonatorMenu_Main(playerid, player_charList_Selected[playerid]);
		}

		player_charList_GUIShown[playerid] = true;
		dialog_Show(playerid, using inline selectChar, DIALOG_STYLE_LIST, "Remëjo meniu > Veikëjo vardo keitimas", "Tæsti", "Atðaukti");
	}
	mysql_tquery_inline(chandler, using inline loadChars, "\
		SELECT id,Name FROM `players_data` WHERE UserId = '%d'",
		PlayerInfo[playerid][pUserId]
	);

	return 1;
}

forward DonatorSelectCharIdLoad(playerid);
public DonatorSelectCharIdLoad(playerid)
{
	if(cache_num_rows())
	{
		new charid;
		cache_get_value_name_int(0, "id", charid);
		Donator_ChangeName_NewName(playerid, charid);
	}
	else SendWarning(playerid, "Atsirado klaida ieðkant jûsø veikëjo.");
	return 1;
}

stock Donator_ChangeName_NewName(playerid, charid)
{
	dialog_Clear();
	dialog_AddLine("Áveskite naujà veikëjo vardà");

	inline inputName(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;

		if(response)
		{
			if(!CheckRoleplayName(dialog_Input()) ||
				CheckNameUsageAnywhere(dialog_Input(), true) || 
				!(4 <= strlen(dialog_Input()) <= MAX_PLAYER_NAME))
			{
				SendWarning(playerid, "Veikëjo vardas netinkamas arba yra uþimtas. Formatas: Vardas_Pavarde");
				DonatorMenu_Main(playerid, player_charList_Selected[playerid]);
				return 1;
			}
			format(player_CharName[playerid], MAX_PLAYER_NAME, "%s", dialog_Input());

			Donator_ChangeName_NewAge(playerid, charid);
		}
	}

	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline inputName, DIALOG_STYLE_INPUT, "Remëjo meniu > Veikëjo vardo keitimas", "Keisti", "Gráþti");
	return 1;
}


stock Donator_ChangeName_NewAge(playerid, charid)
{
	dialog_Clear();
	dialog_AddLine("Vyras");
	dialog_AddLine("Moteris");

	inline selectGender(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;

		if(response)
		{
			player_CharGender[playerid] = listitem + 1;		
			Donator_ChangeName_NewDate(playerid, charid);
		}
	}

	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline selectGender, DIALOG_STYLE_LIST, "Remëjo meniu > Veikëjo lyties keitimas", "Pakeisti", "Atðaukti");
	return 1;
}

stock Donator_ChangeName_NewDate(playerid, charid)
{
	dialog_Clear();
	dialog_AddLine("{c9c9c9}Áveskite veikëjo naujus gimimo metus {f0a046}(1930-2017)");

	inline inputDate(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;
		if(response)
		{
			new 
				date;
			if(sscanf(dialog_Input(),"d",date) || !(1930 <= date <= 2017)) return SendError(playerid, "Formatas netinkamas!");
			player_CharDate[playerid] = date;
			
			Donator_ChangeName_NewOrigin(playerid, charid);
		}
	}	
	
	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline inputDate, DIALOG_STYLE_INPUT, "Remëjo meniu > Veikëjo gimimo datos keitimas", "Pakeisti", "Atðaukti");
	return 1;
}

stock Donator_ChangeName_NewOrigin(playerid, charid)
{
	dialog_Clear();
	for(new i = 0; i < sizeof OriginsList; i++)
	{
		dialog_AddLine(OriginsList[i]);
	}

	inline newOrigin(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;
		if(response)
		{
			player_CharOrigin[playerid] = listitem + 1;
			call OnPlayerRenameChar(playerid,charid,player_CharGender[playerid],player_CharDate[playerid],player_CharOrigin[playerid],player_CharName[playerid]);
		}
	}

	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline newOrigin, DIALOG_STYLE_LIST, "Remëjo meniu > Veikëjo tautybës keitimas", "Pakeisti", "Atðaukti");
	return 1;
}


hook OnPlayerRenameChar(playerid, charid, gender, date, origin, name[])
{
	if(CheckNameUsageAnywhere(name, true)) return SendWarning(playerid, "Ðis vardas jau yra naudojamas.");
	if(PlayerInfo[playerid][pNameChanges] <= 0) return SendWarning(playerid, "Jûs nebeturite vardo keitimø.");

	new 
		online = INVALID_PLAYER_ID;

	inline updatePlayer()
	{
		SendFormat(playerid, 0xBABABAFF, "Veikëjo vardas sëkmingai pakeistas á: %s", name);
		CharListTD_ShowSelect(playerid, player_charList_Page[playerid], false, 2);

		if((online = FindPlayerBySql(charid)) != INVALID_PLAYER_ID)
		{
			PlayerInfo[online][pGender] = gender;
			PlayerInfo[online][pBirthDate] = date;
			format(PlayerInfo[online][pOrigin], 30, "%s", OriginsList[origin - 1]);
			
			if(PlayerInfo[online][pJailTime] > 0)
			{
				PlayerInfo[online][pJailTime] = 1;
			}

			if(!(strlen(name) && SetPlayerName(online, name)))
			{
				SendError(playerid, "Praðome prisijungti ið naujo.");
				KickEx(playerid);
			}

			format(PlayerInfo[playerid][pName], MAX_PLAYER_NAME, "%s", name);
		}

		PlayerInfo[playerid][pNameChanges] --;
		SaveUserIntEx(PlayerInfo[playerid][pUserId], "NameChanges", PlayerInfo[playerid][pNameChanges]);

		log_init(true);
		log_set_table("logs_donators");
		log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
		log_set_values("'%d','%e','Pakeite veikejo varda','%e'", LogPlayerId(playerid), LogPlayerName(playerid), name);
		log_commit();
		return 1;
	}

	mysql_tquery_inline(chandler, using inline updatePlayer, "\
		UPDATE `players_data` SET Name = '%e', Gender = '%d', BirthDate = '%d', Origin = '%e' \
		WHERE id = '%d'", 
		name, gender, date, OriginsList[origin - 1], charid
	);
	return 1;
}

stock CharListTD_ShowMoreInfo(playerid, selected)
{
	if(selected < 0) return 1;
	new 
		index = player_charList_Page[playerid]*2 + selected,
		bool:is_confirmed = (player_CharArray[playerid][index][1] == 1 ? true : false);

	if(!is_confirmed)
	{
		return SendError(playerid, "Ðis veikëjas yra nepatvirtintas.");
	}

	new 
		string[126],
		id = player_CharArray[playerid][index][0];

	mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_data` WHERE id = '%d'", id);
	mysql_tquery(chandler, string, "CharDetailedInfoLoad", "d", playerid);
	return 1;
}

forward CharDetailedInfoLoad(playerid);
public CharDetailedInfoLoad(playerid)
{
	if(cache_num_rows())
	{
		new 
			id, level,
			money, bank, 
			savings, xp,
			faction, job,
			gender,
			carlic, motolic, flylic, boatlic,
			number;

		cache_get_value_name_int(0, "id", id);
		cache_get_value_name_int(0, "Level", level);
		cache_get_value_name_int(0, "XP", xp);
		cache_get_value_name_int(0, "Money", money);
		cache_get_value_name_int(0, "Bank", bank);
		cache_get_value_name_int(0, "Savings", savings);
		cache_get_value_name_int(0, "Faction", faction);
		cache_get_value_name_int(0, "Job", job);
		cache_get_value_name_int(0, "Gender", gender);
		cache_get_value_name_int(0, "CarLic", carlic);
		cache_get_value_name_int(0, "MotoLic", motolic);
		cache_get_value_name_int(0, "FlyLic", flylic);
		cache_get_value_name_int(0, "BoatLic", boatlic);
		cache_get_value_name_int(0, "PhoneNumber", number);

		dialog_Clear();

		dialog_AddLine("{FFFFFF}MySQL numeris: %d\t \t \t ", id);

		dialog_AddLine("Lygis: %d (%d XP)", level, xp);
		dialog_AddLine("Grynieji: $%d, banke: $%d", money, bank);
		dialog_AddLine("Indëlis: $%d", savings);
		dialog_AddLine("Frakcija: %s", GetFactionName(faction, true));
		dialog_AddLine("Darbas: %s", GetJobName(job, true));
		dialog_AddLine("Lytis: %s", gender == 1 ? ("vyras") : ("moteris"));

		dialog_AddLine("Automobilio teisës: %s", carlic > 0 ? ("taip") : ("ne"));
		dialog_AddLine("Motociklo teisës: %s", motolic > 0 ? ("taip") : ("ne"));
		dialog_AddLine("Lëktuvo teisës: %s", flylic > 0 ? ("taip") : ("ne"));
		dialog_AddLine("Valties teisës: %s", boatlic > 0 ? ("taip") : ("ne"));
		dialog_AddLine("Telefono numeris: %d", number);

		inline charDetails(response, listitem)
		{
			player_charList_GUIShown[playerid] = false;
			SelectTextDraw(playerid, CHARSELECT_COLOR);

			if(response)
			{
				Player_UCP_ChangeSkin(playerid);	
			}
		}

		player_charList_GUIShown[playerid] = true;
		dialog_Show(playerid, using inline charDetails, DIALOG_STYLE_MSGBOX, "Informacija apie veikëjà", "Skin", "Uþdaryti");
	}
}

stock Player_UCP_ChangeSkin(playerid)
{
	dialog_Clear();
	dialog_AddLine("{c9c9c9}Áveskite naujà iðvaizdos ID");

	inline inputSkin(response, listitem)
	{
		player_charList_GUIShown[playerid] = false;
		if(response)
		{
			new 
				index = player_charList_Page[playerid]*2 + player_charList_Selected[playerid],
				id = player_CharArray[playerid][index][0],
				skin;
			if(sscanf(dialog_Input(),"d",skin) || !(1 <= skin <= 312)) return SendError(playerid, "Formatas netinkamas!");
			new 
				online = FindPlayerBySql(id);
			if(online != INVALID_PLAYER_ID)
			{
				SetPlayerSkin(online, skin);
				SaveAccountIntEx(online, "Skin", skin);
			}
			else
			{
				inline savePlayerSkin() return 1;
				mysql_tquery_inline(chandler, using inline savePlayerSkin, "\
					UPDATE `players_data` SET Skin = '%d' WHERE id = '%d'", skin, id);
			}
			SendFormat(playerid, 0xBABABAFF, "Iðvaizda sëkmingai pakeista.");
		}
	}

	player_charList_GUIShown[playerid] = true;
	dialog_Show(playerid, using inline inputSkin, DIALOG_STYLE_INPUT, "Iðvaizdos keitimas", "Tæsti", "Atðaukti");
	return 1;
}


stock CharListTD_Hide(playerid)
{
	TextDrawHideForPlayer(playerid, chars_g_td_mainbg);
 	for(new i =0; i < 2; i++) TextDrawHideForPlayer(playerid, chars_g_td_charbg[i]);
 	for(new i =0; i < 2; i++) TextDrawHideForPlayer(playerid, chars_g_td_control[i]);
 	for(new i =0; i < 2; i++) TextDrawHideForPlayer(playerid, chars_g_td_control_txt[i]);
 	TextDrawHideForPlayer(playerid, chars_g_td_play);
 	TextDrawHideForPlayer(playerid, chars_g_td_info);
 	TextDrawHideForPlayer(playerid, chars_g_td_donator);
 	TextDrawHideForPlayer(playerid, chars_g_td_new);
 	TextDrawHideForPlayer(playerid, chars_g_td_page_bg);
 	TextDrawHideForPlayer(playerid, chars_g_td_page_back);
 	TextDrawHideForPlayer(playerid, chars_g_td_page_next);
 	TextDrawHideForPlayer(playerid, chars_g_td_page_back_txt);
 	TextDrawHideForPlayer(playerid, chars_g_td_page_next_txt);
 	TextDrawHideForPlayer(playerid, chars_g_td_play_txt);
 	TextDrawHideForPlayer(playerid, chars_g_td_info_txt);
 	TextDrawHideForPlayer(playerid, chars_g_td_donator_txt);
 	TextDrawHideForPlayer(playerid, chars_g_td_new_txt);

	for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, chars_p_td_lessinfo[playerid][i]);
	for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, chars_p_td_smallname[playerid][i]);
	for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, chars_p_td_charskin[playerid][i]);
	PlayerTextDrawHide(playerid, chars_p_td_error[playerid]);
	PlayerTextDrawHide(playerid, chars_p_td_bigname[playerid]);
	PlayerTextDrawHide(playerid, chars_p_td_biginfo[playerid]);
	PlayerTextDrawHide(playerid, chars_p_td_page_txt[playerid]);
	tmpESC[playerid] = ESC_TYPE_NONE;
}

stock CharListTD_ShowControls(playerid, page, selected)
{
	new 
		index = page*2 + selected,
		string[126];
	new 
		bool:is_confirmed = (player_CharArray[playerid][index][1] == 1 ? true : false),
		id = player_CharArray[playerid][index][0];

	is_confirmed && mysql_format(chandler, string, sizeof string, "SELECT Name,Level,Money,Bank,Savings,Job,Faction FROM `players_data` WHERE id = '%d' LIMIT 1", id) || mysql_format(chandler, string, sizeof string, "SELECT Name FROM `players_new` WHERE id = '%d' LIMIT 1", id);
	mysql_tquery(chandler, string, "CharControlsLoad", "ddd", playerid, page, selected);
	return 1;
}

forward CharControlsLoad(playerid, page, selected);
public CharControlsLoad(playerid, page, selected)
{
	new 
		index = page*2 + selected,
		string[126];
	new 
		bool:is_confirmed = (player_CharArray[playerid][index][1] == 1 ? true : false);
	if(cache_num_rows())
	{
		new 
			name[24 + 1],
			level, money, bank, savings, job, faction;
		cache_get_value_name(0, "Name", name);
		if(is_confirmed)
		{
			cache_get_value_name_int(0, "Level", level);
			cache_get_value_name_int(0, "Money", money);
			cache_get_value_name_int(0, "Bank", bank);
			cache_get_value_name_int(0, "Savings", savings);
			cache_get_value_name_int(0, "Job", job);
			cache_get_value_name_int(0, "Faction", faction);

			format(string, sizeof string, "Lygis: %d~n~Pinigai: $%d~n~Banke: $%d~n~Palukanos: $%d~n~Darbas: %s~n~Frakcija: %s", level, money, bank, savings, formatlt(GetJobName(job, true)), formatlt(GetFactionName(faction, true)));
		}
		PlayerTextDrawSetString(playerid, chars_p_td_bigname[playerid], name);
		PlayerTextDrawShow(playerid, chars_p_td_bigname[playerid]);
		
		is_confirmed && PlayerTextDrawSetString(playerid, chars_p_td_biginfo[playerid], string) || PlayerTextDrawSetString(playerid, chars_p_td_biginfo[playerid], "Sis veikejas yra nepatvirtintas,~n~todel negalite juo zaisti.");
		// PlayerTextDrawSetPosition(playerid, chars_p_td_biginfo[playerid], 362.000000, 132.000000);
		PlayerTextDrawShow(playerid, chars_p_td_biginfo[playerid]);

		TextDrawShowForPlayer(playerid, chars_g_td_play);
	 	TextDrawShowForPlayer(playerid, chars_g_td_info);
	 	TextDrawShowForPlayer(playerid, chars_g_td_donator);
	 	TextDrawShowForPlayer(playerid, chars_g_td_play_txt);
	 	TextDrawShowForPlayer(playerid, chars_g_td_info_txt);
	 	TextDrawShowForPlayer(playerid, chars_g_td_donator_txt);
	}
	return 1;
}


stock CharListTD_ShowMessage(playerid, error[], size = sizeof error)
{
	//PlayerText:chars_p_td_error[MAX_PLAYERS],
	// "~n~_Sis_veikejas_yra_naudojamas!_Pirmiausia_turite_ji~n~_atjungti_nuo_zaidimo.~n~~n~
	strins(error, "_", 0, size);
	strins(error, "~n~", 0, size);
	strcat(error, "~n~_", size);
	PlayerTextDrawSetString(playerid, chars_p_td_error[playerid], error);
	PlayerTextDrawShow(playerid, chars_p_td_error[playerid]);
	return 1;
}

stock CharListTD_HideChar(playerid, id)
{
	PlayerTextDrawHide(playerid, chars_p_td_lessinfo[playerid][id]);
	PlayerTextDrawHide(playerid, chars_p_td_smallname[playerid][id]);
	PlayerTextDrawHide(playerid, chars_p_td_charskin[playerid][id]);
	TextDrawHideForPlayer(playerid, chars_g_td_charbg[id]);
	TextDrawHideForPlayer(playerid, chars_g_td_control_txt[id]);
	TextDrawHideForPlayer(playerid, chars_g_td_control[id]);
	return 1;
}


stock CharListTD_ShowSelect(playerid, page, bool:showbase = false, last_rows = 0)
{
	// Rodyti ir nepatvirtintus reiketu
	new 
		string[256];
	if(showbase)
	{
		TextDrawShowForPlayer(playerid, chars_g_td_mainbg);
		TextDrawShowForPlayer(playerid, chars_g_td_new);
		TextDrawShowForPlayer(playerid, chars_g_td_page_bg);
		TextDrawShowForPlayer(playerid, chars_g_td_page_back);
		TextDrawShowForPlayer(playerid, chars_g_td_page_next);
		TextDrawShowForPlayer(playerid, chars_g_td_page_back_txt);
		TextDrawShowForPlayer(playerid, chars_g_td_page_next_txt);
		TextDrawShowForPlayer(playerid, chars_g_td_new_txt);
	}
	if(player_charList_Selected[playerid] != -1 && page != player_charList_Page[playerid])
	{
		// buvo kazka pasirinkes
		CharListTD_UnmarkSelected(playerid, player_charList_Selected[playerid]);
		CharListTD_HideControls(playerid);
	}
	

	for(new i = 0; i < last_rows; i++)
	{
		CharListTD_HideChar(playerid, i);
	}
	
	player_charList_Page[playerid] = page;
	player_charList_Selected[playerid] = -1;

	new 
		max_pages = floatround(float(GetCharCount(playerid))/2.0, floatround_ceil);
	//printf("GetCharCount(%s): %d", GetPlayerNameEx(playerid), GetCharCount(playerid));

	format(string, sizeof string, "Puslapis: %d/%d", page + 1, max_pages); 
	PlayerTextDrawSetString(playerid, chars_p_td_page_txt[playerid], string);
	PlayerTextDrawShow(playerid, chars_p_td_page_txt[playerid]);

	for(new i = 0; i < 2; i++)
	{
		new 
			index = page*2 + i;
		new 
			bool:is_confirmed = (player_CharArray[playerid][index][1] == 1 ? true : false),
			id = player_CharArray[playerid][index][0];

		if(id == 0) { break; }

		is_confirmed && mysql_format(chandler, string, sizeof string, "SELECT Name,Skin,Money,Level,XP FROM `players_data` WHERE id = '%d'", id) || mysql_format(chandler, string, sizeof string, "SELECT Name, Skin FROM `players_new` WHERE id = '%d'", id);
		mysql_tquery(chandler, string, "CharSelectData", "dddd", playerid, page, id, i);
	}
	tmpESC[playerid] = ESC_TYPE_CHARSELECT;
	return 1;
}

forward CharSelectData(playerid, page, id, i);
public CharSelectData(playerid, page, id, i)
{
	new 
		string[256],
		index = page*2 + i,
		bool:is_confirmed = (player_CharArray[playerid][index][1] == 1 ? true : false);
	if(cache_num_rows())
	{
		TextDrawShowForPlayer(playerid, chars_g_td_charbg[i]);

		new 
			name[24],
			skin,
			money, level; // << only for confirmed
		
		cache_get_value_name(0, "Name", name);
		cache_get_value_name_int(0, "Skin", skin);

		if(is_confirmed)
		{
			cache_get_value_name_int(0, "Money", money);
			cache_get_value_name_int(0, "Level", level);

			format(string, sizeof string, "Lygis: %d~n~Isvaizda: %d", level, skin);
		}	
		else
		{
			format(string, sizeof string, "~r~VEIKEJAS NEPATVIRTINTAS!");
		}
		PlayerTextDrawSetString(playerid, chars_p_td_lessinfo[playerid][i], string);
		PlayerTextDrawShow(playerid, chars_p_td_lessinfo[playerid][i]);

		PlayerTextDrawSetString(playerid, chars_p_td_smallname[playerid][i], name);
		PlayerTextDrawShow(playerid, chars_p_td_smallname[playerid][i]);

		PlayerTextDrawSetPreviewModel(playerid, chars_p_td_charskin[playerid][i], skin);
		PlayerTextDrawShow(playerid, chars_p_td_charskin[playerid][i]);

		TextDrawShowForPlayer(playerid, chars_g_td_control[i]);
		TextDrawShowForPlayer(playerid, chars_g_td_control_txt[i]);	
		
		SelectTextDraw(playerid, CHARSELECT_COLOR);

		PlayerTextDrawSetString(playerid, chars_p_td_biginfo[playerid], "Pasirinkite veikeja, kuri norite valdyti");
		// PlayerTextDrawSetPosition(playerid, chars_p_td_biginfo[playerid], 362.000000, 122.000000);
		PlayerTextDrawShow(playerid, chars_p_td_biginfo[playerid]);
	}
	return 1;
}

stock User_Login_ShowSecurity(playerid)
{
	inline questionLoad()
	{
		if(cache_num_rows())
		{
			new 
				string[256];
			cache_get_value_name(0, "Question", string);
			User_Login_ShowAnswerInput(playerid, string);
		}
		else
		{
			call OnPlayerLogIn(playerid);
		}
	}
	mysql_tquery_inline(chandler, using inline questionLoad, "\
		SELECT Question FROM `users_safe_questions` WHERE UserId = '%d'", PlayerInfo[playerid][pUserId]);
	return 1;
}

stock User_Login_ShowAnswerInput(playerid, question[])
{
	dialog_Clear();
	dialog_AddLine("Kadangi jungiatës ið kito IP, praðome atsakyti á saugos klausimà:");
	dialog_AddLine(question);

	inline userLoginSecurity(response, listitem)
	{
		if(response)
		{
			if(!strlen(dialog_Input()))
				return User_Login_ShowAnswerInput(playerid, question);

			inline loginAnswerCheck()
			{
				if(cache_num_rows())
				{
					call OnPlayerLogIn(playerid);
				}
				else
				{
					PlayerInfo[playerid][pWrongPassword] ++ ;
					if(PlayerInfo[playerid][pWrongPassword] >= 3) Kick(playerid);
					else User_Login_ShowAnswerInput(playerid, question);
				}
				return 1;
			}
			mysql_tquery_inline(chandler, using inline loginAnswerCheck, "\
				SELECT NULL FROM `users_safe_questions` WHERE UserId = '%d' AND Answer = '%e'",
				PlayerInfo[playerid][pUserId], MD5_Hash(dialog_Input())
			);
		}
		else 
		{
			Kick(playerid);
		}
	}
	dialog_Show(playerid, using inline userLoginSecurity, DIALOG_STYLE_INPUT, "Saugos klausimas", "Toliau", "Iðeiti");
	return 1;
}

stock Login_ShowPassword(playerid)
{
	dialog_Clear();
	dialog_AddLine("{F4BF2E}Sveiki sugráþæ á Southland Roleplay!");
	dialog_AddLine("{f9f9f9}Norëdami tæsti þaidimà, praðome ávesti vartotojo slaptaþodá:");

	inline userInputPassword(response, listitem)
	{
		if(response)
		{
			if(!strlen(dialog_Input())) return Login_ShowPassword(playerid);

			new 
				string[256],
				salted[130];

			format(string, 60, "%s%s", dialog_Input(), PlayerInfo[playerid][pSalt]);
			WP_Hash(salted, sizeof salted, string);
			
			mysql_format(chandler, string, sizeof string, "\
				SELECT RegisterIp,DiscordCode,DiscordVerified,TutorialDone \
				FROM \
				`users_data` WHERE id = '%d' AND Password = '%e'", 
				PlayerInfo[playerid][pUserId], salted
			);
			mysql_tquery(chandler, string, "CheckRegisterIp", "d", playerid);
		}
		else
		{
			KickEx(playerid);
		}
	}
	dialog_Show(playerid, using inline userInputPassword, DIALOG_STYLE_PASSWORD, "Prisijungimas", "Jungtis", "Iðeiti");
	return 1;
}

forward CheckRegisterIp(playerid);
public CheckRegisterIp(playerid)
{
	if(cache_num_rows())
	{
		new 
			RegisterIp[19];
		cache_get_value_name(0, "RegisterIp", RegisterIp);
		cache_get_value_name_int(0, "DiscordVerified", PlayerInfo[playerid][pDiscordVerified]);
		cache_get_value_name_int(0, "TutorialDone", PlayerInfo[playerid][pTutorialDone]);

		if(!isequal(RegisterIp, GetPlayerIpEx(playerid)))
		{
			// IP su registracijos nesutampa, reikia apsaugos klausima rodyt
			PlayerInfo[playerid][pWrongPassword] = 0;
			User_Login_ShowSecurity(playerid);
		}
		else
		{
			call OnPlayerLogIn(playerid);
		}
	}
	else 
	{
		PlayerInfo[playerid][pWrongPassword] ++ ;
		if(PlayerInfo[playerid][pWrongPassword] >= 3) return Kick(playerid);
		else Login_ShowPassword(playerid);
	}
	return 1;
}


stock User_Register_Show(playerid)
{
	dialog_Clear();
	dialog_AddLine("{adcf70}Sveikas atvykæs á Southland roleplay!");
	dialog_AddLine("{f9f9f9}Tai yra roleplay tipo serveris, kuriame atkartojama realybë.");
	dialog_AddLine("Jei tokiame serveryje lankotës pirmà kartà, perskaitykite informacijà {a9d659}www.southland.lt");
	dialog_SkipLine();
	dialog_AddLine("ATSIMINKITE: Tai nëra jûsø veikëjas! Tai yra jûsø UCP vartotojas, prie kurio");
	dialog_AddLine("Prisijungus galësite kurti atskirus veikëjus ir juos valdyti!");
	dialog_SkipLine();
	dialog_AddLine("{d78484}Slaptaþodis turi bûti nuo 6 iki 30 simboliø.");

	inline inputPassword(response, listitem)
	{
		if(response)
		{
			if(!CheckPasswordComplexity(dialog_Input(), -1)) return User_Register_Show(playerid);
			
			GenerateSalt(PlayerInfo[playerid][pSalt], GetPlayerIpEx(playerid), 30);
			format(PlayerInfo[playerid][pPassword], 130, dialog_Input());

			Register_CreateQuestion(playerid);
		}
		else Kick(playerid);
	}
	dialog_Show(playerid, using inline inputPassword, DIALOG_STYLE_PASSWORD, "Registracija", "Registruotis", "Iðeiti");
	return 1;
}


stock Register_CreateQuestion(playerid)
{
	dialog_Clear();
	dialog_AddLine("{f9f9f9}Jûsø vartotojø saugumui sukûrëme sistemà, kuri apsaugos Jûsø vartotojus nuo vagystës.");
	dialog_AddLine("Praðome sugalvoti apsaugos klausimà, kuris bus uþduodamas kiekvienà kartà jungiantis ið kito IP.");

	inline inputQuestion(response, listitem)
	{
		if(response)
		{
			if(!strlen(dialog_Input())) Register_CreateQuestion(playerid);
			Register_CreateAnswer(playerid, dialog_Input());
		}
		else User_Register_Show(playerid);
	}
	dialog_Show(playerid, using inline inputQuestion, DIALOG_STYLE_INPUT, "Vartotojo saugumas 1/2", "Tæsti", "Atðaukti");
	return 1;
}

stock Register_CreateAnswer(playerid, question[])
{
	dialog_Clear();
	dialog_AddLine("{f9f9f9}Praðome paraðyti atsakymà á savo sukurtà klausimà:");
	dialog_AddLine(question);
	dialog_AddLine("Praðome sugalvoti ásimenamà atsakymà, kadangi administracija jo matyti taip pat negalës.");
	
	inline inputAnswer(response, listitem)
	{
		if(response)
		{
			if(!strlen(dialog_Input())) return Register_CreateAnswer(playerid, question); 

			User_AddToDb(playerid,
				.i_password = PlayerInfo[playerid][pPassword],
				.i_salt = PlayerInfo[playerid][pSalt],
				.i_question = question,
				.i_answer = dialog_Input()
			);
		}
		else Register_CreateAnswer(playerid, question);
	}
	dialog_Show(playerid, using inline inputAnswer, DIALOG_STYLE_INPUT, "Vartotojo saugumas 2/2", "Tæsti", "Atðaukti");
	return 1;
}


stock User_AddToDb(playerid, i_password[], i_salt[], i_question[], i_answer[])
{
	new 
		string[512],
		hashed[130];

	format(string, sizeof string, "%s%s", i_password, i_salt);
	WP_Hash(hashed, 130, string);

	mysql_format(chandler, string, sizeof string, "INSERT INTO `users_data` (`Name`,`Password`,`Salt`,`RegisterIp`,`DiscordVerified`) VALUES ('%e','%e','%e','%e','0')", GetPlayerNameEx(playerid), hashed, i_salt, GetPlayerIpEx(playerid));
	mysql_tquery(chandler, string, "AddUserToDb", "d", playerid);

	mysql_format(chandler, string, sizeof string, "INSERT INTO `users_safe_questions` (`UserId`,`Question`,`Answer`) VALUES ('%d','%e','%e')", PlayerInfo[playerid][pUserId], i_question, MD5_Hash(i_answer));
	mysql_fquery(chandler, string, "UserSafeQuestionAdd");
	return 1;
}

forward AddUserToDb(playerid);
public AddUserToDb(playerid)
{
	PlayerInfo[playerid][pUserId] = cache_insert_id();

	SendFormat(playerid, 0xa8cf52ff, "Sëkmingai uþregistravote vartotojà %s! Prieð pradedant þaist patvirtinkite savo vartotojà Discord pagalba.", GetPlayerNameEx(playerid));
	call OnPlayerRegister(playerid);
	return 1;
}

thread(UserSafeQuestionAdd);

stock CheckRoleplayName(name[])
{
	/*new 
		len = strlen(name),

		underscores,
		capital = false;

	for(new i = 0; i < len; i++)
	{
		if(!('a' <= name[i] <= 'z') && !('A' <= name[i] <= 'Z') && name[i] != '_') return false;
		if(('A' <= name[i] <= 'Z')) capital ++;
		if(name[i] == '_') underscores ++ ;
	}
	if(capital >= 2 && underscores >= 1) return true;
	return false;*/
    new
        len = strlen(name),
 
        underscores,
        capital = false;
 
    for(new i = 0; i < len; i++)
    {
		if(!('A' <= name[0] <= 'Z')) return false;
		if(!('a' <= name[i] <= 'z') && !('A' <= name[i] <= 'Z') && name[i] != '_') return false;
		if(name[len-1] == '_') return false;
		if(('A' <= name[i] <= 'Z')) capital ++;
		if(name[i] == '_') underscores ++ ;
    }
    if(capital < 2 && underscores < 1) return false;

    new underscore = 0;

    for(new i = 0; i < underscores; i++)
    {
		underscore = strfind(name, "_", true, underscore);
		if(!('A' <= name[underscore+1] <= 'Z')) return false;
    }
    return true;
}

stock CheckPasswordComplexity(password[], size = sizeof password)
{
	new 
		bool:_l, bool:_u;
	if(size <= -1) size = strlen(password);
	if(strlen(password) < 6 || strlen(password) > 30) return false;
	for(new i = 0; i < size; i++)
	{
		if(_l && _u) return true;
		if(!_l) if(('a' <= password[i] <= 'z')) _l = true;
		if(!_u) if(('A' <= password[i] <= 'Z')) _u = true;
	}
	if(_l && _u) return true;
	return false; 
}

stock GenerateSalt(salt[], given_string[] = "", size = sizeof(salt))
{
	format(salt, size, "%s", MD5_Hash(given_string, true));
	strdel(salt, 15, size);
	for(new i = strlen(salt); i < size; i++)
	{
		(random(2) == 1) && format(salt, size, "%s%c", salt, GetRandomCharacter()) || format(salt, size, "%s%d", salt, random(10));
	}
	return 1;
}

stock GetRandomCharacter()
{ 
    #if !defined J@
        new J@;
    #endif
	return ((91 <= (J@ = 65 + random(57)) <= 96) ? 65 + random(25) : J@);
}



public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	#if SERVER_DEBUG_LEVEL >= 1
		printf("\n[debug] OnQueryError(%d,%d)\nerror:  %s\n\ncallback:  %s\n\nquery:  %s\n", errorid, _:handle, error, callback, query);
		if(errorid == 1065) print("probably missing arguments in query format\n");
	#endif
	return 1;
}


forward WarningHide(playerid);
public WarningHide(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] WarningHide(%s)", GetPlayerNameEx(playerid));
	#endif
	PlayerTextDrawHide(playerid, tdWarning_Name[playerid]);
	PlayerTextDrawHide(playerid, tdWarning_Info[playerid]);
	if(ShowingInfoBar{playerid})
	{
		PlayerTextDrawShow(playerid, InfoBar[playerid]);
	}
	return 1;
}

forward PlayerInventoryLoad(playerid);
public PlayerInventoryLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] PlayerInventoryLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	if(!cache_num_rows())
	{
		new string[125];
		mysql_format(chandler, string, sizeof string, "INSERT INTO `players_inventory` (`PlayerId`) VALUES ('%d')", PlayerInfo[playerid][pId]);
		mysql_query(chandler, string, false);
	}
	else
	{
		new packed[512];
		cache_get_value_name(0, "Packed", packed);

		extract_inventory(packed, "|", 3, "ddd", playerid, InventoryInfo, MAX_INVENTORY_SLOTS);

		//sscanf(packed, "p<|>a<iii>["#MAX_INVENTORY_SLOTS"]", InventoryInfo[playerid]);

		/*sscanf(packed, "p<|>\
			ddd\
			ddd\
			ddd\
			ddd\
			ddd\
			ddd\
			ddd\
			ddd\
			ddd\
			ddd\
			ddd\
			ddd\
			ddd\
			ddd\
			ddd",
			InventoryInfo[playerid][0][invId],
			InventoryInfo[playerid][0][invAmount],
			InventoryInfo[playerid][0][invExtraId],
			InventoryInfo[playerid][1][invId],
			InventoryInfo[playerid][1][invAmount],
			InventoryInfo[playerid][1][invExtraId],
			InventoryInfo[playerid][2][invId],
			InventoryInfo[playerid][2][invAmount],
			InventoryInfo[playerid][2][invExtraId],
			InventoryInfo[playerid][3][invId],
			InventoryInfo[playerid][3][invAmount],
			InventoryInfo[playerid][3][invExtraId],
			InventoryInfo[playerid][4][invId],
			InventoryInfo[playerid][4][invAmount],
			InventoryInfo[playerid][4][invExtraId],
			InventoryInfo[playerid][5][invId],
			InventoryInfo[playerid][5][invAmount],
			InventoryInfo[playerid][5][invExtraId],
			InventoryInfo[playerid][6][invId],
			InventoryInfo[playerid][6][invAmount],
			InventoryInfo[playerid][6][invExtraId],
			InventoryInfo[playerid][7][invId],
			InventoryInfo[playerid][7][invAmount],
			InventoryInfo[playerid][7][invExtraId],
			InventoryInfo[playerid][8][invId],
			InventoryInfo[playerid][8][invAmount],
			InventoryInfo[playerid][8][invExtraId],
			InventoryInfo[playerid][9][invId],
			InventoryInfo[playerid][9][invAmount],
			InventoryInfo[playerid][9][invExtraId],
			InventoryInfo[playerid][10][invId],
			InventoryInfo[playerid][10][invAmount],
			InventoryInfo[playerid][10][invExtraId],
			InventoryInfo[playerid][11][invId],
			InventoryInfo[playerid][11][invAmount],
			InventoryInfo[playerid][11][invExtraId],
			InventoryInfo[playerid][12][invId],
			InventoryInfo[playerid][12][invAmount],
			InventoryInfo[playerid][12][invExtraId],
			InventoryInfo[playerid][13][invId],
			InventoryInfo[playerid][13][invAmount],
			InventoryInfo[playerid][13][invExtraId],
			InventoryInfo[playerid][14][invId],
			InventoryInfo[playerid][14][invAmount],
			InventoryInfo[playerid][14][invExtraId]);*/
	}
	return 1;
}

stock SortArray(array[], start = 0, end = sizeof(array), check = 0)
{
	/*
	 *	Funkcija, sutvarkanti array nepaliekant laisvu vietu
	 *  int check = jei array vieta atitinka si skaiciu, jis perkeliamas.
	 */
	for(new i = start; i < end; i++)
	{
		if(array[i] == check)
		{
			for(new x = i+1; x < end; x++)
			{
				if(array[x] != check)
				{
					array[i] = array[x];
					array[x] = 0;
					break;
				}
			}
		}
	}
	return 1;
}


forward OptionsLoad();
public OptionsLoad()
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] OptionsLoad");
	#endif
	new
		varname[49],
		value[129],
		type;
	for(new row = 0, maxrows = cache_num_rows(); row < maxrows; row++)
	{
		cache_get_value_name(row, "Key", varname, 48);
		cache_get_value_name(row, "Value", value, 128);
		cache_get_value_name_int(row, "Type", type);
		switch(type)
		{
			case GLOBAL_VARTYPE_INT: SetGVarInt(varname, strval(value));
			case GLOBAL_VARTYPE_STRING: SetGVarString(varname, value);
			case GLOBAL_VARTYPE_FLOAT: SetGVarFloat(varname, floatstr(value));
		}
	}

	call OnServerOptionsLoad();
	return 1;
}

hook OnServerOptionsLoad()
{
	PreparePoliceWaresUsage();
	Jobs_LoadPickups();
	LoadDroppedItems();
	LoadHouses(false);
	LoadDealerHouses(false);
	LoadBusiness(false);

	Bank_CreatePickup();
	AdPlace_CreateLabel();
	return 1;
}

stock AdPlace_CreateLabel()
{
	IsValidDynamic3DTextLabel(AdLabel) && DestroyDynamic3DTextLabel(AdLabel);
	AdLabel = CreateDynamic3DTextLabel("Reklamuotis galite naudodami /ad\n(tel. numeris pridedamas automatiðkai)\nKaina: "#DEFAULT_AD_PRICE"$", 
		0x66C729FF,
		GetGVarFloat("AdX"),
		GetGVarFloat("AdY"),
		GetGVarFloat("AdZ"), 
		10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,
		GetGVarInt("AdVW"),
		GetGVarInt("AdInt")
	);
}

stock Bank_CreatePickup()
{
	IsValidDynamicPickup(BankPickup) && sd_DestroyDynamicPickup(BankPickup);
	IsValidDynamic3DTextLabel(BankLabel) && DestroyDynamic3DTextLabel(BankLabel);

	BankPickup = sd_CreateDynamicPickup(PICKUP_TYPE_BANK, 0, 1274, 2, 
		GetGVarFloat("BankX"),
		GetGVarFloat("BankY"),
		GetGVarFloat("BankZ"),
		GetGVarInt("BankVW"),
		GetGVarInt("BankInt")
	);

	BankLabel = CreateDynamic3DTextLabel("Norëdami naudotis banku, raðykite /bank", 0x66C729FF, 
		GetGVarFloat("BankX"),
		GetGVarFloat("BankY"),
		GetGVarFloat("BankZ"), 
		10.0,
		INVALID_PLAYER_ID,
		INVALID_VEHICLE_ID,
		1,
		GetGVarInt("BankVW"),
		GetGVarInt("BankInt")
	);
	return 1;
}

stock PreparePoliceWaresUsage()
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] PreparePoliceWaresUsage");
	#endif
	if(GetGVarInt("PaydaysToPDWeaponsEmpty") == 0) SetGVarInt("PaydaysToPDWeaponsEmpty", DEFAULT_PAYDAYS_TO_EMPTY_POLICE_WEAPONS);
	if(GetGVarInt("PaydaysToPDSkinsEmpty") == 0) SetGVarInt("PaydaysToPDSkinsEmpty", DEFAULT_PAYDAYS_TO_EMPTY_POLICE_SKINS);
	if(GetGVarInt("PaydaysToPDSpecialEmpty") == 0) SetGVarInt("PaydaysToPDSpecialEmpty", DEFAULT_PAYDAYS_TO_EMPTY_POLICE_SPECIAL);

	new array[3],
		highest;
	array[0] = GetGVarInt("PaydaysToPDWeaponsEmpty");
	array[1] = GetGVarInt("PaydaysToPDSkinsEmpty");
	array[2] = GetGVarInt("PaydaysToPDSpecialEmpty");
	for(new i = 0; i < 3; i++)
	{
		if(array[i] > highest) highest = array[i];
	}
	// dabar atrandam tobula skaiciu, kuris dalinas is visu payday
	for(new i = highest; i < 100000; i++)
	{
		if((i % array[0] == 0) && (i % array[1] == 0) && (i % array[2] == 0))
		{
			printf("[load] bus pridedama %d i frakcijos sandeli.", i);
			SetGVarInt("AddPDWaresAmount", i);
			break;
		}
	}
	return 1;
}

stock sd_CreateDynamicPickup(pickuptype, uniqueid, model, spawntype, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_PICKUP_SD)
{
	new pickup = CreateDynamicPickup(model, spawntype, x, y, z, worldid, interiorid, playerid, streamdistance);
	PickupData[pickup][pickupType] = pickuptype;
	PickupData[pickup][pickupUniqueId] = uniqueid;
	return pickup;
}

stock sd_DestroyDynamicPickup(pickupid)
{
	PickupData[pickupid][pickupType] = 0;
	PickupData[pickupid][pickupUniqueId] = -1;
	return DestroyDynamicPickup(pickupid);
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] OnPlayerPickUpDynamicPickup(%s)", GetPlayerNameEx(playerid));
	#endif
	static
		last_pickup_time[MAX_PLAYERS],
		last_pickup_type[MAX_PLAYERS];
	new
		type = PickupData[pickupid][pickupType],
		id = PickupData[pickupid][pickupUniqueId];
	if(type != last_pickup_type[playerid] || last_pickup_time[playerid] + 30 <= gettime())
	{
		// atejo laikas parodyti pickup
		last_pickup_type[playerid] = type;
		last_pickup_time[playerid] = gettime();
		if(id != -1)
		{
			switch(type)
			{
				case PICKUP_TYPE_SALON:
				{
					SendFormat(playerid, 0xFBA421FF, "%s:{EDB054} Norëdami perþiûrëti tr. priemoniø sàraðà raðykite {FBA421}/v buy", SalonData[id][salonName]);
					return 1;
				}
			}
		}
	}
	switch(type)
	{
		case PICKUP_TYPE_BANK:
		{
			pc_cmd_bank(playerid, "");
			return 1;
		}
	}
	return 1;
}


forward Kicker(playerid);
public Kicker(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] Kicker(%s)", GetPlayerNameEx(playerid));
	#endif
	return Kick(playerid);
}

forward LoginTime(playerid);
public LoginTime(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] LoginTime(%s)", GetPlayerNameEx(playerid));
	#endif
	if(	PlayerInfo[playerid][pConnection] != CONNECTION_STATE_LOGGED && 
		!(isequal(GetPlayerIpEx(playerid), "255.255.255.255", true) || isequal(GetPlayerIpEx(playerid), "127.0.0.1", true)) )
	{
		Kick(playerid);
	}
	return 1;
}


/*

oooooooooo.   ooooo       .o.       ooooo          .oooooo.     .oooooo.     .oooooo..o
`888'   `Y8b  `888'      .888.      `888'         d8P'  `Y8b   d8P'  `Y8b   d8P'    `Y8
 888      888  888      .8"888.      888         888      888 888           Y88bo.
 888      888  888     .8' `888.     888         888      888 888            `"Y8888o.
 888      888  888    .88ooo8888.    888         888      888 888     ooooo      `"Y88b
 888     d88'  888   .8'     `888.   888       o `88b    d88' `88.    .88'  oo     .d8P
o888bood8P'   o888o o88o     o8888o o888ooooood8  `Y8bood8P'   `Y8bood8P'   8""88888P'



*/

forward ReportDataLoad(playerid, id);
public ReportDataLoad(playerid, id)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] ReportDataLoad(%s, %d)", GetPlayerNameEx(playerid), id);
	#endif
	if(!cache_num_rows())
	{
		SendFormat(playerid, 0xEDEDEDFF, "Jûsø pasirinktas reportas {FFFFFF}%d{EDEDED} buvo perþiûrëtas arba iðtrintas.", id);
		pc_cmd_reports(playerid, "internal");
		return 1;
	}
	else
	{
		new string[256], reason[128],
			reporterid, cheaterid, date[20];
		cache_get_value_name(0, "Reason", reason);
		cache_get_value_name_int(0, "ReporterId", reporterid);
		cache_get_value_name_int(0, "CheaterId", cheaterid);
		cache_get_value_name(0, "Date", date);
		strmid(string, reason, 0, 56, 56);
		if(strlen(reason) > 56)
		{
			strcat(string, "...");
			strdel(reason, 0, 56);
		}
		else
		{
			reason[0] = EOS;
		}
		format(string, sizeof string, "{CCCCCC}Praneðëjas: %s%s\n{CCCCCC}Nusiþengë: %s%s\n{CCCCCC}Data: {FFFFFF}%s\n{CCCCCC}Praneðimas: {FFFFFF}%s\n%s", (FindPlayerBySql(reporterid) == INVALID_PLAYER_ID ? ("{E15B5B}") : ("{5EC04B}")), GetNameBySql(reporterid), (FindPlayerBySql(cheaterid) == INVALID_PLAYER_ID ? ("{E15B5B}") : ("{5EC04B}")), GetNameBySql(cheaterid), date, string, reason);
		ShowPlayerDialog(playerid, DIALOG_REPORT_ACTION, DIALOG_STYLE_MSGBOX, "Praneðimo perþiûra", string, "Priimti", "Atmesti");
	}
	return 1;
}

thread(ReportAccepted);
thread(ReportDeclined);
thread(AttachedClotheClear);
thread(AttachedClotheAddFromClth);

// on dialog response
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	printf("OnDialogResponse: %d, %d", playerid, dialogid);

	switch(dialogid)
	{
		case DIALOG_VEHICLE_SCRAP:
		{
			if(response)
			{
				if(GetPlayerVehicleID(playerid) == tmpIter[playerid])
				{
					new vehicleid = tmpIter[playerid];
					new money = floatround(VehicleInfo[vehicleid][vPrice]/2.5);
					if(money > 0) GivePlayerMoney(playerid, money);
					new string[356];
					mysql_format(chandler, string, sizeof string, "DELETE FROM `vehicles_data` WHERE id = '%d'; DELETE IGNORE FROM `vehicles_inventory` WHERE VehicleId = '%d'; DELETE IGNORE FROM `vehicles_dubkeys` WHERE VehicleId = '%d'", VehicleInfo[vehicleid][vId], VehicleInfo[vehicleid][vId], VehicleInfo[vehicleid][vId]);
					mysql_fquery(chandler, string, "VehicleDeletedEx");
					PlayerInfo[playerid][pHaveCars]--;
					PlayerInfo[playerid][pCarsSpawned]--;
					SendFormat(playerid, 0xBABABAFF, "Sëkmingai pardavëte tr. priemonæ uþ $%d.", money);
					log_init(true);
					log_set_table("logs_vehicles");
					log_set_keys("`PlayerId`,`PlayerName`,`VehicleId`,`VehicleName`,`ActionText`,`Amount`");
					log_set_values("'%d','%e','%d','%e','Pardave tr. priemone serveriui','%d'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId], GetModelName(GetVehicleModel(vehicleid)), money);
					log_commit();
					DestroyVehicle(vehicleid);
				}
			}
		}
		case DIALOG_VEHICLE_AUDIO_STATIONS:
		{
			if(response)
			{
				if(listitem < sizeof RadioStations)
				{
					// pasirinko stoti
					new vehicleid = GetPlayerVehicleID(playerid);
					if(IsValidVehicle(vehicleid))
					{
						format(VehicleRadio[vehicleid][vehicleRadioLink], 128, RadioStations[listitem][stationLink]);
						foreach(new receiverid : Player)
						{
							if(GetPlayerVehicleID(receiverid) == vehicleid)
							{
								SetPlayerRadio(receiverid, RadioStations[listitem][stationLink]);
							}
						}
						VehicleRadio[vehicleid][vehicleRadioPlay] = 1;
					}
					rp_me(playerid, _, "pakeièia automagnetolos daþná.");
				}
				else
				{
					// iveda
					ShowPlayerDialog(playerid, DIALOG_VEHICLE_AUDIO_INPUT, DIALOG_STYLE_INPUT, "Radijo stotys", "{FFFFFF}Áveskite stoties adresà:", "Tæsti", "Atðaukti");
				}
			}
			else pc_cmd_vradio(playerid, "");
		}
		case DIALOG_VEHICLE_AUDIO_INPUT:
		{
			if(response)
			{
				if(strlen(inputtext))
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if(IsValidVehicle(playerid))
					{
						format(VehicleRadio[vehicleid][vehicleRadioLink], 128, inputtext);
						foreach(new receiverid : Player)
						{
							if(GetPlayerVehicleID(receiverid) == vehicleid)
							{
								SetPlayerRadio(receiverid, inputtext);
							}
						}
						VehicleRadio[vehicleid][vehicleRadioPlay] = 1;
					}
					rp_me(playerid, _, "pakeièia automagnetolos daþná.");
				}
			}
			else OnDialogResponse(playerid, DIALOG_VEHICLE_AUDIO_MAIN, 1, 0, "");
		}
		case DIALOG_VEHICLE_AUDIO_VOLUME:
		{
			if(response)
			{
				new volume;
				if(sscanf(inputtext,"d",volume) || !(0 <= volume <= 100)) return OnDialogResponse(playerid, DIALOG_VEHICLE_AUDIO_MAIN, 1, 1, "");
				PlayerRadio[playerid][playerRadioVolume] = volume;
				if(PlayerRadio[playerid][playerPlayHandle] != -1)
				{
					rp_me(playerid, _, "pakeièia automagnetolos garsà.");
					//Audio_SetVolume(playerid, PlayerRadio[playerid][playerPlayHandle], volume);
				}
				else SendWarning(playerid, "Nesate ájungæs radijo stoties.");
			}
		}
		case DIALOG_VEHICLE_AUDIO_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// stotys
						new string[4084];
						for(new i = 0; i < sizeof RadioStations; i++)
						{
							format(string, sizeof string, "%s%s\n", string, RadioStations[i][stationName]);
						}
						strcat(string, "{BABABA}Ávesti savo stotá");
						ShowPlayerDialog(playerid, DIALOG_VEHICLE_AUDIO_STATIONS, DIALOG_STYLE_LIST, "Radijo stotys", string, "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// garsas
						//if(Audio_IsClientConnected(playerid) == 0)
						//{
						//	SendFormat(playerid, 0xEA7F7FFF, "Jûs nenaudojate audio papildinio, kurá rekomenduojame naudoti, þaidþiant mûsø serveryje. Já parsisiøsti galite ið www.southland.lt");
						//	return pc_cmd_vradio(playerid, "");
						//}
						//else
						//{
						//	ShowPlayerDialog(playerid, DIALOG_VEHICLE_AUDIO_VOLUME, DIALOG_STYLE_INPUT, "Garsumas", "{FFFFFF}Áveskite garsumà (0-100)", "Tæsti", "Atðaukti");
						//}
						return pc_cmd_vradio(playerid, "");
					}
					case 2:
					{
						// isjungti
						new 
							vehicleid = GetPlayerVehicleID(playerid);
						if(vehicleid != INVALID_VEHICLE_ID)
						{
							foreach(new receiverid : Player)
							{
								if(GetPlayerVehicleID(receiverid) == vehicleid)
								{
									StopPlayerRadio(receiverid);
								}
							}
						}
						rp_me(playerid, _, "iðjungia automagnetolà.");
					}
				}
			}
		}
		#if defined ENABLE_GPS
			case DIALOG_GPS:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0:
						{
							for(new i = 0; i < sizeof Jobs; i++)
							{
								if(Jobs[i][jobId] == JOB_MECHANIC)
								{
									SetPlayerCheckpointEx(playerid, 0, Jobs[i][jobX], Jobs[i][jobY], Jobs[i][jobZ], 4.0);
									break;
								}
							}
						}
						case 1:
						{
							for(new i = 0; i < sizeof Jobs; i++)
							{
								if(Jobs[i][jobId] == JOB_TRUCKER)
								{
									SetPlayerCheckpointEx(playerid, 0, Jobs[i][jobX], Jobs[i][jobY], Jobs[i][jobZ], 4.0);
									break;
								}
							}
						}
						case 2:
						{
							SetPlayerCheckpointEx(playerid, 0, 2864.02, -1966.27, 11.11, 4.0);
						}
						case 3:
						{
							SetPlayerCheckpointEx(playerid, 0, 1899.68, -1638.62, 13.55, 4.0);
						}
						case 4:
						{
							SetPlayerCheckpointEx(playerid, 0, 2132.10, -1147.88, 24.44);
						}
						case 5:
						{
							SetPlayerCheckpointEx(playerid, 0, 1459.83, -1266.29, 13.55);
						}
					}
				}
			}
		#endif
		case DIALOG_WEAPON_TRUNK:
		{
			if(response)
			{
				new
					vehicleid = tmpIter[playerid];
				if(GetClosestVehicle(playerid, 5.0) != vehicleid && GetPlayerVehicleID(playerid) != vehicleid) return InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
				if(VehicleWeaponsInventory[vehicleid][listitem][ftwWeaponId] != 0)
				{
					new
						bool:found_any_permission,
						bool:found_any_permission_ic;

					if(PlayerHasWeaponInSlot(playerid, FAC_GetWeaponSlot(VehicleWeaponsInventory[vehicleid][listitem][ftwWeaponId])))
					{
						return SendError(playerid, "Ðiame slote ginklà jau turi.");
					}
					
					for(new perm = 0; perm < 3; perm++)
					{
						if(VehicleWeaponsInventory[vehicleid][listitem][ftwPermission][perm] != 0)
						{
							found_any_permission = true;
							if(PlayerInfo[playerid][pFactionPermissions][perm] >= 1)
							{
								found_any_permission_ic = true;
							}
						}
					}
					if(!found_any_permission_ic && found_any_permission)
					{
						return SendWarning(playerid, "Ðio ginklo paimti neturite teisës.");
					}
					new string[86];
					log_init(true);
					log_set_table("logs_factions");
					log_set_keys("`FactionId`,`FactionName`,`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`,`ExtraString`");
					if(IsPlayerInAnyVehicle(playerid))
					{
						if(!VehicleWeaponsInventory[vehicleid][listitem][ftwAllowedInVehicle]) return SendWarning(playerid, "Ðio ginklo tr. priemonës viduje paimti negalite.");
						GivePlayerWeapon(playerid, VehicleWeaponsInventory[vehicleid][listitem][ftwWeaponId], VehicleWeaponsInventory[vehicleid][listitem][ftwAmmo], WEAPON_GIVE_TYPE_NO_INVENTORY, 0);
						format(string, sizeof string, "paima ginklà %s nuo stovo.", GetInventoryItemName(VehicleWeaponsInventory[vehicleid][listitem][ftwWeaponId]));
						log_set_values("'%d','%e','%d','%e','Paeme ginkla is /weptrunk','%d','%d','Viduj'", PlayerInfo[playerid][pFaction], GetFactionName(PlayerInfo[playerid][pFaction]), LogPlayerId(playerid), LogPlayerName(playerid), VehicleWeaponsInventory[vehicleid][listitem][ftwWeaponId], VehicleWeaponsInventory[vehicleid][listitem][ftwAmmo]);
					}
					else
					{
						GivePlayerWeapon(playerid, VehicleWeaponsInventory[vehicleid][listitem][ftwWeaponId], VehicleWeaponsInventory[vehicleid][listitem][ftwAmmo], WEAPON_GIVE_TYPE_NO_INVENTORY, 0);
						format(string, sizeof string, "paima ginklà %s ið bagaþinës.", GetInventoryItemName(VehicleWeaponsInventory[vehicleid][listitem][ftwWeaponId]));
						log_set_values("'%d','%e','%d','%e','Paeme ginkla is /weptrunk','%d','%d','Lauke'", PlayerInfo[playerid][pFaction], GetFactionName(PlayerInfo[playerid][pFaction]), LogPlayerId(playerid), LogPlayerName(playerid), VehicleWeaponsInventory[vehicleid][listitem][ftwWeaponId], VehicleWeaponsInventory[vehicleid][listitem][ftwAmmo]);
					}
					VehicleWeaponsInventory[vehicleid][listitem][ftwWeaponId] = 0;
					VehicleWeaponsInventory[vehicleid][listitem][ftwAmmo] = 0;
					log_commit();
					rp_me(playerid, _, string);
					MsgInfo(playerid, "GINKLAI", "Norëdami padëti ðá ginklà atgal á bagaþinæ, naudokite /trunkweapon");
				}
			}
		}
		case DIALOG_MDC_INPUT:
		{
			return MDC_Call(Response, playerid, 1, response, MDC__Player_Data[playerid][pMdcInputId], listitem, inputtext);
		}
		case DIALOG_BANK_HISTORY:
		{
			ShowPlayerBank(playerid);
		}
		case DIALOG_PAY_FINE:
		{
			if(response)
			{
				ShowPlayerDialog(playerid, DIALOG_PAY_FINE_TYPE, DIALOG_STYLE_MSGBOX, "Baudos iðraðas", "{FFFFFF}Kaip norite susimokëti uþ baudà:", "Grynais", "Banku");
			}
			else
			{
				new
					officerid = Offer[playerid][1];
				if(IsPlayerConnected(officerid))
				{
					MsgInfo(officerid, "BAUDA", "Þaidëjas atsisakë priimti baudà.");
				}
				Offer[playerid][0] = 0,
				Offer[playerid][1] = INVALID_PLAYER_ID,
				Offer[playerid][2] = 0,
				Offer[playerid][3] = 0;
				MsgInfo(playerid, "BAUDA", "Atsisakëte mokëti uþ baudà.");
			}
		}
		case DIALOG_PAY_FINE_TYPE:
		{
			new
				amount = Offer[playerid][3],
				officerid = Offer[playerid][1],
				factionid;
			if(response)
			{
				GivePlayerMoney(playerid, -amount);
			}
			else
			{
				PlayerInfo[playerid][pBank] -= amount;
			}
			if(IsPlayerConnected(playerid))
			{
				factionid = GetFactionArrayIndexById(PlayerInfo[officerid][pFaction]);
				if(factionid != -1)
				{
					FactionInfo[factionid][fBudget] += floatround(amount*0.2);
				}
				SendFormat(officerid, 0x3CC911FF, "Þaidëjas susimokëjo uþ baudà.");
			}
			foreach(factionid : Faction)
			{
				if(FactionInfo[factionid][fType] == FACTION_TYPE_GOVERNMENT)
				{
					FactionInfo[factionid][fBudget] += floatround(amount*0.8);
				}
			}
			SendFormat(playerid, 0x3CC911FF, "Susimokëjote uþ baudà.");
		}
		case DIALOG_PAY_FOR_FUEL:
		{
			if(response)
			{
				GivePlayerMoney(playerid, -PlayerExtra[playerid][peFilling]);
			}
			else
			{
				PlayerInfo[playerid][pBank] -= PlayerExtra[playerid][peFilling];
				new string[186];
				mysql_format(chandler, string, sizeof string, "INSERT INTO `players_bank_history` (`PlayerId`,`String`,`Amount`) VALUES ('%d','sumokëjimas uþ degalus \"%e\"','%d')", PlayerInfo[playerid][pId], BusinessInfo[PlayerExtra[playerid][peFillingAt]][bName], PlayerExtra[playerid][peFilling]);
				mysql_fquery(chandler, string, "BankLogAdd");
			}
			PlayerExtra[playerid][peFilling] =
			PlayerExtra[playerid][peFillingAt] = 0;
			SendFormat(playerid, 0xBABABAFF, "Sumokëjote uþ degalus.");
		}
		case DIALOG_BUY_WEAPONS_MAIN:
		{
			if(response)
			{
				new businessid = tmpIter[playerid],
					weaponid = AvailableWeaponsShop[listitem][0],
					wepslot = FAC_GetWeaponSlot(weaponid);
				if(GetPlayerMoney(playerid) < AvailableWeaponsShop[listitem][2]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, AvailableWeaponsShop[listitem][2]);
				if(PlayerHasWeaponInSlot(playerid, wepslot)) return SendWarning(playerid, "Ginklà ðiame slote jau turite, praðome já pasidëti.");
				GivePlayerWeapon(playerid, weaponid, AvailableWeaponsShop[listitem][1], WEAPON_GIVE_TYPE_NORMAL, -1); // nauja ID duodam
				SendFormat(playerid, 0xD0ED88FF, "Nusipirkote ginklà {C8F25E}%s{D0ED88}", GetInventoryItemName(weaponid));
				BusinessInfo[businessid][bBudget] += AvailableWeaponsShop[listitem][2];
				GivePlayerMoney(playerid, -AvailableWeaponsShop[listitem][2]);
				log_init(true);
				log_set_table("logs_business");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Amount`,`ExtraId`,`ExtraString`");
				log_set_values("'%d','%e','Nusipirko ginkla','%d','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), AvailableWeaponsShop[listitem][2], BusinessInfo[businessid][bId], GetInventoryItemName(weaponid));
				log_commit();
			}
		}
		case DIALOG_BUY_CLOTHES_CONFIRM:
		{
			if(response)
			{
				// buy
				new selected = tmpSelected[playerid],
					slot,
					businessid = tmpIter[playerid];
				if((slot = GetFreeClothesSlot(playerid)) != -1)
				{
					if(GetPlayerMoney(playerid) < ClothesList[selected][clothesListPrice]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, ClothesList[selected][clothesListPrice]);
					ClothesInventory[playerid][slot] = ClothesList[selected][clothesListModel];
					BusinessInfo[businessid][bBudget] += ClothesList[selected][clothesListPrice];
					GivePlayerMoney(playerid, -ClothesList[selected][clothesListPrice]);
					MsgSuccess(playerid, "DRABUÞIAI", "Daiktas sëkmingai nupirktas");
					log_init(true);
					log_set_table("logs_clothes");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ClotheId`,`Amount`,`ExtraId`");
					log_set_values("'%d','%e','Nusipirko drabuzi','%d','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), ClothesList[selected][clothesListModel], ClothesList[selected][clothesListPrice], BusinessInfo[businessid][bId]);
					log_commit();
				}
				else SendWarning(playerid, "Neturite laisvos vietos inventoriuje.");
			}
			else OnDialogResponse(playerid, DIALOG_BUY_CLOTHES_MAIN, 1, tmpType_Salon[playerid], "");
		}
		case DIALOG_BUY_MAIN:
		{
			if(response)
			{
				new slot = GetPlayerFreeInventorySlot(playerid);
				if(slot != -1)
				{
					new businessid = tmpIter[playerid],
						real_itter;
					for(new i = 0; i < MAX_BUSINESS_WARES; i++)
					{
						if(BusinessWares[businessid][i][bWareId] == 0 || (BusinessWares[businessid][i][bWareAmount] <= 0 && BusinessInfo[businessid][bOwner] > 0)) { continue; }
						else
						{
							if(real_itter == listitem)
							{
								// sita perka
								new amount = 1,
									bw_id = BusinessWares[businessid][i][bWareId];
								if(bw_id == ITEM_PHONE && IsItemInPlayerInventory(playerid, ITEM_PHONE)) return SendWarning(playerid, "Telefonà jau turite.");
								if(GetPlayerMoney(playerid) < BusinessWares[businessid][i][bWarePrice]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, BusinessWares[businessid][i][bWarePrice]);
								for(new aw = 0; aw < MAX_AVAILABLE_WARES; aw++)
								{
									if(AvailableWares[aw][awItem] == bw_id)
									{
										amount = AvailableWares[aw][awAmount];
										break;
									}
								}
								GivePlayerInventoryItem(playerid, bw_id, amount, 0, slot);
								SendFormat(playerid, 0xD0ED88FF, "> Nusipirkote daiktà {C8F25E}%s{D0ED88}", GetInventoryItemName(bw_id));
								GivePlayerMoney(playerid, -BusinessWares[businessid][i][bWarePrice]);
								BusinessInfo[businessid][bBudget] += BusinessWares[businessid][i][bWarePrice];
								rp_me(playerid, _, "padeda daiktus ant prekystalio.");
								return 1;
							}
							real_itter++;
						}
					}
				}
				else return SendWarning(playerid, "Nëra pakankamai vietos inventoriuje.");
			}
		}
		case DIALOG_BUY_CLOTHES_MAIN:
		{
			if(response)
			{
				// pasirinko kategorija
				tmpType_Salon[playerid] = listitem;
				if(listitem < sizeof ClothesListNames)
				{
					new items[256],
						count;
					for(new i = 0; i < sizeof ClothesList; i++)
					{
						if(ClothesList[i][clothesListCategory] == listitem)
						{
							items[count] = ClothesList[i][clothesListModel];
							count++;
						}
					}
					ShowModelSelectionMenuEx(playerid, items, count, formatlt(ClothesListNames[listitem]), listitem+100);
				}
				else
				{
					ShowModelSelectionMenu(playerid, clskinslist, "Apranga");
				}
			}
		}
		case DIALOG_HM_DUBKEY_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// leist furniture
						new string[186];
						mysql_format(chandler, string, sizeof string, "UPDATE `houses_dubkeys` SET P_FurnitureControl = '1' WHERE PlayerId = '%d' AND HouseId = '%d' AND `Valid` = '1' AND Type = '0'", tmpArray[playerid][tmpSelected[playerid]], HouseInfo[tmpIter[playerid]][hId]);
						mysql_fquery(chandler, string, "HouseUpdated");
						new receiversql = tmpArray[playerid][tmpSelected[playerid]];
						new receiverid = INVALID_PLAYER_ID;
						if((receiverid = FindPlayerBySql(receiversql)) != INVALID_PLAYER_ID)
						{
							MsgInfo(receiverid, "NAMAS", "Namo savininkas %s suteikë teisæ naudoti /furniture.", GetPlayerNameEx(playerid, true, true));
						}
						MsgSuccess(playerid, "NAMAS", "Suteikëte teisæ naudoti furniture.");
						OnDialogResponse(playerid, DIALOG_HM_DUBKEYS_MAIN, 1, 0, "");
						log_init(true);
						log_set_table("logs_houses");
						log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','%d','Suteike furniture teise','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpIter[playerid]][hId], tmpArray[playerid][tmpSelected[playerid]]);
						log_commit();
					}
					case 1:
					{
						// neleist furniture
						new string[186];
						mysql_format(chandler, string, sizeof string, "UPDATE `houses_dubkeys` SET P_FurnitureControl = '0' WHERE PlayerId = '%d' AND HouseId = '%d' AND `Valid` = '1' AND Type = '0'", tmpArray[playerid][tmpSelected[playerid]], HouseInfo[tmpIter[playerid]][hId]);
						mysql_fquery(chandler, string, "HouseUpdated");
						new receiversql = tmpArray[playerid][tmpSelected[playerid]];
						new receiverid = INVALID_PLAYER_ID;
						if((receiverid = FindPlayerBySql(receiversql)) != INVALID_PLAYER_ID)
						{
							MsgInfo(receiverid, "NAMAS", "Namo savininkas %s atemë teisæ naudoti /furniture.", GetPlayerNameEx(playerid, true, true));
						}
						MsgSuccess(playerid, "NAMAS", "Atëmëte teisæ naudoti furniture.");
						OnDialogResponse(playerid, DIALOG_HM_DUBKEYS_MAIN, 1, 0, "");
						log_init(true);
						log_set_table("logs_houses");
						log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','%d','Ateme furniture teise','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpIter[playerid]][hId], tmpArray[playerid][tmpSelected[playerid]]);
						log_commit();
					}
					case 2:
					{
						new string[186],
							receiver = tmpArray[playerid][tmpSelected[playerid]], receiverid;
						mysql_format(chandler, string, sizeof string, "DELETE FROM `houses_dubkeys` WHERE PlayerId = '%d' AND HouseId = '%d' AND `Valid` = '1' AND Type = '0'", receiver, HouseInfo[tmpIter[playerid]][hId]);
						mysql_fquery(chandler, string, "");
						if((receiverid = FindPlayerBySql(receiver)) != INVALID_PLAYER_ID)
						{
							MsgInfo(receiverid, "NAMAS", "%s atemë raktà nuo namo.", GetPlayerNameEx(playerid, true, true));
						}
						MsgSuccess(playerid, "NAMAS", "Atemëte raktà.");
						OnDialogResponse(playerid, DIALOG_HM_DUBKEYS_MAIN, 1, 0, "");
						log_init(true);
						log_set_table("logs_houses");
						log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','%d','Istryne rakta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpIter[playerid]][hId], tmpArray[playerid][tmpSelected[playerid]]);
						log_commit();
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_HM_DUBKEYS_MAIN, 1, 0, "");
		}
		case DIALOG_HM_DUBKEYS_ALL:
		{
			if(response)
			{
				tmpSelected[playerid] = listitem;
				ShowPlayerDialog(playerid, DIALOG_HM_DUBKEY_EDIT_MAIN, DIALOG_STYLE_LIST, "Namo raktai", "Leisti naudoti /furniture\nNeleisti naudoti /furniture\n{C60000}Atimti raktà", "Tæsti", "Atimti");
			}
			else
			{
				OnDialogResponse(playerid, DIALOG_HM_MAIN, 1, 0, "");
			}
		}
		case DIALOG_HM_DUBKEYS_MAIN:
		{
			if(response)
			{
				if(listitem == 0)
				{
					new string[186];
					mysql_format(chandler, string, sizeof string, "SELECT `PlayerId`,`P_FurnitureControl`,`id`,`Type` FROM `houses_dubkeys` WHERE HouseId = '%d' AND `Valid` = '1' AND Type = '0'", HouseInfo[tmpIter[playerid]][hId]);
					mysql_tquery(chandler, string, "HouseDubkeysLoad", "d", playerid);
				}
				else if(listitem == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_HM_DUBKEY_ADD, DIALOG_STYLE_INPUT, "Namo raktai", "{FFFFFF}Áveskite prisijungusio þaidëjo vardà, kuriam norite duoti raktà.", "Tæsti", "Atðaukti");
				}
			}
			else pc_cmd_hmenu(playerid, "");
		}
		case DIALOG_HM_DUBKEY_ADD:
		{
			if(response)
			{
				new receiverid;
				if(sscanf(inputtext,"u",receiverid) || receiverid == playerid || !IsPlayerConnected(receiverid) || IsPlayerNPC(receiverid)) return OnDialogResponse(playerid, DIALOG_HM_DUBKEYS_MAIN, 1, 1, "") , MsgError(playerid, "NAMAS", "Þaidëjas negalimas.");
				if(HaveHouseKey(receiverid, tmpIter[playerid]))
				{
					SendWarning(playerid, "Þaidëjas jau turi raktà.");
					return OnDialogResponse(playerid, DIALOG_HM_DUBKEYS_MAIN, 1, 1, "");
				}
				else
				{
					if(IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0))
					{
						new string[186];
						mysql_format(chandler, string, sizeof string, "INSERT INTO `houses_dubkeys` (`PlayerId`,`Added`,`HouseId`,`Valid`,`Type`) VALUES ('%d','%d','%d','1','0')", PlayerInfo[receiverid][pId],PlayerInfo[playerid][pId],HouseInfo[tmpIter[playerid]][hId]);
						mysql_fquery(chandler, string, "DubkeyAdded");
						MsgSuccess(playerid, "NAMAS", "Suteikëte raktà þaidëjui %s.", GetPlayerNameEx(receiverid, true, true));
						MsgInfo(receiverid, "NAMAS", "%s davë jums raktus nuo namo.", GetPlayerNameEx(playerid, true, true));
						log_init(true);
						log_set_table("logs_houses");
						log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`ExtraId`,`ExtraString`");
						log_set_values("'%d','%e','%d','Dave rakta','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpIter[playerid]][hId], LogPlayerId(receiverid), LogPlayerName(receiverid));
						log_commit();
					}
					else InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
				}
			}
			else OnDialogResponse(playerid, DIALOG_HM_MAIN, 1, 0, "");
		}
		case DIALOG_HM_UPDATES_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// clothes
						if(HouseInfo[tmpIter[playerid]][hUpdateClothes] > 0) return MsgError(playerid, "NAMAS", "Ðá atnaujinimà jau esate ásirengæ."), pc_cmd_hmenu(playerid, "");
						if(GetPlayerMoney(playerid) < HOUSE_UPDATE_CLOTHES_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, HOUSE_UPDATE_CLOTHES_PRICE), pc_cmd_hmenu(playerid, "");
						GivePlayerMoney(playerid, -HOUSE_UPDATE_CLOTHES_PRICE);
						HouseInfo[tmpIter[playerid]][hUpdateClothes] = 1;
						SaveHouseIntEx(tmpIter[playerid], "UpdateClothes", 1);
						MsgSuccess(playerid, "NAMAS", "Sëkmingai árengëte atnaujinimà.");
						pc_cmd_hmenu(playerid, "");
						log_init(true);
						log_set_table("logs_houses");
						log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`Amount`");
						log_set_values("'%d','%e','%d','Irenge clothes atnaujinima','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpIter[playerid]][hId], HOUSE_UPDATE_CLOTHES_PRICE);
						log_commit();
					}
					case 1:
					{
						// seifas
						if(HouseInfo[tmpIter[playerid]][hUpdateSafe] > 0) return MsgError(playerid, "NAMAS", "Ðá atnaujinimà jau esate ásirengæ."), pc_cmd_hmenu(playerid, "");
						if(GetPlayerMoney(playerid) < HOUSE_UPDATE_SAFE_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, HOUSE_UPDATE_SAFE_PRICE), pc_cmd_hmenu(playerid, "");
						GivePlayerMoney(playerid, -HOUSE_UPDATE_SAFE_PRICE);
						HouseInfo[tmpIter[playerid]][hUpdateSafe] = 1;
						SaveHouseIntEx(tmpIter[playerid], "UpdateSafe", 1);
						MsgSuccess(playerid, "NAMAS", "Sëkmingai árengëte atnaujinimà.");
						pc_cmd_hmenu(playerid, "");
						log_init(true);
						log_set_table("logs_houses");
						log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`Amount`");
						log_set_values("'%d','%e','%d','Irenge seifo atnaujinima','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpIter[playerid]][hId], HOUSE_UPDATE_SAFE_PRICE);
						log_commit();
					}
					case 2:
					{
						// eat
						if(HouseInfo[tmpIter[playerid]][hUpdateEat] > 0) return MsgError(playerid, "NAMAS", "Ðá atnaujinimà jau esate ásirengæ."), pc_cmd_hmenu(playerid, "");
						if(GetPlayerMoney(playerid) < HOUSE_UPDATE_EAT_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, HOUSE_UPDATE_EAT_PRICE), pc_cmd_hmenu(playerid, "");
						GivePlayerMoney(playerid, -HOUSE_UPDATE_EAT_PRICE);
						HouseInfo[tmpIter[playerid]][hUpdateEat] = 1;
						SaveHouseIntEx(tmpIter[playerid], "UpdateEat", 1);
						MsgSuccess(playerid, "NAMAS", "Sëkmingai árengëte atnaujinimà.");
						pc_cmd_hmenu(playerid, "");
						log_init(true);
						log_set_table("logs_houses");
						log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`Amount`");
						log_set_values("'%d','%e','%d','Irenge eat atnaujinima','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpIter[playerid]][hId], HOUSE_UPDATE_EAT_PRICE);
						log_commit();

					}
				}
			}
			else pc_cmd_hmenu(playerid, "");
		}
		case DIALOG_HM_SAFE_MAIN:
		{
			if(response)
			{
				if(listitem == 0) return OnDialogResponse(playerid, DIALOG_HM_MAIN, 1, 2, "");
				else
				{
					switch(listitem)
					{
						case 1:
						{
							// paimti
							ShowPlayerDialog(playerid, DIALOG_HM_SAFE_WITHDRAW, DIALOG_STYLE_INPUT, "Namo seifas", "{BABABA}Áveskite sumà, kurià norite paimti ið seifo.", "Tæsti", "Atðaukti");
						}
						case 2:
						{
							// padeti
							ShowPlayerDialog(playerid, DIALOG_HM_SAFE_DEPOSIT, DIALOG_STYLE_INPUT, "Namo seifas", "{BABABA}Áveskite sumà, kurià norite padëti á seifà.", "Tæsti", "Atðaukti");
						}
					}
				}
			}
			else pc_cmd_hmenu(playerid, "");
		}
		case DIALOG_HM_SAFE_WITHDRAW:
		{
			// paimti
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount) || amount < 0) return OnDialogResponse(playerid, DIALOG_HM_SAFE_MAIN, 1, 1, "");
				if(amount > HouseInfo[tmpIter[playerid]][hSafe]) return SendError(playerid, "Tiek pinigø banko seife nëra."), OnDialogResponse(playerid, DIALOG_HM_SAFE_MAIN, 1, 1, "");
				HouseInfo[tmpIter[playerid]][hSafe] -= amount;
				GivePlayerMoney(playerid, amount);
				pc_cmd_hmenu(playerid, "");
				MsgSuccess(playerid, "NAMAS", "Paëmëte $%d ið seifo.", amount);
				SaveHouseIntEx(tmpIter[playerid], "Safe", HouseInfo[tmpIter[playerid]][hSafe]);
				log_init(true);
				log_set_table("logs_houses");
				log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`Amount`");
				log_set_values("'%d','%e','%d','Paeme is seifo','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpIter[playerid]][hId], amount);
				log_commit();
			}
			else pc_cmd_hmenu(playerid, "");
		}
		case DIALOG_HM_SAFE_DEPOSIT:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount) || amount < 0) return OnDialogResponse(playerid, DIALOG_HM_SAFE_MAIN, 1, 2, "");
				if(amount > GetPlayerMoney(playerid)) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, amount), OnDialogResponse(playerid, DIALOG_HM_SAFE_MAIN, 1, 2, "");
				GivePlayerMoney(playerid, -amount);
				HouseInfo[tmpIter[playerid]][hSafe] += amount;
				pc_cmd_hmenu(playerid, "");
				MsgSuccess(playerid, "NAMAS", "Padëjote $%d á seifà.", amount);
				SaveHouseIntEx(tmpIter[playerid], "Safe", HouseInfo[tmpIter[playerid]][hSafe]);
				log_init(true);
				log_set_table("logs_houses");
				log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`Amount`");
				log_set_values("'%d','%e','%d','Padejo i seifa','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpIter[playerid]][hId], amount);
				log_commit();
			}
			else pc_cmd_hmenu(playerid, "");
		}
		case DIALOG_BM_WORKERS_ALL:
		{
			if(response)
			{
				tmpSelected[playerid] = tmpArray[playerid][listitem];
				new businessid = tmpIter[playerid],
					string[256];
				format(string, sizeof string, "%s%seisti furniture valdymà\n%seisti biudþeto valdymà\n%seisti darbuotojø valdymà\n%seisti prekiø valdymà\nKeisti algà\n{C60000}Iðmesti",
					TOS(HaveBusinessKey(playerid, businessid, .check_only_owner = true), "{FFFFFF}", "{BABABA}"),
					TOS(HaveBusinessPrivilegeBySql(tmpSelected[playerid], businessid, "P_FurnitureControl"), "Nel", "L"),
					TOS(HaveBusinessPrivilegeBySql(tmpSelected[playerid], businessid, "P_BudgetControl"), "Nel", "L"),
					TOS(HaveBusinessPrivilegeBySql(tmpSelected[playerid], businessid, "P_WorkersControl"), "Nel", "L"),
					TOS(HaveBusinessPrivilegeBySql(tmpSelected[playerid], businessid, "P_WaresControl"), "Nel", "L"));
				ShowPlayerDialog(playerid, DIALOG_BM_WORKER_PRIVILEGE, DIALOG_STYLE_LIST, GetNameBySql(tmpSelected[playerid]), string, "Keisti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 1, "");
		}
		case DIALOG_BM_WORKER_PRIVILEGE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// ne/leisti furniture
						new string[186],
							current = HaveBusinessPrivilegeBySql(tmpSelected[playerid], tmpIter[playerid], "P_FurnitureControl");
						if(current > 0)
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `business_dubkeys` SET `P_FurnitureControl` = '0' WHERE PlayerId = '%d' AND BusinessId = '%d'", tmpSelected[playerid], BusinessInfo[tmpIter[playerid]][bId]);
							MsgSuccess(playerid, "VERSLAS", "Iðjungëte galimybæ darbuotojui valdyti baldus.");
						}
						else
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `business_dubkeys` SET `P_FurnitureControl` = '1' WHERE PlayerId = '%d' AND BusinessId = '%d'", tmpSelected[playerid], BusinessInfo[tmpIter[playerid]][bId]);
							MsgSuccess(playerid, "VERSLAS", "Ájungëte galimybæ darbuotojui valdyti baldus.");
						}
						mysql_fquery(chandler, string, "BusinessSaved");
						log_init(true);
						log_set_table("logs_business");
						log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','%d','%s furniture galimybe','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[tmpIter[playerid]], current ? ("Isjunge") : ("Ijunge"), tmpSelected[playerid]);
						log_commit();
						pc_cmd_bmenu(playerid, "");
					}
					case 1:
					{
						// ne/leisti pinigu tvarkyma
						new
							string[186],
							current = HaveBusinessPrivilegeBySql(tmpSelected[playerid], tmpIter[playerid], "P_BudgetControl");
						if(current > 0)
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `business_dubkeys` SET `P_BudgetControl` = '0' WHERE PlayerId = '%d' AND BusinessId = '%d'", tmpSelected[playerid], BusinessInfo[tmpIter[playerid]][bId]);
							MsgSuccess(playerid, "VERSLAS", "Iðjungëte galimybæ darbuotojui valdyti biudþetà.");
						}
						else
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `business_dubkeys` SET `P_BudgetControl` = '1' WHERE PlayerId = '%d' AND BusinessId = '%d'", tmpSelected[playerid], BusinessInfo[tmpIter[playerid]][bId]);
							MsgSuccess(playerid, "VERSLAS", "Ájungëte galimybæ darbuotojui valdyti biudþetà.");
						}
						mysql_fquery(chandler, string, "BusinessSaved");
						log_init(true);
						log_set_table("logs_business");
						log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','%d','%s biudzeto galimybe','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[tmpIter[playerid]], current ? ("Isjunge") : ("Ijunge"), tmpSelected[playerid]);
						log_commit();
						pc_cmd_bmenu(playerid, "");
					}
					case 2:
					{
						// ne/leisti darbuotoju valdyma
						new string[186],
							current = HaveBusinessPrivilegeBySql(tmpSelected[playerid], tmpIter[playerid], "P_WorkersControl");
						if(current > 0)
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `business_dubkeys` SET `P_WorkersControl` = '0' WHERE PlayerId = '%d' AND BusinessId = '%d'", tmpSelected[playerid], BusinessInfo[tmpIter[playerid]][bId]);
							MsgSuccess(playerid, "VERSLAS", "Iðjungëte galimybæ darbuotojui valdyti darbuotojus.");
						}
						else
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `business_dubkeys` SET `P_WorkersControl` = '1' WHERE PlayerId = '%d' AND BusinessId = '%d'", tmpSelected[playerid], BusinessInfo[tmpIter[playerid]][bId]);
							MsgSuccess(playerid, "VERSLAS", "Ájungëte galimybæ darbuotojui valdyti darbuotojus.");
						}
						mysql_fquery(chandler, string, "BusinessSaved");
						log_init(true);
						log_set_table("logs_business");
						log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','%d','%s darbuot. vald. galimybe','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[tmpIter[playerid]], current ? ("Isjunge") : ("Ijunge"), tmpSelected[playerid]);
						log_commit();
						pc_cmd_bmenu(playerid, "");
					}
					case 3:
					{
						// ne/leisti prekiu valdyma
						new string[186],
							current = HaveBusinessPrivilegeBySql(tmpSelected[playerid], tmpIter[playerid], "P_WaresControl");
						if(current > 0)
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `business_dubkeys` SET `P_WaresControl` = '0' WHERE PlayerId = '%d' AND BusinessId = '%d'", tmpSelected[playerid], BusinessInfo[tmpIter[playerid]][bId]);
							MsgSuccess(playerid, "VERSLAS", "Iðjungëte galimybæ darbuotojui valdyti prekes.");
						}
						else
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `business_dubkeys` SET `P_WaresControl` = '1' WHERE PlayerId = '%d' AND BusinessId = '%d'", tmpSelected[playerid], BusinessInfo[tmpIter[playerid]][bId]);
							MsgSuccess(playerid, "VERSLAS", "Ájungëte galimybæ darbuotojui valdyti prekes.");
						}
						mysql_fquery(chandler, string, "BusinessSaved");
						log_init(true);
						log_set_table("logs_business");
						log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','%d','%s prekiu vald. galimybe','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[tmpIter[playerid]], current ? ("Isjunge") : ("Ijunge"), tmpSelected[playerid]);
						log_commit();
						pc_cmd_bmenu(playerid, "");
					}
					case 4:
					{
						// keisti alga
						ShowPlayerDialog(playerid, DIALOG_BM_WORKER_EDIT_SALARY, DIALOG_STYLE_INPUT, "Darbuotojo valdymas", "{FFFFFF}Áveskite naujà darbuotojo algà.\nAlga sumokama kiekvienà payday ið biudþeto, jei yra pakankamai pinigø.", "Tæsti", "Atðaukti");
					}
					case 5:
					{
						// ismesti
						new string[186];
						mysql_format(chandler, string, sizeof string, "DELETE FROM `business_dubkeys` WHERE PlayerId = '%d' AND BusinessId = '%d'", tmpSelected[playerid], BusinessInfo[tmpIter[playerid]][bId]);
						mysql_fquery(chandler, string, "BusinessSaved");
						MsgSuccess(playerid, "VERSLAS", "Darbuotojas iðmestas.");
						log_init(true);
						log_set_table("logs_business");
						log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','%d','Ismete is verslo','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[tmpIter[playerid]], tmpSelected[playerid]);
						log_commit();
						pc_cmd_bmenu(playerid, "");
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 1, "");
		}
		case DIALOG_BM_WORKER_EDIT_SALARY:
		{
			new amount,
				string[186];
			if(sscanf(inputtext,"d",amount) || amount < 0) return OnDialogResponse(playerid, DIALOG_BM_WORKER_PRIVILEGE, 1, 4, "");
			mysql_format(chandler, string, sizeof string, "UPDATE `business_dubkeys` SET Salary = '%d' WHERE PlayerId = '%d' AND BusinessId = '%d'", amount, tmpSelected[playerid], BusinessInfo[tmpIter[playerid]][bId]);
			mysql_fquery(chandler, string, "BusinessSaved");
			MsgSuccess(playerid, "VERSLAS", "Darbuotojo alga pakeista á $%d", amount);
			pc_cmd_bmenu(playerid, "");
		}
		case DIALOG_BM_WORKERS_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// visi
						new string[86],
							businessid = tmpIter[playerid];
						mysql_format(chandler, string, sizeof string, "SELECT * FROM `business_dubkeys` WHERE businessid = '%d'", BusinessInfo[businessid][bId]);
						mysql_tquery(chandler, string, "BusinessWorkersLoad", "dd", playerid, businessid);
					}
					case 1:
					{
						// prideti
						ShowPlayerDialog(playerid, DIALOG_BM_WORKER_ADD, DIALOG_STYLE_INPUT, "Verslo darbuotojai", "{FFFFFF}Áveskite prisijungusio þaidëjo vardà.", "Tæsti", "Atðaukti");
					}
				}
			}
			else pc_cmd_bmenu(playerid, "");
		}
		case DIALOG_BM_WORKER_ADD:
		{
			if(response)
			{
				new receiver = INVALID_PLAYER_ID,
					businessid = tmpIter[playerid];
				if(sscanf(inputtext,"u",receiver) || IsPlayerNPC(receiver) || !IsPlayerConnected(receiver)) return OnDialogResponse(playerid, DIALOG_BM_WORKERS_MAIN, 1, 1, "");
				new string[186];
				if(HaveBusinessKey(receiver, businessid))
				{
					SendWarning(playerid, "Þaidëjas jau yra versle.");
					return OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 1, "");
				}
				mysql_format(chandler, string, sizeof string, "INSERT INTO `business_dubkeys` (`BusinessId`,`PlayerId`,`Added`,`Valid`) VALUES ('%d','%d','%d','1')", BusinessInfo[businessid][bId], PlayerInfo[receiver][pId], PlayerInfo[playerid][pId]);
				mysql_fquery(chandler, string, "BusinessSaved");
				SendFormat(receiver, 0xD4FF6CFF, "%s priëmë jus á verslà \"%s\"", GetPlayerNameEx(playerid), BusinessInfo[businessid][bName]);
				SendFormat(playerid, 0xD4FF6CFF, "Priëmëte %s á verslà.", GetPlayerNameEx(receiver));
				// add
			}
			else OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 1, "");
		}
		case DIALOG_BM_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new businessid = tmpIter[playerid];
						if(HaveBusinessKey(playerid, businessid, "P_WaresControl"))
						{
							// redaguoti prekes
							// rodom visas idetas prekes i prekyba, pabaigoje pridedame PRIDETI NAUJA.
							if(InArray(BusinessInfo[businessid][bType], BUSINESS_TYPE_FUEL, BUSINESS_TYPE_SHOP))
							{
								new	line[86],
									string[512] = "{BABABA}Nr.\t{BABABA}Prekë\t{BABABA}Kaina\n";
								for(new i = 0; i < MAX_BUSINESS_WARES; i++)
								{
									if(BusinessWares[businessid][i][bWareId] > 0)
									{
										format(line, sizeof line, "%d.\t%s\t$%d\n", i+1, GetInventoryItemName(BusinessWares[businessid][i][bWareId]), BusinessWares[businessid][i][bWarePrice]);
										strcat(string, line);
									}
									else
									{
										tmpTexture_MarkStart_CP[playerid] = i;
										format(string, sizeof string, "%s{BABABA}- Pridëti prekæ\n%s", string, TOS(IsBusinessWaresInOrder(businessid), "{C60000}- Atðaukti uþsakymà", "{BABABA}- Prekiø uþsakymas"));
										break;
									}
								}
								ShowPlayerDialog(playerid, DIALOG_BM_WARES_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "Verslo prekës", string, "Tæsti", "Atðaukti");
							}
							else return pc_cmd_bmenu(playerid, "") , SendWarning(playerid, "Jûsø verslo tipas nëra parduotuvë!");
						}
						else
						{
							pc_cmd_bmenu(playerid, "");
							return InfoBox(playerid, IB_NO_PRIVILEGE);
						}
					}
					case 1:
					{
						new businessid = tmpIter[playerid];
						if(HaveBusinessKey(playerid, businessid, "P_WorkersControl"))
						{
							ShowPlayerDialog(playerid, DIALOG_BM_WORKERS_MAIN, DIALOG_STYLE_LIST, "Verslo darbuotojai", "Perþiûrëti esamus\nPridëti darbuotojà", "Tæsti", "Atðaukti");
						}
						else
						{
							pc_cmd_bmenu(playerid, "");
							return InfoBox(playerid, IB_NO_PRIVILEGE);
						}
					}
					case 2:
					{
						new businessid = tmpIter[playerid];
						if(HaveBusinessKey(playerid, businessid, "P_BudgetControl"))
						{
							new string[126];
							format(string, sizeof string, "Verslo biudþete: $%d\n{BABABA} - Paimti\n{BABABA} - Padëti", BusinessInfo[businessid][bBudget]);
							ShowPlayerDialog(playerid, DIALOG_BM_BUDGET_MAIN, DIALOG_STYLE_LIST, "Verslo biudþetas", string, "Tæsti", "Atðaukti");
						}
						else
						{
							pc_cmd_bmenu(playerid, "");
							return InfoBox(playerid, IB_NO_PRIVILEGE);
						}
					}
					case 3:
					{
						// pardavimas
						new businessid = tmpIter[playerid];
						if(HaveBusinessKey(playerid, businessid, .check_only_owner = true))
						{
							if(BusinessInfo[businessid][bSale] > 0)
							{
								// nutraukti
								BusinessInfo[businessid][bSale] = 0;
								SaveBusinessIntEx(businessid, "Sale", 0);
								pc_cmd_bmenu(playerid, "");
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_BM_SELL_MAIN, DIALOG_STYLE_INPUT, "Verslo pardavimas", "{FFFFFF}Áveskite kainà, uþ kurià kiti þaidëjai galës nupirkti Jûsø verslà.", "Tæsti", "Atðaukti");
							}
						}
						else
						{
							pc_cmd_bmenu(playerid, "");
							return InfoBox(playerid, IB_NO_PRIVILEGE);
						}
					}
					case 4:
					{
						// iejimo kaina
						new businessid = tmpIter[playerid];
						if(HaveBusinessKey(playerid, businessid, .check_only_owner = true))
						{
							ShowPlayerDialog(playerid, DIALOG_BM_ENTER_PRICE_EDIT, DIALOG_STYLE_INPUT, "Verslo áëjimo kaina", "{FFFFFF}Áveskite áëjimo á verslà kainà, kurià þaidëjai sumokës áeidami\n(0$-50$)", "Keisti", "Atðaukti");
						}
						else
						{
							pc_cmd_bmenu(playerid, "");
							return InfoBox(playerid, IB_NO_PRIVILEGE);
						}
					}
					case 5:
					{
						// degalai
						new businessid = tmpIter[playerid];
						if(HaveBusinessKey(playerid, businessid, .check_only_owner = true))
						{
							if(BusinessInfo[businessid][bType] != BUSINESS_TYPE_FUEL)
							{
								return pc_cmd_bmenu(playerid, "") , SendWarning(playerid, "Jûsø verslo tipas nëra degalinë!");
							}
							else
							{
								new string[126];
								format(string, sizeof string, "Degalø uþsakymas (%d/%d)\nDegalø kaina", BusinessInfo[businessid][bFuel], GetGVarInt("BusinessFuelCapacity"));
								ShowPlayerDialog(playerid, DIALOG_BM_FUEL_MAIN, DIALOG_STYLE_LIST, "Degalai", string, "Tæsti", "Atðaukti");
							}
						}
						else 
						{
							pc_cmd_bmenu(playerid, "");
							return InfoBox(playerid, IB_NO_PRIVILEGE);
						}
					}
				}
			}
		}
		case DIALOG_BM_ENTER_PRICE_EDIT:
		{
			if(response)
			{
				new price,
					businessid = tmpIter[playerid];
				if(sscanf(inputtext,"d",price) || !(0 <= price <= 500)) return OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 4, "");
				BusinessInfo[businessid][bEnterPrice] = price;
				Business_FixLabels(businessid, GetGVarInt("EnabledBusinessLabels"));
				SaveBusinessIntEx(businessid, "EnterPrice", price);
				MsgSuccess(playerid, "VERSLAS", "Sëkmingai pakeitëte áëjimo kainà á $%d", price);
				pc_cmd_bmenu(playerid, "");
			}
			else pc_cmd_bmenu(playerid, "");
		}
		case DIALOG_BM_SELL_MAIN:
		{
			if(response)
			{
				new price,
					businessid = tmpIter[playerid];
				if(sscanf(inputtext,"d",price) || price < 0) OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 3, "");
				BusinessInfo[businessid][bSale] = price;
				Business_FixLabels(businessid, GetGVarInt("EnabledBusinessLabels"));
				SaveBusinessIntEx(businessid, "Sale", price);
				MsgSuccess(playerid, "VERSLAS", "Sëkmingai ádëjote verslà á pardavimà uþ $%d", price);
				pc_cmd_bmenu(playerid, "");
			}
			else pc_cmd_bmenu(playerid, "");
		}
		case DIALOG_BM_FUEL_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// uzsakymas
						new businessid = tmpIter[playerid];
						if(BusinessInfo[businessid][bFuel] >= GetGVarInt("BusinessFuelCapacity"))
						{
							SendWarning(playerid, "Degalø netrûksta.");
							return pc_cmd_bmenu(playerid, "");
						}
						else
						{
							if(GetBusinessFuelOrder(businessid) > 0)
							{
								SendError(playerid, "Jûs jau esatæ padaræs uþsakymà.");
								return pc_cmd_bmenu(playerid, "");
							}
							else
							{
								new string[126],
									price = floatround(((GetGVarInt("BusinessFuelCapacity") - BusinessInfo[businessid][bFuel])*GetGVarFloat("BusinessOrderFuelPrice")))+3000;
								if(BusinessInfo[businessid][bBudget] < price)
								{
									SendWarning(playerid, "Biudþete tiek pinigø nëra ($%d).", price);
									return pc_cmd_bmenu(playerid, "");
								}
								else
								{
									format(string, sizeof string, "{FFFFFF}Uþsakomas degalø kiekis: %dltr\n{FFFFFF}Kaina: $%d", GetGVarInt("BusinessFuelCapacity") - BusinessInfo[businessid][bFuel], price);
									ShowPlayerDialog(playerid, DIALOG_BM_FUEL_ORDER_CONFIRM, DIALOG_STYLE_MSGBOX, "Degalø uþsakymas", string, "Tæsti", "Atðaukti");
								}
							}
						}
					}
					case 1:
					{
						// kaina
						ShowPlayerDialog(playerid, DIALOG_BM_CHANGE_FUEL_PRICE, DIALOG_STYLE_INPUT, "Verslo degalø kaina", "{FFFFFF}Áveskite degalø kainà Jûsø degalinëje,\nkuri bus taikoma þaidëjams.", "Tæsti", "Atðaukti");
					}
				}
			}
			else pc_cmd_bmenu(playerid, "");
		}
		case DIALOG_BM_FUEL_ORDER_CONFIRM:
		{
			if(response)
			{
				new string[126],
					businessid = tmpIter[playerid],
					price = floatround(((GetGVarInt("BusinessFuelCapacity") - BusinessInfo[businessid][bFuel])*GetGVarFloat("BusinessOrderFuelPrice")))+3000;
				if(BusinessInfo[businessid][bBudget] < price)
				{
					SendWarning(playerid, "Biudþete tiek pinigø nëra.");
					return pc_cmd_bmenu(playerid, "");
				}
				else
				{
					new hours = randomEx(22, 24);
					mysql_format(chandler, string, sizeof string, "INSERT INTO `business_orders_fuel` (`BusinessId`,`Price`,`HoursLeft`,`Date`,`Added`) VALUES ('%d','%d','%d',now(),'%d')", BusinessInfo[businessid][bId], price, hours, PlayerInfo[playerid][pId]);
					mysql_fquery(chandler, string, "BusinessSaved");
					MsgSuccess(playerid, "VERSLAS", "Uþsakymas iðsiøstas, atveþimas uþtruks apie %d valandas.", hours);
					pc_cmd_bmenu(playerid, "");
				}
			}
			else pc_cmd_bmenu(playerid, "");
		}
		case DIALOG_BM_CHANGE_FUEL_PRICE:
		{
			if(response)
			{
				new price;
				if(sscanf(inputtext,"d",price)) return OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 3, "");
				if(price < 1 || price > 4)
				{
					OnDialogResponse(playerid, DIALOG_BM_FUEL_MAIN, 1, 2, "");
					return SendWarning(playerid, "Kaina turi bûti nuo 1$ iki 4$");
				}
				else
				{
					new businessid = tmpIter[playerid];
					BusinessInfo[businessid][bFuelPrice] = price;
					SaveBusinessIntEx(businessid, "FuelPrice", price);
					MsgSuccess(playerid, "VERSLAS", "Degalø kaina pakeista á $%d", price);
					pc_cmd_bmenu(playerid, "");
				}
			}
			else pc_cmd_bmenu(playerid, "");
		}
		case DIALOG_BM_BUDGET_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 2, "");
					}
					case 1:
					{
						// paimti
						ShowPlayerDialog(playerid, DIALOG_BM_BUDGET_WITHDRAW, DIALOG_STYLE_INPUT, "Verslo biudþetas", "{FFFFFF}Áveskite pinigø sumà, kurià norite paimti ið biudþeto.", "Paimti", "Atðaukti");
					}
					case 2:
					{
						// padeti
						ShowPlayerDialog(playerid, DIALOG_BM_BUDGET_DEPOSIT, DIALOG_STYLE_INPUT, "Verslo biudþetas", "{FFFFFF}Áveskite pinigø sumà, kurià norite padëti á biudþetà.", "Padëti", "Atðaukti");
					}
				}
			}
			else pc_cmd_bmenu(playerid, "");
		}
		case DIALOG_BM_BUDGET_WITHDRAW:
		{
			if(response)
			{
				// nuimti
				new amount,
					businessid = tmpIter[playerid];
				if(sscanf(inputtext,"d",amount) || amount < 1) return OnDialogResponse(playerid, DIALOG_BM_BUDGET_MAIN, 1, 1, "");
				if(BusinessInfo[businessid][bBudget] < amount)
				{
					SendWarning(playerid, "Biudþete tiek pinigø nëra.");
					return pc_cmd_bmenu(playerid, "");
				}
				GivePlayerMoney(playerid, amount);
				BusinessInfo[businessid][bBudget] -= amount;
				SaveBusinessIntEx(businessid, "Budget", BusinessInfo[businessid][bBudget]);
				SaveAccountIntEx(playerid, "Money", GetPlayerMoney(playerid));
				log_init(true);
				log_set_table("logs_business");
				log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`,`Amount`");
				log_set_values("'%d','%e','%d','Paeme is seifo','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[businessid][bId], amount);
				log_commit();
				pc_cmd_bmenu(playerid, "");
			}
			else OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 2, "");
		}
		case DIALOG_BM_BUDGET_DEPOSIT:
		{
			if(response)
			{
				// padeti
				new amount,
					businessid = tmpIter[playerid];
				if(sscanf(inputtext,"d",amount) || amount < 1) return OnDialogResponse(playerid, DIALOG_BM_BUDGET_MAIN, 1, 1, "");
				if(GetPlayerMoney(playerid) < amount)
				{
					InfoBox(playerid, IB_NOT_ENOUGH_MONEY, amount);
					return pc_cmd_bmenu(playerid, "");
				}
				GivePlayerMoney(playerid, -amount);
				BusinessInfo[businessid][bBudget] += amount;
				SaveBusinessIntEx(businessid, "Budget", BusinessInfo[businessid][bBudget]);
				SaveAccountIntEx(playerid, "Money", GetPlayerMoney(playerid));
				log_init(true);
				log_set_table("logs_business");
				log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`,`Amount`");
				log_set_values("'%d','%e','%d','Padejo i seifa','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[businessid][bId], amount);
				log_commit();
				pc_cmd_bmenu(playerid, "");
			}
			else OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 2, "");
		}
		case DIALOG_BM_WARES_MAIN:
		{
			if(response)
			{
				new	businessid = tmpIter[playerid];
				if(HaveBusinessKey(playerid, businessid, "P_WaresControl"))
				{
					if((BusinessWares[businessid][listitem][bWareId] > 0 && listitem < tmpTexture_MarkStart_CP[playerid]))
					{
						// editina kazkuria pasirinkta
						tmpSelected[playerid] = listitem;
						ShowPlayerDialog(playerid, DIALOG_BM_WARE_EDIT, DIALOG_STYLE_LIST, "Verslo prekës", "Keisti kainà\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
					}
					else if(listitem == tmpTexture_MarkStart_CP[playerid])
					{
						new real,
							string[512],
							line[86];
						for(new aw = 0; aw < MAX_AVAILABLE_WARES; aw++)
						{
							if(!IsWareInBusinessUsage(businessid, AvailableWares[aw][awItem]))
							{
								tmpArray[playerid][real] = aw;
								format(line, sizeof line, "%s\n", GetInventoryItemName(AvailableWares[aw][awItem]));
								strcat(string, line);
								real++;
							}
						}
						if(!strlen(string))
						{
							MsgWarning(playerid, "VERSLO PREKËS", "Visos galimos prekës jau naudojamos.");
							return OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 0, "");
						}
						ShowPlayerDialog(playerid, DIALOG_BM_WARES_ALL, DIALOG_STYLE_LIST, "Verslo prekës", string, "Tæsti", "Atðaukti");
					}
					else if(listitem >= tmpTexture_MarkStart_CP[playerid]+1)
					{
						// uzsakymas
						if((BusinessInfo[businessid][bWaresX] == 0.0 && BusinessInfo[businessid][bWaresY] == 0.0 && BusinessInfo[businessid][bWaresZ] == 0.0) || (BusinessInfo[businessid][bCratesX] == 0.0 && BusinessInfo[businessid][bCratesY] == 0.0 && BusinessInfo[businessid][bCratesZ] == 0.0))
						{
							MsgError(playerid, "VERSLAS", "Administratorius nëra nustatæs prekiø pristatymo ir iðkrovimo vietø.");
							return pc_cmd_bmenu(playerid, "");
						}
						new string[512],
							status;
						mysql_format(chandler, string, sizeof string, "SELECT OrderDate,OrderedBy,Status FROM `business_orders` WHERE Status >= '1' AND BusinessId = '%d'", BusinessInfo[businessid][bId]);
						new Cache:result = mysql_query(chandler, string, true);
						cache_set_active(result);
						if(cache_num_rows())
						{
							// atsaukimas
							cache_get_value_name_int(0, "Status", status);
							if(status != 1)
							{
								// negalim atsaukt, jau vezamas
								MsgWarning(playerid, "UÞSAKYMAS", "Jûsø uþsakymas jau vykdomas, atðaukti jo negalite.");
								MsgInfo(playerid, "STATUSAS", "Prekës %s", (status == 2 ? ("kraunamos") : (status == 3 ? ("atveþamos") : ("iðkraunamos"))));
							}
							else
							{
								new orderedby[24],
									date[21];
								cache_get_value_name(0, "OrderDate", date);
								cache_get_value_name_int(0, "OrderedBy", string[0]);
								format(orderedby, 24, GetNameBySql(string[0]));
								MsgSuccess(playerid, "VERSLO PREKËS", "Uþsakymà, kurá iðsiuntë %s(%0.20s) sëkmingai atðaukëte.", orderedby, date);
								cache_delete(result);
								mysql_format(chandler, string, sizeof string, "DELETE FROM `business_orders` WHERE Status >= '1' AND BusinessId = '%d'", BusinessInfo[businessid][bId]);
								mysql_fquery(chandler, string, "BusinessOrderCancel");
								OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 0, "");
							}
						}
						else
						{
							cache_delete(result);
							new	price,
								shortage_item,
								shortage_all;
							for(new i = 0; i < MAX_BUSINESS_WARES; i++)
							{
								if(BusinessWares[businessid][i][bWareId] > 0)
								{
									shortage_item = 100 - BusinessWares[businessid][i][bWareAmount]; // kiek truksta sito itemo iki 100
									shortage_all += shortage_item;
									price += shortage_item*(GetAvailableWareMinPrice(BusinessWares[businessid][i][bWareId])/10);
								}
							}
							if(shortage_all <= 0)
							{
								pc_cmd_bmenu(playerid, "");
								return SendWarning(playerid, "Sandëlis pilnas prekiø.");
							}
							format(string, sizeof string, "{3782DE}Prekiø uþsakymo langas\n{8ED316}Trûkstamø prekiø kiekis: %dvnt.\nTrûkstamø prekiø kaina: $%d\n{DFDFDF}Ar norite tæsti uþsakymà? Kitame lange turësite pasirinkti uþsakymo tipà.", shortage_all, price);
							ShowPlayerDialog(playerid, DIALOG_BM_WARES_ORDER, DIALOG_STYLE_MSGBOX, "Verslo prekës", string, "Tæsti", "Atðaukti");
						}
					}
				}
				else
				{
					pc_cmd_bmenu(playerid, "");
					return InfoBox(playerid, IB_NO_PRIVILEGE);
				}
			}
			else pc_cmd_bmenu(playerid, "");
		}
		case DIALOG_BM_WARES_ORDER:
		{
			if(response)
			{
				new string[256],
					price,
					businessid = tmpIter[playerid];
				for(new i = 0; i < MAX_BUSINESS_WARES; i++)
				{
					if(BusinessWares[businessid][i][bWareId] > 0)
					{
						price += (100 - BusinessWares[businessid][i][bWareAmount])*(GetAvailableWareMinPrice(BusinessWares[businessid][i][bWareId])/10);
					}
				}
				format(string, sizeof string, "{BABABA}Tipas\t{BABABA}Galutinë kaina\nUþsakymas kroviniø iðveþiotojams\t$%d\nUþsakymas automatizuotiems tiekëjams ((NPC))\t$%d", floatround(price*1.1), floatround(price*1.3));
				ShowPlayerDialog(playerid, DIALOG_BM_WARES_ORDER_TYPE, DIALOG_STYLE_TABLIST_HEADERS, "Verslo prekës", string, "Tæsti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 0, "");
		}
		case DIALOG_BM_WARES_ORDER_TYPE:
		{
			if(response)
			{
				new string[256],
					price,
					businessid = tmpIter[playerid];
				for(new i = 0; i < MAX_BUSINESS_WARES; i++)
				{
					if(BusinessWares[businessid][i][bWareId] > 0)
					{
						price += (100 - BusinessWares[businessid][i][bWareAmount])*(GetAvailableWareMinPrice(BusinessWares[businessid][i][bWareId])/10);
					}
				}
				if(BusinessInfo[businessid][bBudget] < floatround(price*(listitem == 0 ? 1.1 : 1.3)))
				{
					SendWarning(playerid, "Nëra pakankamai pinigø verslo biudþete.");
					return pc_cmd_bmenu(playerid, "");
				}
				BusinessInfo[businessid][bBudget] -= floatround(price*(listitem == 0 ? 1.1 : 1.3));
				mysql_format(chandler, string, sizeof string, "INSERT INTO `business_orders` (`BusinessId`,`Type`,`Price`,`Status`,`OrderedBy`) VALUES ('%d','%d','%d','1','%d')", BusinessInfo[businessid][bId], listitem+1, price, PlayerInfo[playerid][pId]);
				mysql_fquery(chandler, string, "BusinessOrderDone");
				MsgSuccess(playerid, "VERSLO PREKËS", "Uþsakymas sëkmingai iðsiøstas.");
				OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 0, "");
			}
			else OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 0, "");
		}
		case DIALOG_BM_WARES_ALL:
		{
			if(response)
			{
				new selected = tmpArray[playerid][listitem],
					businessid = tmpIter[playerid],
					slot = GetFreeWareSlotInBusiness(businessid);
				if(!IsBusinessWaresInOrder(businessid))
				{
					if(slot != -1)
					{
						BusinessWares[businessid][slot][bWareId] = AvailableWares[selected][awItem],
						BusinessWares[businessid][slot][bWarePrice] = AvailableWares[selected][awMinPrice];
						BusinessWares[businessid][slot][bWareAmount] = 0;
						SaveBusinessWares(businessid);
						OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 0, "");
						log_init(true);
						log_set_table("logs_business");
						log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','%d','Pridejo preke i prekyba','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[businessid][bId], AvailableWares[selected][awItem]);
						log_commit();
					}
					else
					{
						pc_cmd_bmenu(playerid, "");
					}
				}
				else
				{
					OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 0, "");
					return MsgError(playerid, "VERSLO PREKËS", "Jûs esate uþsakæs prekiø, todël jø redaguoti negalite.");
				}
			}
			else pc_cmd_bmenu(playerid, "");
		}
		case DIALOG_BM_WARE_PRICE:
		{
			// prekes kainos keitimas versle
			if(response)
			{
				new price;
				if(sscanf(inputtext,"d",price)) return OnDialogResponse(playerid, DIALOG_BM_WARE_EDIT, 1, 0, "");
				// tikrinam ar prekes kaina gali buti rinkoje tokia, kokia ivede
				new businessid = tmpIter[playerid],
					selected = tmpSelected[playerid];
				new wareid = BusinessWares[businessid][selected][bWareId],
					min_price, max_price;
				for(new i = 0; i < MAX_AVAILABLE_WARES; i++)
				{
					// ciklas, praeinantis pro adminu sudaryta galimu prekiu sarasa
					// kad nenustatytu kainu per zemu prekei arba per aukstu, tikrinam min-max adminu nustatyta
					if(AvailableWares[i][awItem] == wareid)
					{
						min_price = AvailableWares[i][awMinPrice],
						max_price = AvailableWares[i][awMaxPrice];
						break;
					}
				}
				if(price > max_price || price < min_price)
				{
					// kaina negali buti tokia zema arba tokia auksta
					MsgError(playerid, "VERSLO PREKËS", "Ðios prekës kaina gali bûti tarp $%d-$%d", min_price, max_price);
					return OnDialogResponse(playerid, DIALOG_BM_WARES_MAIN, 1, selected, "");
				}
				BusinessWares[businessid][selected][bWarePrice] = price;
				SaveBusinessWares(businessid);
				MsgSuccess(playerid, "VERSLO PREKËS", "Kaina sëkmingai pakeista.");
				OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 0, "");
				log_init(true);
				log_set_table("logs_business");
				log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`,`ExtraId`,`Amount`");
				log_set_values("'%d','%e','%d','Pakeite prekes kaina','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[businessid][bId], BusinessWares[businessid][selected][bWareId], price);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 0, "");
		}
		case DIALOG_BM_WARE_EDIT:
		{
			if(response)
			{
				new selected = tmpSelected[playerid],
					businessid = tmpIter[playerid];
				if(BusinessWares[businessid][selected][bWareId] > 0)
				{
					switch(listitem)
					{
						case 0:
						{
							// keisti kaina
							ShowPlayerDialog(playerid, DIALOG_BM_WARE_PRICE, DIALOG_STYLE_INPUT, "Verslo prekës", "{FFFFFF}Áveskite naujà prekës kainà.", "Tæsti", "Atðaukti");
						}
						case 1:
						{
							if(!IsBusinessWaresInOrder(businessid))
							{
								// pasalinti preke
								MsgSuccess(playerid, "VERSLO PREKËS", "Sëkmingai iðëmëte %s ið pardavimo.", GetInventoryItemName(BusinessWares[businessid][selected][bWareId]));
								log_init(true);
								log_set_table("logs_business");
								log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`BusinessId`,`ExtraId`");
								log_set_values("'%d','%e','Iseme preke is pardavimo','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[businessid][bId], BusinessWares[businessid][selected][bWareId]);
								log_commit();

								BusinessWares[businessid][selected][bWareId] =
								BusinessWares[businessid][selected][bWareAmount] =
								BusinessWares[businessid][selected][bWarePrice] = 0;

								#define SortEnumArray(%0,%1,%2,%3,%4,%5,%6); for(new i = %1; i < %2; i++) { if(%0[i]%3 == %4) { for(new x = i+1; x < %2; x++) { if(%0[x]%3 != %4) { new __reset[%5]; %0[i] = %0[x]; %0[x] = __reset; if(%6) { %0[x]%3 = %4; } break; } } } }
								SortEnumArray(BusinessWares[businessid], 0, MAX_BUSINESS_WARES, [bWareId], 0, E_BUSINESS_WARES_DATA, FALSE);

								SaveBusinessWares(businessid);
								OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 0, "");
							}
							else
							{
								OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 0, "");
								return MsgError(playerid, "VERSLO PREKËS", "Jûs esate uþsakæs prekiø, todël jø redaguoti negalite.");
							}
						}
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_BM_MAIN, 1, 0, "");
		}
		case DIALOG_HM_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// raktai
						ShowPlayerDialog(playerid, DIALOG_HM_DUBKEYS_MAIN, DIALOG_STYLE_LIST, "Namo raktai", "Valdyti duotus raktus\nDuoti raktà", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// nuoma
						if(HouseInfo[tmpIter[playerid]][hSale] > 0) return SendWarning(playerid, "Pirmiausia iðjunkite namo pardavinëjimà.");
						new string[256];
						format(string, sizeof string, "Valdyti nuomininkus\nNustatyti nuomos kainà\nNustatyti nuomininkø limità\n%s galimybæ nuomotis", HouseInfo[tmpIter[playerid]][hRent] > 0 ? ("Iðjungti") : ("Ájungti"));
						ShowPlayerDialog(playerid, DIALOG_HM_RENT_MAIN, DIALOG_STYLE_LIST, "Namo nuoma", string, "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// atnaujinimai
						ShowPlayerDialog(playerid, DIALOG_HM_UPDATES_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "Namo atnaujinimai", "{BABABA}Atnaujinimas\t{BABABA}Kaina\nDrabuþiø spinta\t"#HOUSE_UPDATE_CLOTHES_PRICE"$\nSeifas (kaupia pinigus uþ nuomà)\t"#HOUSE_UPDATE_SAFE_PRICE"$\nMaisto gaminimo áranga\t"#HOUSE_UPDATE_EAT_PRICE"$", "Tæsti", "Atðaukti");
					}
					case 3:
					{
						// seifas
						new string[168];
						if(HouseInfo[tmpIter[playerid]][hUpdateSafe] <= 0) return SendWarning(playerid, "Neturite tinkamos árangos.");
						else
						{
							format(string, sizeof string, "Namo seife: $%d\nPaimti\nPadëti", HouseInfo[tmpIter[playerid]][hSafe]);
							ShowPlayerDialog(playerid, DIALOG_HM_SAFE_MAIN, DIALOG_STYLE_LIST, "Namo seifas", string, "Tæsti", "Atðaukti");
						}
					}
					case 4:
					{
						// parduoti
						if(HouseInfo[tmpIter[playerid]][hSale] > 0)
						{
							HouseInfo[tmpIter[playerid]][hSale] = 0;
							House_FixLabels(tmpIter[playerid], GetGVarInt("EnabledHouseLabels"));
							SaveHouseIntEx(tmpIter[playerid], "Sale", 0);
							log_init(true);
							log_set_table("logs_houses");
							log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`");
							log_set_values("'%d','%e','%d','Iseme is pardavimo'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpIter[playerid]][hId]);
							log_commit();
						}
						else
						{
							if(HouseInfo[tmpIter[playerid]][hRent] > 0) return SendWarning(playerid, "Pirmiausia iðjunkite galimybæ nuomotis.");
							ShowPlayerDialog(playerid, DIALOG_HM_SELL_MAIN, DIALOG_STYLE_INPUT, "Namo pardavimas", "{FFFFFF}Áveskite kainà, uþ kurià kiti þaidëjai galës nupirkti Jûsø namà.", "Tæsti", "Atðaukti");
						}
					}
				}
			}
		}
		case DIALOG_GM_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// parduoti
						if(GarageInfo[tmpIter[playerid]][gSale] > 0)
						{
							GarageInfo[tmpIter[playerid]][gSale] = 0;
							FixGarageLabels(tmpIter[playerid]);
							SaveGarageIntEx(tmpIter[playerid], "Sale", 0);
							log_init(true);
							log_set_table("logs_garages");
							log_set_keys("`PlayerId`,`PlayerName`,`GarageId`,`ActionText`");
							log_set_values("'%d','%e','%d','Iseme is pardavimo'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[tmpIter[playerid]][gId]);
							log_commit();
						}
						else
						{
							ShowPlayerDialog(playerid, DIALOG_GM_SELL_MAIN, DIALOG_STYLE_INPUT, "Garaþo pardavimas", "{FFFFFF}Áveskite kainà, uþ kurià kiti þaidëjai galës nupirkti Jûsø garaþà.", "Tæsti", "Atðaukti");
						}
					}
				}
			}
		}
		case DIALOG_GM_SELL_MAIN:
		{
			if(response)
			{
				new price,
					garageid = tmpIter[playerid];
				if(sscanf(inputtext,"d",price) || price < 0) OnDialogResponse(playerid, DIALOG_GM_MAIN, 1, 0, "");
				GarageInfo[garageid][gSale] = price;
				FixGarageLabels(garageid);
				SaveGarageIntEx(garageid, "Sale", price);
				MsgSuccess(playerid, "GARAÞAS", "Sëkmingai ádëjote garaþà á pardavimà uþ $%d", price);
				pc_cmd_gmenu(playerid, "");
				log_init(true);
				log_set_table("logs_garages");
				log_set_keys("`PlayerId`,`PlayerName`,`GarageId`,`ActionText`,`Amount`");
				log_set_values("'%d','%e','%d','Idejo i pardavima','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[tmpIter[playerid]][gId], price);
				log_commit();
			}
			else pc_cmd_hmenu(playerid, "");
		}
		case DIALOG_HM_SELL_MAIN:
		{
			if(response)
			{
				new price,
					houseid = tmpIter[playerid];
				if(sscanf(inputtext,"d",price) || price < 0) OnDialogResponse(playerid, DIALOG_HM_MAIN, 1, 4, "");
				HouseInfo[houseid][hSale] = price;
				House_FixLabels(houseid, GetGVarInt("EnabledHouseLabels"));
				SaveHouseIntEx(houseid, "Sale", price);
				MsgSuccess(playerid, "NAMAS", "Sëkmingai ádëjote namà á pardavimà uþ $%d", price);
				pc_cmd_hmenu(playerid, "");
				log_init(true);
				log_set_table("logs_houses");
				log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`Amount`");
				log_set_values("'%d','%e','%d','Idejo i pardavima','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpIter[playerid]][hId], price);
				log_commit();
			}
			else pc_cmd_hmenu(playerid, "");
		}
		case DIALOG_HM_RENT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// nuomininkai
						new string[325],
							houseid = tmpIter[playerid];
						//mysql_format(chandler, string, sizeof string, "mysql_format(chandler, string, sizeof string, "SELECT data.id,EnterX,EnterY,Price FROM houses_data data INNER JOIN houses_dubkeys dubs ON dubs.PlayerId = '%d' AND dubs.HouseId = data.id", PlayerInfo[receiver][pId]);")
						mysql_format(chandler, string, sizeof string, "SELECT players_data.id, players_data.Name, houses_dubkeys.Date, houses_dubkeys.P_FurnitureControl FROM players_data INNER JOIN houses_dubkeys ON houses_dubkeys.PlayerId = players_data.id AND houses_dubkeys.Valid = '1' AND houses_dubkeys.Type = '1' AND houses_dubkeys.HouseId = '%d' ORDER BY houses_dubkeys.Date ASC", HouseInfo[houseid][hId]);//bbz
						printf("%s", string);
						mysql_tquery(chandler, string, "RoomersLoad", "d", playerid);
					}
					case 1:
					{
						// nuomos kaina
						ShowPlayerDialog(playerid, DIALOG_HM_RENT_EDIT_PRICE, DIALOG_STYLE_INPUT, "Namo nuoma", "{FFFFFF}Áveskite namo nuomos kainà.", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// limitas
						ShowPlayerDialog(playerid, DIALOG_HM_RENT_EDIT_LIMIT, DIALOG_STYLE_INPUT, "Namo nuoma", "{FFFFFF}Áveskite maksimalø nuomininkø kieká (1-20)\n{BABABA}Jei naujai ávestas limitas bus didesnis uþ esamà nuomininkø skaièiø, jie bus iðmesti.", "Tæsti", "Atðaukti");
					}
					case 3:
					{
						// isjungti/ijungti
						new houseid = tmpIter[playerid];
						HouseInfo[houseid][hRent] = !HouseInfo[houseid][hRent];
						if(HouseInfo[houseid][hRent] > 0)
						{
							// ijungiam
							MsgSuccess(playerid, "NAMO NUOMA", "Namo nuoma ájungta.");
						}
						else
						{
							// isjungem
							MsgSuccess(playerid, "NAMO NUOMA", "Namo nuoma iðjungta.");
						}
						House_FixLabels(houseid, GetGVarInt("EnabledHouseLabels"));
						SaveHouseIntEx(houseid, "Rent", HouseInfo[houseid][hRent]);
						OnDialogResponse(playerid, DIALOG_HM_MAIN, 1, 1, "");
					}
				}
			}
			else pc_cmd_hmenu(playerid, "");
		}
		case DIALOG_HM_RENT_EDIT_PRICE:
		{
			if(response)
			{
				new price;
				if(sscanf(inputtext,"d",price) || price < 0 || price > 500) return OnDialogResponse(playerid, DIALOG_HM_RENT_MAIN, 1, 1, "");
				HouseInfo[tmpIter[playerid]][hRentPrice] = price;
				SaveHouseIntEx(tmpIter[playerid], "RentPrice", price);
				MsgSuccess(playerid, "NAMO NUOMA", "Nuomos kaina sëkmingai atnaujinta.");
				House_FixLabels(tmpIter[playerid], GetGVarInt("EnabledHouseLabels"));
				pc_cmd_hmenu(playerid, "");
			}
		}
		case DIALOG_HM_RENT_EDIT_LIMIT:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount)) return OnDialogResponse(playerid, DIALOG_HM_MAIN, 1, 2, "");
				if(amount < 0 || amount > 20) return OnDialogResponse(playerid, DIALOG_HM_MAIN, 1, 2, "");
				new string[126];
				mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `houses_dubkeys` WHERE HouseId = '%d' AND Valid = '1' AND Type = '1'", HouseInfo[tmpIter[playerid]][hId]);
				new Cache:result = mysql_query(chandler, string, true);
				if(cache_num_rows() > amount)
				{
					mysql_format(chandler, string, sizeof string, "UPDATE `houses_dubkeys` SET Valid = '0' WHERE Valid = '1' AND HouseId = '%d' AND Type = '1'", HouseInfo[tmpIter[playerid]][hId]);
					mysql_fquery(chandler, string, "HouseSaved");
					SendWarning(playerid, "Nuomininkø skaièius buvo %d, o ávedëte limità %d, todël jie buvo iðmesti.", cache_num_rows(), amount);
				}
				if(cache_is_valid(result)) cache_delete(result);
				HouseInfo[tmpIter[playerid]][hRentLimit] = amount;
				SaveHouseIntEx(tmpIter[playerid], "RentLimit", amount);
				MsgSuccess(playerid, "NAMO NUOMA", "Nustatymai sëkmingai atnaujinti.");
				pc_cmd_hmenu(playerid, "");
			}
		}
		case DIALOG_HM_RENT_EDIT_ALL:
		{
			if(response)
			{
				tmpSelected[playerid] = listitem;
				ShowPlayerDialog(playerid, DIALOG_HM_RENT_EDIT_PERSON, DIALOG_STYLE_LIST, "Namo nuoma", "Leisti naudotis furniture\nNeleisti naudotis furniture\n{C60000}Iðmesti nuomininkà", "Tæsti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_HM_MAIN, 1, 1, "");
		}
		case DIALOG_HM_RENT_EDIT_PERSON:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// leisti
						new string[126];
						mysql_format(chandler, string, sizeof string, "UPDATE `houses_dubkeys` SET P_FurnitureControl = '1' WHERE PlayerId = '%d' AND HouseId = '%d' AND Type = '1'", tmpArray[playerid][tmpSelected[playerid]], HouseInfo[tmpIter[playerid]][hId]);
						mysql_fquery(chandler, string, "HouseSaved");
						MsgSuccess(playerid, "NAMO NUOMA", "Nustatymai atnaujinti.");
						pc_cmd_hmenu(playerid, "");
					}
					case 1:
					{
						// neleisti
						new string[126];
						mysql_format(chandler, string, sizeof string, "UPDATE `houses_dubkeys` SET P_FurnitureControl = '0' WHERE PlayerId = '%d' AND HouseId = '%d' AND Type = '1'", tmpArray[playerid][tmpSelected[playerid]], HouseInfo[tmpIter[playerid]][hId]);
						mysql_fquery(chandler, string, "HouseSaved");
						MsgSuccess(playerid, "NAMO NUOMA", "Nustatymai atnaujinti.");
						pc_cmd_hmenu(playerid, "");
					}
					case 2:
					{
						// ismesti
						new string[200];
						mysql_format(chandler, string, sizeof string, "UPDATE `houses_dubkeys` SET Valid = '0' WHERE PlayerId = '%d' AND HouseId = '%d' AND Type = '1'; UPDATE `players_data` SET SpawnType = '0' WHERE id = '%d' AND SpawnType = '1'", tmpArray[playerid][tmpSelected[playerid]], HouseInfo[tmpIter[playerid]][hId], tmpArray[playerid][tmpSelected[playerid]]);
						mysql_fquery(chandler, string, "HouseSaved");
						MsgSuccess(playerid, "NAMO NUOMA", "Nuomininkas sëkmingai iðmestas.");
						pc_cmd_hmenu(playerid, "");
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_HM_MAIN, 1, 1, "");
		}
		case DIALOG_BANK_DEPOSIT:
		{
			if(response)
			{
				// padeti
				new amount;
				if(sscanf(inputtext,"d",amount)) return 0, ShowPlayerBank(playerid);
				if(0 < amount <= GetPlayerMoney(playerid))
				{
					PlayerInfo[playerid][pBank] += amount;
					GivePlayerMoney(playerid, -amount);
					MsgSuccess(playerid, "BANKAS", "Padëjote $%d á sàskaità.", amount);
					new string[126];
					mysql_format(chandler, string, sizeof string, "INSERT INTO `players_bank_history` (`PlayerId`,`String`,`Amount`) VALUES ('%d','pinigø padëjimas banke','%d')", PlayerInfo[playerid][pId], amount);
					mysql_fquery(chandler, string, "BankLogAdd");
					log_init(true);
					log_set_table("logs_money");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Amount`");
					log_set_values("'%d','%e','Padejo i saskaita','%d'", LogPlayerId(playerid), LogPlayerName(playerid), amount);
					log_commit();
				}
			}
			ShowPlayerBank(playerid);
		}
		case DIALOG_BANK_WITHDRAW:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount)) return 0 , ShowPlayerBank(playerid);
				if(0 < amount <= PlayerInfo[playerid][pBank])
				{
					PlayerInfo[playerid][pBank] -= amount;
					GivePlayerMoney(playerid, amount);
					MsgSuccess(playerid, "BANKAS", "Nusiëmëte $%d ið sàskaitos.", amount);
					new string[126];
					mysql_format(chandler, string, sizeof string, "INSERT INTO `players_bank_history` (`PlayerId`,`String`,`Amount`) VALUES ('%d','pinigø nuëmimas banke','%d')", PlayerInfo[playerid][pId], amount);
					mysql_fquery(chandler, string, "BankLogAdd");
					log_init(true);
					log_set_table("logs_money");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Amount`");
					log_set_values("'%d','%e','Paeme is saskaitos','%d'", LogPlayerId(playerid), LogPlayerName(playerid), amount);
					log_commit();
				}
			}
			ShowPlayerBank(playerid);
		}
		case DIALOG_BANK_SAVINGS:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount)) return 0, ShowPlayerBank(playerid);
				if(MIN_SAVINGS_MONEY_TO_PUT <= amount <= MAX_SAVINGS_MONEY_TO_PUT)
				{
					if(amount > PlayerInfo[playerid][pBank])
					{
						MsgWarning(playerid, "BANKAS", "Neturite tiek pinigø banko sàskaitoje.");
					}
					else
					{
						PlayerInfo[playerid][pSavings] = amount;
						PlayerInfo[playerid][pBank] -= amount;
						SaveAccountIntEx(playerid, "Bank", PlayerInfo[playerid][pBank]);
						SaveAccountIntEx(playerid, "Savings", amount);
						new string[126];
						mysql_format(chandler, string, sizeof string, "INSERT INTO `players_bank_history` (`PlayerId`,`String`,`Amount`) VALUES ('%d','indëlio padëjimas','%d')", PlayerInfo[playerid][pId], amount);
						mysql_fquery(chandler, string, "BankLogAdd");
						MsgSuccess(playerid, "BANKAS", "Pinigai padëti á indëlá.");
						log_init(true);
						log_set_table("logs_money");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Amount`");
						log_set_values("'%d','%e','Padejo indeli','%d'", LogPlayerId(playerid), LogPlayerName(playerid), amount);
						log_commit();
					}
				}
				else
				{
					MsgWarning(playerid, "BANKAS", "Minimali suma "#MIN_SAVINGS_MONEY_TO_PUT"$, maksimali "#MAX_SAVINGS_MONEY_TO_PUT"$");
				}
			}
			ShowPlayerBank(playerid);
		}
		case DIALOG_BANK_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// likutis
						if(PlayerInfo[playerid][pBankCard] <= 0)
						{
							// susikurti rodem jam
							if(GetPlayerMoney(playerid) < DEFAULT_BANK_CARD_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_BANK_CARD_PRICE);
							else
							{
								MsgSuccess(playerid, "BANKAS", "Ásigijote banko kortelæ. Jûsø sàskaitos numeris: "#DEFAULT_IBAN_PREFIX"%d", GetPlayerIBAN(PlayerInfo[playerid][pId]));
								PlayerInfo[playerid][pBankCard] = 1;
								SaveAccountIntEx(playerid, "BankCard", 1);
								GivePlayerMoney(playerid, -DEFAULT_BANK_CARD_PRICE);
								ShowPlayerBank(playerid);
							}
						}
						else
						{
							ShowPlayerBank(playerid);
						}
					}
					case 1:
					{
						// inesti
						/*if(PlayerInfo[playerid][pSavings] > 0)
						{
							MsgError(playerid, "BANKAS", "Jûs kaupiate pinigus indelyje, todël banku negalite naudotis.");
							return ShowPlayerBank(playerid);
						}*/
						ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "Bankas", "{FFFFFF}Áveskite sumà pinigø, kurià norite áneðti á savo banko sàskaità.", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// paimti
						/*if(PlayerInfo[playerid][pSavings] > 0)
						{
							MsgError(playerid, "BANKAS", "Jûs kaupiate pinigus indelyje, todël banku negalite naudotis.");
							return ShowPlayerBank(playerid);
						}*/
						ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "Bankas", "{FFFFFF}Áveskite sumà pinigø, kurià norite nuimti ið savo banko sàskaitos.", "Tæsti", "Atðaukti");
					}
					case 3:
					{
						// savings
						ShowPlayerBank(playerid);
					}
					case 4:
					{
						// savings padeti
						if(PlayerInfo[playerid][pSavings] > 0)
						{
							// nutraukti
							PlayerInfo[playerid][pBank] += PlayerInfo[playerid][pSavings];
							SaveAccountIntEx(playerid, "Bank", PlayerInfo[playerid][pBank]);
							SaveAccountIntEx(playerid, "Savings", 0);
							MsgSuccess(playerid, "BANKAS", "Pinigai pervesti á jûsø sàskaità.");
							new string[126];
							mysql_format(chandler, string, sizeof string, "INSERT INTO `players_bank_history` (`PlayerId`,`String`,`Amount`) VALUES ('%d','indëlio nutraukimas','%d')", PlayerInfo[playerid][pId], PlayerInfo[playerid][pSavings]);
							mysql_fquery(chandler, string, "BankLogAdd");
							log_init(true);
							log_set_table("logs_money");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Amount`");
							log_set_values("'%d','%e','Nusieme indeli','%d'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[playerid][pSavings]);
							log_commit();
							PlayerInfo[playerid][pSavings] = 0;
							ShowPlayerBank(playerid);
						}
						else
						{
							// padeti savings
							ShowPlayerDialog(playerid, DIALOG_BANK_SAVINGS, DIALOG_STYLE_INPUT, "Bankas", "{FFFFFF}Áveskite sumà, kurià norite padëti indëliui.\n{EEEEEE}Kiekvienà valandiná atlyginimà gausite iðmokas ið banko, kurios\nbus pridedamos prie jûsø pradinës sumos. Iðmokø dydis kiekvienà kartà\nskaièiuojamas nuo naujos sumos.\nPadëjus pinigus á indëlá, banko sàskaita naudotis negalima.\nSutartá bet kada galima nutraukti", "Tæsti", "Atðaukti");
						}
					}
					case 5:
					{
						// istorija
						ShowPlayerDialog(playerid, DIALOG_BANK_HISTORY, DIALOG_STYLE_MSGBOX, "Banko iðklotinë", "{BABABA}Praðome palaukti, duomenys kraunami.", "Uþdaryti", "");
						SetTimerEx("BankHistoryTimer", 3000, false, "d", playerid);
					}
					case 6:
					{
						// pervedimai
						if(GetGVarInt("EnabledTransactions") >= 1)
						{
							/*if(PlayerInfo[playerid][pSavings] > 0)
							{
								MsgError(playerid, "BANKAS", "Jûs kaupiate pinigus indelyje, todël banku negalite naudotis.");
								return ShowPlayerBank(playerid);
							}*/
							ShowPlayerDialog(playerid, DIALOG_BANK_TRANSACTION_NAME, DIALOG_STYLE_INPUT, "Bankas", "{FFFFFF}Áveskite sàskaità, á kurià norite pervesti pinigø.", "Tæsti", "Atðaukti");
						}
						else SendWarning(playerid, "Sistema iðjungta.") , ShowPlayerBank(playerid);
					}
				}
			}
		}
		case DIALOG_BANK_TRANSACTION_NAME:
		{
			if(response)
			{
				if(!strlen(inputtext)) ShowPlayerBank(playerid);
				new iban[24];
				foreach(new receiverid : Player)
				{
					if(PlayerInfo[playerid][pBankCard] > 0)
					{
						format(iban, 24, ""#DEFAULT_IBAN_PREFIX"%d", GetPlayerIBAN(PlayerInfo[receiverid][pId]));
						if(isequal(iban, inputtext))
						{
							// radom
							new string[256];
							format(string, sizeof string, "{FFFFFF}Áveskite sumà, kurià norite pervesti á sàskaità {FF672B}%s", inputtext);
							tmpSelected[playerid] = receiverid;
							ShowPlayerDialog(playerid, DIALOG_BANK_TRANSACTION_AMOUNT, DIALOG_STYLE_INPUT, "Bankas", string, "Pervesti", "Atðaukti");
							return 1;
						}
					}
				}
				MsgWarning(playerid, "BANKAS", "Tokios sàskaitos nëra, arba á jà dabar negalima pervesti pinigø.");
				ShowPlayerBank(playerid);
			}
			else ShowPlayerBank(playerid);
		}
		case DIALOG_BANK_TRANSACTION_AMOUNT:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount)) return ShowPlayerBank(playerid);
				if(0 < amount < 500000)
				{
					if(amount > PlayerInfo[playerid][pBank])
					{
						MsgError(playerid, "BANKAS", "Neturite tiek pinigø banko sàskaitoje.");
						return ShowPlayerBank(playerid);
					}
					new receiverid = tmpSelected[playerid],
						string[356];

					if(IsPlayerConnected(receiverid))
					{
						if(PlayerInfo[playerid][pLevel] < 2 || PlayerInfo[receiverid][pLevel] < 2) return SendWarning(playerid, "Lygis nëra 2");
						SendFormat(receiverid, 0x65BA36FF, "______________________ BANKAS ______________________");
						SendFormat(receiverid, 0x65BA36FF, "|");
						SendFormat(receiverid, 0x65BA36FF, "| {E5E5E5}Gavote pervedimà ið sàskaitos {C4F1AB}["#DEFAULT_IBAN_PREFIX"%d, %s]", GetPlayerIBAN(PlayerInfo[playerid][pId]), GetPlayerNameEx(playerid, true, true));
						SendFormat(receiverid, 0x65BA36FF, "| {E5E5E5}Suma: {C4F1AB}$%d", amount);
						SendFormat(receiverid, 0x65BA36FF, "|___________________________________________________");
						mysql_format(chandler, string, sizeof string, "INSERT INTO `players_bank_history` (`PlayerId`,`String`,`Amount`) VALUES ('%d','pervedimas ið ["#DEFAULT_IBAN_PREFIX"%d,%s]','%d')", PlayerInfo[receiverid][pId], GetPlayerIBAN(PlayerInfo[playerid][pId]), GetPlayerNameEx(playerid), amount);
						mysql_fquery(chandler, string, "BankLogAdd");
						PlayerInfo[receiverid][pBank] += amount;
						SaveAccountIntEx(receiverid, "Bank", PlayerInfo[receiverid][pBank]);


						SendFormat(playerid, 0x65BA36FF, "______________________ BANKAS ______________________");
						SendFormat(playerid, 0x65BA36FF, "|");
						SendFormat(playerid, 0x65BA36FF, "| {E5E5E5}Pervedëte pinigus á sàskaità {C4F1AB}["#DEFAULT_IBAN_PREFIX"%d, %s]", GetPlayerIBAN(PlayerInfo[receiverid][pId]), GetPlayerNameEx(receiverid, true, true));
						SendFormat(playerid, 0x65BA36FF, "| {E5E5E5}Suma: {C4F1AB}$%d", amount);
						SendFormat(playerid, 0x65BA36FF, "|___________________________________________________");
						mysql_format(chandler, string, sizeof string, "INSERT INTO `players_bank_history` (`PlayerId`,`String`,`Amount`) VALUES ('%d','pervedimas á ["#DEFAULT_IBAN_PREFIX"%d,%s]','%d')", PlayerInfo[playerid][pId], GetPlayerIBAN(PlayerInfo[receiverid][pId]), GetPlayerNameEx(receiverid), amount);
						mysql_fquery(chandler, string, "BankLogAdd");
						PlayerInfo[playerid][pBank] -= amount;
						SaveAccountIntEx(playerid, "Bank", PlayerInfo[playerid][pBank]);
						ShowPlayerBank(playerid);
						log_init(true);
						log_set_table("logs_money");
						log_set_keys("`PlayerId`,`PlayerName`,`ExtraId`,`ExtraString`,`ActionText`,`Amount`");
						log_set_values("'%d','%e','%d','%e','Pervede pinigus','%d'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), amount);
						log_commit();
					}
				}
				else
				{
					MsgWarning(playerid, "BANKAS", "Suma turi bûti nuo 1$ iki 500000$");
				}
			}
			else ShowPlayerBank(playerid);
		}
		case DIALOG_ATM_DEPOSIT:
		{
			if(response)
			{
				// padeti
				new amount;
				if(sscanf(inputtext,"d",amount)) return 0;
				if(0 < amount <= GetPlayerMoney(playerid))
				{
					PlayerInfo[playerid][pBank] += amount;
					GivePlayerMoney(playerid, -amount);
					MsgSuccess(playerid, "BANKOMATAS", "Padëjote $%d á sàskaità.", amount);
					log_init(true);
					log_set_table("logs_money");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Amount`");
					log_set_values("'%d','%e','Padejo i saskaita','%d'", LogPlayerId(playerid), LogPlayerName(playerid), amount);
					log_commit();
				}
			}
		}
		case DIALOG_ATM_WITHDRAW:
		{
			if(response)
			{
				new amount,
					selected = tmpSelected[playerid];
				if(sscanf(inputtext,"d",amount)) return 0;
				if(ATMs[selected][atmWithdrawLimit] != 0 && amount > ATMs[selected][atmWithdrawLimit]) return MsgWarning(playerid, "BANKOMATAS", "Nuëmimo limitas: $%d", ATMs[selected][atmWithdrawLimit]);
				if(0 < amount <= PlayerInfo[playerid][pBank])
				{
					PlayerInfo[playerid][pBank] -= amount;
					GivePlayerMoney(playerid, amount);
					MsgSuccess(playerid, "BANKOMATAS", "Nusiëmëte $%d ið sàskaitos.", amount);
					log_init(true);
					log_set_table("logs_money");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Amount`");
					log_set_values("'%d','%e','Nusieme is saskaitos','%d'", LogPlayerId(playerid), LogPlayerName(playerid), amount);
					log_commit();
				}
			}
		}
		case DIALOG_AM_BM_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// konspiraciniai namai
						ShowPlayerDialog(playerid, DIALOG_AM_BM_HOUSES_MAIN, DIALOG_STYLE_LIST, "Konspiraciniai namai", "Perþiûrëti visus\nPridëti naujà", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// tr. priemones
						mysql_tquery(chandler, "SELECT * FROM `sell_vehicles_dealers`", "DealerSalonVehiclesLoad", "d", playerid);
					}
					case 2:
					{
						// dyleriai
						if(HaveAdminPermission(playerid, "EditDealers"))
						{
							mysql_tquery(chandler, "SELECT * FROM `dealers_data` WHERE Active = '1'", "DealersLoad", "d", playerid);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
			else ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_BM_VEHICLES_ALL:
		{
			if(response)
			{
				if(listitem == tmpTexture_MarkStart_CP[playerid])
				{
					// prideti
					ShowPlayerDialog(playerid, DIALOG_AM_BM_VEHICLE_ADD, DIALOG_STYLE_INPUT, "Transporto priemonës", "{FFFFFF}Áveskite naujos transporto priemonës tiekëjams modelá.\n{BABABA}", "Tæsti", "Atðaukti");
				}
				else
				{
					tmpSelected[playerid] = listitem;
					ShowPlayerDialog(playerid, DIALOG_AM_BM_VEHICLE_EDIT_MAIN, DIALOG_STYLE_LIST, "Transporto priemonës", "Keisti modelá\nKeisti tipà\nKeisti kainà\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 15, "");
		}
		case DIALOG_AM_BM_VEHICLE_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOG_AM_BM_VEHICLE_EDIT_MODEL, DIALOG_STYLE_INPUT, "Transporto priemonës", "{FFFFFF}Áveskite naujà modelá", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_AM_BM_VEHICLE_EDIT_TYPE, DIALOG_STYLE_LIST, "Transporto priemonës", "Ginklø tiekëjui\nNarkotikø tiekëjui\nGinklø ir narkotikø tiekëjui", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						ShowPlayerDialog(playerid, DIALOG_AM_BM_VEHICLE_EDIT_PRICE, DIALOG_STYLE_INPUT, "Transporto priemonës", "{FFFFFF}Áveskite naujà modelio kainà", "Tæsti", "Atðaukti");
					}
					case 3:
					{
						// istrinti
						new id = tmpArray[playerid][tmpSelected[playerid]];
						new string[126];
						mysql_format(chandler, string, sizeof string, "DELETE FROM `sell_vehicles_dealers` WHERE id = '%d'", id);
						mysql_fquery(chandler, string, "SalonVehicleAdd");
						MsgSuccess(playerid, "JUODOJI RINKA", "Tr. priemonës modelis sëkmingai iðtrintas.");
						OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 1, "");
					}
				}
			}
		}
		case DIALOG_AM_BM_VEHICLE_EDIT_MODEL:
		{
			if(response)
			{
				new model,
					id = tmpArray[playerid][tmpSelected[playerid]];
				if(sscanf(inputtext,"d",model) || !(400 <= model < 612)) return OnDialogResponse(playerid, DIALOG_AM_BM_VEHICLE_EDIT_MAIN, 1, 0, "");
				new string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `sell_vehicles_dealers` SET Model = '%d' WHERE id = '%d'", model, id);
				mysql_fquery(chandler, string, "SalonVehicleAdd");
				MsgSuccess(playerid, "JUODOJI RINKA", "Tr. priemonës modelis sëkmingai pakeistas.");
				OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 1, "");
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 1, "");
		}
		case DIALOG_AM_BM_VEHICLE_EDIT_TYPE:
		{
			if(response)
			{
				new string[126],
					id = tmpArray[playerid][tmpSelected[playerid]];
				mysql_format(chandler, string, sizeof string, "UPDATE `sell_vehicles_dealers` SET DealerType = '%d' WHERE id = '%d'", listitem, id);
				mysql_fquery(chandler, string, "SalonVehicleAdd");
				MsgSuccess(playerid, "JUODOJI RINKA", "Tr. priemonës tipas sëkmingai pakeistas.");
				OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 1, "");
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 1, "");
		}
		case DIALOG_AM_BM_VEHICLE_EDIT_PRICE:
		{
			if(response)
			{
				new price,
					id = tmpArray[playerid][tmpSelected[playerid]];
				if(sscanf(inputtext,"d",price) || price < 0) return OnDialogResponse(playerid, DIALOG_AM_BM_VEHICLE_EDIT_MAIN, 1, 2, "");
				new string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `sell_vehicles_dealers` SET Price = '%d' WHERE id = '%d'", price, id);
				mysql_fquery(chandler, string, "SalonVehicleAdd");
				MsgSuccess(playerid, "JUODOJI RINKA", "Tr. priemonës kaina sëkmingai pakeista.");
				OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 1, "");
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 1, "");
		}
		case DIALOG_AM_BM_VEHICLE_ADD:
		{
			if(response)
			{
				new model;
				if(sscanf(inputtext, "d", model) || model < 400 || model > 611) return OnDialogResponse(playerid, DIALOG_AM_BM_VEHICLE_ADD, 1, tmpTexture_MarkStart_CP[playerid], "");
				new string[126];
				mysql_format(chandler, string, sizeof string, "INSERT INTO `sell_vehicles_dealers` (`Added`,`Model`) VALUES ('%d','%d')", PlayerInfo[playerid][pId], model);
				mysql_fquery(chandler, string, "SalonVehicleAdd");
				MsgSuccess(playerid, "JUODOJI RINKA", "Tr. priemonë sëkmingai pridëta á galimø pirkti sàraðà. Pakeiskite jos kainà");
				OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 1, "");
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 1, "");
		}
		case DIALOG_AM_BM_DEALERS_ALL:
		{
			if(response)
			{
				if(listitem >= tmpTexture_MarkStart_CP[playerid])
				{
					// prideti
					ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_ADD, DIALOG_STYLE_INPUT, "Ginklø ir narkotikø tiekëjai", "{FFFFFF}Áveskite pilnà þaidëjo vardà ir pavardæ,\nkuriam norite uþdëti ginklø ar narkotikø tiekëjà.", "Tæsti", "Atðaukti");
				}
				else
				{
					tmpSelected[playerid] = listitem;
					ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, DIALOG_STYLE_LIST, "Ginklø ir narkotikø tiekëjai", "Keisti tipà\nKonspiraciniai namai\nTransporto priemonës\nGinklai\nNarkotikai\nGinklø paëmimo vietos\nNarkotikø paëmimo vietos\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 15, "");
		}
		case DIALOG_AM_BM_DEALER_ADD:
		{
			if(response)
			{
				new name[24];
				if(sscanf(inputtext,"s[24]",name)) return OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpTexture_MarkStart_CP[playerid]+1, "");
				new string[226],
					receiver = INVALID_PLAYER_ID;
				if((receiver = FindPlayerByName(name)) != INVALID_PLAYER_ID)
				{
					if(PlayerInfo[receiver][pDealer] >= 0)
					{
						SendWarning(playerid, "Þaidëjas jau turi ðá statusà.");
						return 1;
					}
					PlayerInfo[receiver][pDealer] = 0;
					mysql_format(chandler, string, sizeof string, "INSERT INTO `dealers_data` (`PlayerId`,`Added`,`Type`,`Date`,`Active`) VALUES ('%d','%d','0',now(),'1')", PlayerInfo[receiver][pId], PlayerInfo[playerid][pId]);
					mysql_fquery(chandler, string, "DealerSaved");
					MsgSuccess(playerid, "JUODOJI RINKA", "Tiekëjo (gun) statusas sëkmingai uþdëtas.");
					return 1;
				}
				mysql_format(chandler, string, sizeof string, "SELECT id FROM `players_data` WHERE Name = '%e'", name);
				new Cache:result = mysql_query(chandler, string, true);
				if(cache_num_rows())
				{
					cache_get_value_name_int(0, "id", receiver);
					cache_delete(result);
					mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `dealers_data` WHERE PlayerId = '%d'", receiver);
					result = mysql_query(chandler, string, true);
					if(cache_num_rows())
					{
						// jau yra
						SendWarning(playerid, "Þaidëjas jau turi ðá statusà.");
						cache_delete(result);
						return OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpTexture_MarkStart_CP[playerid]+1, "");
					}
					else
					{
						cache_delete(result);
						mysql_format(chandler, string, sizeof string, "INSERT INTO `dealers_data` (`PlayerId`,`Added`,`Type`,`Date`,`Active`) VALUES ('%d','%d','0',now(),'1')", receiver, PlayerInfo[playerid][pId]);
						mysql_fquery(chandler, string, "DealerSaved");
						MsgSuccess(playerid, "JUODOJI RINKA", "Tiekëjo (gun) statusas sëkmingai uþdëtas.");
						ShowPlayerAdminMenu(playerid);
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
						log_set_values("'%d','%e','%d','%e','(BM) Uzdejo tiekejo statusa'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiver), LogPlayerName(receiver));
						log_commit();
					}
				}
				else
				{
					cache_delete(result);
					SendWarning(playerid, "Þaidëjas nerastas duomenø bazëje.");
					return OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpTexture_MarkStart_CP[playerid]+1, "");
				}


			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 2, "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_GUNS_ADD:
		{
			if(response)
			{
				new selected = tmpArray[playerid][tmpSelected[playerid]]; // dyleris
				new string[126],
					weaponid = GetWeaponByArrayIndex(listitem+1);
				mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `dealers_guns_lists` WHERE PlayerId = '%d' AND WeaponId = '%d'", selected, weaponid); // +1 nes kumsciai nerodomi
				new Cache:result = mysql_query(chandler, string, true);
				if(cache_num_rows())
				{
					OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpSelected[playerid], "");
					cache_delete(result);
					return 1;
				}
				else
				{
					// add
					mysql_format(chandler, string, sizeof string, "INSERT INTO `dealers_guns_lists` (`PlayerId`,`WeaponId`,`Added`) VALUES ('%d','%d','%d')", selected, weaponid, PlayerInfo[playerid][pId]);
					mysql_fquery(chandler, string, "DealerGunAdded");
					MsgSuccess(playerid, "JUODOJI RINKA", "Ginklas pridëtas á galimø sàraðà.");
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`");
					log_set_values("'%d','%e','%d','%e','(BM) Pridejo ginkla i sarasa tiekejui','%d'", LogPlayerId(playerid), LogPlayerName(playerid), selected, GetNameBySql(selected), weaponid);
					log_commit();
					tmpTexture_MarkStart_CP[playerid] = 999999;
					OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpSelected[playerid], "");
				}
				cache_delete(result);
				return 1;
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 3, "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_DRUG_ADD:
		{
			if(response)
			{
				new selected = tmpArray[playerid][tmpSelected[playerid]];
				new string[126];
				new drugid;
				if(sscanf(inputtext,"d",drugid) || drugid < 50 || drugid > 60) return OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 4, "");
				mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `dealers_drugs_lists` WHERE PlayerId = '%d' AND DrugId = '%d'", selected, drugid);
				new Cache:result = mysql_query(chandler, string, true);
				if(cache_num_rows())
				{
					OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 4, "");
					cache_delete(result);
					return 1;
				}
				else
				{
					mysql_format(chandler, string, sizeof string, "INSERT INTO `dealers_drugs_lists` (`PlayerId`,`DrugId`,`Added`) VALUES ('%d','%d','%d')", selected, drugid, PlayerInfo[playerid][pId]);
					mysql_fquery(chandler, string, "DealerDrugAdded");
					MsgSuccess(playerid, "JUODOJI RINKA", "Narkotikas pridëtas á galimø sàraðà.");
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`");
					log_set_values("'%d','%e','%d','%e','(BM) Pridejo narkotika i sarasa tiekejui','%d'", LogPlayerId(playerid), LogPlayerName(playerid), selected, GetNameBySql(selected), drugid);
					log_commit();
					OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 4, "");
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 4, "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_GUNS_ALL:
		{
			if(response)
			{
				if(listitem >= tmpTexture_MarkStart_CP[playerid])
				{
					// prideti
					new string[512];
					for(new i = 1; i < 42; i++)
					{
						if(18 < i < 22)
						{
							// situ id tusti
							continue;
						}
						format(string, sizeof string, "%s%s\n", string, GetInventoryItemName(i));
					}
					ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_GUNS_ADD, DIALOG_STYLE_LIST, "Ginklø ir narkotikø tiekëjai", string, "Pridëti", "Atðaukti");
				}
				else
				{
					new string[126];
					tmpIter[playerid] = listitem;
					mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC LIMIT 1 OFFSET %d", tmpArray[playerid][tmpSelected[playerid]], listitem);//
					mysql_tquery(chandler, string, "DealerGunDataLoadedAM", "d", playerid);
				}
			}
			else
			{
				OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 3, "");
			}
		}
		case DIALOG_AM_BM_DEALER_EDIT_GUN_MAX:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount)) return OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_GUN_MAIN, 1, 0, "");
				new string[126],
					id,
					dealerid = tmpArray[playerid][tmpSelected[playerid]],
					weaponid;
				mysql_format(chandler, string, sizeof string, "SELECT id,WeaponId FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);
				new Cache:result = mysql_query(chandler, string, true);
				if(cache_num_rows())
				{
					cache_get_value_name_int(0, "id", id);
					cache_get_value_name_int(0, "WeaponId", weaponid);
					cache_delete(result);
					mysql_format(chandler, string, sizeof string, "UPDATE `dealers_guns_lists` SET `WeaponMaxAmount` = '%d' WHERE id = '%d'", amount, id);
					mysql_fquery(chandler, string, "DealerSaved");
					MsgSuccess(playerid, "JUODOJI RINKA", "Ginklo nustatymai sëkmingai atnaujinti.");
					mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);//
					mysql_tquery(chandler, string, "DealerGunDataLoadedAM", "d", playerid);
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`,`Amount`");
					log_set_values("'%d','%e','%d','%e','(BM) Pakeite ginklo limita tiekejui','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), dealerid, GetNameBySql(dealerid), weaponid, amount);
					log_commit();
				}
				if(cache_is_valid(result)) cache_delete(result);
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_GUNS_ALL, 1, tmpIter[playerid], "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_GUN_PRICE:
		{
			if(response)
			{
				new price;
				if(sscanf(inputtext,"d",price)) return OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_GUN_MAIN, 1, 1, "");
				new string[126],
					id,
					weaponid,
					dealerid = tmpArray[playerid][tmpSelected[playerid]];
				mysql_format(chandler, string, sizeof string, "SELECT id,WeaponId FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);
				new Cache:result = mysql_query(chandler, string, true);
				if(cache_num_rows())
				{
					cache_get_value_name_int(0, "id", id);
					cache_get_value_name_int(0, "WeaponId", weaponid);
					cache_delete(result);
					mysql_format(chandler, string, sizeof string, "UPDATE `dealers_guns_lists` SET `WeaponPrice` = '%d' WHERE id = '%d'", price, id);
					mysql_fquery(chandler, string, "DealerSaved");
					MsgSuccess(playerid, "JUODOJI RINKA", "Ginklo nustatymai sëkmingai atnaujinti.");
					mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);//
					mysql_tquery(chandler, string, "DealerGunDataLoadedAM", "d", playerid);
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`,`Amount`");
					log_set_values("'%d','%e','%d','%e','(BM) Pakeite ginklo kaina tiekejui','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), dealerid, GetNameBySql(dealerid), weaponid, price);
					log_commit();
				}
				if(cache_is_valid(result)) cache_delete(result);
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_GUNS_ALL, 1, tmpIter[playerid], "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_GUN_AMOUNT:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount)) return OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_GUN_MAIN, 1, 2, "");
				new string[126],
					id,
					weaponid,
					dealerid = tmpArray[playerid][tmpSelected[playerid]];
				mysql_format(chandler, string, sizeof string, "SELECT id,WeaponId FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);
				new Cache:result = mysql_query(chandler, string, true);
				if(cache_num_rows())
				{
					cache_get_value_name_int(0, "id", id);
					cache_get_value_name_int(0, "WeaponId", weaponid);
					cache_delete(result);
					mysql_format(chandler, string, sizeof string, "UPDATE `dealers_guns_lists` SET `WeaponAmount` = '%d' WHERE id = '%d'", amount, id);
					mysql_fquery(chandler, string, "DealerSaved");
					MsgSuccess(playerid, "JUODOJI RINKA", "Ginklo nustatymai sëkmingai atnaujinti.");
					mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);//
					mysql_tquery(chandler, string, "DealerGunDataLoadedAM", "d", playerid);
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`,`Amount`");
					log_set_values("'%d','%e','%d','%e','(BM) Pakeite ginklo kieki tiekejui','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), dealerid, GetNameBySql(dealerid), weaponid, amount);
					log_commit();
				}
				if(cache_is_valid(result)) cache_delete(result);
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_GUNS_ALL, 1, tmpIter[playerid], "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_DRUG_MAIN:
		{
			if(response)
			{
				// pasirinko ginkla editint
				switch(listitem)
				{
					case 0:
					{
						// max order kiekis
						ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_DRUG_MAX, DIALOG_STYLE_INPUT, "Ginklø ir narkotikø tiekëjai", "{FFFFFF}Áveskite maksimalø ginklø kieká, kurá\ntiekëjas gali uþsakyti vienu metu.", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// vieneto kaina
						ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_DRUG_PRICE, DIALOG_STYLE_INPUT, "Ginklø ir narkotikø tiekëjai", "{FFFFFF}Áveskite naujà vieneto kainà pasirinktam ginklui.", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// kiekis sandelyje
						ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_DRUG_AMOUNT, DIALOG_STYLE_INPUT, "Ginklø ir narkotikø tiekëjai", "{FFFFFF}Áveskite narkotiko kieká sandelyje.", "Tæsti", "Atðaukti");
					}
					case 3:
					{
						// istrinti
						new string[126],
							id = -1,
							drugid,
							dealerid = tmpArray[playerid][tmpSelected[playerid]];
						mysql_format(chandler, string, sizeof string, "SELECT id,DrugId FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);
						new Cache:result = mysql_query(chandler, string, true);
						if(cache_num_rows())
						{
							cache_get_value_name_int(0, "id", id);
							cache_get_value_name_int(0, "DrugId", drugid);
						}
						cache_delete(result);
						if(id != -1)
						{
							mysql_format(chandler, string, sizeof string, "DELETE IGNORE FROM `dealers_drugs_lists` WHERE id = '%d' LIMIT 1", id);
							mysql_fquery(chandler, string, "DealerSaved");
							MsgSuccess(playerid, "JUODOJI RINKA", "Narkotikas iðtrintas.");
							OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 4, "");
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','%d','%e','(BM) Istryne narkotika is saraso tiekejui','%d'", LogPlayerId(playerid), LogPlayerName(playerid), dealerid, GetNameBySql(dealerid), drugid);
							log_commit();
						}
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 4, "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_GUN_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// max order kiekis
						ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_GUN_MAX, DIALOG_STYLE_INPUT, "Ginklø ir narkotikø tiekëjai", "{FFFFFF}Áveskite maksimalø ginklø kieká, kurá\ntiekëjas gali uþsakyti vienu metu.", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// vieneto kaina
						ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_GUN_PRICE, DIALOG_STYLE_INPUT, "Ginklø ir narkotikø tiekëjai", "{FFFFFF}Áveskite naujà vieneto kainà pasirinktam ginklui.", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// kiekis sandelyje
						ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_GUN_AMOUNT, DIALOG_STYLE_INPUT, "Ginklø ir narkotikø tiekëjai", "{FFFFFF}Áveskite ginklo kieká sandelyje.", "Tæsti", "Atðaukti");
					}
					case 3:
					{
						// istrinti
						new string[126],
							id = -1,
							weaponid,
							dealerid = tmpArray[playerid][tmpSelected[playerid]];
						mysql_format(chandler, string, sizeof string, "SELECT id,WeaponId FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);
						new Cache:result = mysql_query(chandler, string, true);
						if(cache_num_rows())
						{
							cache_get_value_name_int(0, "id", id);
							cache_get_value_name_int(0, "WeaponId", weaponid);
						}
						cache_delete(result);
						if(id != -1)
						{
							mysql_format(chandler, string, sizeof string, "DELETE IGNORE FROM `dealers_guns_lists` WHERE id = '%d' LIMIT 1", id);
							mysql_fquery(chandler, string, "DealerSaved");
							MsgSuccess(playerid, "JUODOJI RINKA", "Ginklas iðtrintas.");
							OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 3, "");
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','%d','%e','(BM) Istryne ginkla is saraso tiekejui','%d'", LogPlayerId(playerid), LogPlayerName(playerid), dealerid, GetNameBySql(dealerid), weaponid);
							log_commit();
						}
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 3, "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_DRUG_MAX:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount)) return OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_DRUG_MAIN, 1, 0, "");
				new string[126],
					id,
					drugid,
					dealerid = tmpArray[playerid][tmpSelected[playerid]];
				mysql_format(chandler, string, sizeof string, "SELECT id,DrugId FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);
				new Cache:result = mysql_query(chandler, string, true);
				if(cache_num_rows())
				{
					cache_get_value_name_int(0, "id", id);
					cache_get_value_name_int(0, "DrugId", drugid);
					cache_delete(result);
					mysql_format(chandler, string, sizeof string, "UPDATE `dealers_drugs_lists` SET `DrugMaxAmount` = '%d' WHERE id = '%d'", amount, id);
					mysql_fquery(chandler, string, "DealerSaved");
					MsgSuccess(playerid, "JUODOJI RINKA", "Narkotikø nustatymai sëkmingai atnaujinti.");
					mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);//
					mysql_tquery(chandler, string, "DealerDrugDataLoadedAM", "d", playerid);
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`,`Amount`");
					log_set_values("'%d','%e','%d','%e','(BM) Pakeite narkotiko limita tiekejui','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), dealerid, GetNameBySql(dealerid), drugid, amount);
					log_commit();
				}
				if(cache_is_valid(result)) cache_delete(result);
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_DRUGS_ALL, 1, tmpIter[playerid], "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_DRUG_PRICE:
		{
			if(response)
			{
				new price;
				if(sscanf(inputtext,"d",price)) return OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_DRUG_MAIN, 1, 1, "");
				new string[126],
					id,
					drugid,
					dealerid = tmpArray[playerid][tmpSelected[playerid]];
				mysql_format(chandler, string, sizeof string, "SELECT id,DrugId FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);
				new Cache:result = mysql_query(chandler, string, true);
				if(cache_num_rows())
				{
					cache_get_value_name_int(0, "id", id);
					cache_get_value_name_int(0, "DrugId", drugid);
					cache_delete(result);
					mysql_format(chandler, string, sizeof string, "UPDATE `dealers_drugs_lists` SET `DrugPrice` = '%d' WHERE id = '%d'", price, id);
					mysql_fquery(chandler, string, "DealerSaved");
					MsgSuccess(playerid, "JUODOJI RINKA", "Narkotikø nustatymai sëkmingai atnaujinti.");
					mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);//
					mysql_tquery(chandler, string, "DealerDrugDataLoadedAM", "d", playerid);
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`,`Amount`");
					log_set_values("'%d','%e','%d','%e','(BM) Pakeite narkotiko kaina tiekejui','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), dealerid, GetNameBySql(dealerid), drugid, price);
					log_commit();
				}
				if(cache_is_valid(result)) cache_delete(result);
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_DRUGS_ALL, 1, tmpIter[playerid], "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_DRUG_AMOUNT:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount)) return OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_DRUG_MAIN, 1, 2, "");
				new string[126],
					id,
					drugid,
					dealerid = tmpArray[playerid][tmpSelected[playerid]];
				mysql_format(chandler, string, sizeof string, "SELECT id,DrugId FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);
				new Cache:result = mysql_query(chandler, string, true);
				if(cache_num_rows())
				{
					cache_get_value_name_int(0, "id", id);
					cache_get_value_name_int(0, "DrugId", drugid);
					cache_delete(result);
					mysql_format(chandler, string, sizeof string, "UPDATE `dealers_drugs_lists` SET `DrugAmount` = '%d' WHERE id = '%d'", amount, id);
					mysql_fquery(chandler, string, "DealerSaved");
					MsgSuccess(playerid, "JUODOJI RINKA", "Narkotikø nustatymai sëkmingai atnaujinti.");
					mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);//
					mysql_tquery(chandler, string, "DealerDrugDataLoadedAM", "d", playerid);
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`,`Amount`");
					log_set_values("'%d','%e','%d','%e','(BM) Pakeite narkotiko kieki tiekejui','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), dealerid, GetNameBySql(dealerid), drugid, amount);
					log_commit();
				}
				if(cache_is_valid(result)) cache_delete(result);
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_DRUGS_ALL, 1, tmpIter[playerid], "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_DRUGS_ALL:
		{
			if(response)
			{
				if(listitem >= tmpTexture_MarkStart_CP[playerid])
				{
					// prideti
					ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_DRUG_ADD, DIALOG_STYLE_INPUT, "Ginklø ir narkotikø tiekëjai", "{FFFFFF}Áveskite narkotiko ID (pagal inventoriaus daikto ID)", "Tæsti", "Atðaukti");
				}
				else
				{
					new string[126];
					tmpIter[playerid] = listitem;
					mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC LIMIT 1 OFFSET %d", PlayerInfo[playerid][pId], listitem);
					mysql_tquery(chandler, string, "DealerDrugDataLoadedAM", "d", playerid);
				}
			}
			else
			{
				tmpTexture_MarkStart_CP[playerid] = 999999;
				OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpSelected[playerid], "");
			}
		}
		case DIALOG_AM_BM_DEALER_VEHICLES_ALL:
		{
			if(response)
			{
				// pasirinko masina
				new string[126];
				tmpIter[playerid] = listitem;
				mysql_format(chandler, string, sizeof string, "SELECT * FROM `vehicles_data` WHERE PlayerId = '%d' AND Dealer = '1' LIMIT 1 OFFSET %d", tmpArray[playerid][tmpSelected[playerid]], listitem);
				mysql_tquery(chandler, string, "DealerVehicleDataLoadAM", "d", playerid);
			}
			else
			{
				tmpTexture_MarkStart_CP[playerid] = 99999;
				OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpSelected[playerid], "");
			}
		}
		case DIALOG_AM_BM_DEALER_VEHICLE_EDIT_MAIN:
		{
			if(response)
			{
				// editina
				if(listitem == 5)
				{
					// istrinam
					new string[126],
						id = -1,
						model,
						dealerid = tmpArray[playerid][tmpSelected[playerid]],
						server = INVALID_VEHICLE_ID; // tikrint ar nera
					mysql_format(chandler, string, sizeof string, "SELECT id, SpawnedId, Model FROM `vehicles_data` WHERE PlayerId = '%d' AND Dealer = '1' LIMIT 1 OFFSET %d", dealerid, tmpIter[playerid]);
					new Cache:result = mysql_query(chandler, string, true);
					if(cache_num_rows())
					{
						cache_get_value_name_int(0, "id", id);
						cache_get_value_name_int(0, "SpawnedId", server);
						cache_get_value_name_int(0, "Model", model);
					}
					cache_delete(result);
					if(id != -1)
					{
						mysql_format(chandler, string, sizeof string, "DELETE IGNORE FROM `vehicles_data` WHERE id = '%d' LIMIT 1", id);
						mysql_fquery(chandler, string, "DealerSaved");
						MsgSuccess(playerid, "JUODOJI RINKA", "Tr. priemonë iðtrinta.");
						if(IsValidVehicle(server))
						{
							DestroyVehicle(server);
						}
						OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 2, "");
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraString`");
						log_set_values("'%d','%e','%d','%e','(BM) Istryne tiekejo tr. priemone','%e'", LogPlayerId(playerid), LogPlayerName(playerid), dealerid, GetNameBySql(dealerid), GetModelName(model));
						log_commit();
					}
				}
				else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_VEHICLES_ALL, 1, tmpIter[playerid], "");
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 2, "");
		}
		case DIALOG_AM_BM_DEALER_GUN_SPAWNS:
		{
			if(response)
			{
				if(listitem == tmpTexture_MarkStart_CP[playerid])
				{
					// prideti
					new string[186],
						Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					mysql_format(chandler, string, sizeof string, "INSERT INTO `dealers_guns_spawns` (`X`,`Y`,`Z`,`Added`,`PlayerId`) VALUES ('%f','%f','%f','%d','%d')", x, y, z, PlayerInfo[playerid][pId], tmpArray[playerid][tmpSelected[playerid]]);
					mysql_fquery(chandler, string, "DealerGunAdded");
					MsgSuccess(playerid, "JUODOJI RINKA", "Paëmimo vieta pridëta á sàraðà.");
					OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 5, "");
				}
				else
				{
					// edit
					tmpIter[playerid] = listitem;
					ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_GUN_SPAWN_EDIT, DIALOG_STYLE_LIST, "Ginklø ir narkotikø tiekëjai", "Teleportuotis á vietà\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
				}
			}
			else
			{
				tmpTexture_MarkStart_CP[playerid] = 999999;
				OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpSelected[playerid], "");
			}
		}
		case DIALOG_AM_BM_DEALER_GUN_SPAWN_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new id = tmpArray[playerid][tmpSelected[playerid]],
							selected = tmpIter[playerid],
							Float:x, Float:y, Float:z,
							string[126];
						mysql_format(chandler, string, sizeof string, "SELECT `X`,`Y`,`Z` FROM `dealers_guns_spawns` WHERE PlayerId = '%d' LIMIT 1 OFFSET %d", id, selected);
						new Cache:result = mysql_query(chandler, string, true);
						if(cache_num_rows())
						{
							cache_get_value_name_float(0, "X", x);
							cache_get_value_name_float(0, "Y", y);
							cache_get_value_name_float(0, "Z", z);
							SetPlayerPos(playerid, x, y, z);
						}
						cache_delete(result);
					}
					case 1:
					{
						new dealer = tmpArray[playerid][tmpSelected[playerid]],
							selected = tmpIter[playerid],
							id,
							string[126];
						mysql_format(chandler, string, sizeof string, "SELECT `id` FROM `dealers_guns_spawns` WHERE PlayerId = '%d' LIMIT 1 OFFSET %d", dealer, selected);
						new Cache:result = mysql_query(chandler, string, true);
						if(cache_num_rows())
						{
							cache_get_value_name_int(0, "id", id);
							cache_delete(result);
							mysql_format(chandler, string, sizeof string, "DELETE FROM `dealers_guns_spawns` WHERE id = '%d'", id);
							mysql_fquery(chandler, string, "DealerSaved");
							MsgSuccess(playerid, "JUODOJI RINKA", "Paëmimo vieta paðalinta.");
							OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 5, "");
						}
						cache_delete(result);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 5, "");
		}
		case DIALOG_AM_BM_DEALER_DRUG_SPAWNS:
		{
			if(response)
			{
				if(listitem == tmpTexture_MarkStart_CP[playerid])
				{
					// prideti
					new string[186],
						Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					mysql_format(chandler, string, sizeof string, "INSERT INTO `dealers_drugs_spawns` (`X`,`Y`,`Z`,`Added`,`PlayerId`) VALUES ('%f','%f','%f','%d','%d')", x, y, z, PlayerInfo[playerid][pId], tmpArray[playerid][tmpSelected[playerid]]);
					mysql_fquery(chandler, string, "DealerDrugAdded");
					MsgSuccess(playerid, "JUODOJI RINKA", "Paëmimo vieta pridëta á sàraðà.");
					OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 6, "");
				}
				else
				{
					// edit
					tmpSelected[playerid] = listitem;
					ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_DRUG_SPAWN_EDIT, DIALOG_STYLE_LIST, "Ginklø ir narkotikø tiekëjai", "Teleportuotis á vietà\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
				}
			}
			else
			{
				tmpTexture_MarkStart_CP[playerid] = 999999;
				OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpSelected[playerid], "");
			}
		}
		case DIALOG_AM_BM_DEALER_DRUG_SPAWN_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new id = tmpArray[playerid][tmpSelected[playerid]],
							selected = tmpIter[playerid],
							Float:x, Float:y, Float:z,
							string[126];
						mysql_format(chandler, string, sizeof string, "SELECT `X`,`Y`,`Z` FROM `dealers_drugs_spawns` WHERE PlayerId = '%d' LIMIT 1 OFFSET %d", id, selected);
						new Cache:result = mysql_query(chandler, string, true);
						if(cache_num_rows())
						{
							cache_get_value_name_float(0, "X", x);
							cache_get_value_name_float(0, "Y", y);
							cache_get_value_name_float(0, "Z", z);
							SetPlayerPos(playerid, x, y, z);
						}
						cache_delete(result);
					}
					case 1:
					{
						new dealer = tmpArray[playerid][tmpSelected[playerid]],
							selected = tmpIter[playerid],
							id,
							string[126];
						mysql_format(chandler, string, sizeof string, "SELECT `id` FROM `dealers_drugs_spawns` WHERE PlayerId = '%d' LIMIT 1 OFFSET %d", dealer, selected);
						new Cache:result = mysql_query(chandler, string, true);
						if(cache_num_rows())
						{
							cache_get_value_name_int(0, "id", id);
							cache_delete(result);
							mysql_format(chandler, string, sizeof string, "DELETE FROM `dealers_drugs_spawns` WHERE id = '%d'", id);
							mysql_fquery(chandler, string, "DealerSaved");
							MsgSuccess(playerid, "JUODOJI RINKA", "Paëmimo vieta paðalinta.");
							OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 6, "");
						}
						cache_delete(result);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 6, "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_TYPE:
		{
			if(response)
			{
				new id = tmpArray[playerid][tmpSelected[playerid]],
					string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `dealers_data` SET Type = '%d' WHERE PlayerId = '%d'", listitem, id);
				mysql_fquery(chandler, string, "DealerSaved");
				if((id = FindPlayerBySql(id)) != INVALID_PLAYER_ID)
				{
					PlayerInfo[id][pDealer] = listitem;
				}
				MsgSuccess(playerid, "JUODOJI RINKA", "Tipas pakeistas");
			}
		}
		case DIALOG_AM_BM_DEALER_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// tipas
						ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_TYPE, DIALOG_STYLE_LIST, "Ginklø ir narkotikø tiekëjai", "Ginklø tiekëjas\nNarkotikø tiekëjas\nGinklø ir narkotikø tiekëjas", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						new string[126];
						mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_houses_data` WHERE Owner = '%d'", tmpArray[playerid][tmpSelected[playerid]]);
						mysql_tquery(chandler, string, "DealerHousesLoadAM", "d", playerid);
					}
					case 2:
					{
						// tr. priemones
						new string[126];
						mysql_format(chandler, string, sizeof string, "SELECT * FROM `vehicles_data` WHERE Owner = '%d' AND Dealer = '1'", tmpArray[playerid][tmpSelected[playerid]]);
						mysql_tquery(chandler, string, "DealerVehiclesLoadAM", "d", playerid);
					}
					case 3:
					{
						// ginklai
						tmpTexture_MarkStart_CP[playerid] = 99999;
						ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_GUN_MAIN, DIALOG_STYLE_LIST, "Ginklø ir narkotikø tiekëjai", "Ginklø sàraðas\nMaksimalus ginklø kiekis per vienà uþsakymà", "Tæsti", "Atðaukti");
					}
					case 4:
					{
						// narkotikai
						tmpTexture_MarkStart_CP[playerid] = 99999;
						ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_DRUG_MAIN, DIALOG_STYLE_LIST, "Ginklø ir narkotikø tiekëjai", "Narkotikø sàraðas\nMaksimalus narkotikø kiekis per vienà uþsakymà", "Tæsti", "Atðaukti");
					}
					case 5:
					{
						// ginklu vietos
						new string[256];
						mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_guns_spawns` WHERE PlayerId = '%d'", tmpArray[playerid][tmpSelected[playerid]]);
						mysql_tquery(chandler, string, "DealerGunSpawns", "d", playerid);
					}
					case 6:
					{
						// narkotiku vietos
						new string[256];
						mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_drugs_spawns` WHERE PlayerId = '%d'", tmpArray[playerid][tmpSelected[playerid]]);
						mysql_tquery(chandler, string, "DealerDrugSpawns", "d", playerid);
					}
					case 7:
					{
						// istrinti
						new id = INVALID_PLAYER_ID,
							dealerid = tmpArray[playerid][tmpSelected[playerid]];
						if((id = FindPlayerBySql(dealerid)) != INVALID_PLAYER_ID)
						{
							PlayerInfo[id][pDealer] = -1;
						}
						new string[126];
						mysql_format(chandler, string, sizeof string, "DELETE FROM `dealers_data` WHERE PlayerId = '%d'", dealerid);
						mysql_fquery(chandler, string, "DealerSaved");

						MsgSuccess(playerid, "JUODOJI RINKA", "Statusas sëkmingai nuimtas.");
						ShowPlayerAdminMenu(playerid);
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
						log_set_values("'%d','%e','%d','%e','(BM) Pasalino tiekejo statusa'", LogPlayerId(playerid), LogPlayerName(playerid), dealerid, GetNameBySql(dealerid));
						log_commit();
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 2, "");
		}
		case DIALOG_AM_BM_DEALER_GUN_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new string[126];
						mysql_format(chandler, string, sizeof string, "SELECT WeaponId FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC", tmpArray[playerid][tmpSelected[playerid]]);
						mysql_tquery(chandler, string, "DealerGunsList", "d", playerid);
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_MAX_GUNS, DIALOG_STYLE_INPUT, "Ginklø ir narkotikø tiekëjai", "{FFFFFF}Áveskite maksimalø ginklø skaièiø, kurá tiekëjas gali pasirinkti\nuþsakymo metu (maks. "#MAX_WEAPONS_PER_ORDER")", "Tæsti", "Atðaukti");
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_MAX_GUNS:
		{
			if(response)
			{
				new amount,
					dealerid = tmpArray[playerid][tmpSelected[playerid]];
				if(sscanf(inputtext,"d",amount) || amount > MAX_WEAPONS_PER_ORDER || amount < 0) return OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_GUN_MAIN, 1, 1, "");
				new string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `dealers_data` SET MaxWeapons = '%d' WHERE PlayerId = '%d'", amount, dealerid);
				mysql_fquery(chandler, string, "DealerSaved");
				MsgSuccess(playerid, "JUODOJI RINKA", "Ginklø limitas pakeistas á %dvnt.", amount);
				OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpSelected[playerid], "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`");
				log_set_values("'%d','%e','%d','%e','(BM) Pakeite bendra ginklu limita tiekejui','%d'", LogPlayerId(playerid), LogPlayerName(playerid), dealerid, GetNameBySql(dealerid), amount);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 3, "");
		}
		case DIALOG_AM_BM_DEALER_DRUG_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new string[126];
						mysql_format(chandler, string, sizeof string, "SELECT DrugId FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC", tmpArray[playerid][tmpSelected[playerid]]);
						mysql_tquery(chandler, string, "DealerDrugsList", "d", playerid);
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_MAX_DRUGS, DIALOG_STYLE_INPUT, "Ginklø ir narkotikø tiekëjai", "{FFFFFF}Áveskite maksimalø narkotikø skaièiø, kurá tiekëjas gali pasirinkti\nuþsakymo metu (maks. "#MAX_DRUGS_PER_ORDER")", "Tæsti", "Atðaukti");
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_AM_BM_DEALER_EDIT_MAX_DRUGS:
		{
			if(response)
			{
				new amount,
					dealerid = tmpArray[playerid][tmpSelected[playerid]];
				if(sscanf(inputtext,"d",amount) || amount > MAX_DRUGS_PER_ORDER || amount < 0) return OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_DRUG_MAIN, 1, 1, "");
				new string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `dealers_data` SET MaxDrugs = '%d' WHERE PlayerId = '%d'", amount, dealerid);
				mysql_fquery(chandler, string, "DealerSaved");
				MsgSuccess(playerid, "JUODOJI RINKA", "Narkotikø limitas pakeistas á %dvnt.", amount);
				OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpSelected[playerid], "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`");
				log_set_values("'%d','%e','%d','%e','(BM) Pakeite bendra narkotiku limita tiekejui','%d'", LogPlayerId(playerid), LogPlayerName(playerid), dealerid, GetNameBySql(dealerid), amount);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_DEALER_EDIT_MAIN, 1, 3, "");
		}
		case DIALOG_AM_BM_DEALER_HOUSES_ALL:
		{
			OnDialogResponse(playerid, DIALOG_AM_BM_DEALERS_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_DM_VEHICLES_BUY_ALL:
		{
			if(response)
			{
				new string[126],
					price, model;
				if(PlayerInfo[playerid][pDealer] != 2) format(string, sizeof string, "WHERE DealerType = '%d' ", PlayerInfo[playerid][pDealer]);
				mysql_format(chandler, string, sizeof string, "SELECT * FROM `sell_vehicles_dealers` %sLIMIT 1 OFFSET %d", string, listitem);
				new Cache:result = mysql_query(chandler, string, true);
				if(cache_num_rows())
				{
					cache_get_value_name_int(0, "Model", model);
					cache_get_value_name_int(0, "Price", price);
					cache_delete(result);
					if(GetPlayerMoney(playerid) < price)
					{
						pc_cmd_dealermenu(playerid, "");
						return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, price);
					}
					else
					{
						BuyVehicle(playerid, model, GetModelName(model), price, random(56), random(56), 0, -1, 0, 1, DEFAULT_ANY_SALON_X, DEFAULT_ANY_SALON_Y, DEFAULT_ANY_SALON_Z, DEFAULT_ANY_SALON_A);
						GivePlayerMoney(playerid, -price);
					}
				}
				if(cache_is_valid(result)) cache_delete(result);
				pc_cmd_dealermenu(playerid, "");
			}
			else pc_cmd_dealermenu(playerid, "");
		}
		case DIALOG_DM_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// konspiraciniai dealerio namai
						ShowPlayerDialog(playerid, DIALOG_DM_HOUSES_MAIN, DIALOG_STYLE_LIST, "Konspiraciniai namai", "Turimi namai\nNamo pirkimas", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// ginklai arba nark
						if(PlayerInfo[playerid][pDealer] == 0 || PlayerInfo[playerid][pDealer] == 2)
						{
							// ginklai
							ShowPlayerDialog(playerid, DIALOG_DM_GUNS_MAIN, DIALOG_STYLE_LIST, "Ginklai", "Daryti naujà uþsakymà\nAtðaukti uþsakymà", "Tæsti", "Atðaukti");
						}
					}
					case 2:
					{
						if(PlayerInfo[playerid][pDealer] == 1 || PlayerInfo[playerid][pDealer] == 2)
						{
							// nark
							ShowPlayerDialog(playerid, DIALOG_DM_DRUGS_MAIN, DIALOG_STYLE_LIST, "Narkotikai", "Daryti naujà uþsakymà\nAtðaukti uþsakymà", "Tæsti", "Atðaukti");
						}
					}
					case 3:
					{
						new string[126];
						if(PlayerInfo[playerid][pDealer] != 2) format(string, sizeof string, "WHERE DealerType = '%d'", PlayerInfo[playerid][pDealer]);
						mysql_format(chandler, string, sizeof string, "SELECT * FROM `sell_vehicles_dealers` %s", string);
						mysql_tquery(chandler, string, "DealerBuyableVehicles", "d", playerid);
					}
				}
			}
		}
		case DIALOG_DM_DRUGS_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// uzsakyti
						if(GetDealerDrugOrder(playerid) != -1)
						{
							SendWarning(playerid, "Jûs jau esate padaræs uþsakymà.");
							return OnDialogResponse(playerid, DIALOG_DM_MAIN, 1, 2, "");
						}
						else
						{
							new string[86];
							mysql_format(chandler, string, sizeof string, "SELECT MaxDrugs FROM `dealers_data` WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
							new Cache:result = mysql_query(chandler, string, true);
							cache_get_value_name_int(0, "MaxDrugs", tmpPassword[playerid][0]);
							cache_delete(result);
							mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC", PlayerInfo[playerid][pId]);
							mysql_tquery(chandler, string, "DealerDrugsOrderList", "ddd", playerid, -1, tmpPassword[playerid][0]);
						}
					}
					case 1:
					{
						if(GetDealerDrugOrder(playerid) != -1)
						{
							new string[126];
							mysql_format(chandler, string, sizeof string, "UPDATE `dealers_drugs_orders` SET Valid = '0' WHERE Valid = '1' AND PlayerId = '%d'", PlayerInfo[playerid][pId]);
							mysql_fquery(chandler, string, "DealerSaved");
							OnDialogResponse(playerid, DIALOG_DM_MAIN, 1, 2, "");
							MsgInfo(playerid, "JUODOJI RINKA", "Atsakymas atðauktas.");
						}
						else
						{
							SendWarning(playerid, "Nesate padaræs uþsakymø.");
							return OnDialogResponse(playerid, DIALOG_DM_MAIN, 1, 2, "");
						}
					}
				}
			}
		}
		case DIALOG_DM_GUNS_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// uzsakyti
						if(GetDealerGunOrder(playerid) != -1)
						{
							SendWarning(playerid, "Jûs jau esate padaræs uþsakymà.");
							return OnDialogResponse(playerid, DIALOG_DM_MAIN, 1, 1, "");
						}
						else
						{
							new string[86];
							mysql_format(chandler, string, sizeof string, "SELECT MaxWeapons FROM `dealers_data` WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
							new Cache:result = mysql_query(chandler, string, true);
							cache_get_value_name_int(0, "MaxWeapons", tmpPassword[playerid][0]);
							cache_delete(result);
							mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC", PlayerInfo[playerid][pId]);
							mysql_tquery(chandler, string, "DealerGunsOrderList", "ddd", playerid, -1, tmpPassword[playerid][0]);
						}
					}
					case 1:
					{
						if(GetDealerGunOrder(playerid) != -1)
						{
							// atsaukti
							new string[126];
							mysql_format(chandler, string, sizeof string, "UPDATE `dealers_guns_orders` SET Valid = '0' WHERE Valid = '1' AND PlayerId = '%d'", PlayerInfo[playerid][pId]);
							mysql_fquery(chandler, string, "DealerSaved");
							OnDialogResponse(playerid, DIALOG_DM_MAIN, 1, 1, "");
							MsgInfo(playerid, "JUODOJI RINKA", "Atsakymas atðauktas.");
							log_init(true);
							log_set_table("logs_dealers");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`");
							log_set_values("'%d','%e','(DM) Atsauke siunta'", LogPlayerId(playerid), LogPlayerName(playerid));
							log_commit();
						}
						else
						{
							SendWarning(playerid, "Nesate padaræs uþsakymø.");
							return OnDialogResponse(playerid, DIALOG_DM_MAIN, 1, 1, "");
						}
					}
				}
			}
		}
		case DIALOG_DM_GUNS_SELECT_DELIVERY:
		{
			if(response)
			{
				if(listitem == tmpTexture_MarkStart_CP[playerid])
				{
					// random CP pasirenkam
					new Cache:result,
						string[126],
						Float:x, Float:y, Float:z;
					mysql_format(chandler, string, sizeof string, "SELECT `X`,`Y`,`Z` FROM `dealers_guns_spawns` WHERE PlayerId = '%d' ORDER BY RAND() LIMIT 1", PlayerInfo[playerid][pId]);
					result = mysql_query(chandler, string, true);
					if(cache_num_rows())
					{
						cache_get_value_name_float(0, "X", x);
						cache_get_value_name_float(0, "Y", y);
						cache_get_value_name_float(0, "Z", z);
						SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_GUN_ORDER, x, y, z, 4.0);
					}
					else
					{
						SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_GUN_ORDER, DEFAULT_GUN_ORDER_SPOT, 4.0);
					}
					SendFormat(playerid, 0xD4E980FF, "Siuntos paëmimo koordinatës paþymëtos þemëlapyje.");
					SendFormat(playerid, 0xD4E980FF, "Prieð imdami siuntà ásitikinkite, kad bagaþinëje yra pakankamai vietos.");
					cache_delete(result);
				}
				else
				{
					// kazkur kitur pristatyti
					new selected,
						player_sql = PlayerInfo[playerid][pId];
					GetSortedAsForeach(DealerHouse, listitem, selected, (DealerHouseInfo[loopindex][dealerHouseOwner] == player_sql && (DealerHouseInfo[loopindex][dealerHouseType] == 0 || DealerHouseInfo[loopindex][dealerHouseType] == 2)));

					if(SendWeaponsOrderTo(playerid, INVENTORY_TYPE_DEALER_HOUSE, selected))
					{
						SendFormat(playerid, 0xD4E980FF, "Siunta pristatyta á pasirinktà konspiraciná namà (%d).", DealerHouseInfo[selected][dealerHouseId]);
						SaveDealerHouseInventory(selected);
					}
					else SendError(playerid, "Konspiraciniame name tiek ginklø netelpa arba atsirado kita klaida.");
				}
			}
		}
		case DIALOG_DM_DRUGS_SELECT_DELIVERY:
		{
			if(response)
			{
				if(listitem == tmpTexture_MarkStart_CP[playerid])
				{
					// random CP pasirenkam
					new Cache:result,
						string[126],
						Float:x, Float:y, Float:z;
					mysql_format(chandler, string, sizeof string, "SELECT `X`,`Y`,`Z` FROM `dealers_drugs_spawns` WHERE PlayerId = '%d' ORDER BY RAND() LIMIT 1", PlayerInfo[playerid][pId]);
					result = mysql_query(chandler, string, true);
					if(cache_num_rows())
					{
						cache_get_value_name_float(0, "X", x);
						cache_get_value_name_float(0, "Y", y);
						cache_get_value_name_float(0, "Z", z);
						SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_DRUG_ORDER, x, y, z, 4.0);
					}
					else
					{
						SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_DRUG_ORDER, DEFAULT_DRUGS_ORDER_SPOT, 4.0);
					}
					SendFormat(playerid, 0xD4E980FF, "Siuntos paëmimo koordinatës paþymëtos þemëlapyje.");
					SendFormat(playerid, 0xD4E980FF, "Prieð imdami siuntà ásitikinkite, kad bagaþinëje yra pakankamai vietos.");
					cache_delete(result);
				}
				else
				{
					// kazkur kitur pristatyti
					new selected,
						player_sql = PlayerInfo[playerid][pId];
					GetSortedAsForeach(DealerHouse, listitem, selected, (DealerHouseInfo[loopindex][dealerHouseOwner] == player_sql && (DealerHouseInfo[loopindex][dealerHouseType] == 1 || DealerHouseInfo[loopindex][dealerHouseType] == 2)));

					if(SendDrugsOrderTo(playerid, INVENTORY_TYPE_DEALER_HOUSE, selected))
					{
						SendFormat(playerid, 0xD4E980FF, "Siunta pristatyta á pasirinktà konspiraciná namà (%d).", DealerHouseInfo[selected][dealerHouseId]);
						SaveDealerHouseInventory(selected);
					}
					else SendError(playerid, "Konspiraciniame name tiek narkotikø netelpa arba atsirado kita klaida.");
				}
			}
		}
		case DIALOG_DM_GUNS_ORDER_LIST:
		{
			if(response)
			{
				if(listitem >= tmpTexture_MarkStart_CP[playerid])
				{
					// uzsakyti
					if(listitem == tmpTexture_MarkStart_CP[playerid])
					{
						// isvalom
						new string[86];
						mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC", PlayerInfo[playerid][pId]);
						mysql_tquery(chandler, string, "DealerGunsOrderList", "ddd", playerid, -1, tmpPassword[playerid][0]);
					}
					else
					{
						new 
							string[256],
							Cache:result,
							final_weapon_list[MAX_WEAPONS_PER_ORDER],
							final_price,
							temp_weaponid,
							temp_price,
							array_slot,
							bool:break_outer;

						for(new weaponid = 0; weaponid < 46; weaponid++) // jei jam butu visi sudeti
						{
							if(break_outer) { break; }
							new 
								amount_of_this = tmpArray[playerid][weaponid];
							if(amount_of_this > 0)
							{
								mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC LIMIT 1 OFFSET %d", PlayerInfo[playerid][pId], weaponid);
								result = mysql_query(chandler, string, true);
								if(cache_num_rows())
								{
									cache_get_value_name_int(0, "WeaponId", temp_weaponid);
									cache_get_value_name_int(0, "WeaponPrice", temp_price);
									for(new every_of_this = 0; every_of_this < amount_of_this; every_of_this++)
									{
										final_weapon_list[array_slot] = temp_weaponid;
										array_slot++;
										if(array_slot >= MAX_WEAPONS_PER_ORDER)
										{
											SendFormat(playerid, -1, "%d Array slot!", array_slot);
											break_outer = true;
											break;
										}
									}
									final_price += temp_price * amount_of_this;
								}
								cache_delete(result);
							}
						}
						if(GetPlayerMoney(playerid) < final_price)
						{
							InfoBox(playerid, IB_NOT_ENOUGH_MONEY, final_price);
							return OnDialogResponse(playerid, DIALOG_DM_GUNS_ORDER_LIST, 1, tmpTexture_MarkStart_CP[playerid], "");
						}
						else
						{
							if(final_weapon_list[0] <= 0) return SendWarning(playerid, "Nepasirinkote ginklø.");
							SendFormat(playerid, 0xBABABAFF, "Jûsø uþsakymas kainavo $%d, atðaukus uþsakymà pinigø neatgausite.", final_price);
							GivePlayerMoney(playerid, -final_price);
							format(string, 2, "");
							for(new i = 0; i < MAX_WEAPONS_PER_ORDER; i++)
							{
								format(string, sizeof string, "%s%d|", string, final_weapon_list[i]);
							}
							SendFormat(playerid, -1, string);
							mysql_format(chandler, string, sizeof string, "INSERT INTO `dealers_guns_orders` (`PlayerId`,`Valid`,`Packed`,`HoursLeft`,`Price`) VALUES ('%d','1','%e','6','%d')", PlayerInfo[playerid][pId], string, final_price);
							mysql_fquery(chandler, string, "DealerSaved");
							pc_cmd_dealermenu(playerid, "");
						}
						// uzsakyti
						/*new string[256],
							real_itter,
							total_price,
							tmp_weaponid,
							data_weaponid[MAX_WEAPONS_PER_ORDER],
							bool:anyweapons = false,
							bool:break_loop = false,
							data_price;
						for(new i = 0; i < 46; i++) // per visus galimus
						{
							if(break_loop) { break; }
							new how_much_of_this_kind = tmpArray[playerid][i];
							if(how_much_of_this_kind > 0) // sita ginkla daugiau nei 1 ima
							{
								mysql_format(chandler, string, 128, "SELECT * FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC LIMIT 1 OFFSET %d", PlayerInfo[playerid][pId], i);
								new Cache:result = mysql_query(chandler, string, true);
								cache_get_value_name_int(0, "WeaponId", tmp_weaponid);
								cache_get_value_name_int(0, "WeaponPrice", data_price);
								cache_delete(result);
								for(new x = 0; x < how_much_of_this_kind; x++)
								{
									data_weaponid[real_itter] = tmp_weaponid;
									real_itter++;
									anyweapons = true;
									if(real_itter >= MAX_WEAPONS_PER_ORDER)
									{
										break_loop = true;
										break;
									}
								}
								total_price += data_price*how_much_of_this_kind;
							}
						}
						if(GetPlayerMoney(playerid) < total_price)
						{
							InfoBox(playerid, IB_NOT_ENOUGH_MONEY);
							return OnDialogResponse(playerid, DIALOG_DM_GUNS_ORDER_LIST, 1, tmpTexture_MarkStart_CP[playerid], "");
						}
						else
						{
							if(!anyweapons) return SendWarning(playerid, "Nepasirinkote ginklø.");
							SendFormat(playerid, 0xBABABAFF, "Jûsø uþsakymas kainavo $%d, atðaukus uþsakymà pinigø neatgausite.", total_price);
							GivePlayerMoney(playerid, -total_price);

							format(string, 2, "");
							for(new i = 0; i < MAX_WEAPONS_PER_ORDER; i++)
							{
								format(string, sizeof string, "%s%d|", string, data_weaponid[i]);
							}
							SendFormat(playerid, -1, string);
							mysql_format(chandler, string, sizeof string, "INSERT INTO `dealers_guns_orders` (`PlayerId`,`Valid`,`Packed`,`HoursLeft`,`Price`) VALUES ('%d','1','%e','6','%d')", PlayerInfo[playerid][pId], string, total_price);
							mysql_fquery(chandler, string, "DealerSaved");
							pc_cmd_dealermenu(playerid, "");
						}*/
					}
				}
				else
				{
					new string[86];
					mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_guns_lists` WHERE PlayerId = '%d' ORDER BY WeaponId ASC", PlayerInfo[playerid][pId]);
					mysql_tquery(chandler, string, "DealerGunsOrderList", "ddd", playerid, listitem, tmpPassword[playerid][0]);
				}
			}
			else OnDialogResponse(playerid, DIALOG_DM_MAIN, 1, 1, "");
		}
		case DIALOG_DM_DRUGS_ORDER_LIST:
		{
			if(response)
			{
				if(listitem >= tmpTexture_MarkStart_CP[playerid])
				{
					// uzsakyti
					if(listitem == tmpTexture_MarkStart_CP[playerid])
					{
						// isvalom
						new string[86];
						mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC", PlayerInfo[playerid][pId]);
						mysql_tquery(chandler, string, "DealerDrugsOrderList", "ddd", playerid, -1, tmpPassword[playerid][0]);
					}
					else
					{
						for(new drug = 0; drug < MAX_DRUGS_PER_ORDER; drug++)
						{
							
						}

						// uzsakyti
						/*new string[256],
							total_price,
							real_itter,
							price,
							drugid[MAX_DRUGS_PER_ORDER],
							drugamount[MAX_DRUGS_PER_ORDER],
							bool:break_loop = false,
							bool:anydrugs = false;
						for(new i = 0; i < MAX_DRUGS_PER_ORDER; i++)
						{
							if(break_loop) { break; }
							new how_much_of_this_kind = tmpArray[playerid][i];
							if(how_much_of_this_kind > 0)
							{
								mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC LIMIT 1 OFFSET %d", PlayerInfo[playerid][pId], i);
								new Cache:result = mysql_query(chandler, string, true);
								cache_get_value_name_int(0, "DrugId", drugid[real_itter]);
								cache_get_value_name_int(0, "DrugPrice", price);
								cache_delete(result);
								drugamount[real_itter] = how_much_of_this_kind;
								total_price += how_much_of_this_kind*price;
								real_itter++;
								anydrugs = true;
								if(real_itter >= MAX_DRUGS_PER_ORDER)
								{
									break_loop = true;
								}
							}
						}
						if(GetPlayerMoney(playerid) < total_price)
						{
							InfoBox(playerid, IB_NOT_ENOUGH_MONEY);
							return OnDialogResponse(playerid, DIALOG_DM_DRUGS_ORDER_LIST, 1, tmpTexture_MarkStart_CP[playerid], "");
						}
						else
						{
							if(!anydrugs) return SendWarning(playerid, "Nepasirinkote narkotikø.");
							SendFormat(playerid, 0xBABABAFF, "Jûsø uþsakymas kainavo $%d, atðaukus uþsakymà pinigø neatgausite.", total_price);
							GivePlayerMoney(playerid, -total_price);
							format(string, 2, "");
							for(new i = 0; i < MAX_DRUGS_PER_ORDER; i++)
							{
								format(string, sizeof string, "%s%d|%d|", string, drugid[i], drugamount[i]);
							}
							SendFormat(playerid, -1, string);
							mysql_format(chandler, string, sizeof string, "INSERT INTO `dealers_drugs_orders` (`PlayerId`,`Valid`,`Packed`,`HoursLeft`,`Price`) VALUES ('%d','1','%e','6','%d')", PlayerInfo[playerid][pId], string, total_price);
							mysql_fquery(chandler, string, "DealerSaved");
							pc_cmd_dealermenu(playerid, "");
						}*/
					}
				}
				else
				{
					new string[86];
					mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_drugs_lists` WHERE PlayerId = '%d' ORDER BY DrugId ASC", PlayerInfo[playerid][pId]);
					mysql_tquery(chandler, string, "DealerDrugsOrderList", "ddd", playerid, listitem, tmpPassword[playerid][0]);
				}
			}
			else OnDialogResponse(playerid, DIALOG_DM_MAIN, 1, 2, "");
		}
		case DIALOG_DM_HOUSES_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// turimi
						new string[512] = "{BABABA}Nr. (MySQL ID)\t{BABABA}Tipas\t{BABABA}Vieta\n",
							id,
							line[86];
						foreach(new houseid : DealerHouse)
						{
							if(DealerHouseInfo[houseid][dealerHouseOwner] == PlayerInfo[playerid][pId] && DealerHouseInfo[houseid][dealerHouseId] != 0)
							{
								id++;
								GetCoords2DZone(line, 28, DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY]);
								format(line, sizeof line, "%d. (%d)\t%s\t%s\t%s\n", id, DealerHouseInfo[houseid][dealerHouseId], DealerHouseInfo[houseid][dealerHouseType] == 0 ? ("Guns") : (DealerHouseInfo[houseid][dealerHouseType] == 1 ? ("Drugs") : ("Guns & drugs")), line);
								strcat(string, line);
							}
						}
						ShowPlayerDialog(playerid, DIALOG_DM_HOUSES_OWNED_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Konspiraciniai namai", string, "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// pirkimas
						new string[512] = "{BABABA}Nr.\t{BABABA}Vieta\t{BABABA}Kaina\t{BABABA}Tipas\n",
							playerDealerType = PlayerInfo[playerid][pDealer],
							real_itter,
							line[86];
						foreach(new houseid : DealerHouse)
						{
							if(DealerHouseInfo[houseid][dealerHouseOwner] == 0 && (DealerHouseInfo[houseid][dealerHouseType] == playerDealerType || playerDealerType == 2 || DealerHouseInfo[houseid][dealerHouseType] == 2))
							{
								real_itter++;
								GetCoords2DZone(line, 28, DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY]);
								format(line, sizeof line, "%d.\t%s\t$%d\t%s\n", real_itter, line, DealerHouseInfo[houseid][dealerHousePrice], DealerHouseInfo[houseid][dealerHouseType] == 0 ? ("Guns") : (DealerHouseInfo[houseid][dealerHouseType] == 1 ? ("Drugs") : ("Guns & drugs")));
								strcat(string, line);
							}
						}
						ShowPlayerDialog(playerid, DIALOG_DM_HOUSES_BUY_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Konspiraciniai namai", string, "Tæsti", "Atðaukti");
					}
				}
			}
		}
		case DIALOG_DM_HOUSES_BUY_ALL:
		{
			if(response)
			{
				new selected,
					dealer_type = PlayerInfo[playerid][pDealer],
					house_type,
					string[256];
				GetSortedAsForeach(DealerHouse, listitem, selected, (DealerHouseInfo[loopindex][dealerHouseOwner] == 0 && (DealerHouseInfo[loopindex][dealerHouseType] == dealer_type || dealer_type == 2 || DealerHouseInfo[loopindex][dealerHouseType] == 2)));
				// veikia
				tmpSelected[playerid] = selected;
				GetCoords2DZone(string, 28, DealerHouseInfo[selected][dealerHouseEnterX], DealerHouseInfo[selected][dealerHouseEnterY]);
				house_type = DealerHouseInfo[selected][dealerHouseType];
				format(string, sizeof string, "{BABABA}Namo vieta: {CDFF7C}%s\n{BABABA}Namo kaina: {CDFF7C}$%d\n{BABABA}Namas skirtas: {CDFF7C}%s\n\n{BABABA}Ar norite já paþymëti þemëlapyje? Já nusipirkti galësite vietoje.", string, DealerHouseInfo[selected][dealerHousePrice], (house_type == 0 ? ("ginklams") : (house_type == 1 ? ("narkotikams") : ("ginklams ir narkotikams"))) );
				ShowPlayerDialog(playerid, DIALOG_DM_HOUSES_BUY, DIALOG_STYLE_MSGBOX, "Konspiraciniai namai", string, "Paþymëti", "Atðaukti");
			}
		}
		case DIALOG_DM_HOUSES_BUY:
		{
			if(response)
			{
				new selected = tmpSelected[playerid];
				SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_DEALER_HOUSE_BUY, DealerHouseInfo[selected][dealerHouseEnterX], DealerHouseInfo[selected][dealerHouseEnterY], DealerHouseInfo[selected][dealerHouseEnterZ], 2.3, selected);
				SendFormat(playerid, 0xBABABAFF, "Namas paþymëtas þemëlapyje.");
			}
			else pc_cmd_dealermenu(playerid, "");
		}
		case DIALOG_DM_HOUSES_OWNED_ALL:
		{
			if(response)
			{
				new selected;
				GetSortedAsForeach(DealerHouse, listitem, selected, DealerHouseInfo[loopindex][dealerHouseOwner] == PlayerInfo[playerid][pId]);
				tmpIter[playerid] = selected;
				ShowPlayerDialog(playerid, DIALOG_DM_HOUSES_OWNED_EDIT_MAIN, DIALOG_STYLE_LIST, "Konspiraciniai namai", "Nustatyti namo vietà þemëlapyje\n{C60000}Parduoti namà", "Tæsti", "Atðaukti");
			}
		}
		case DIALOG_DM_HOUSES_OWNED_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// rasti
						if(Checkpoint[playerid] <= 0)
						{
							new selected = tmpIter[playerid];
							SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_DEALER_HOUSE, DealerHouseInfo[selected][dealerHouseEnterX], DealerHouseInfo[selected][dealerHouseEnterY], DealerHouseInfo[selected][dealerHouseEnterZ], 2.3, selected);
							SendFormat(playerid, 0xB8EBB7FF, "Namo koordinatës paþymëtos.");
						}
					}
					case 1:
					{
						// parduoti
						new selected = tmpIter[playerid],
							string[126];
						mysql_format(chandler, string, sizeof string, "UPDATE `dealers_houses_data` SET Owner = '0' WHERE id = '%d'", DealerHouseInfo[selected][dealerHouseId]);
						mysql_fquery(chandler, string, "DealerSaved");
						GivePlayerMoney(playerid, DealerHouseInfo[selected][dealerHousePrice]/2);
						SendFormat(playerid, 0x79DF75FF, "Sëkmingai pardavëte namà.");
						log_init(true);
						log_set_table("logs_dealer_houses");
						log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`Amount`");
						log_set_values("'%d','%e','%d','Pardave nama','%d'", LogPlayerId(playerid), LogPlayerName(playerid), DealerHouseInfo[selected][dealerHouseId], DealerHouseInfo[selected][dealerHousePrice]/2);
						log_commit();
						reset(House, DealerHouseInfo[selected], E_DEALER_HOUSE_DATA);
						Iter_Remove(DealerHouse, selected);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_DM_HOUSES_MAIN, 1, 0, "");
		}
		case DIALOG_AM_BM_HOUSES_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// visus
						if(HaveAdminPermission(playerid, "EditDealerHouses"))
						{
							new string[2048] = "{BABABA}Nr. (MySQL ID)\t{BABABA}Savininkas\t{BABABA}Vieta\t{BABABA}Tipas\n",
								line[156],
								real_itter;
							foreach(new houseid : DealerHouse)
							{
								real_itter++;
								GetCoords2DZone(line, 28, DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY]);
								format(line, sizeof line, "%d. %d\t%s\t%s\t%s\n", real_itter, DealerHouseInfo[houseid][dealerHouseId], (DealerHouseInfo[houseid][dealerHouseOwner] > 0 ? (GetNameBySql(DealerHouseInfo[houseid][dealerHouseOwner])) : ("joks")), line, DealerHouseInfo[houseid][dealerHouseType] == 0 ? ("Guns") : (DealerHouseInfo[houseid][dealerHouseType] == 1 ? ("Drugs") : ("Guns & drugs")));
								strcat(string, line);
							}
							ShowPlayerDialog(playerid, DIALOG_AM_BM_HOUSES_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Konspiraciniai namai", string, "Tæsti", "Atðaukti");
						}
						else return InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						// prideti
						if(HaveAdminPermission(playerid, "CreateNewDealerHouse"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_BM_HOUSE_ADD, DIALOG_STYLE_TABLIST_HEADERS, "Konspiraciniai namai", "{BABABA}Pasirinkite namo tipà:\n{FFFFFF}Ginklø tiekëjui\nNarkotikø tiekëjui\nGinklø ir narkotikø tiekëjui", "Tæsti", "Atðaukti");
						}
						else return InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 15, "");
		}
		case DIALOG_AM_BM_HOUSES_ALL:
		{
			if(response)
			{
				new selected;
				GetSortedAsForeach(DealerHouse, listitem, selected, EMPTY_STATEMENT);
				tmpIter[playerid] = selected;
				new string[256];
				format(string, sizeof string, "{BABABA}Nustatymas\t{BABABA}Dabartinë reikðmë\nKaina\t$%d\nSavininkas\t%s\nTipas\t%s\nKeisti áëjimo vietà\nKeisti iðëjimo vietà\nTeleportuotis prie áëjimo\nTeleportuotis prie iðëjimo\n{C60000}Iðtrinti namà", DealerHouseInfo[selected][dealerHousePrice], GetNameBySql(DealerHouseInfo[selected][dealerHouseOwner]), DealerHouseInfo[selected][dealerHouseType] == 0 ? ("Guns") : (DealerHouseInfo[selected][dealerHouseType] == 1 ? ("Drugs") : ("Guns & drugs")));
				ShowPlayerDialog(playerid, DIALOG_AM_BM_HOUSE_EDIT_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "Konspiracinio namo redagavimas", string, "Tæsti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 15, "");
		}
		case DIALOG_AM_BM_HOUSE_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// kaina
						if(HaveAdminPermission(playerid, "EditDealerHousePrice"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_BM_HOUSE_EDIT_PRICE, DIALOG_STYLE_INPUT, "Konspiracinio namo redagavimas", "{FFFFFF}Áveskite naujà namo kainà:", "Tæsti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						// savininkas
						if(HaveAdminPermission(playerid, "EditDealerHouseOwner"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_BM_HOUSE_EDIT_OWNER, DIALOG_STYLE_INPUT, "Konspiracinio namo redagavimas", "{FFFFFF}Áveskite naujà namo savininko MySQL numerá arba pilnà vardà.\n{BABABA}Norëdami savininkà paðalinti, áraðykite 0", "Tæsti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 2:
					{
						// tipas
						if(HaveAdminPermission(playerid, "EditDealerHouseType"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_BM_HOUSE_EDIT_TYPE, DIALOG_STYLE_LIST, "Konspiracinio namo redagavimas", "Ginklø tiekëjo\nNarkotikø tiekëjo\nGinklø ir narkotikø tiekëjo", "Tæsti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 3:
					{
						// iejimas
						if(HaveAdminPermission(playerid, "ChangeDealerHouseEnter"))
						{
							new selected = tmpIter[playerid];
							MsgSuccess(playerid, "KONSPIRACINIAI NAMAI", "Sëkmingai pakeista áëjimo vieta.");
							new Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							DealerHouseInfo[selected][dealerHouseExterior] = GetPlayerInterior(playerid),
							DealerHouseInfo[selected][dealerHouseOutVW] = GetPlayerVirtualWorld(playerid),
							DealerHouseInfo[selected][dealerHouseEnterX] = x,
							DealerHouseInfo[selected][dealerHouseEnterY] = y,
							DealerHouseInfo[selected][dealerHouseEnterZ] = z;
							new string[186];
							mysql_format(chandler, string, sizeof string, "UPDATE `dealers_houses_data` SET EnterX = '%f', EnterY = '%f', EnterZ = '%f', Exterior = '%d', OutVW = '%d' WHERE id = '%d'", x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), DealerHouseInfo[selected][dealerHouseId]);
							mysql_fquery(chandler, string, "DealerHouseUpdated");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 4:
					{
						// isejimas
						if(HaveAdminPermission(playerid, "ChangeDealerHouseExit"))
						{
							new selected = tmpIter[playerid];
							MsgSuccess(playerid, "KONSPIRACINIAI NAMAI", "Sëkmingai pakeista iðëjimo vieta.");
							new Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							DealerHouseInfo[selected][dealerHouseInterior] = GetPlayerInterior(playerid),
							DealerHouseInfo[selected][dealerHouseExitX] = x,
							DealerHouseInfo[selected][dealerHouseExitY] = y,
							DealerHouseInfo[selected][dealerHouseExitZ] = z;
							new string[186];
							mysql_format(chandler, string, sizeof string, "UPDATE `dealers_houses_data` SET ExitX = '%f', ExitY = '%f', ExitZ = '%f', Interior = '%d' WHERE id = '%d'", x, y, z, GetPlayerInterior(playerid), DealerHouseInfo[selected][dealerHouseId]);
							mysql_fquery(chandler, string, "DealerHouseUpdated");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 5:
					{
						// teleport prie iejimo
						if(HaveAdminPermission(playerid, "ChangeDealerHouseEnter"))
						{
							new selected = tmpIter[playerid];
							SetPlayerPos(playerid, DealerHouseInfo[selected][dealerHouseEnterX], DealerHouseInfo[selected][dealerHouseEnterY], DealerHouseInfo[selected][dealerHouseEnterZ]);
							SetPlayerVirtualWorld(playerid, DealerHouseInfo[selected][dealerHouseOutVW]);
							SetPlayerInterior(playerid, DealerHouseInfo[selected][dealerHouseExterior]);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 6:
					{
						// teleport prie isejimo
						if(HaveAdminPermission(playerid, "ChangeDealerHouseExit"))
						{
							new selected = tmpIter[playerid];
							SetPlayerPos(playerid, DealerHouseInfo[selected][dealerHouseExitX], DealerHouseInfo[selected][dealerHouseExitY], DealerHouseInfo[selected][dealerHouseExitZ]);
							SetPlayerVirtualWorld(playerid, DealerHouseInfo[selected][dealerHouseVW]);
							SetPlayerInterior(playerid, DealerHouseInfo[selected][dealerHouseInterior]);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 7:
					{
						// istrinti
						if(HaveAdminPermission(playerid, "EditDealerHouses"))
						{
							new 
								selected = tmpIter[playerid],
								string[126];
							MsgSuccess(playerid, "KONSPIRACINIAI NAMAI", "Namas iðtrintas.");
							mysql_format(chandler, string, sizeof string, "DELETE FROM `dealers_houses_data` WHERE id = '%d'", DealerHouseInfo[selected][dealerHouseId]);
							mysql_fquery(chandler, string, "DealerHouseUpdated");
							reset(DealerHouse, DealerHouseInfo[selected], E_DEALER_HOUSE_DATA);
							Iter_Remove(DealerHouse, selected);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_HOUSES_MAIN, 1, 0, "");
		}
		case DIALOG_AM_BM_HOUSE_EDIT_PRICE:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount) || amount < 0) return SendError(playerid, "Blogai ávestas skaièius.") , OnDialogResponse(playerid, DIALOG_AM_BM_HOUSE_EDIT_MAIN, 1, 1, "");
				if(0 < amount)
				{
					DealerHouseInfo[tmpIter[playerid]][dealerHousePrice] = amount;
					MsgSuccess(playerid, "KONSPIRACINIAI NAMAI", "Pakeitëte namo kainà á $%d", amount);
					new string[126];
					mysql_format(chandler, string, sizeof string, "UPDATE `dealers_houses_data` SET Price = '%d' WHERE id = '%d'", amount, DealerHouseInfo[tmpIter[playerid]][dealerHouseId]);
					mysql_fquery(chandler, string, "DealerHouseUpdated");
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
					log_set_values("'%d','%e','(BM) Pakeite konsp. namo kaina','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), DealerHouseInfo[tmpIter[playerid]][dealerHouseId], amount);
					log_commit();
				}
			}
		}
		case DIALOG_AM_BM_HOUSE_EDIT_OWNER:
		{
			if(response)
			{
				if(!strlen(inputtext)) return SendError(playerid, "Blogai ávestas ID arba vardas.") , OnDialogResponse(playerid, DIALOG_AM_BM_HOUSE_EDIT_MAIN, 1, 1, "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ActionText`,`ExtraId`");
				if(IsNumeric(inputtext))
				{
					if(strval(inputtext) == 0)
					{
						new string[126];
						DealerHouseInfo[tmpIter[playerid]][dealerHouseOwner] = 0;
						mysql_format(chandler, string, sizeof string, "UPDATE `dealers_houses_data` SET Owner = '0' WHERE id = '%d'", DealerHouseInfo[tmpIter[playerid]][dealerHouseId]);
						mysql_fquery(chandler, string, "DealerHouseUpdated");
						MsgSuccess(playerid, "KONSPIRACINIAI NAMAI", "Paðalinote namo savininkà.");
						OnDialogResponse(playerid, DIALOG_AM_BM_HOUSES_MAIN, 1, 0, "");
					}
					else
					{
						new string[126];
						mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `players_data` WHERE id = '%d'", strval(inputtext));
						new Cache:result = mysql_query(chandler, string, true);
						cache_set_active(result);
						if(cache_num_rows())
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `dealers_houses_data` SET Owner = '%d' WHERE id = '%d'", strval(inputtext), DealerHouseInfo[tmpIter[playerid]][dealerHouseId]);
							mysql_fquery(chandler, string, "DealerHouseUpdated");
							DealerHouseInfo[tmpIter[playerid]][dealerHouseOwner] = strval(inputtext);
							MsgSuccess(playerid, "KONSPIRACINIAI NAMAI", "Pakeitëte namo savininkà.");
							log_set_values("'%d','%e','%d','(BM) Pakeite konsp. namo savininka','%d'", LogPlayerId(playerid), LogPlayerName(playerid), strval(inputtext), DealerHouseInfo[tmpIter[playerid]][dealerHouseId]);
						}
						else
						{
							SendError(playerid, "Þaidëjas tokiu ID (%d) duomenø bazëje nerastas.", strval(inputtext));
						}
						cache_delete(result);
					}
				}
				else
				{
					new string[126];
					mysql_format(chandler, string, sizeof string, "SELECT id FROM `players_data` WHERE Name = '%e'", inputtext);
					new Cache:result = mysql_query(chandler, string, true);
					cache_set_active(result);
					if(cache_num_rows())
					{
						new id;
						cache_get_value_name_int(0, "id", id);
						mysql_format(chandler, string, sizeof string, "UPDATE `dealers_houses_data` SET Owner = '%d' WHERE id = '%d'", id, DealerHouseInfo[tmpIter[playerid]][dealerHouseId]);
						mysql_fquery(chandler, string, "DealerHouseUpdated");
						DealerHouseInfo[tmpIter[playerid]][dealerHouseOwner] = id;
						MsgSuccess(playerid, "KONSPIRACINIAI NAMAI", "Pakeitëte namo savininkà.");
						log_set_values("'%d','%e','%d','(BM) Pakeite konsp. namo savininka','%d'", LogPlayerId(playerid), LogPlayerName(playerid), id, DealerHouseInfo[tmpIter[playerid]][dealerHouseId]);
					}
					else
					{
						SendError(playerid, "Þaidëjas tokiu vardu (%s) duomenø bazëje nerastas.", inputtext);
					}
					cache_delete(result);
				}
				log_commit();
				OnDialogResponse(playerid, DIALOG_AM_BM_HOUSES_MAIN, 1, 0, "");
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_HOUSES_MAIN, 1, 0, "");
		}
		case DIALOG_AM_BM_HOUSE_EDIT_TYPE:
		{
			if(response)
			{
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_HOUSES_MAIN, 1, 0, "");
		}
		case DIALOG_AM_BM_HOUSE_ADD:
		{
			if(response)
			{
				// 0 - guns
				// 1 - drugs
				// 2 - all
				new itter = Iter_Free(DealerHouse),
					Float:x, Float:y, Float:z,
					int = GetPlayerInterior(playerid),
					vw = GetPlayerVirtualWorld(playerid),
					string[256];
				if(int != 0 || vw != 0)
				{
					SendWarning(playerid, "Jûs nesate lauke (interior: %d, world: %d), todël sukurto namo bus neámanoma parodyti þemëlapyje.", int, vw);
				}
				GetPlayerPos(playerid, x, y, z);
				mysql_format(chandler, string, sizeof string, "INSERT INTO `dealers_houses_data` (`EnterX`,`EnterY`,`EnterZ`,`OutVW`,`Exterior`,`Added`,`Date`,`Type`) VALUES ('%f','%f','%f','%d','%d','%d',now(),'%d')", x, y, z, vw, int, PlayerInfo[playerid][pId], listitem);
				new Cache:result = mysql_query(chandler, string, true);
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
				if(mysql_errno() == 0)
				{
					DealerHouseInfo[itter][dealerHouseId] = cache_insert_id();
					DealerHouseInfo[itter][dealerHouseEnterX] = x,
					DealerHouseInfo[itter][dealerHouseEnterY] = y,
					DealerHouseInfo[itter][dealerHouseEnterZ] = z,
					DealerHouseInfo[itter][dealerHouseExterior] = int,
					DealerHouseInfo[itter][dealerHouseType] = listitem,
					DealerHouseInfo[itter][dealerHouseOutVW] = vw;
					Iter_Add(DealerHouse, itter);
					MsgSuccess(playerid, "JUODOJI RINKA", "Namas sëkmingai pridëtas.");
					log_set_values("'%d','%e','(BM) Sukure konsp. nama','%d'", LogPlayerId(playerid), LogPlayerName(playerid), DealerHouseInfo[itter][dealerHouseId]);
				}
				else
				{
					SendError(playerid, "Siøsta uþklausa nepavyko [%d]", mysql_errno());
				}
				if(cache_is_valid(result)) cache_delete(result);
				log_commit();
				ShowPlayerAdminMenu(playerid);
			}
			else OnDialogResponse(playerid, DIALOG_AM_BM_MAIN, 1, 0, "");
		}

		
		case DIALOG_AM_GARAGE_EDIT_PRICE:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount) || amount < 0) return SendError(playerid, "Blogai ávestas skaièius.") , OnDialogResponse(playerid, DIALOG_AM_GARAGE_EDIT_MAIN, 1, 0, "");
				if(0 < amount)
				{
					GarageInfo[tmpSelected[playerid]][gPrice] = amount;
					MsgSuccess(playerid, "GARAÞAS", "Pakeitëte garaþo kainà á $%d", amount);
					new string[126];
					mysql_format(chandler, string, sizeof string, "UPDATE `garages_data` SET Price = '%d' WHERE id = '%d'", amount, GarageInfo[tmpSelected[playerid]][gId]);
					mysql_fquery(chandler, string, "GarageUpdated");
					FixGarageLabels(tmpSelected[playerid]);
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
					log_set_values("'%d','%e','(AM) Pakeite garazo kaina','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[tmpSelected[playerid]][gId]);
					log_commit();
				}
			}
		}
		case DIALOG_AM_GARAGE_EDIT_OWNER:
		{
			if(response)
			{
				if(!strlen(inputtext)) return SendError(playerid, "Blogai ávestas ID arba vardas.") , OnDialogResponse(playerid, DIALOG_AM_GARAGE_EDIT_MAIN, 1, 1, "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
				if(IsNumeric(inputtext))
				{
					if(strval(inputtext) == 0)
					{
						new string[126];
						GarageInfo[tmpSelected[playerid]][gOwner] = 0;
						mysql_format(chandler, string, sizeof string, "UPDATE `garages_data` SET Owner = '0' WHERE id = '%d'", GarageInfo[tmpSelected[playerid]][gId]);
						mysql_fquery(chandler, string, "GarageUpdated");
						MsgSuccess(playerid, "GARAÞAS", "Paðalinote garaþo savininkà.");
						OnDialogResponse(playerid, DIALOG_AM_GARAGES_MAIN, 1, 1, "");
						FixGarageLabels(tmpSelected[playerid]);
					}
					else
					{
						new string[126];
						mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `players_data` WHERE id = '%d'", strval(inputtext));
						new Cache:result = mysql_query(chandler, string, true);
						cache_set_active(result);
						if(cache_num_rows() || strval(inputtext) == 0)
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `garages_data` SET Owner = '%d' WHERE id = '%d'", strval(inputtext), GarageInfo[tmpSelected[playerid]][gId]);
							mysql_fquery(chandler, string, "GarageUpdated");
							GarageInfo[tmpSelected[playerid]][gOwner] = strval(inputtext);
							MsgSuccess(playerid, "GARAÞAS", "Pakeitëte garaþo savininkà.");
							OnDialogResponse(playerid, DIALOG_AM_GARAGES_MAIN, 1, 1, "");
							FixGarageLabels(tmpSelected[playerid]);
							log_set_values("'%d','%e','(AM) Pakeite garazo savininka','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[tmpSelected[playerid]][gId], strval(inputtext));
						}
						else
						{
							SendError(playerid, "Þaidëjas tokiu ID (%d) duomenø bazëje nerastas.", strval(inputtext));
						}
						cache_delete(result);
					}
				}
				else
				{
					new string[126];
					mysql_format(chandler, string, sizeof string, "SELECT id FROM `players_data` WHERE Name = '%e'", inputtext);
					new Cache:result = mysql_query(chandler, string, true);
					cache_set_active(result);
					if(cache_num_rows())
					{
						new id;
						cache_get_value_name_int(0, "id", id);
						mysql_format(chandler, string, sizeof string, "UPDATE `garages_data` SET Owner = '%d' WHERE id = '%d'", id, GarageInfo[tmpSelected[playerid]][gId]);
						mysql_fquery(chandler, string, "GarageUpdated");
						GarageInfo[tmpSelected[playerid]][gOwner] = id;
						MsgSuccess(playerid, "GARAÞAS", "Pakeitëte garaþo savininkà.");
						OnDialogResponse(playerid, DIALOG_AM_GARAGES_MAIN, 1, 1, "");
						FixGarageLabels(tmpSelected[playerid]);
						log_set_values("'%d','%e','(AM) Pakeite garazo savininka','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[tmpSelected[playerid]][gId], id);
					}
					else
					{
						SendError(playerid, "Þaidëjas tokiu vardu (%s) duomenø bazëje nerastas.", inputtext);
					}
					cache_delete(result);
				}
				log_commit();
				OnDialogResponse(playerid, DIALOG_AM_GARAGES_MAIN, 1, 1, "");
			}
			ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_GARAGE_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(HaveAdminPermission(playerid, "EditGaragePrice"))
						{
							// kaina
							ShowPlayerDialog(playerid, DIALOG_AM_GARAGE_EDIT_PRICE, DIALOG_STYLE_INPUT, "Garaþo redagavimas", "{FFFFFF}Áveskite naujà garaþo kainà.", "Keisti", "Atðaukti");
						}
					}
					case 1:
					{
						if(HaveAdminPermission(playerid, "EditGarageOwner"))
						{
							// savininkas
							ShowPlayerDialog(playerid, DIALOG_AM_GARAGE_EDIT_OWNER, DIALOG_STYLE_INPUT, "Garaþo redagavimas", "{FFFFFF}Áveskite naujà garaþo savininko MySQL numerá arba pilnà vardà.\n{BABABA}Norëdami savininkà paðalinti, áraðykite 0", "Keisti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);

					}
					case 2:
					{
						if(HaveAdminPermission(playerid, "ChangeGarageEnter"))
						{
							// keisti iejimo vieta
							new selected = tmpSelected[playerid];
							MsgSuccess(playerid, "GARAÞAS", "Sëkmingai pakeista áëjimo vieta.");
							new Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							GarageInfo[selected][gOutVW] = GetPlayerVirtualWorld(playerid),
							GarageInfo[selected][gExterior] = GetPlayerInterior(playerid),
							GarageInfo[selected][gEnterX] = x,
							GarageInfo[selected][gEnterY] = y,
							GarageInfo[selected][gEnterZ] = z;
							FixGarageLabels(selected);
							new string[186];
							mysql_format(chandler, string, sizeof string, "UPDATE `garages_data` SET EnterX = '%f', EnterY = '%f', EnterZ = '%f', OutVW = '%d', Exterior = '%d' WHERE id = '%d'", x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), GarageInfo[selected][gId]);
							mysql_fquery(chandler, string, "GarageUpdated");
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Pakeite garazo iejimo vieta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[selected][gId]);
							log_commit();
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 3:
					{
						if(HaveAdminPermission(playerid, "ChangeGarageExit"))
						{
							// keisti isejimo vieta
							new selected = tmpSelected[playerid];
							MsgSuccess(playerid, "GARAÞAS", "Sëkmingai pakeista iðëjimo vieta.");
							new Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							GarageInfo[selected][gInterior] = GetPlayerInterior(playerid),
							GarageInfo[selected][gExitX] = x,
							GarageInfo[selected][gExitY] = y,
							GarageInfo[selected][gExitZ] = z;
							FixGarageLabels(selected);
							new string[186];
							mysql_format(chandler, string, sizeof string, "UPDATE `garages_data` SET ExitX = '%f', ExitY = '%f', ExitZ = '%f', Interior = '%d' WHERE id = '%d'", x, y, z, GetPlayerInterior(playerid), GarageInfo[selected][gId]);
							mysql_fquery(chandler, string, "GarageUpdated");
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Pakeite garazo isejimo vieta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[selected][gId]);
							log_commit();
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 4:
					{
						if(HaveAdminPermission(playerid, "ChangeGarageEnter"))
						{
							// keisti masinos isvaziavus lauke
							new selected = tmpSelected[playerid];
							if(GetPlayerInterior(playerid) != GarageInfo[selected][gExterior])
							{
								MsgError(playerid, "GARAÞAS", "Nesate tame paèiame interjere, kuriame yra áëjimas á garaþà.");
								return 1;
							}
							MsgSuccess(playerid, "GARAÞAS", "Tr. priemonë iðvaþiuojant ið garaþo á laukà atsiras jûsø nustatytoje vietoje.");
							new Float:x, Float:y, Float:z, Float:a, string[156];
							GetPlayerPos(playerid, x, y, z),
							GetPlayerFacingAngle(playerid, a);
							GarageInfo[selected][gCarEnterX] = x,
							GarageInfo[selected][gCarEnterY] = y,
							GarageInfo[selected][gCarEnterZ] = z,
							GarageInfo[selected][gCarEnterA] = a;
							mysql_format(chandler, string, sizeof string, "UPDATE `garages_data` SET CarEnterX = '%f', CarEnterY = '%f', CarEnterZ = '%f', CarEnterA = '%f' WHERE id = '%d'", x, y, z, a, GarageInfo[selected][gId]);
							mysql_fquery(chandler, string, "GarageUpdated");
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Pakeite garazo lauko vieta masinai','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[selected][gId]);
							log_commit();
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 5:
					{
						if(HaveAdminPermission(playerid, "ChangeGarageExit"))
						{
							// keisti masinos ivaziavus is lauko
							new selected = tmpSelected[playerid];
							if(GetPlayerInterior(playerid) != GarageInfo[selected][gInterior])
							{
								MsgError(playerid, "GARAÞAS", "Nesate tame paèiame interjere, kuriame yra iðëjimas ið garaþo.");
								return 1;
							}
							MsgSuccess(playerid, "GARAÞAS", "Tr. priemonë ávaþiuojant á garaþà ið lauko atsiras jûsø nustatytoje vietoje.");
							new Float:x, Float:y, Float:z, Float:a, string[156];
							GetPlayerPos(playerid, x, y, z);
							GetPlayerFacingAngle(playerid, a);
							GarageInfo[selected][gCarExitX] = x,
							GarageInfo[selected][gCarExitY] = y,
							GarageInfo[selected][gCarExitZ] = z,
							GarageInfo[selected][gCarExitA] = a;
							mysql_format(chandler, string, sizeof string, "UPDATE `garages_data` SET CarExitX = '%f', CarExitY = '%f', CarExitZ = '%f', CarExitA = '%f' WHERE id = '%d'", x, y, z, a, GarageInfo[selected][gId]);
							mysql_fquery(chandler, string, "GarageUpdated");
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Pakeite garazo vidaus vieta masinai','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[selected][gId]);
							log_commit();
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 6:
					{
						if(HaveAdminPermission(playerid, "DeleteGarageFurniture"))
						{
							// isvalyti furniture
							new selected = tmpSelected[playerid],
								count_deleted,
								last_itter = -1,
								string[86],
								__reset_GFurniture[E_GARAGE_FURNITURE_DATA];

							foreach(new furnitureid : GFurniture)
							{
								if(gFurnitureInfo[furnitureid][gfOwner] == GarageInfo[selected][gId])
								{
									if(IsValidDynamicObject(gFurnitureInfo[furnitureid][gfObject])) DestroyDynamicObject(gFurnitureInfo[furnitureid][gfObject], "furniture", "admin_delete_garage_furniture");
									gFurnitureInfo[furnitureid] = __reset_GFurniture;
									gFurnitureInfo[furnitureid][gfObject] = INVALID_OBJECT_ID;
									if(last_itter != -1 && last_itter != furnitureid)
									{
										Iter_Remove(GFurniture, last_itter);
										count_deleted++;
									}
									last_itter = furnitureid;
								}
							}
							if(last_itter != -1) Iter_Remove(GFurniture, last_itter);
							mysql_format(chandler, string, sizeof string, "DELETE FROM `garages_furniture` WHERE GarageId = '%d'", GarageInfo[selected][gId]);
							mysql_fquery(chandler, string, "FurnitureDeleted");
							MsgSuccess(playerid, "GARAÞAS", "Sëkmingai iðtrynëte %d garaþo baldø.", count_deleted);
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
							log_set_values("'%d','%e','(AM) Isvale garazo furniture','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[selected][gId], count_deleted);
							log_commit();
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 7:
					{
						if(HaveAdminPermission(playerid, "ChangeGarageEnter"))
						{
							// teleport i lauka
							new selected = tmpSelected[playerid];
							SetPlayerPos(playerid, GarageInfo[selected][gEnterX], GarageInfo[selected][gEnterY], GarageInfo[selected][gEnterZ]);
							SetPlayerInterior(playerid, GarageInfo[selected][gExterior]);
							SetPlayerVirtualWorld(playerid, GarageInfo[selected][gOutVW]);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 8:
					{
						if(HaveAdminPermission(playerid, "ChangeGarageExit"))
						{
							// teleport i vidu
							new selected = tmpSelected[playerid];
							SetPlayerPos(playerid, GarageInfo[selected][gExitX], GarageInfo[selected][gExitY], GarageInfo[selected][gExitZ]);
							SetPlayerInterior(playerid, GarageInfo[selected][gInterior]);
							SetPlayerVirtualWorld(playerid, GarageInfo[selected][gVW]);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 9:
					{
						if(HaveAdminPermission(playerid, "DeleteGarage"))
						{
							// istrinti
							new selected = tmpSelected[playerid],
								string[156],
								__reset_Garage[E_GARAGE_DATA],
								__reset_GFurniture[E_GARAGE_FURNITURE_DATA],
								last_itter = -1;
							// istrinam ir furniture
							foreach(new furnitureid : GFurniture)
							{
								if(gFurnitureInfo[furnitureid][gfOwner] == GarageInfo[selected][gOwner])
								{
									if(IsValidDynamicObject(gFurnitureInfo[furnitureid][gfObject])) DestroyDynamicObject(gFurnitureInfo[furnitureid][gfObject], "furniture", "admin_delete_garage");
									gFurnitureInfo[furnitureid] = __reset_GFurniture;
									gFurnitureInfo[furnitureid][gfObject] = INVALID_OBJECT_ID;
									if(last_itter != -1 && last_itter != furnitureid)
									{
										Iter_Remove(GFurniture, last_itter);
									}
									last_itter = furnitureid;
								}
							}
							if(last_itter != -1) Iter_Remove(GFurniture, last_itter);
							if(IsValidDynamic3DTextLabel(GarageInfo[selected][gLabel])) DestroyDynamic3DTextLabel(GarageInfo[selected][gLabel]);
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Istryne garaza','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[selected][gId]);
							log_commit();
							mysql_format(chandler, string, sizeof string, "DELETE FROM `garages_data` WHERE id = '%d'; DELETE FROM `garages_furniture` WHERE GarageId = '%d'", GarageInfo[selected][gId], GarageInfo[selected][gId]);
							mysql_fquery(chandler, string, "GarageDeleted");
							GarageInfo[selected] = __reset_Garage;
							GarageInfo[selected][gLabel] = INVALID_3DTEXT_ID;
							Iter_Remove(Garage, selected);
							MsgSuccess(playerid, "GARAÞAS", "Sëkmingai iðtrynëte garaþà.");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_GARAGES_MAIN, 1, 1, "");
		}
		case DIALOG_AM_GARAGES_ALL:
		{
			if(response)
			{
				if(HaveAdminPermission(playerid, "EditGarages"))
				{
					new selected;
					GetSortedAsForeach(Garage, listitem, selected, GarageInfo[loopindex][gId] != 0);
					/*new array[MAX_GARAGES], real_itter;
					foreach(new garage : Garage) if(GarageInfo[garage][gId] != 0) array[real_itter] = garage, real_itter++;
					new selected = tmpSelected[playerid] = array[listitem];*/
					tmpSelected[playerid] = selected;
					new string[356];
					format(string, sizeof string, "{BABABA}Nustatymas\t{BABABA}Dabartinë reikðmë\nKaina\t$%d\nSavininkas\t%s\nKeisti áëjimo vietà\nKeisti iðëjimo vietà\nVieta, kur atsiranda tr. priemonë iðvaþiavus\nVieta, kur atsiranda tr. priemonë ávaþiavus\nIðvalyti baldus\nTeleportuotis á garaþo laukà\nTeleportuotis á garaþo vidø\n{C60000}Iðtrinti", GarageInfo[selected][gPrice], GetNameBySql(GarageInfo[selected][gOwner]));
					ShowPlayerDialog(playerid, DIALOG_AM_GARAGE_EDIT_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "Garaþo redagavimas", string, "Tæsti", "Atðaukti");
				}
				else InfoBox(playerid, IB_NO_PRIVILEGE);
			}
			else
			{
				OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 3, "");
			}
		}
		case DIALOG_AM_GARAGES_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(HaveAdminPermission(playerid, "CreateNewGarage"))
						{
							// kurti nauja garaza
							new __reset_Garage[E_GARAGE_DATA],
								string[256],
								Float:x,
								Float:y,
								Float:z,
								garage = Iter_Free(Garage),
								int = GetPlayerInterior(playerid),
								vw = GetPlayerVirtualWorld(playerid);
							GetPlayerPos(playerid, x, y, z);
							mysql_format(chandler, string, sizeof string, "INSERT INTO `garages_data` (`Added`,`EnterX`,`EnterY`,`EnterZ`,`CarEnterX`,`CarEnterY`,`CarEnterZ`,`Exterior`,`OutVW`) VALUES ('%d','%f','%f','%f','%f','%f','%f','%d','%d')", PlayerInfo[playerid][pId], x, y, z, x, y, z, int, vw);
							new Cache:result = mysql_query(chandler, string, true);
							if(mysql_errno() == 0)
							{
								if(int != 0 || vw != 0)
								{
									SendWarning(playerid, "Jûs nesate lauke (interior: %d, world: %d), todël sukurto namo bus neámanoma parodyti þemëlapyje.", int, vw);
								}
								cache_set_active(result);
								GarageInfo[garage] = __reset_Garage;
								GarageInfo[garage][gId] = cache_insert_id();
								GarageInfo[garage][gOutVW] = vw;
								GarageInfo[garage][gExterior] = int;
								GarageInfo[garage][gEnterX] = x,
								GarageInfo[garage][gEnterY] = y,
								GarageInfo[garage][gEnterZ] = z,
								GarageInfo[garage][gCarEnterX] = x,
								GarageInfo[garage][gCarEnterY] = y,
								GarageInfo[garage][gCarEnterZ] = z;
								GarageInfo[garage][gVW] = GarageInfo[garage][gId]+GARAGE_VIRTUAL_WORLD;
								Iter_Add(Garage, garage);
								MsgSuccess(playerid, "SERVERIS", "Sëkmingai sukûrëte garaþà, kurio ID: %d", GarageInfo[garage][gId]);
								FixGarageLabels(garage);
								log_init(true);
								log_set_table("logs_admins");
								log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
								log_set_values("'%d','%e','(AM) Sukure nauja garaza','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[garage][gId]);
								log_commit();
							}
							else
							{
								SendError(playerid, "Siøsta uþklausa nepavyko [%d]", mysql_errno());
							}
							if(cache_is_valid(result)) cache_delete(result);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						// perziureti visus garazus visi garazai
						new string[2048] = "Nr.\tMySQL ID (numeris)\tSavininkas\n",
							real_itter,
							name[24],
							line[86];
						foreach(new garage : Garage)
						{
							if(GarageInfo[garage][gId] != 0)
							{
								if(GarageInfo[garage][gOwner] == 0) format(name, 10, "joks");
								else format(name, sizeof name, GetNameBySql(GarageInfo[garage][gOwner]));
								real_itter++;
								format(line, sizeof line, "%d.\t%d\t%.19s%s\n", real_itter, GarageInfo[garage][gId], name);
								strcat(string, line);
							}
						}
						if(real_itter == 0) return ShowPlayerAdminMenu(playerid) , SendWarning(playerid, "Nëra garaþø.");
						ShowPlayerDialog(playerid, DIALOG_AM_GARAGES_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Garaþai", string, "Tæsti", "Atðaukti");
					}
				}
			}
			else ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_HOUSE_INV_ITEM:
		{
			if(response)
			{
				new item,
					selected = tmpSelected[playerid],
					slot = tmpIter[playerid];
				if(sscanf(inputtext,"d",item)) return OnDialogResponse(playerid, DIALOG_AM_HOUSE_INV_EDIT, 1, 0, "");
				if(!IsHouseInventorySlotClear(selected, slot))
				{
					HouseInventory[selected][slot][invAmount] = 1;
				}
				HouseInventory[selected][slot][invId] = item;
				MsgSuccess(playerid, "NAMAS", "Daikto ID pakeistas.");
				SaveHouseInventory(selected);
				OnDialogResponse(playerid, DIALOG_AM_HOUSE_INV, 1, selected, "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ReceiverId`,`ExtraString`");
				log_set_values("'%d','%e','(AM) Pakeite namo inventoriaus daikta','%d','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[selected][hId], slot, GetInventoryItemName(item));
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_HOUSE_INV, 1, tmpIter[playerid], "");
		}
		case DIALOG_AM_HOUSE_INV_AMOUNT:
		{
			if(response)
			{
				new amount,
					selected = tmpSelected[playerid],
					slot = tmpIter[playerid];
				if(sscanf(inputtext,"d",amount)) return OnDialogResponse(playerid, DIALOG_AM_HOUSE_INV_EDIT, 1, 1, "");
				if(!IsHouseInventorySlotClear(selected, slot))
				{
					OnDialogResponse(playerid, DIALOG_AM_HOUSE_INV, 1, slot, "");
					MsgError(playerid, "NAMAS", "Slot tuðèias.");
					return 1;
				}
				HouseInventory[selected][slot][invAmount] = amount;
				MsgSuccess(playerid, "NAMAS", "Daikto kiekis pakeistas.");
				SaveHouseInventory(selected);
				ShowPlayerAdminMenu(playerid);
				OnDialogResponse(playerid, DIALOG_AM_HOUSE_INV, 1, selected, "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ReceiverId`,`ExtraString`,`Amount`");
				log_set_values("'%d','%e','(AM) Pakeite namo inventoriaus kieki','%d','%d','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[selected][hId], slot, GetInventoryItemName(HouseInventory[selected][slot][invId]), amount);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_HOUSE_INV, 1, tmpIter[playerid], "");
		}
		case DIALOG_AM_HOUSE_INV_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOG_AM_HOUSE_INV_ITEM, DIALOG_STYLE_INPUT, "Namo inventorius", "{FFFFFF}Áveskite naujà daikto ID.", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_AM_HOUSE_INV_AMOUNT, DIALOG_STYLE_INPUT, "Namo inventorius", "{FFFFFF}Áveskite naujà daikto kieká.", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// ismesti
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`,`ExtraString`");
						log_set_values("'%d','%e','(AM) Istryne namo inventoriaus daikta','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpSelected[playerid]][hId], tmpIter[playerid], GetInventoryItemName(HouseInventory[tmpSelected[playerid]][tmpIter[playerid]][invId]));
						log_commit();
						ClearHouseInventorySlot(tmpSelected[playerid], tmpIter[playerid]);
						MsgSuccess(playerid, "NAMAS", "Iðtrynëte daiktà ið %d sloto.", tmpIter[playerid]+1);
						SaveHouseInventory(tmpSelected[playerid]);
						ShowPlayerAdminMenu(playerid);
					}
				}
			}
			//else ShowHouseInventory(playerid, tmpSelected[playerid], true);
		}
		case DIALOG_AM_HOUSE_INV:
		{
			if(response)
			{
				if(HaveAdminPermission(playerid, "EditHouseInventory"))
				{
					tmpIter[playerid] = listitem;
					ShowPlayerDialog(playerid, DIALOG_AM_HOUSE_INV_EDIT, DIALOG_STYLE_LIST, "Namo inventorius", "Keisti daiktà\nKeisti kieká\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
				}
				else return InfoBox(playerid, IB_NO_PRIVILEGE);
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 4, "");
		}
		case DIALOG_AM_HOUSE_EDIT_PRICE:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount) || amount < 0) return SendError(playerid, "Blogai ávestas skaièius.") , OnDialogResponse(playerid, DIALOG_AM_HOUSE_EDIT_MAIN, 1, 0, "");
				if(0 < amount)
				{
					HouseInfo[tmpSelected[playerid]][hPrice] = amount;
					MsgSuccess(playerid, "NAMAS", "Pakeitëte namo kainà á $%d", amount);
					new string[126];
					mysql_format(chandler, string, sizeof string, "UPDATE `houses_data` SET Price = '%d' WHERE id = '%d'", amount, HouseInfo[tmpSelected[playerid]][hId]);
					mysql_fquery(chandler, string, "HouseUpdated");
					House_FixLabels(tmpSelected[playerid], GetGVarInt("EnabledHouseLabels"));
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
					log_set_values("'%d','%e','(AM) Pakeite namo kaina','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), amount);
					log_commit();
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_HOUSES_MAIN, 1, 4, "");
		}
		case DIALOG_AM_HOUSE_EDIT_OWNER:
		{
			if(response)
			{
				if(!strlen(inputtext)) return SendError(playerid, "Blogai ávestas ID arba vardas.") , OnDialogResponse(playerid, DIALOG_AM_HOUSE_EDIT_MAIN, 1, 1, "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
				if(IsNumeric(inputtext))
				{
					if(strval(inputtext) == 0)
					{
						new string[126];
						HouseInfo[tmpSelected[playerid]][hOwner] = 0;
						mysql_format(chandler, string, sizeof string, "UPDATE `houses_data` SET Owner = '0' WHERE id = '%d'", HouseInfo[tmpSelected[playerid]][hId]);
						mysql_fquery(chandler, string, "HouseUpdated");
						MsgSuccess(playerid, "NAMAS", "Paðalinote namo savininkà.");
						OnDialogResponse(playerid, DIALOG_AM_HOUSES_MAIN, 1, 1, "");
						House_FixLabels(tmpSelected[playerid], GetGVarInt("EnabledHouseLabels"));
						
						
						House_CreatePickup(tmpSelected[playerid]);
					}
					else
					{
						new string[126];
						mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `players_data` WHERE id = '%d'", strval(inputtext));
						new Cache:result = mysql_query(chandler, string, true);
						cache_set_active(result);
						if(cache_num_rows())
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `houses_data` SET Owner = '%d' WHERE id = '%d'", strval(inputtext), HouseInfo[tmpSelected[playerid]][hId]);
							mysql_fquery(chandler, string, "HouseUpdated");
							HouseInfo[tmpSelected[playerid]][hOwner] = strval(inputtext);
							MsgSuccess(playerid, "NAMAS", "Pakeitëte namo savininkà.");
							House_FixLabels(tmpSelected[playerid], GetGVarInt("EnabledHouseLabels"));
							
							House_CreatePickup(tmpSelected[playerid]);
							log_set_values("'%d','%e','(AM) Pakeite namo savininka','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpSelected[playerid]][hOwner], strval(inputtext));
						}
						else
						{
							SendError(playerid, "Þaidëjas tokiu ID (%d) duomenø bazëje nerastas.", strval(inputtext));
						}
						cache_delete(result);
					}
				}
				else
				{
					new string[126];
					mysql_format(chandler, string, sizeof string, "SELECT id FROM `players_data` WHERE Name = '%e'", inputtext);
					new Cache:result = mysql_query(chandler, string, true);
					cache_set_active(result);
					if(cache_num_rows())
					{
						new id;
						cache_get_value_name_int(0, "id", id);
						mysql_format(chandler, string, sizeof string, "UPDATE `houses_data` SET Owner = '%d' WHERE id = '%d'", id, HouseInfo[tmpSelected[playerid]][hId]);
						mysql_fquery(chandler, string, "HouseUpdated");
						HouseInfo[tmpSelected[playerid]][hOwner] = id;
						MsgSuccess(playerid, "NAMAS", "Pakeitëte namo savininkà.");
						House_FixLabels(tmpSelected[playerid], GetGVarInt("EnabledHouseLabels"));
						
						House_CreatePickup(tmpSelected[playerid]);
						log_set_values("'%d','%e','(AM) Pakeite namo savininka','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[tmpSelected[playerid]][hOwner], id);
					}
					else
					{
						SendError(playerid, "Þaidëjas tokiu vardu (%s) duomenø bazëje nerastas.", inputtext);
					}
					cache_delete(result);
				}
				log_commit();
				OnDialogResponse(playerid, DIALOG_AM_HOUSES_MAIN, 1, 1, "");
			}
			else ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_HOUSE_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// kaina
						if(HaveAdminPermission(playerid, "EditHousePrice"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_HOUSE_EDIT_PRICE, DIALOG_STYLE_INPUT, "Namo redagavimas", "{FFFFFF}Áveskite naujà namo kainà.", "Keisti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						// savininkas
						if(HaveAdminPermission(playerid, "EditHouseOwner"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_HOUSE_EDIT_OWNER, DIALOG_STYLE_INPUT, "Namo redagavimas", "{FFFFFF}Áveskite naujà namo savininko MySQL numerá arba pilnà vardà.\n{BABABA}Norëdami savininkà paðalinti, áraðykite 0", "Keisti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 2:
					{
						// keisti iejimo vieta
						if(HaveAdminPermission(playerid, "ChangeHouseEnter"))
						{
							new selected = tmpSelected[playerid];
							MsgSuccess(playerid, "NAMAS", "Sëkmingai pakeista áëjimo vieta.");
							new Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							HouseInfo[selected][hOutVW] = GetPlayerVirtualWorld(playerid),
							HouseInfo[selected][hExterior] = GetPlayerInterior(playerid),
							HouseInfo[selected][hEnterX] = x,
							HouseInfo[selected][hEnterY] = y,
							HouseInfo[selected][hEnterZ] = z;
							new string[186];
							mysql_format(chandler, string, sizeof string, "UPDATE `houses_data` SET EnterX = '%f', EnterY = '%f', EnterZ = '%f', OutVW = '%d', Exterior = '%d' WHERE id = '%d'", x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), HouseInfo[selected][hId]);
							mysql_fquery(chandler, string, "HouseUpdated");
							
							House_CreatePickup(selected);
							House_FixLabels(selected, GetGVarInt("EnabledHouseLabels"));

							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','Pakeite namo iejimo vieta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[selected][hId]);
							log_commit();
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 3:
					{
						// keisti isejimo vieta
						if(HaveAdminPermission(playerid, "ChangeHouseExit"))
						{
							new selected = tmpSelected[playerid];
							MsgSuccess(playerid, "NAMAS", "Sëkmingai pakeista iðëjimo vieta.");
							new Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							HouseInfo[selected][hInterior] = GetPlayerInterior(playerid),
							HouseInfo[selected][hExitX] = x,
							HouseInfo[selected][hExitY] = y,
							HouseInfo[selected][hExitZ] = z;
							new string[186];
							mysql_format(chandler, string, sizeof string, "UPDATE `houses_data` SET ExitX = '%f', ExitY = '%f', ExitZ = '%f', Interior = '%d' WHERE id = '%d'", x, y, z, GetPlayerInterior(playerid), HouseInfo[selected][hId]);
							mysql_fquery(chandler, string, "HouseUpdated");
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','Pakeite namo isejimo vieta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[selected][hId]);
							log_commit();
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 4:
					{
						if(HaveAdminPermission(playerid, "DeleteHouseFurniture"))
						{
							// furniture isvalymas
							new selected = tmpSelected[playerid],
								count_deleted,
								last_itter = -1,
								string[86],
								__reset_HFurniture[E_HOUSE_FURNITURE_DATA];

							foreach(new furnitureid : HFurniture)
							{
								if(hFurnitureInfo[furnitureid][hfOwner] == HouseInfo[selected][hId])
								{
									if(IsValidDynamicObject(hFurnitureInfo[furnitureid][hfObject])) DestroyDynamicObject(hFurnitureInfo[furnitureid][hfObject], "furniture", "admin_delete_house_furniture");
									hFurnitureInfo[furnitureid] = __reset_HFurniture;
									hFurnitureInfo[furnitureid][hfObject] = INVALID_OBJECT_ID;
									if(last_itter != -1 && last_itter != furnitureid)
									{
										Iter_Remove(HFurniture, last_itter);
										count_deleted++;
									}
									last_itter = furnitureid;
								}
							}
							mysql_format(chandler, string, sizeof string, "DELETE FROM `houses_furniture` WHERE HouseId = '%d'", HouseInfo[selected][hId]);
							mysql_tquery(chandler, string, "FurnitureDeleted");
							if(last_itter != -1) Iter_Remove(HFurniture, last_itter);
							MsgSuccess(playerid, "NAMAS", "Sëkmingai iðtrynëte %d namo baldø.", count_deleted);
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
							log_set_values("'%d','%e','Isvale namo furniture','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[selected][hId], count_deleted);
							log_commit();
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 5:
					{
						// tikrinti inventoriu
						if(HaveAdminPermission(playerid, "ViewHouseInventory"))
						{
							SendWarning(playerid, "Neveikia.");
							//ShowHouseInventory(playerid, tmpSelected[playerid], true);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 6:
					{
						// teleportuotis prie iejimo
						if(HaveAdminPermission(playerid, "ChangeHouseEnter"))
						{
							new selected = tmpSelected[playerid];
							SetPlayerInterior(playerid, HouseInfo[selected][hExterior]);
							SetPlayerVirtualWorld(playerid, HouseInfo[selected][hOutVW]);
							SetPlayerPos(playerid, HouseInfo[selected][hEnterX], HouseInfo[selected][hEnterY], HouseInfo[selected][hEnterZ]);
						}
					}
					case 7:
					{
						if(HaveAdminPermission(playerid, "ChangeHouseExit"))
						{
							// teleportuotis prie isejimo
							new selected = tmpSelected[playerid];
							SetPlayerInterior(playerid, HouseInfo[selected][hInterior]);
							SetPlayerVirtualWorld(playerid, HouseInfo[selected][hVW]);
							SetPlayerPos(playerid, HouseInfo[selected][hExitX], HouseInfo[selected][hExitY], HouseInfo[selected][hExitZ]);
						}
					}
					case 8:
					{
						if(HaveAdminPermission(playerid, "DeleteHouse"))
						{
							// istrinti
							new selected = tmpSelected[playerid],
								string[356],
								__reset_House[E_HOUSE_DATA],
								__reset_HFurniture[E_HOUSE_FURNITURE_DATA],
								last_itter = -1;
							// istrinam ir furniture
							foreach(new furnitureid : HFurniture)
							{
								if(hFurnitureInfo[furnitureid][hfOwner] == HouseInfo[selected][hOwner])
								{
									if(IsValidDynamicObject(hFurnitureInfo[furnitureid][hfObject])) DestroyDynamicObject(hFurnitureInfo[furnitureid][hfObject], "furniture", "admin_delete_house");
									hFurnitureInfo[furnitureid] = __reset_HFurniture;
									hFurnitureInfo[furnitureid][hfObject] = INVALID_OBJECT_ID;
									if(last_itter != -1 && last_itter != furnitureid)
									{
										Iter_Remove(HFurniture, last_itter);
									}
									last_itter = furnitureid;
								}
							}
							if(last_itter != -1) Iter_Remove(HFurniture, last_itter);
							
							if(IsValidDynamic3DTextLabel(HouseInfo[selected][hLabel])) DestroyDynamic3DTextLabel(HouseInfo[selected][hLabel]);
							sd_DestroyDynamicPickup(HouseInfo[selected][hPickup]);

							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Istryne nama','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[selected][hId]);
							log_commit();
							mysql_format(chandler, string, sizeof string, "DELETE FROM `houses_data` WHERE id = '%d'; DELETE FROM `houses_inventory` WHERE HouseId = '%d'; DELETE FROM `houses_furniture` WHERE HouseId = '%d'; DELETE FROM `houses_dubkeys` WHERE HouseId = '%d'", HouseInfo[selected][hId], HouseInfo[selected][hId], HouseInfo[selected][hId], HouseInfo[selected][hId]);
							mysql_fquery(chandler, string, "HouseDeleted");
							HouseInfo[selected] = __reset_House;
							HouseInfo[selected][hLabel] = INVALID_3DTEXT_ID;
							Iter_Remove(House, selected);
							MsgSuccess(playerid, "NAMAS", "Sëkmingai iðtrynëte namà.");
						}
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_HOUSES_MAIN, 1, 1, "");
		}
		case DIALOG_AM_HOUSES_ALL:
		{
			if(response)
			{
				if(tmpAmenuIter[playerid] != 0)
				{
					if(listitem == tmpAmenuIter[playerid] && tmpAmenuNextPage[playerid]) AM_ShowAllHouses(playerid, tmpAmenuCurPage[playerid] + 1); 
					else if(((listitem == tmpAmenuIter[playerid] && !tmpAmenuNextPage[playerid]) || (listitem == tmpAmenuIter[playerid] + 1 && tmpAmenuNextPage[playerid])) && tmpAmenuCurPage[playerid] > 0) AM_ShowAllHouses(playerid, tmpAmenuCurPage[playerid] - 1);
					else if(HaveAdminPermission(playerid, "EditHouses"))
					{
						new 
							real_iter,
							count_on_this_page;
						foreach(new houseid : House)
						{
							if(HouseInfo[houseid][hId] != 0)
							{
								if(real_iter >= MAX_HOUSES_PER_PAGE*tmpAmenuCurPage[playerid])
								{
									if(count_on_this_page == listitem)
									{
										new 
											string[256];
										format(string, sizeof string, "{BABABA}Nustatymas\t{BABABA}Dabartinë reikðmë\nKaina\t$%d\nSavininkas\t%s\nKeisti áëjimo vietà\nKeisti iðëjimo vietà\nIðvalyti baldus\nRedaguoti inventoriø\nTeleportuotis prie namo áëjimo\nTeleportuotis prie namo iðëjimo\n{C60000}Iðtrinti", HouseInfo[houseid][hPrice], GetNameBySql(HouseInfo[houseid][hOwner]));
										ShowPlayerDialog(playerid, DIALOG_AM_HOUSE_EDIT_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "Namo redagavimas", string, "Tæsti", "Atðaukti");
										tmpSelected[playerid] = houseid;
										return 1;
									}
									count_on_this_page ++ ;
								}
								real_iter ++ ;
							}
						}
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 4, "");
		}
		case DIALOG_AM_HOUSES_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// kurti nauja nama
						if(HaveAdminPermission(playerid, "CreateNewHouse"))
						{
							new __reset_House[E_HOUSE_DATA],
								string[256],
								Float:x,
								Float:y,
								Float:z,
								houseid = Iter_Free(House),
								int = GetPlayerInterior(playerid),
								vw = GetPlayerVirtualWorld(playerid);
							GetPlayerPos(playerid, x, y, z);
							mysql_format(chandler, string, sizeof string, "INSERT INTO `houses_data` (`Added`,`EnterX`,`EnterY`,`EnterZ`,`Exterior`,`OutVW`) VALUES ('%d','%f','%f','%f','%d','%d')", PlayerInfo[playerid][pId], x, y, z, int, vw);
							new Cache:result = mysql_query(chandler, string, true);
							if(mysql_errno() == 0)
							{
								if(int != 0 || vw != 0)
								{
									SendWarning(playerid, "Jûs nesate lauke (interior: %d, world: %d), todël sukurto namo bus neámanoma parodyti þemëlapyje.", int, vw);
								}
								cache_set_active(result);
								HouseInfo[houseid] = __reset_House;
								HouseInfo[houseid][hId] = cache_insert_id();
								HouseInfo[houseid][hOutVW] = vw;
								HouseInfo[houseid][hExterior] = int;
								HouseInfo[houseid][hEnterX] = x,
								HouseInfo[houseid][hEnterY] = y,
								HouseInfo[houseid][hEnterZ] = z;
								HouseInfo[houseid][hVW] = HouseInfo[houseid][hId]+HOUSE_VIRTUAL_WORLD;
								Iter_Add(House, houseid);
								MsgSuccess(playerid, "NAMAI", "Sëkmingai sukûrëte namà, kurio ID: %d", HouseInfo[houseid][hId]);

								House_FixLabels(houseid, GetGVarInt("EnabledHouseLabels"));
								House_CreatePickup(houseid);
							}
							else
							{
								SendError(playerid, "Siøsta uþklausa nepavyko [%d]", mysql_errno());
							}
							if(cache_is_valid(result)) cache_delete(result);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						// perziureti visus namus visi namai
						AM_ShowAllHouses(playerid, 0);
					}
				}
			}
			else ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_BUSINESS_INV_ITEM:
		{
			if(response)
			{
				new item,
					selected = tmpSelected[playerid],
					slot = tmpIter[playerid];
				if(sscanf(inputtext,"d",item)) return OnDialogResponse(playerid, DIALOG_AM_BUSINESS_INV_EDIT, 1, 0, "");
				if(!IsBusinessInventorySlotClear(selected, slot))
				{
					BusinessInventory[selected][slot][invAmount] = 1;
				}
				BusinessInventory[selected][slot][invId] = item;
				MsgSuccess(playerid, "VERSLAS", "Daikto ID pakeistas.");
				SaveBusinessInventory(selected);
				ShowPlayerAdminMenu(playerid);
				OnDialogResponse(playerid, DIALOG_AM_BUSINESS_INV, 1, selected, "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ReceiverId`,`ExtraString`");
				log_set_values("'%d','%e','(AM) Pakeite verslo inventoriaus daikta','%d','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[selected][bId], slot, GetInventoryItemName(item));
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_BUSINESS_INV, 1, tmpIter[playerid], "");
		}
		case DIALOG_AM_BUSINESS_INV_AMOUNT:
		{
			if(response)
			{
				new amount,
					selected = tmpSelected[playerid],
					slot = tmpIter[playerid];
				if(sscanf(inputtext,"d",amount)) return OnDialogResponse(playerid, DIALOG_AM_BUSINESS_INV_EDIT, 1, 1, "");
				if(!IsBusinessInventorySlotClear(selected, slot))
				{
					OnDialogResponse(playerid, DIALOG_AM_BUSINESS_INV, 1, slot, "");
					MsgError(playerid, "VERSLAS", "Slot tuðèias.");
					return 1;
				}
				BusinessInventory[selected][slot][invAmount] = amount;
				MsgSuccess(playerid, "VERSLAS", "Daikto kiekis pakeistas.");
				SaveBusinessInventory(selected);
				ShowPlayerAdminMenu(playerid);
				OnDialogResponse(playerid, DIALOG_AM_BUSINESS_INV, 1, selected, "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ReceiverId`,`ExtraString`,`Amount`");
				log_set_values("'%d','%e','(AM) Pakeite verslo inventoriaus kieki','%d','%d','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[selected][bId], slot, GetInventoryItemName(BusinessInventory[selected][slot][invId]), amount);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_BUSINESS_INV, 1, tmpIter[playerid], "");
		}
		case DIALOG_AM_BUSINESS_INV_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_INV_ITEM, DIALOG_STYLE_INPUT, "Verslo inventorius", "{FFFFFF}Áveskite naujà daikto ID.", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_INV_AMOUNT, DIALOG_STYLE_INPUT, "Verslo inventorius", "{FFFFFF}Áveskite naujà daikto kieká.", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// imesti
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`,`ExtraString`");
						log_set_values("'%d','%e','(AM) Istryne verslo inventoriaus daikta','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[tmpSelected[playerid]][bId], tmpIter[playerid], GetInventoryItemName(BusinessInventory[tmpSelected[playerid]][tmpIter[playerid]][invId]));
						log_commit();
						ClearBusinessInventorySlot(tmpSelected[playerid], tmpIter[playerid]);
						MsgSuccess(playerid, "VERSLAS", "Iðtrynëte daiktà ið %d sloto.", tmpIter[playerid]+1);
						SaveBusinessInventory(tmpSelected[playerid]);
						ShowPlayerAdminMenu(playerid);
					}
				}
			}
			//else ShowHouseInventory(playerid, tmpSelected[playerid], true);
		}
		case DIALOG_AM_BUSINESS_INV:
		{
			if(response)
			{
				if(HaveAdminPermission(playerid, "EditBusinessInventory"))
				{
					tmpIter[playerid] = listitem;
					ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_INV_EDIT, DIALOG_STYLE_LIST, "Verslo inventorius", "Keisti daiktà\nKeisti kieká\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
				}
				else return InfoBox(playerid, IB_NO_PRIVILEGE);
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 4, "");
		}
		case DIALOG_AM_BUSINESS_EDIT_PRICE:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount) || amount < 0) return SendError(playerid, "Blogai ávestas skaièius.") , OnDialogResponse(playerid, DIALOG_AM_BUSINESS_EDIT_MAIN, 1, 1, "");
				if(0 < amount)
				{
					BusinessInfo[tmpSelected[playerid]][bPrice] = amount;
					MsgSuccess(playerid, "VERSLAS", "Pakeitëte verslo kainà á $%d", amount);
					new string[126];
					mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET Price = '%d' WHERE id = '%d'", amount, BusinessInfo[tmpSelected[playerid]][bId]);
					mysql_fquery(chandler, string, "BusinessUpdated");
					Business_FixLabels(tmpSelected[playerid], GetGVarInt("EnabledBusinessLabels"));
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
					log_set_values("'%d','%e','Pakeite namo kaina','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[tmpSelected[playerid]][bId], amount);
					log_commit();
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_BUSINESS_MAIN, 1, 4, "");
		}
		case DIALOG_AM_BUSINESS_EDIT_OWNER:
		{
			if(response)
			{
				if(!strlen(inputtext)) return SendError(playerid, "Blogai ávestas ID arba vardas.") , OnDialogResponse(playerid, DIALOG_AM_BUSINESS_EDIT_MAIN, 1, 2, "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
				if(IsNumeric(inputtext))
				{
					if(strval(inputtext) == 0)
					{
						new string[126];
						BusinessInfo[tmpSelected[playerid]][bOwner] = 0;
						mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET Owner = '0' WHERE id = '%d'", BusinessInfo[tmpSelected[playerid]][bId]);
						mysql_fquery(chandler, string, "BusinessUpdated");
						MsgSuccess(playerid, "VERSLAS", "Paðalinote verslo savininkà.");
						OnDialogResponse(playerid, DIALOG_AM_BUSINESS_MAIN, 1, 1, "");

						Business_FixLabels(tmpSelected[playerid], GetGVarInt("EnabledBusinessLabels"));
						Business_CreatePickup(tmpSelected[playerid]);
					}
					else
					{
						new string[126];
						mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `players_data` WHERE id = '%d'", strval(inputtext));
						new Cache:result = mysql_query(chandler, string, true);
						cache_set_active(result);
						if(cache_num_rows())
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET Owner = '%d' WHERE id = '%d'", strval(inputtext), BusinessInfo[tmpSelected[playerid]][bId]);
							mysql_fquery(chandler, string, "BusinessUpdated");
							BusinessInfo[tmpSelected[playerid]][bOwner] = strval(inputtext);
							MsgSuccess(playerid, "VERSLAS", "Pakeitëte verslo savininkà.");
							OnDialogResponse(playerid, DIALOG_AM_BUSINESS_MAIN, 1, 1, "");
							
							Business_FixLabels(tmpSelected[playerid], GetGVarInt("EnabledBusinessLabels"));
							Business_CreatePickup(tmpSelected[playerid]);

							log_set_values("'%d','%e','(AM) Pakeite verslo savininka','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[tmpSelected[playerid]][bId], strval(inputtext));
						}
						else
						{
							SendError(playerid, "Þaidëjas tokiu ID (%d) duomenø bazëje nerastas.", strval(inputtext));
						}
						cache_delete(result);
					}
				}
				else
				{
					new string[126];
					mysql_format(chandler, string, sizeof string, "SELECT id FROM `players_data` WHERE Name = '%e'", inputtext);
					new Cache:result = mysql_query(chandler, string, true);
					cache_set_active(result);
					if(cache_num_rows())
					{
						new id;
						cache_get_value_name_int(0, "id", id);
						mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET Owner = '%d' WHERE id = '%d'", id, BusinessInfo[tmpSelected[playerid]][bId]);
						mysql_fquery(chandler, string, "BusinessUpdated");
						BusinessInfo[tmpSelected[playerid]][bOwner] = id;
						MsgSuccess(playerid, "VERSLAS", "Pakeitëte verslo savininkà.");
						OnDialogResponse(playerid, DIALOG_AM_BUSINESS_MAIN, 1, 1, "");
						
						Business_FixLabels(tmpSelected[playerid], GetGVarInt("EnabledBusinessLabels"));
						Business_CreatePickup(tmpSelected[playerid]);

						log_set_values("'%d','%e','(AM) Pakeite verslo savininka','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[tmpSelected[playerid]][bId], id);
					}
					else
					{
						SendError(playerid, "Þaidëjas tokiu vardu (%s) duomenø bazëje nerastas.", inputtext);
					}
					cache_delete(result);
				}
				log_commit();
				OnDialogResponse(playerid, DIALOG_AM_BUSINESS_MAIN, 1, 1, "");
			}
			else ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_BUSINESS_EDIT_NAME:
		{
			if(response)
			{
				new selected = tmpSelected[playerid];
				if(strlen(inputtext) <= 3 || strlen(inputtext) > 24) return SendError(playerid, "Blogai ávestas pavadinimas (3-24 simboliai).") , OnDialogResponse(playerid, DIALOG_AM_BUSINESS_EDIT_MAIN, 1, 0, "");
				new string[256];
				mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET Name = '%e' WHERE id = '%d'", inputtext, BusinessInfo[selected][bId]);
				mysql_fquery(chandler, string, "BusinessUpdated");
				format(BusinessInfo[selected][bName], 24, inputtext);
				MsgSuccess(playerid, "VERSLAS", "Verslo pavadinimas pakeistas.");
				Business_FixLabels(selected, GetGVarInt("EnabledBusinessLabels"));
				ShowPlayerAdminMenu(playerid);
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`");
				log_set_values("'%d','%e','(AM) Pakeite verslo pavadinima','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[selected][bId], inputtext);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_BUSINESS_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_AM_BUSINESS_EDIT_TYPE:
		{
			if(response)
			{
				new selected = tmpSelected[playerid],
					string[126];
				BusinessInfo[selected][bType] = listitem;
				mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET Type = '%d' WHERE id = '%d'", listitem, BusinessInfo[selected][bId]);
				mysql_fquery(chandler, string, "BusinessUpdated");
				MsgSuccess(playerid, "VERSLAS", "Verslo tipas sëkmingai pakeistas. %s", (listitem == BUSINESS_TYPE_FUEL ? ("Nustatykite papildomas koordinates, kur galima naudoti /fill") : ("")));
				if(listitem == BUSINESS_TYPE_FUEL)
				{
					BusinessInfo[selected][bFuel] = GetGVarInt("BusinessFuelCapacity");
					BusinessInfo[selected][bFuelPrice] = 3;
				}
				ShowPlayerAdminMenu(playerid);
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
				log_set_values("'%d','%e','(AM) Pakeite verslo tipa','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[selected][bId], listitem);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_BUSINESS_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_AM_BUSINESS_EDIT_LEVEL:
		{
			if(response)
			{
				new selected = tmpSelected[playerid];
				BusinessInfo[selected][bLevel] = listitem;
				MsgSuccess(playerid, "VERSLAS", "Verslo lygis sëkmingai pakeistas á %d.", listitem);
				ShowPlayerAdminMenu(playerid);
				SaveBusinessIntEx(selected, "Level", listitem);
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
				log_set_values("'%d','%e','(AM) Pakeite verslo lygi','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[selected][bId], listitem);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_BUSINESS_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_AM_BUSINESS_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// pavadinimas
						if(HaveAdminPermission(playerid, "EditBusinessName"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_EDIT_NAME, DIALOG_STYLE_INPUT, "Verslo redagavimas", "{FFFFFF}Áveskite naujà verslo pavadinimà.", "Keisti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						// kaina
						if(HaveAdminPermission(playerid, "EditBusinessPrice"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_EDIT_PRICE, DIALOG_STYLE_INPUT, "Verslo redagavimas", "{FFFFFF}Áveskite naujà verslo kainà.", "Keisti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 2:
					{
						// savininkas
						if(HaveAdminPermission(playerid, "EditBusinessOwner"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_EDIT_OWNER, DIALOG_STYLE_INPUT, "Verslo redagavimas", "{FFFFFF}Áveskite naujà verslo savininko MySQL numerá arba pilnà vardà.\n{BABABA}Norëdami savininkà paðalinti, áraðykite 0", "Keisti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 3:
					{
						// keisti iejimo vieta
						if(HaveAdminPermission(playerid, "ChangeBusinessEnter"))
						{
							new selected = tmpSelected[playerid];
							MsgSuccess(playerid, "VERSLAS", "Sëkmingai pakeista áëjimo vieta.");
							new Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							BusinessInfo[selected][bOutVW] = GetPlayerVirtualWorld(playerid);
							BusinessInfo[selected][bExterior] = GetPlayerInterior(playerid);
							BusinessInfo[selected][bEnterX] = x,
							BusinessInfo[selected][bEnterY] = y,
							BusinessInfo[selected][bEnterZ] = z;
							new string[186];
							mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET EnterX = '%f', EnterY = '%f', EnterZ = '%f', OutVW = '%d', Exterior = '%d' WHERE id = '%d'", x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), BusinessInfo[selected][bId]);
							mysql_fquery(chandler, string, "BusinessUpdated");
							
							Business_FixLabels(selected, GetGVarInt("EnabledBusinessLabels"));
							Business_CreatePickup(selected);

							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Pakeite verslo iejimo vieta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[selected][bId]);
							log_commit();
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 4:
					{
						// keisti isejimo vieta
						if(HaveAdminPermission(playerid, "ChangeBusinessExit"))
						{
							new selected = tmpSelected[playerid];
							MsgSuccess(playerid, "VERSLAS", "Sëkmingai pakeista iðëjimo vieta.");
							new Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							BusinessInfo[selected][bInterior] = GetPlayerInterior(playerid),
							BusinessInfo[selected][bExitX] = x,
							BusinessInfo[selected][bExitY] = y,
							BusinessInfo[selected][bExitZ] = z;
							new string[186];
							mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET ExitX = '%f', ExitY = '%f', ExitZ = '%f', Interior = '%d' WHERE id = '%d'", x, y, z, GetPlayerInterior(playerid), BusinessInfo[selected][bId]);
							mysql_fquery(chandler, string, "BusinessUpdated");
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Pakeite verslo isejimo vieta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[selected][bId]);
							log_commit();
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 5:
					{
						// isvalyti furniture
						if(HaveAdminPermission(playerid, "DeleteBusinessFurniture"))
						{
							new selected = tmpSelected[playerid],
								count_deleted,
								last_itter = -1,
								string[86],
								__reset_BFurniture[E_BUSINESS_FURNITURE_DATA];

							foreach(new furnitureid : BFurniture)
							{
								if(bFurnitureInfo[furnitureid][bfOwner] == BusinessInfo[selected][bId])
								{
									if(IsValidDynamicObject(bFurnitureInfo[furnitureid][bfObject])) DestroyDynamicObject(bFurnitureInfo[furnitureid][bfObject], "furniture", "admin_delete_business_furniture");
									bFurnitureInfo[furnitureid] = __reset_BFurniture;
									bFurnitureInfo[furnitureid][bfObject] = INVALID_OBJECT_ID;
									if(last_itter != -1 && last_itter != furnitureid)
									{
										Iter_Remove(BFurniture, last_itter);
										count_deleted++;
									}
									last_itter = furnitureid;
								}
							}
							mysql_format(chandler, string, sizeof string, "DELETE FROM `business_furniture` WHERE BusinessId = '%d'", BusinessInfo[selected][bId]);
							mysql_fquery(chandler, string, "FurnitureDeleted");
							if(last_itter != -1) Iter_Remove(BFurniture, last_itter);
							MsgSuccess(playerid, "VERSLAS", "Sëkmingai iðtrynëte %d verslo baldø.", count_deleted);
							OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 5, "");
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
							log_set_values("'%d','%e','(AM) Isvale verslo furniture','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[selected][bId], count_deleted);
							log_commit();
						}
					}
					case 6:
					{
						// redaguoti inventoriu
						if(HaveAdminPermission(playerid, "ViewBusinessInventory"))
						{
							SendWarning(playerid, "Neveikia.");
							//ShowBusinessInventory(playerid, tmpSelected[playerid], true);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 7:
					{
						// nustatyti verslo tipa
						if(HaveAdminPermission(playerid, "EditBusinessType"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_EDIT_TYPE, DIALOG_STYLE_LIST, "Verslo redagavimas", "0. Joks\n1. Degalinë\n2. Maitinimo ástaiga\n3. 24/7 parduotuvë\n4. Drabuþiø parduotuvë\n5. Ginklø parduotuvë", "Tæsti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 8:
					{
						// papildomos koordinates, pvz degalines tipui degalu pilimo vieta???
						if(HaveAdminPermission(playerid, "ChangeBusinessExtra"))
						{
							new Float:x, Float:y, Float:z, string[126];
							GetPlayerPos(playerid, x, y, z);
							BusinessInfo[tmpSelected[playerid]][bExtraX] = x,
							BusinessInfo[tmpSelected[playerid]][bExtraY] = y,
							BusinessInfo[tmpSelected[playerid]][bExtraZ] = z;
							MsgSuccess(playerid, "VERSLAS", "Papildomos koordinatës nustatytos á jûsø dabartinæ pozicijà.");
							mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET ExtraX = '%f', ExtraY = '%f', ExtraZ = '%f' WHERE id = '%d'", x, y, z, BusinessInfo[tmpSelected[playerid]][bId]);
							mysql_fquery(chandler, string, "BusinessUpdated");
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Pakeite verslo papildomas koord.','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[tmpSelected[playerid]][bId]);
							log_commit();

							// * Ideja: sukurti nauja table `business_coordinates` ir ten glaima kelt unlimited koordinates su tipais.
							// * verslo id  	x 	y 	z 		type
							// * 1			0.0, 0.0, 0.0   fill_fuel
							// * 1			0.0, 0.0, 0.0   unload_wares

							switch(BusinessInfo[tmpSelected[playerid]][bType])
							{
								case BUSINESS_TYPE_FUEL: MsgInfo(playerid, "VERSLAS", "Ðiose koordinatëse bus leidþiama pilti degalus.");
								default: MsgInfo(playerid, "VERSLAS", "Papildomos koordinatës ðiam verslo tipui (%d) neturi reikðmës.", BusinessInfo[tmpSelected[playerid]][bType]);
							}
							OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 5, "");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 9:
					{
						// prie iejimo
						if(HaveAdminPermission(playerid, "ChangeBusinessEnter"))
						{
							new selected = tmpSelected[playerid];
							SetPlayerPos(playerid, BusinessInfo[selected][bEnterX], BusinessInfo[selected][bEnterY], BusinessInfo[selected][bEnterZ]);
							SetPlayerInterior(playerid, BusinessInfo[selected][bExterior]);
							SetPlayerVirtualWorld(playerid, BusinessInfo[selected][bOutVW]);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 10:
					{

						// prie isejimo
						if(HaveAdminPermission(playerid, "ChangeBusinessExit"))
						{
							new selected = tmpSelected[playerid];
							SetPlayerPos(playerid, BusinessInfo[selected][bExitX], BusinessInfo[selected][bExitY], BusinessInfo[selected][bExitZ]);
							SetPlayerInterior(playerid, BusinessInfo[selected][bInterior]);
							SetPlayerVirtualWorld(playerid, BusinessInfo[selected][bVW]);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 11:
					{
						// keisti verslo lygi
						if(HaveAdminPermission(playerid, "EditBusinessLevel"))
						{
							new string[512] = "{BABABA}Lygis\t{BABABA}Iðmoka verslui per payday\n",
								varname[24];
							for(new i = 0, j = GetGVarInt("BusinessPayMaxLevels"); i <= j; i++)
							{
								format(varname, sizeof varname, "BusinessPayLevel%d", i);
								format(string, sizeof string, "%s%d\t$%d\n", string, i, GetGVarInt(varname));
							}
							ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_EDIT_LEVEL, DIALOG_STYLE_TABLIST_HEADERS, "Verslo redagavimas", string, "Tæsti", "Atðaukti");
						}
					}
					case 12:
					{
						if(HaveAdminPermission(playerid, "ChangeBusinessExtra"))
						{
							new selected = tmpSelected[playerid];
							MsgSuccess(playerid, "VERSLAS", "Sëkmingai pakeista prekiø iðkrovimo vieta.");
							new Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							BusinessInfo[selected][bWaresX] = x,
							BusinessInfo[selected][bWaresY] = y,
							BusinessInfo[selected][bWaresZ] = z;
							new string[186];
							mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET WaresX = '%f', WaresY = '%f', WaresZ = '%f' WHERE id = '%d'", x, y, z, BusinessInfo[selected][bId]);
							mysql_fquery(chandler, string, "BusinessUpdated");
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Pakeite verslo iskrovimo vieta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[selected][bId]);
							log_commit();
						}
					}
					case 13:
					{
						if(HaveAdminPermission(playerid, "ChangeBusinessExtra"))
						{
							new selected = tmpSelected[playerid];
							MsgSuccess(playerid, "VERSLAS", "Sëkmingai pakeista prekiø nuneðimo vieta.");
							new Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							BusinessInfo[selected][bCratesX] = x,
							BusinessInfo[selected][bCratesY] = y,
							BusinessInfo[selected][bCratesZ] = z;
							new string[186];
							mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET CratesX = '%f', CratesY = '%f', CratesZ = '%f' WHERE id = '%d'", x, y, z, BusinessInfo[selected][bId]);
							mysql_fquery(chandler, string, "BusinessUpdated");
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Pakeite verslo nunesimo vieta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[selected][bId]);
							log_commit();
						}
					}
					case 14:
					{
						// istrinti
						if(HaveAdminPermission(playerid, "DeleteBusiness"))
						{
							// istrinti
							new selected = tmpSelected[playerid],
								string[512],
								__reset_Business[E_BUSINESS_DATA],
								__reset_BFurniture[E_BUSINESS_FURNITURE_DATA],
								last_itter = -1;
							// istrinam ir furniture
							foreach(new furnitureid : BFurniture)
							{
								if(bFurnitureInfo[furnitureid][bfOwner] == BusinessInfo[selected][bOwner])
								{
									if(IsValidDynamicObject(bFurnitureInfo[furnitureid][bfObject])) DestroyDynamicObject(bFurnitureInfo[furnitureid][bfObject], "furniture", "admin_delete_business");
									bFurnitureInfo[furnitureid] = __reset_BFurniture;
									bFurnitureInfo[furnitureid][bfObject] = INVALID_OBJECT_ID;
									if(last_itter != -1 && last_itter != furnitureid)
									{
										Iter_Remove(BFurniture, last_itter);
									}
									last_itter = furnitureid;
								}
							}
							if(last_itter != -1) Iter_Remove(BFurniture, last_itter);
							if(IsValidDynamic3DTextLabel(BusinessInfo[selected][bLabel])) DestroyDynamic3DTextLabel(BusinessInfo[selected][bLabel]);
							sd_DestroyDynamicPickup(BusinessInfo[selected][bPickup]);

							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Istryne versla','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[selected][bId]);
							log_commit();

							mysql_format(chandler, string, sizeof string, "DELETE FROM `business_data` WHERE id = '%d';DELETE FROM `business_wares` WHERE BusinessId = '%d'; DELETE FROM `business_furniture` WHERE BusinessId = '%d';", BusinessInfo[selected][bId], BusinessInfo[selected][bId], BusinessInfo[selected][bId]);
							mysql_format(chandler, string, sizeof string, "%sDELETE FROM `business_dubkeys` WHERE BusinessId = '%d'; DELETE FROM `business_inventory` WHERE BusinessId = '%d'; DELETE FROM `business_orders` WHERE BusinessId = '%d';DELETE FROM `business_orders_fuel` WHERE BusinessId = '%d'", string, BusinessInfo[selected][bId], BusinessInfo[selected][bId], BusinessInfo[selected][bId], BusinessInfo[selected][bId]);
							mysql_fquery(chandler, string, "BusinessDeleted");
							foreach(new receiver : Player)
							{
								if(PlayerInfo[playerid][pJobDestination] == selected && PlayerInfo[playerid][pJobCurrentType] == 1)
								{
									MsgError(playerid, "DARBAS", "Verslas, á kurá veþëte uþsakymà buvo iðtrintas administratoriaus.");
									JobGUI_Hide(playerid);
									PlayerInfo[playerid][pJobCurrentAction] =
									PlayerInfo[playerid][pJobDuty] =
									PlayerInfo[playerid][pJobDestination] = 0;
								}
							}
							BusinessInfo[selected] = __reset_Business;
							BusinessInfo[selected][bLabel] = INVALID_3DTEXT_ID;
							Iter_Remove(Business, selected);
							MsgSuccess(playerid, "VERSLAS", "Sëkmingai iðtrynëte verslà.");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
		}
		case DIALOG_AM_BUSINESS_ALL:
		{
			if(response)
			{
				if(tmpAmenuIter[playerid] != 0)
				{
					if(listitem == tmpAmenuIter[playerid] && tmpAmenuNextPage[playerid]) AM_ShowAllBusiness(playerid, tmpAmenuCurPage[playerid] + 1); 
					else if(((listitem == tmpAmenuIter[playerid] && !tmpAmenuNextPage[playerid]) || (listitem == tmpAmenuIter[playerid] + 1 && tmpAmenuNextPage[playerid])) && tmpAmenuCurPage[playerid] > 0) AM_ShowAllBusiness(playerid, tmpAmenuCurPage[playerid] - 1);
					else if(HaveAdminPermission(playerid, "EditBusiness"))
					{
						new 
							real_iter,
							count_on_this_page;
						foreach(new bus : Business)
						{
							if(BusinessInfo[bus][bId] != 0)
							{
								if(real_iter >= MAX_BUSINESS_PER_PAGE*tmpAmenuCurPage[playerid])
								{
									if(count_on_this_page == listitem)
									{
										new string[512];
										format(string, sizeof string, "{BABABA}Nustatymas\t{BABABA}Dabartinë reikðmë\nPavadinimas\t%.14s%s\n", BusinessInfo[bus][bName], strlen(BusinessInfo[bus][bName]) > 14 ? ("...") : (""));
										format(string, sizeof string, "%sKaina\t$%d\nSavininkas\t%s\nKeisti áëjimo vietà\nKeisti iðëjimo vietà\nIðvalyti baldus\nRedaguoti inventoriø\nNustatyti verslo tipà\nPapildomos koordinatës\nTeleportuotis prie verslo áëjimo\nTeleportuotis prie verslo iðëjimo\nKeisti verslo lygá\t%d\nKeisti prekiø pristatymo vietà (maðinai)\nKeisti dëþiø pristatymo vietà (þmogui)\n{C60000}Iðtrinti", string, BusinessInfo[bus][bPrice], GetNameBySql(BusinessInfo[bus][bOwner]), BusinessInfo[bus][bLevel]);
										ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_EDIT_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "Verslo redagavimas", string, "Tæsti", "Atðaukti");
										tmpSelected[playerid] = bus;
										return 1;
									}
									count_on_this_page ++ ;
								}
								real_iter ++ ;
							}
						}
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 5, "");
		}
		case DIALOG_AM_BUSINESS_MAIN:
		{
			if(response)
			{
				if(listitem == 0)
				{
					// kurti nauja versla
					if(HaveAdminPermission(playerid, "CreateNewBusiness"))
					{
						new businessid = Iter_Free(Business),
							__reset_Business[E_BUSINESS_DATA],
							string[186],
							Float:x,
							Float:y,
							Float:z,
							int = GetPlayerInterior(playerid),
							vw = GetPlayerVirtualWorld(playerid);

						GetPlayerPos(playerid, x, y, z);
						mysql_format(chandler, string, sizeof string, "INSERT INTO `business_data` (`Added`,`Name`,`EnterX`,`EnterY`,`EnterZ`,`OutVW`,`Exterior`) VALUES ('%d','Be pavadinimo','%f','%f','%f','%d','%d')", PlayerInfo[playerid][pId], x, y, z, vw, int);
						new Cache:result = mysql_query(chandler, string, true);
						if(mysql_errno() == 0)
						{
							if(int != 0 || vw != 0)
							{
								SendWarning(playerid, "Jûs nesate lauke (interior: %d, world: %d), todël sukurto verslo bus neámanoma parodyti þemëlapyje.", int, vw);
							}
							cache_set_active(result);
							BusinessInfo[businessid] = __reset_Business;
							format(BusinessInfo[businessid][bName], 14, "Be pavadinimo");
							BusinessInfo[businessid][bId] = cache_insert_id();
							BusinessInfo[businessid][bEnterX] = x,
							BusinessInfo[businessid][bEnterY] = y,
							BusinessInfo[businessid][bEnterZ] = z;
							BusinessInfo[businessid][bOutVW] = vw;
							BusinessInfo[businessid][bExterior] = int;
							BusinessInfo[businessid][bVW] = BUSINESS_VIRTUAL_WORLD+BusinessInfo[businessid][bId];
							Iter_Add(Business, businessid);
							
							Business_FixLabels(businessid, GetGVarInt("EnabledBusinessLabels"));
							Business_CreatePickup(businessid);
							
							MsgSuccess(playerid, "VERSLAI", "Sëkmingai sukûrëte verslà, kurio ID: %d", BusinessInfo[businessid][bId]);
							
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Sukure nauja versla','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[businessid][bId]);
							log_commit();
						}
						else
						{
							SendError(playerid, "Siøsta uþklausa nepavyko [%d]", mysql_errno());
						}
						if(cache_is_valid(result)) cache_delete(result);
					}
					else return InfoBox(playerid, IB_NO_PRIVILEGE);
				}
				else if(listitem == 1)
				{
					// perziureti visus visi verslai
					AM_ShowAllBusiness(playerid, 0);
				}
				else if(listitem == 2)
				{
					// galimos prekes
					new string[2024] = "{BABABA}Nr.\t{BABABA}Daiktas\t{BABABA}Min-max galima kaina\t{BABABA}Kiekis á inventoriø\n";
					for(new i = 0; i < MAX_AVAILABLE_WARES; i++)
					{
						if(AvailableWares[i][awItem] != 0) format(string, sizeof string, "%s%d.\t%s\t$%d-$%d\t%d\n", string, i+1, GetInventoryItemName(AvailableWares[i][awItem]), AvailableWares[i][awMinPrice], AvailableWares[i][awMaxPrice], AvailableWares[i][awAmount]);
						else
						{
							strcat(string, "Pridëti");
							break;
						}
					}
					ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_WARES_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Verslo galimos prekës", string, "Tæsti", "Atðaukti");
				}
				else if(listitem == 3)
				{
					// lygiai
					new string[2024] = "{BABABA}Lygis\t{BABABA}Iðmoka\n",
						line[56],
						varname[22];
					for(new i = 0, j = GetGVarInt("BusinessPayMaxLevels"); i <= j; i++)
					{
						format(varname, sizeof varname, "BusinessPayLevel%d", i);
						format(line, sizeof line, "%d\t$%d\n", i, GetGVarInt(varname));
						strcat(string, line);
					}
					ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_LEVELS_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "Verslo lygiai", string, "Tæsti", "Atðaukti");
				}
			}
			else ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_BUSINESS_LEVELS_MAIN:
		{
			if(response)
			{
				new string[126];
				tmpSelected[playerid] = listitem;
				format(string, sizeof string, "{FFFFFF}Áveskite iðmokà, kurià gaus visi verslai, turintys {C2EBA1}%d{FFFFFF} lygá.", listitem);
				ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_LEVEL_EDIT, DIALOG_STYLE_INPUT, "Verslo lygiai", string, "Keisti", "Atðaukti");
			}
			else ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_BUSINESS_LEVEL_EDIT:
		{
			if(response)
			{
				new amount,
					varname[22];
				if(sscanf(inputtext,"d",amount) || amount < 0) return OnDialogResponse(playerid, DIALOG_AM_BUSINESS_LEVELS_MAIN, 1, tmpSelected[playerid], "");
				format(varname, sizeof varname, "BusinessPayLevel%d", tmpSelected[playerid]);
				SetGVarInt(varname, amount);
				OnDialogResponse(playerid, DIALOG_AM_BUSINESS_MAIN, 1, 3, "");
				SaveServerIntEx(varname, amount);
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
				log_set_values("'%d','%e','(AM) Nustate verslo lygio gaunama suma','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), tmpSelected[playerid], amount);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_BUSINESS_MAIN, 1, 3, "");
		}
		case DIALOG_AM_BUSINESS_WARES_ALL:
		{
			if(response)
			{
				if(AvailableWares[listitem][awItem] != 0)
				{
					tmpSelected[playerid] = listitem;
					new string[256];
					format(string, sizeof string, "{BABABA}Nustatymas\t{BABABA}Dabartinë reikðmë\nDaiktas\t%s\nPridedamas kiekis á inventoriø po pirkimo\t%d\nMinimali kaina\t$%d\nMaksimali kaina\t$%d\n{C60000}Iðtrinti", GetInventoryItemName(AvailableWares[listitem][awItem]), AvailableWares[listitem][awAmount], AvailableWares[listitem][awMinPrice], AvailableWares[listitem][awMaxPrice]);
					ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_WARE, DIALOG_STYLE_TABLIST_HEADERS, "Verslo galimos prekës", string, "Keisti", "Atðaukti");
				}
				else
				{
					// prideti preke
					ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_NEW_WARE, DIALOG_STYLE_INPUT, "Verslo galimos prekës", "{FFFFFF}Áveskite daikto ID, kurá norite pridëti", "Tæsti", "Atðaukti");
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 5, "");
		}
		case DIALOG_AM_BUSINESS_NEW_WARE:
		{
			if(response)
			{
				new itemid;
				if(sscanf(inputtext,"d",itemid)) return OnDialogResponse(playerid, DIALOG_AM_BUSINESS_WARES_ALL, 1, 99999, "");
				new bool:found = false;
				for(new i = 0; i < MAX_AVAILABLE_WARES; i++)
				{
					if(AvailableWares[i][awItem] == 0)
					{
						AvailableWares[i][awItem] = itemid;
						AvailableWares[i][awMinPrice] = 5;
						AvailableWares[i][awMaxPrice] = 50;
						AvailableWares[i][awAmount] = 1;
						found = true;
						break;
					}
				}
				if(found)
				{
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
					log_set_values("'%d','%e','(AM) Pridejo preke i galimas verslams','%e'", LogPlayerId(playerid), LogPlayerName(playerid), GetInventoryItemName(itemid));
					log_commit();
					SendFormat(playerid, -1, "Prekë pridëta á saraðà. Praðome jà suredaguoti.");
				}
				else return SendWarning(playerid, "Galimø prekiø limitas iðnaudotas ("#MAX_AVAILABLE_WARES")");
				SaveAvailableWares();
				OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 5, "");
			}
			else OnDialogResponse(playerid, DIALOG_AM_BUSINESS_MAIN, 1, 3, "");
		}
		case DIALOG_AM_BUSINESS_WARE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// item keitimas
						OnDialogResponse(playerid, DIALOG_AM_BUSINESS_WARES_ALL, 1, tmpSelected[playerid], "");
					}
					case 1:
					{
						// duodamas kiekis
						ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_WARE_EDIT_AMOUNT, DIALOG_STYLE_INPUT, "Verslo galimos prekës", "{FFFFFF}Áveskite prekës kieká, kuris bus duodamas þaidëjui á inventoriø\npo pirkimo", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// minimali
						ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_WARE_EDIT_MIN_PRICE, DIALOG_STYLE_INPUT, "Verslo galimos prekës", "{FFFFFF}Áveskite minimalià kainà, kurià gali nustatyti verslas ðiai prekei.", "Tæsti", "Atðaukti");
					}
					case 3:
					{
						// maksimali
						ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_WARE_EDIT_MAX_PRICE, DIALOG_STYLE_INPUT, "Verslo galimos prekës", "{FFFFFF}Áveskite maksimalià kainà, kurià gali nustatyti verslas ðiai prekei.", "Tæsti", "Atðaukti");
					}
					case 4:
					{
						// istrinti
						// sort array
						new selected = tmpSelected[playerid],
							__reset_AvailableWare[E_AVAILABLE_WARES_DATA],
							string[126];
						MsgSuccess(playerid, "VERSLO PREKËS", "Sëkmingai paðalinote %s ið galimø prekiø sàraðo.", GetInventoryItemName(AvailableWares[selected][awItem]));
						mysql_format(chandler, string, sizeof string, "DELETE FROM `wares_available` WHERE ItemId = '%d'", AvailableWares[selected][awItem]);
						mysql_fquery(chandler, string, "BusinessUpdated");

						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
						log_set_values("'%d','%e','(AM) Pasalino preke is galimu verslams','%e'", LogPlayerId(playerid), LogPlayerName(playerid), GetInventoryItemName(AvailableWares[selected][awItem]));
						log_commit();

						AvailableWares[selected] = __reset_AvailableWare;
						/*for(new i = 0; i < MAX_AVAILABLE_WARES; i++)
						{
							if(AvailableWares[i][awItem] == 0)
							{
								for(new x = i+1; x < MAX_AVAILABLE_WARES; x++)
								{
									if(AvailableWares[x][awItem] != 0)
									{
										AvailableWares[i][awItem] = AvailableWares[x][awItem];
										AvailableWares[i][awAmount] = AvailableWares[x][awAmount];
										AvailableWares[i][awMinPrice] = AvailableWares[x][awMinPrice];
										AvailableWares[i][awMaxPrice] = AvailableWares[x][awMaxPrice];
										AvailableWares[x] = __reset_AvailableWare;
										break;
									}
								}
							}
						}*/
						SortEnumArray(AvailableWares, 0, MAX_AVAILABLE_WARES, [awItem], 0, E_AVAILABLE_WARES_DATA, FALSE);
						SaveAvailableWares();
						OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 5, "");
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_BUSINESS_MAIN, 1, 2, "");
		}
		case DIALOG_AM_BUSINESS_WARE_EDIT_AMOUNT:
		{
			if(response)
			{
				new amount;
				if(sscanf(inputtext,"d",amount) || amount <= 0) return OnDialogResponse(playerid, DIALOG_AM_BUSINESS_WARE, 1, 1, "");
				new selected = tmpSelected[playerid];
				AvailableWares[selected][awAmount] = amount;
				MsgSuccess(playerid, "VERSLO PREKËS", "Kiekis pakeistas.");
				OnDialogResponse(playerid, DIALOG_AM_BUSINESS_WARES_ALL, 1, tmpSelected[playerid], "");
				SaveAvailableWares(selected, AvailableWares[selected][awItem]);
			}
			else OnDialogResponse(playerid, DIALOG_AM_BUSINESS_WARES_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_AM_BUSINESS_WARE_EDIT_MIN_PRICE:
		{
			if(response)
			{
				new price;
				if(sscanf(inputtext,"d",price) || price <= 0) return OnDialogResponse(playerid, DIALOG_AM_BUSINESS_WARE, 1, 2, "");
				new selected = tmpSelected[playerid];
				AvailableWares[selected][awMinPrice] = price;
				MsgSuccess(playerid, "VERSLO PREKËS", "Minimali kaina pakeista.");
				if(AvailableWares[selected][awMinPrice] > AvailableWares[selected][awMaxPrice])
				{
					IntegerSwitch(AvailableWares[selected][awMinPrice], AvailableWares[selected][awMaxPrice]);
				}
				OnDialogResponse(playerid, DIALOG_AM_BUSINESS_WARES_ALL, 1, tmpSelected[playerid], "");
				SaveAvailableWares(selected, AvailableWares[selected][awItem]);
			}
			else OnDialogResponse(playerid, DIALOG_AM_BUSINESS_WARES_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_AM_BUSINESS_WARE_EDIT_MAX_PRICE:
		{
			if(response)
			{
				new price;
				if(sscanf(inputtext,"d",price) || price <= 0) return OnDialogResponse(playerid, DIALOG_AM_BUSINESS_WARE, 1, 3, "");
				new selected = tmpSelected[playerid];
				AvailableWares[selected][awMaxPrice] = price;
				MsgSuccess(playerid, "VERSLO PREKËS", "Maksimali kaina pakeista.");
				if(AvailableWares[selected][awMinPrice] > AvailableWares[selected][awMaxPrice])
				{
					IntegerSwitch(AvailableWares[selected][awMinPrice], AvailableWares[selected][awMaxPrice]);
				}
				OnDialogResponse(playerid, DIALOG_AM_BUSINESS_WARES_ALL, 1, tmpSelected[playerid], "");
				SaveAvailableWares(selected, AvailableWares[selected][awItem]);
			}
			else OnDialogResponse(playerid, DIALOG_AM_BUSINESS_WARES_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_AM_SALON_CREATE:
		{
			if(response)
			{
				if(strlen(inputtext) < 3) return SendError(playerid, "Pavadinimas per trumpas arba per ilgas.") , ShowPlayerAdminMenu(playerid);
				new string[356],
					Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);
				mysql_format(chandler, string, sizeof string, "INSERT INTO `sell_salons` (`Added`,`X`,`Y`,`Z`,`Interior`,`VW`,`Name`) VALUES ('%d','%f','%f','%f','%d','%d','%e')", PlayerInfo[playerid][pId], x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), inputtext);
				new Cache:result = mysql_query(chandler, string, true);
				if(mysql_errno() == 0)
				{
					new itter = Iter_Free(Salon),
						__reset_Salon[E_SALON_DATA];
					cache_set_active(result);
					SalonData[itter] = __reset_Salon;
					format(SalonData[itter][salonName], 255, inputtext);
					SalonData[itter][salonId] = cache_insert_id();
					SalonData[itter][salonX] = x,
					SalonData[itter][salonY] = y,
					SalonData[itter][salonZ] = z;
					SalonData[itter][salonInterior] = GetPlayerInterior(playerid);
					SalonData[itter][salonVW] = GetPlayerVirtualWorld(playerid);
					SalonData[itter][salonPickup] = sd_CreateDynamicPickup(PICKUP_TYPE_SALON, itter, 1274, 1, SalonData[itter][salonX], SalonData[itter][salonY], SalonData[itter][salonZ], SalonData[itter][salonVW], SalonData[itter][salonInterior]);
					Iter_Add(Salon, itter);
					MsgSuccess(playerid, "SALONAI", "Sëkmingai sukûrëte salonà, kurio ID: %d", SalonData[itter][salonId]);
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
					log_set_values("'%d','%e','(AM) Sukure nauja salona','%d'", LogPlayerId(playerid), LogPlayerName(playerid), SalonData[itter][salonId]);
					log_commit();
				}
				else
				{
					SendError(playerid, "Siøsta uþklausa nepavyko [%d]", mysql_errno());
				}
				if(cache_is_valid(result)) cache_delete(result);
				OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 6, "");
			}
		}
		case DIALOG_AM_SALON_SPAWN_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// salono pozicija salono
						new string[256],
						Float:x, Float:y, Float:z, Float:a;
						if(IsPlayerInAnyVehicle(playerid))
						{
							GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
							GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
						}
						else
						{
							GetPlayerPos(playerid, x, y, z);
							GetPlayerFacingAngle(playerid, a);
						}
						mysql_format(chandler, string, sizeof string, "UPDATE `sell_salons_spawns` SET X = '%f', Y = '%f', Z = '%f', A = '%f' WHERE id = '%d'", x, y, z, a, tmpIter[playerid]);
						mysql_fquery(chandler, string, "SalonUpdated");
						MsgSuccess(playerid, "SALONAI", "Atnaujinote spawn vietà.");
						OnDialogResponse(playerid, DIALOG_AM_SALON_EDIT, 1, 2, "");
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','(AM) Pakeite salono spawn vieta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), SalonData[tmpSelected[playerid]][salonId]);
						log_commit();
					}
					case 1:
					{
						// teleportuotis
						new string[126],
							Float:x, Float:y, Float:z, Float:a;
						mysql_format(chandler, string, sizeof string, "SELECT `X`,`Y`,`Z`,`A` FROM `sell_salons_spawns` WHERE id = '%d'", tmpIter[playerid]);
						new Cache:result = mysql_query(chandler, string, true);
						cache_set_active(result);
						if(cache_num_rows())
						{
							cache_get_value_name_float(0, "X", x);
							cache_get_value_name_float(0, "Y", y);
							cache_get_value_name_float(0, "Z", z);
							cache_get_value_name_float(0, "A", a);
							SetPlayerPos(playerid, x, y, z);
							SetPlayerFacingAngle(playerid, a);
						}
						cache_delete(result);
						OnDialogResponse(playerid, DIALOG_AM_SALON_EDIT, 1, 2, "");
					}
					case 2:
					{
						// istrinti
						new string[126];
						mysql_format(chandler, string, sizeof string, "DELETE FROM `sell_salons_spawns` WHERE id = '%d'", tmpIter[playerid]);
						mysql_fquery(chandler, string, "SalonUpdated");
						MsgSuccess(playerid, "SALONAS", "Iðtrynëte spawn vietà ið salono sàraðo.");
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','(AM) Istryne salono spawn vieta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), SalonData[tmpSelected[playerid]][salonId]);
						log_commit();
					}
				}
				OnDialogResponse(playerid, DIALOG_AM_SALON_EDIT, 1, 2, "");
			}
			else OnDialogResponse(playerid, DIALOG_AM_SALONS_MAIN, 1, 1, "");
		}
		case DIALOG_AM_SALON_SPAWNS_ALL:
		{
			if(response)
			{
				tmpIter[playerid] = tmpArray[playerid][listitem];
				if(tmpIter[playerid] == 0)
				{
					// kurti nauja
					new string[256],
						Float:x, Float:y, Float:z, Float:a;
					if(IsPlayerInAnyVehicle(playerid))
					{
						GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
						GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
					}
					else
					{
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, a);
					}
					mysql_format(chandler, string, sizeof string, "INSERT INTO `sell_salons_spawns` (`SalonId`,`X`,`Y`,`Z`,`A`,`Added`) VALUES ('%d','%0.3f','%0.3f','%0.3f','%0.3f','%d')", SalonData[tmpSelected[playerid]][salonId], x, y, z, a, PlayerInfo[playerid][pId]);
					mysql_fquery(chandler, string, "SalonUpdated");
					MsgSuccess(playerid, "SALONAI", "Pridëjote papildomà spawn vietà.");
					OnDialogResponse(playerid, DIALOG_AM_SALON_EDIT, 1, 2, "");
					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
					log_set_values("'%d','%e','(AM) Pridejo spawn vieta i salona','%d'", LogPlayerId(playerid), LogPlayerName(playerid), SalonData[tmpSelected[playerid]][salonId]);
					log_commit();
				}
				else
				{
					ShowPlayerDialog(playerid, DIALOG_AM_SALON_SPAWN_EDIT, DIALOG_STYLE_LIST, "Tr. priemoniø salonai", "Keisti pozicijà\nTeleportuotis á vietà\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_SALONS_MAIN, 1, 1, "");
		}
		case DIALOG_AM_SALON_VEHICLE_MODEL:
		{
			if(response)
			{
				// keisti modeli
				new model;
				if(sscanf(inputtext,"d",model) || model < 400 || model > 611) return OnDialogResponse(playerid, DIALOG_AM_SALON_VEHICLE_EDIT, 1, 0, "");
				if(IsModelInSalon(tmpSelected[playerid], model)) return OnDialogResponse(playerid, DIALOG_AM_SALON_VEHICLE_EDIT, 1, 0, "") , SendError(playerid, "Tokia tr. priemonë salone jau yra.");
				new string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `sell_vehicles` SET Model = '%d' WHERE Model = '%d' AND SalonId = '%d'", model, tmpIter[playerid], SalonData[tmpSelected[playerid]][salonId]);
				mysql_fquery(chandler, string, "SalonUpdated");
				foreach(new sellvehicleid : SellVehicle)
				{
					if(SellVehicleData[sellvehicleid][sellvehicleSalon] == SalonData[tmpSelected[playerid]][salonId] && SellVehicleData[sellvehicleid][sellvehicleModel] == tmpIter[playerid])
					{
						SendFormat(playerid, -1, "%d %d changing to %d", sellvehicleid, SellVehicleData[sellvehicleid][sellvehicleModel], model);
						SellVehicleData[sellvehicleid][sellvehicleModel] = model;
						break;
					}
				}
				MsgSuccess(playerid, "SALONAS", "Tr. priemonës modelis sëkmingai pakeistas.");
				OnDialogResponse(playerid, DIALOG_AM_SALON_EDIT, 1, 3, "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
				log_set_values("'%d','%e','(AM) Pakeite salono parduodama modeli','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), SalonData[tmpSelected[playerid]][salonId], model);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_SALON_EDIT, 1, 3, "");
		}
		case DIALOG_AM_SALON_VEHICLE_PRICE:
		{
			if(response)
			{
				// keisti kaina
				new price;
				if(sscanf(inputtext,"d",price) || price < 100) return OnDialogResponse(playerid, DIALOG_AM_SALON_VEHICLE_EDIT, 1, 1, "");
				new string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `sell_vehicles` SET Price = '%d' WHERE Model = '%d' AND SalonId = '%d'", price, tmpIter[playerid], SalonData[tmpSelected[playerid]][salonId]);
				mysql_fquery(chandler, string, "SalonUpdated");
				foreach(new sellvehicleid : SellVehicle)
				{
					if(SellVehicleData[sellvehicleid][sellvehicleSalon] == SalonData[tmpSelected[playerid]][salonId] && SellVehicleData[sellvehicleid][sellvehicleModel] == tmpIter[playerid])
					{
						SellVehicleData[sellvehicleid][sellvehiclePrice] = price;
						break;
					}
				}
				MsgSuccess(playerid, "SALONAS", "Tr. priemonës kaina sëkmingai pakeista.");
				OnDialogResponse(playerid, DIALOG_AM_SALON_EDIT, 1, 3, "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ReceiverId`,`Amount`");
				log_set_values("'%d','%e','(AM) Pakeite salono parduodamo modelio kaina','%d','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), SalonData[tmpSelected[playerid]][salonId], tmpIter[playerid], price);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_SALON_EDIT, 1, 3, "");
		}
		case DIALOG_AM_SALON_VEHICLE_DONATOR:
		{
			if(response)
			{
				new string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `sell_vehicles` SET Donator = '%d' WHERE Model = '%d' AND SalonId = '%d'", listitem, tmpIter[playerid], SalonData[tmpSelected[playerid]][salonId]);
				mysql_fquery(chandler, string, "SalonUpdated");
				foreach(new sellvehicleid : SellVehicle)
				{
					if(SellVehicleData[sellvehicleid][sellvehicleSalon] == SalonData[tmpSelected[playerid]][salonId] && SellVehicleData[sellvehicleid][sellvehicleModel] == tmpIter[playerid])
					{
						SellVehicleData[sellvehicleid][sellvehicleDonator] = listitem;
						break;
					}
				}
				MsgSuccess(playerid, "SALONAS", "Tr. priemonës remëjo lygis sëkmingai pakeistas.");
				OnDialogResponse(playerid, DIALOG_AM_SALON_EDIT, 1, 3, "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ReceiverId`,`Amount`");
				log_set_values("'%d','%e','(AM) Pakeite salono parduodamo modelio remeja','%d','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), SalonData[tmpSelected[playerid]][salonId], tmpIter[playerid], listitem);
				log_commit();
			}
		}
		case DIALOG_AM_SALON_VEHICLE_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// modelis
						ShowPlayerDialog(playerid, DIALOG_AM_SALON_VEHICLE_MODEL, DIALOG_STYLE_INPUT, "Tr. priemoniø salonai", "{FFFFFF}Áveskite naujà tr. priemonës modelá.\n{BABABA}(wiki.sa-mp.com/wiki/Vehicle_Model_ID_List)", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// kaina
						ShowPlayerDialog(playerid, DIALOG_AM_SALON_VEHICLE_PRICE, DIALOG_STYLE_INPUT, "Tr. priemoniø salonai", "{FFFFFF}Áveskite naujà tr. priemonës kainà.", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// remejo lygis
						ShowPlayerDialog(playerid, DIALOG_AM_SALON_VEHICLE_DONATOR, DIALOG_STYLE_LIST, "Tr. priemoniø salonai", "Joks\nBronzinis (I)\nSidabrinis (II)\nAuksinis (III)", "Tæsti", "Atðaukti");
					}
					case 3:
					{
						// trinti
						new string[126], delete = -1;

						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
						log_set_values("'%d','%e','(AM) Istryne modeli is salono parduodamu','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), SalonData[tmpSelected[playerid]][salonId], tmpIter[playerid]);
						log_commit();

						mysql_format(chandler, string, sizeof string, "DELETE FROM `sell_vehicles` WHERE Model = '%d' AND SalonId = '%d'", tmpIter[playerid], SalonData[tmpSelected[playerid]][salonId]);
						mysql_fquery(chandler, string, "SalonVehicleDeleted");
						foreach(new sellvehicleid : SellVehicle)
						{
							if(SellVehicleData[sellvehicleid][sellvehicleSalon] == SalonData[tmpSelected[playerid]][salonId] && SellVehicleData[sellvehicleid][sellvehicleModel] == tmpIter[playerid])
							{
								delete = sellvehicleid;
								break;
							}
						}
						delete == -1 || Iter_Remove(SellVehicle, delete);
						MsgSuccess(playerid, "SALONAS", "Tr. priemonë paðalinta ið sàraðo.");
						OnDialogResponse(playerid, DIALOG_AM_SALON_EDIT, 1, 3, "");
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_SALONS_MAIN, 1, 1, "");
		}
		case DIALOG_AM_SALON_VEHICLE_ADD:
		{
			if(response)
			{
				new model;
				if(sscanf(inputtext,"d",model) || model < 400 || model > 611) return OnDialogResponse(playerid, DIALOG_AM_SALONS_VEHICLES_ALL, 1, sizeof tmpArray[]-1, "");
				if(IsModelInSalon(tmpSelected[playerid], model)) return OnDialogResponse(playerid, DIALOG_AM_SALONS_VEHICLES_ALL, 1, sizeof tmpArray[]-1, "") , SendError(playerid, "Tokia tr. priemonë salone jau yra.");
				new string[126];
				mysql_format(chandler, string, sizeof string, "INSERT INTO `sell_vehicles` (`Model`,`Price`,`Added`,`SalonId`) VALUES ('%d','10000','%d','%d')", model, PlayerInfo[playerid][pId], SalonData[tmpSelected[playerid]][salonId]);
				mysql_fquery(chandler, string, "SalonUpdated");
				new itter = Iter_Free(SellVehicle);
				SellVehicleData[itter][sellvehicleSalon] = SalonData[tmpSelected[playerid]][salonId];
				SellVehicleData[itter][sellvehicleModel] = model;
				SellVehicleData[itter][sellvehiclePrice] = 10000;
				SellVehicleData[itter][sellvehicleDonator] = 0;
				Iter_Add(SellVehicle, itter);
				MsgSuccess(playerid, "SALONAI", "Tr. priemonë %s pridëta á salonà. Praðome pakeisti jos kainà.", GetModelName(model));
				OnDialogResponse(playerid, DIALOG_AM_SALONS_MAIN, 1, 1, "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
				log_set_values("'%d','%e','(AM) Pridejo modeli i salono parduodamus','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), SalonData[tmpSelected[playerid]][salonId], model);
				log_commit();
			}
			else
			{
				OnDialogResponse(playerid, DIALOG_AM_SALONS_MAIN, 1, 1, "");
			}
		}
		case DIALOG_AM_SALONS_VEHICLES_ALL:
		{
			if(response)
			{
				if(tmpArray[playerid][listitem] <= 0)
				{
					// prideti nauja
					ShowPlayerDialog(playerid, DIALOG_AM_SALON_VEHICLE_ADD, DIALOG_STYLE_INPUT, "Tr. priemoniø salonai", "{FFFFFF}Áveskite naujà tr. priemonës modelá.\n{BABABA}(wiki.sa-mp.com/wiki/Vehicle_Model_ID_List)", "Tæsti", "Atðaukti");
				}
				else
				{
					tmpIter[playerid] = tmpArray[playerid][listitem];
					ShowPlayerDialog(playerid, DIALOG_AM_SALON_VEHICLE_EDIT, DIALOG_STYLE_LIST, "Tr. priemoniø salonai", "Keisti modelá\nKeisti kainà\nMinimalaus remëjo lygis\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
				}
			}
			else
			{
				OnDialogResponse(playerid, DIALOG_AM_SALONS_MAIN, 1, 1, "");
			}
		}
		case DIALOG_AM_SALON_EDIT_NAME:
		{
			if(response)
			{
				if(strlen(inputtext) < 3) return OnDialogResponse(playerid, DIALOG_AM_SALON_EDIT, 1, 0, "");
				format(SalonData[tmpSelected[playerid]][salonName], 255, inputtext);
				new string[256];
				mysql_format(chandler, string, sizeof string, "UPDATE `sell_salons` SET Name = '%s' WHERE id = '%d'", SalonData[tmpSelected[playerid]][salonId]);
				mysql_fquery(chandler, string, "SalonUpdated");
				MsgSuccess(playerid, "SALONAS", "Pakeitëte salono pavadinimà.");
				OnDialogResponse(playerid, DIALOG_AM_SALONS_MAIN, 1, 1, "");
			}
			else OnDialogResponse(playerid, DIALOG_AM_SALONS_MAIN, 1, 1, "");
		}
		case DIALOG_AM_SALON_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// pavadinimas
						if(HaveAdminPermission(playerid, "EditSalonName"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_SALON_EDIT_NAME, DIALOG_STYLE_INPUT, "Tr. priemoniø salonai", "{FFFFFF}Áveskite naujà salono pavadinimà.", "Tæsti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						if(HaveAdminPermission(playerid, "ChangeSalonPosition"))
						{
							// vieta
							new Float:x,
								Float:y,
								Float:z;
							new string[156];
							GetPlayerPos(playerid, x, y, z);
							SalonData[tmpSelected[playerid]][salonX] = x,
							SalonData[tmpSelected[playerid]][salonY] = y,
							SalonData[tmpSelected[playerid]][salonZ] = z;
							SalonData[tmpSelected[playerid]][salonInterior] = GetPlayerInterior(playerid);
							SalonData[tmpSelected[playerid]][salonVW] = GetPlayerVirtualWorld(playerid);
							mysql_format(chandler, string, sizeof string, "UPDATE `sell_salons` SET X = '%0.3f', Y = '%0.3f', Z = '%0.3f', Interior = '%d', VW = '%d' WHERE id = '%d'", SalonData[tmpSelected[playerid]][salonX], SalonData[tmpSelected[playerid]][salonY], SalonData[tmpSelected[playerid]][salonZ], SalonData[tmpSelected[playerid]][salonInterior], SalonData[tmpSelected[playerid]][salonVW], SalonData[tmpSelected[playerid]][salonId]);
							mysql_fquery(chandler, string, "SalonUpdated");
							MsgSuccess(playerid, "SALONAS", "Salono vieta nustatyta á jûsø esamà.");
							sd_DestroyDynamicPickup(SalonData[tmpSelected[playerid]][salonPickup]);
							SalonData[tmpSelected[playerid]][salonPickup] = sd_CreateDynamicPickup(PICKUP_TYPE_SALON, tmpSelected[playerid], 1274, 1, SalonData[tmpSelected[playerid]][salonX], SalonData[tmpSelected[playerid]][salonY], SalonData[tmpSelected[playerid]][salonZ], SalonData[tmpSelected[playerid]][salonVW], SalonData[tmpSelected[playerid]][salonInterior]);
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Pakeite salono vieta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), SalonData[tmpSelected[playerid]][salonId]);
							log_commit();
						}
					}
					case 2:
					{
						// spawn vietos
						if(HaveAdminPermission(playerid, "EditSalonSpawns"))
						{
							new string[126];
							mysql_format(chandler, string, sizeof string, "SELECT * FROM `sell_salons_spawns` WHERE SalonId = '%d'", SalonData[tmpSelected[playerid]][salonId]);
							mysql_tquery(chandler, string, "SalonSpawnsArray", "d", playerid);
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 3:
					{
						// parduodamos maisnos
						if(HaveAdminPermission(playerid, "EditSalonVehicles"))
						{
							new string[2024] = "{BABABA}Nr.\t{BABABA}Modelis\t{BABABA}Reikalingas remëjo lygis\t{BABABA}Kaina\n",
								line[86],
								salonid = SalonData[tmpSelected[playerid]][salonId],
								i;
							foreach(new sell : SellVehicle)
							{
								if(SellVehicleData[sell][sellvehicleSalon] == salonid)
								{
									tmpArray[playerid][i] = SellVehicleData[sell][sellvehicleModel];
									i++;
									format(line, sizeof line, "%d.\t%s\t%d\t$%d\n", i, GetModelName(SellVehicleData[sell][sellvehicleModel]), SellVehicleData[sell][sellvehicleDonator], SellVehicleData[sell][sellvehiclePrice]);
									strcat(string, line);
								}
							}
							strcat(string, "Pridëti");
							ShowPlayerDialog(playerid, DIALOG_AM_SALONS_VEHICLES_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Tr. priemoniø salonai", string, "Tæsti", "Atðaukti");
							for(new x = i; x < sizeof tmpArray[]; x++) tmpArray[playerid][x] = 0;
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 4:
					{
						// garbage
						if(HaveAdminPermission(playerid, "EditSalons"))
						{
							new salon = tmpSelected[playerid],
								string[256];
							SalonData[salon][salonGarbage] = !SalonData[salon][salonGarbage];
							SendFormat(playerid, -1, "Broko tikimybe (50-80proc variklis/akumuliatorius) buvo %s siam salonui.", SalonData[salon][salonGarbage] > 0 ? ("ijungta") : ("isjungta"));
							mysql_format(chandler, string, sizeof string, "UPDATE `sell_salons` SET Garbage = '%d' WHERE id = '%d'", SalonData[salon][salonGarbage], SalonData[salon][salonId]);
							mysql_fquery(chandler, string, "SalonUpdated");
							// logs
						}
					}
					case 5:
					{
						// istrinti
						if(HaveAdminPermission(playerid, "DeleteSalon"))
						{
							new selected = tmpSelected[playerid],
								__reset_Salon[E_SALON_DATA],
								string[356];
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`");
							log_set_values("'%d','%e','(AM) Istryne salona','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), SalonData[tmpSelected[playerid]][salonId], SalonData[tmpSelected[playerid]][salonName]);
							log_commit();
							mysql_format(chandler, string, sizeof string, "DELETE FROM `sell_salons` WHERE id = '%d'; DELETE FROM `sell_salons_spawns` WHERE SalonId = '%d'; DELETE FROM `sell_vehicles` WHERE SalonId = '%d'", SalonData[selected][salonId], SalonData[selected][salonId], SalonData[selected][salonId]);
							mysql_fquery(chandler, string, "SalonDeleted");
							sd_DestroyDynamicPickup(SalonData[selected][salonPickup]);
							Iter_Remove(Salon, selected);
							SalonData[selected] = __reset_Salon;
							MsgSuccess(playerid, "SALONAS", "Sëkmingai iðtrynëte salonà.");
							OnDialogResponse(playerid, DIALOG_AM_SALONS_MAIN, 1, 1, "");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_SALONS_MAIN, 1, 1, "");
		}
		case DIALOG_AM_SALONS_ALL:
		{
			if(response)
			{
				new selected;
				GetSortedAsForeach(Salon, listitem, selected, SalonData[loopindex][salonId] != 0);
				tmpSelected[playerid] = selected;
				new string[356];
				format(string, sizeof string, "{BABABA}Nustatymas\t{BABABA}Dabartinë reikðmë\nPavadinimas\t%.24s%s\nKeisti vietà\nGalimos SPAWN vietos po nupirkimo\nParduodamos tr. priemonës\n%s broko tikimybæ\n{C60000}Iðtrinti", SalonData[selected][salonName], strlen(SalonData[selected][salonName]) > 24 ? ("...") : (""), SalonData[selected][salonGarbage] > 0 ? ("Iðjungti") : ("Ájungti"));
				ShowPlayerDialog(playerid, DIALOG_AM_SALON_EDIT, DIALOG_STYLE_TABLIST_HEADERS, "Tr. priemoniø salonai", string, "Tæsti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 6, "");
		}
		case DIALOG_AM_SALONS_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// kurti nauja salona
						if(HaveAdminPermission(playerid, "CreateNewSalon"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_SALON_CREATE, DIALOG_STYLE_INPUT, "Tr. priemoniø salonai", "{FFFFFF}Áveskite naujojo salono pavadinimà.", "Tæsti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						// visi
						if(HaveAdminPermission(playerid, "EditSalons"))
						{
							new string[512] = "{BABABA}Nr.\t{BABABA}Pavadinimas\t{BABABA}MySQL ID (numeris)\n",
								line[86],
								real_itter;
							foreach(new salon : Salon)
							{
								if(SalonData[salon][salonId] != 0)
								{
									real_itter++;
									format(line, sizeof line, "%d.\t%.10s%s\t%d\n", real_itter, SalonData[salon][salonName], strlen(SalonData[salon][salonName]) > 10 ? ("...") : (""), SalonData[salon][salonId]);
									strcat(string, line);
								}
							}
							if(real_itter == 0) return ShowPlayerAdminMenu(playerid) , SendWarning(playerid, "Nëra salonø.");
							ShowPlayerDialog(playerid, DIALOG_AM_SALONS_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Tr. priemoniø salonai", string, "Tæsti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
			else ShowPlayerAdminMenu(playerid);
		}
		
		case DIALOG_AM_PAYPHONE_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(HaveAdminPermission(playerid, "ChangePayPhonePosition"))
						{
							// vieta
							new selected = tmpSelected[playerid],
								Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							SetDynamicObjectPos(PayPhoneInfo[selected][payPhoneObject], x+1, y+1, z);
							Streamer_Update(playerid);
							PayPhoneInfo[selected][payPhoneX] = x+1,
							PayPhoneInfo[selected][payPhoneY] = y+1,
							PayPhoneInfo[selected][payPhoneZ] = z;
							FixPayPhoneLabel(selected);
							tmpEditing_Component_DMV[playerid] = EDITING_TYPE_DYNAMIC_PAYPHONE;
							EditDynamicObject(playerid, PayPhoneInfo[selected][payPhoneObject]);
						}
						else return InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						// teleport
						new selected = tmpSelected[playerid];
						SetPlayerPos(playerid, PayPhoneInfo[selected][payPhoneX], PayPhoneInfo[selected][payPhoneY], PayPhoneInfo[selected][payPhoneZ]);
						OnDialogResponse(playerid, DIALOG_AM_PAYPHONE_MAIN, 1, 0, "");
					}
					case 2:
					{
						if(HaveAdminPermission(playerid, "DeletePayPhone"))
						{
							// istrinti
							new selected = tmpSelected[playerid],
								__reset_PayPhone[E_PAYPHONE_DATA],
								string[126];
							log_init(true);
							log_set_table("logs_admins");
							log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
							log_set_values("'%d','%e','(AM) Istryne taksofona','%d'", LogPlayerId(playerid), LogPlayerName(playerid), PayPhoneInfo[selected][payPhoneId]);
							log_commit();
							mysql_format(chandler, string, sizeof string, "DELETE FROM `payphones_data` WHERE id = '%d'", PayPhoneInfo[selected][payPhoneId]);
							mysql_fquery(chandler, string, "PayPhoneDeleted");
							if(IsValidDynamicObject(PayPhoneInfo[selected][payPhoneObject])) DestroyDynamicObject(PayPhoneInfo[selected][payPhoneObject], "payphone", "admin_delete");
							if(IsValidDynamic3DTextLabel(PayPhoneInfo[selected][payPhoneLabel])) DestroyDynamic3DTextLabel(PayPhoneInfo[selected][payPhoneLabel]);
							PayPhoneInfo[selected] = __reset_PayPhone;
							PayPhoneInfo[selected][payPhoneLabel] = INVALID_3DTEXT_ID;
							PayPhoneInfo[selected][payPhoneObject] = INVALID_OBJECT_ID;
							Iter_Remove(PayPhone, selected);
							MsgSuccess(playerid, "TAKSOFONAI", "Taksofonas iðtrintas.");
							OnDialogResponse(playerid, DIALOG_AM_PAYPHONE_MAIN, 1, 0, "");
						}
						else return InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_PAYPHONE_MAIN, 1, 0, "");
		}
		case DIALOG_AM_PAYPHONES_ALL:
		{
			if(response)
			{
				new selected;
				GetSortedAsForeach(PayPhone, listitem, selected, PayPhoneInfo[loopindex][payPhoneId] != 0);
				tmpSelected[playerid] = selected;
				ShowPlayerDialog(playerid, DIALOG_AM_PAYPHONE_EDIT, DIALOG_STYLE_LIST, "Taksofonai", "Keisti pozicijà\nTeleportuotis prie taksofono\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 14, "");
		}
		case DIALOG_AM_PAYPHONE_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// visi
						if(HaveAdminPermission(playerid, "EditPayPhones"))
						{
							new string[512] = "{BABABA}Nr.\t{BABABA}MySQL ID\t{BABABA}Vieta\n",
								line[64],
								i,
								zone[28];
							foreach(new pp : PayPhone)
							{
								if(PayPhoneInfo[pp][payPhoneId] != 0)
								{
									i++;
									GetCoords2DZone(zone, 28, PayPhoneInfo[pp][payPhoneX], PayPhoneInfo[pp][payPhoneY]);
									format(line, sizeof line, "%d.\t%d\t%s\n", i, PayPhoneInfo[pp][payPhoneId], zone);
									strcat(string, line);
								}
							}
							if(i == 0) return ShowPlayerAdminMenu(playerid) , SendWarning(playerid, "Nëra taksofonø.");
							ShowPlayerDialog(playerid, DIALOG_AM_PAYPHONES_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Taksofonai", string, "Tæsti", "Atðaukti");
						}
						else return InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						// prideti
						if(HaveAdminPermission(playerid, "CreateNewPayPhone"))
						{
							new itter = Iter_Free(PayPhone);
							if(itter != MAX_PAYPHONES-1)
							{
								new string[256],
									Float:x,
									Float:y,
									Float:z;
								GetPlayerPos(playerid, x, y, z);
								mysql_format(chandler, string, sizeof string, "INSERT INTO `payphones_data` (`X`,`Y`,`Z`,`Added`) VALUES ('%f','%f','%f','%d')", x, y, z, PlayerInfo[playerid][pId]);
								new Cache:result = mysql_query(chandler, string, true);
								cache_set_active(result);
								PayPhoneInfo[itter][payPhoneId] = cache_insert_id();
								cache_delete(result);
								PayPhoneInfo[itter][payPhoneX] = x+1,
								PayPhoneInfo[itter][payPhoneY] = y+1,
								PayPhoneInfo[itter][payPhoneY] = z+1;
								PayPhoneInfo[itter][payPhoneObject] = CreateDynamicObject(1216, x+1, y+1, z+1, 0.0, 0.0, 0.0, .called = "payphone", .extra = "create");
								FixPayPhoneLabel(itter);
								Streamer_Update(playerid);
								tmpSelected[playerid] = itter;
								tmpEditing_Component_DMV[playerid] = EDITING_TYPE_DYNAMIC_PAYPHONE;
								EditDynamicObject(playerid, PayPhoneInfo[itter][payPhoneObject]);
								Iter_Add(PayPhone, itter);
								MsgSuccess(playerid, "TAKSOFONAI", "Sëkmingai sukûrëte taksofonà, kurio ID: %d.", PayPhoneInfo[itter][payPhoneId]);
								log_init(true);
								log_set_table("logs_admins");
								log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
								log_set_values("'%d','%e','(AM) Sukure nauja taksofona','%d'", LogPlayerId(playerid), LogPlayerName(playerid), PayPhoneInfo[itter][payPhoneId]);
								log_commit();
							}
						}
						else return InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
			else ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 3:
					{
						// garazai
						ShowPlayerDialog(playerid, DIALOG_AM_GARAGES_MAIN, DIALOG_STYLE_LIST, "Garaþai", "Kurti naujà\nPerþiûrëti visus", "Tæsti", "Atðaukti");
					}
					case 4:
					{
						// namai
						ShowPlayerDialog(playerid, DIALOG_AM_HOUSES_MAIN, DIALOG_STYLE_LIST, "Namai", "Kurti naujà\nPerþiûrëti visus", "Tæsti", "Atðaukti");
					}
					case 5:
					{
						// verslai
						ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_MAIN, DIALOG_STYLE_LIST, "Verslai", "Kurti naujà\nPerþiûrëti visus\nGalimos prekës parduotuvëms\nVerslo lygiai", "Tæsti", "Atðaukti");
					}
					case 6:
					{
						// tr. priemoniu salonai
						ShowPlayerDialog(playerid, DIALOG_AM_SALONS_MAIN, DIALOG_STYLE_LIST, "Tr. priemoniø salonai", "Kurti naujà\nPerþiûrëti visus", "Tæsti", "Atðaukti");
					}

					case 8:
					{
						// frakcijos
						ShowPlayerDialog(playerid, DIALOG_AM_FACTION_MAIN, DIALOG_STYLE_LIST, "Frakcijos", "Perþiûrëti visas\nPridëti", "Tæsti", "Atðaukti");
					}
					case 9:
					{
						// parduodamos tr. priemones frakcijoms
						ShowPlayerDialog(playerid, DIALOG_AM_FACTION_SALONS_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "Parduodamos tr. priemonës frakcijoms", "Frakcijos tipas\nPaprasta frakcija\nPolicija\nFD/MD\nSavivaldybë\nNelegali frakcija\nLegali frakcija\nSan News", "Tæsti", "Atðaukti");
					}
					case 10:
					{
						// tr. priemoniu aiksteles
						ShowPlayerDialog(playerid, DIALOG_AM_PARKING_MAIN, DIALOG_STYLE_LIST, "Aikðtelës", "Perþiûrëti visas\nPridëti", "Tæsti", "Atðaukti");
					}
					case 11:
					{
						// grupes
						ShowPlayerDialog(playerid, DIALOG_AM_GROUPS_MAIN, DIALOG_STYLE_LIST, "Grupës", "Perþiûrëti visas\nPridëti", "Tæsti", "Atðaukti");
					}
					case 13:
					{
						// interjeru meniu
						mysql_tquery(chandler, "SELECT * FROM `interiors` LIMIT 50 OFFSET 0", "InteriorsMenuLoad", "dd", playerid, 0);
					}
					case 14:
					{
						// taksofonai
						ShowPlayerDialog(playerid, DIALOG_AM_PAYPHONE_MAIN, DIALOG_STYLE_LIST, "Taksofonai", "Perþiûrëti visus\nPridëti", "Tæsti", "Atðaukti");
					}
					case 15:
					{
						// gun nark dealai
						ShowPlayerDialog(playerid, DIALOG_AM_BM_MAIN, DIALOG_STYLE_LIST, "Juodosios rinkos nustatymai", "Konspiraciniai namai\nTransporto priemonës\nUþsakovai ir tiekëjai", "Tæsti", "Atðaukti");
					}
					/*case 16:
					{
						ShowPlayerDialog(playerid, DIALOG_AM_3D_MAIN, DIALOG_STYLE_LIST, "Informaciniai labeliai", "Perþiûrëti visus\nPridëti", "Tæsti", "Atðaukti");
					}*/
				}
			}
		}
		case DIALOG_AM_PARKINGS_ALL:
		{
			if(response)
			{
				new string[256],
					selected;
				GetSortedAsForeach(Parking, listitem, selected, ParkingInfo[loopindex][parkingId] != 0);
				tmpSelected[playerid] = selected;
				format(string, sizeof string, "{BABABA}Nustatymas\t{BABABA}Dabartinë reikðmë\nKeisti pavadinimà\t%s\nKeisti ávaþiavimo pozicijà\nKeisti iðvaþiavimo pozicijà\nTeleportuotis prie ávaþiavimo\nTeleportuotis prie iðvaþiavimo\n{C60000}Iðtrinti", ParkingInfo[selected][parkingName]);
				ShowPlayerDialog(playerid, DIALOG_AM_PARKING_EDIT_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "Aikðtelës", string, "Tæsti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 10, "");
		}
		case DIALOG_AM_PARKING_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// pavadinimas
						ShowPlayerDialog(playerid, DIALOG_AM_PARKING_EDIT_NAME, DIALOG_STYLE_INPUT, "Aikðtelës", "{FFFFFF}Áveskite naujà pavadinimà.", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// ivaziavimas
						new id = tmpSelected[playerid];
						GetPlayerPos(playerid, ParkingInfo[id][parkingEnterX], ParkingInfo[id][parkingEnterY], ParkingInfo[id][parkingEnterZ]);
						ParkingInfo[id][parkingOutVW] = GetPlayerVirtualWorld(playerid);
						ParkingInfo[id][parkingExterior] = GetPlayerInterior(playerid);
						new string[186];
						mysql_format(chandler, string, sizeof string, "UPDATE `parkings_data` SET EnterX = '%f', EnterY = '%f', EnterZ = '%f', OutVW = '%d', Exterior = '%d'", ParkingInfo[id][parkingEnterX], ParkingInfo[id][parkingEnterY], ParkingInfo[id][parkingEnterZ], ParkingInfo[id][parkingOutVW], ParkingInfo[id][parkingExterior]);
						mysql_fquery(chandler, string, "ParkingUpdated");
						MsgSuccess(playerid, "AIKÐTELËS", "Ávaþiavimo vieta sëkmingai pakeista.");
						FixParkingLabels(id);
						ShowPlayerAdminMenu(playerid);
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','(AM) Pakeite parkingo ivaziavima','%d'", LogPlayerId(playerid), LogPlayerName(playerid), ParkingInfo[id][parkingId]);
						log_commit();
					}
					case 2:
					{
						// isvaziavimas
						new id = tmpSelected[playerid];
						GetPlayerPos(playerid, ParkingInfo[id][parkingExitX], ParkingInfo[id][parkingExitY], ParkingInfo[id][parkingExitZ]);
						ParkingInfo[id][parkingVW] = GetPlayerVirtualWorld(playerid);
						ParkingInfo[id][parkingInterior] = GetPlayerInterior(playerid);
						new string[186];
						mysql_format(chandler, string, sizeof string, "UPDATE `parkings_data` SET ExitX = '%f', ExitY = '%f', ExitZ = '%f', VW = '%d', Interior = '%d'", ParkingInfo[id][parkingExitX], ParkingInfo[id][parkingExitY], ParkingInfo[id][parkingExitZ], ParkingInfo[id][parkingVW], ParkingInfo[id][parkingInterior]);
						mysql_fquery(chandler, string, "ParkingUpdated");
						MsgSuccess(playerid, "AIKÐTELËS", "Iðvaþiavimo vieta sëkmingai pakeista.");
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','(AM) Pakeite parkingo isvaziavima','%d'", LogPlayerId(playerid), LogPlayerName(playerid), ParkingInfo[id][parkingId]);
						log_commit();
					}
					case 3:
					{
						// teleport prie ivaziavimo
						new id = tmpSelected[playerid];
						SetPlayerPos(playerid, ParkingInfo[id][parkingEnterX], ParkingInfo[id][parkingEnterY], ParkingInfo[id][parkingEnterZ]);
						SetPlayerVirtualWorld(playerid, ParkingInfo[id][parkingOutVW]);
						SetPlayerInterior(playerid, ParkingInfo[id][parkingExterior]);
					}
					case 4:
					{
						// teleport prie isvaziavimo
						new id = tmpSelected[playerid];
						SetPlayerPos(playerid, ParkingInfo[id][parkingExitX], ParkingInfo[id][parkingExitY], ParkingInfo[id][parkingExitZ]);
						SetPlayerVirtualWorld(playerid, ParkingInfo[id][parkingVW]);
						SetPlayerInterior(playerid, ParkingInfo[id][parkingInterior]);
					}
					case 5:
					{
						// istrinti
						new id = tmpSelected[playerid],
							string[86],
							__reset_Parking[E_PARKING_DATA];
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`");
						log_set_values("'%d','%e','(AM) Istryne parkinga','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), ParkingInfo[id][parkingId], ParkingInfo[id][parkingName]);
						log_commit();
						DestroyDynamic3DTextLabel(ParkingInfo[id][parkingLabel]);
						mysql_format(chandler, string, sizeof string, "DELETE FROM `parkings_data` WHERE id = '%d'", ParkingInfo[id][parkingId]);
						mysql_fquery(chandler, string, "ParkingDeleted");
						ParkingInfo[id] = __reset_Parking;
						ParkingInfo[id][parkingLabel] = INVALID_3DTEXT_ID;
						Iter_Remove(Parking, id);
						MsgSuccess(playerid, "AIKÐTELËS", "Sëkmingai iðtrynëte aikðtelæ.");
						ShowPlayerAdminMenu(playerid);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_PARKING_MAIN, 1, 0, "");
		}
		case DIALOG_AM_PARKING_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// perziureti visas
						if(HaveAdminPermission(playerid, "EditParkings"))
						{
							new string[4020] = "Nr.\tPavadinimas (MySQL ID)\tVieta\n",
								line[64],
								i,
								zone[28];
							foreach(new parking : Parking)
							{
								if(ParkingInfo[parking][parkingId] != 0)
								{
									i++;
									GetCoords2DZone(zone, 28, ParkingInfo[parking][parkingEnterX], ParkingInfo[parking][parkingEnterY]);
									format(line, sizeof line, "%d.\t%.14s (%d)\t%s\n", i, ParkingInfo[parking][parkingName], ParkingInfo[parking][parkingId], zone);
									strcat(string, line);
								}
							}
							if(i == 0) return ShowPlayerAdminMenu(playerid) , SendWarning(playerid, "Nëra aikðteliø.");
							ShowPlayerDialog(playerid, DIALOG_AM_PARKINGS_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Aikðtelës", string, "Tæsti", "Atðaukti");
						}
						else return InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						if(HaveAdminPermission(playerid, "CreateNewParking"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_PARKING_ADD, DIALOG_STYLE_INPUT, "Aikðtelës", "{FFFFFF}Áveskite naujos aikðtelës pavadinimà.", "Tæsti", "Atðaukti");
						}
						else return InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
			else ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_PARKING_ADD:
		{
			if(response)
			{
				new name[24];
				if(sscanf(inputtext,"s[24]",name)) return OnDialogResponse(playerid, DIALOG_AM_PARKING_MAIN, 1, 1, "");
				new itter = Iter_Free(Parking);
				GetPlayerPos(playerid, ParkingInfo[itter][parkingEnterX], ParkingInfo[itter][parkingEnterY], ParkingInfo[itter][parkingEnterZ]);
				ParkingInfo[itter][parkingOutVW] = GetPlayerVirtualWorld(playerid);
				ParkingInfo[itter][parkingInterior] = GetPlayerInterior(playerid);
				new string[256];
				mysql_format(chandler, string, sizeof string, "INSERT INTO `parkings_data` (`Name`,`EnterX`,`EnterY`,`EnterZ`,`OutVW`,`Exterior`) VALUES ('%e','%f','%f','%f','%d','%d')", name, ParkingInfo[itter][parkingEnterX], ParkingInfo[itter][parkingEnterY], ParkingInfo[itter][parkingEnterZ], ParkingInfo[itter][parkingOutVW], ParkingInfo[itter][parkingExterior]);
				new Cache:result = mysql_query(chandler, string, true);
				format(ParkingInfo[itter][parkingName], 24, name);
				ParkingInfo[itter][parkingId] = cache_insert_id();
				cache_delete(result);
				Iter_Add(Parking, itter);
				FixParkingLabels(itter);
				MsgSuccess(playerid, "AIKÐTELËS", "Sëkmingai sukûrëte naujà aikðtelæ, kurios ID: %d", ParkingInfo[itter][parkingId]);
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
				log_set_values("'%d','%e','(AM) Sukure nauja parkinga','%d'", LogPlayerId(playerid), LogPlayerName(playerid), ParkingInfo[itter][parkingId]);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 10, "");
		}
		case DIALOG_AM_FACTION_SALONS_LIST:
		{
			if(response)
			{
				if(listitem >= tmpTexture_MarkStart_CP[playerid])
				{
					// prideti
					ShowPlayerDialog(playerid, DIALOG_AM_FACTION_SALONS_ADD, DIALOG_STYLE_INPUT, "Parduodamos tr. priemonës frakcijoms", "{FFFFFF}Áveskite tr. priemonës modelá\n{BABABA}(wiki.sa-mp.com/wiki/Vehicle_Model_ID_List)", "Tæsti", "Atðaukti");
				}
				else
				{
					tmpIter[playerid] = listitem;
					ShowPlayerDialog(playerid, DIALOG_AM_FACTION_SALONS_EDIT, DIALOG_STYLE_LIST, "Parduodamos tr. priemonës frakcijoms", "Keisti modelá\nKeisti kainà\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 9, "");
		}
		case DIALOG_AM_FACTIONS_SALON_EDIT_MODEL:
		{
			if(response)
			{
				new model;
				if(sscanf(inputtext,"d",model) || model < 400 || model > 611) return OnDialogResponse(playerid, DIALOG_AM_FACTION_SALONS_EDIT, 1, 0, "");
				new string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `sell_vehicles_factions` SET Model = '%d' WHERE id = '%d'", model, tmpArray[playerid][tmpIter[playerid]]);
				mysql_fquery(chandler, string, "SalonUpdated");
				MsgSuccess(playerid, "FRAKCIJOS", "Modelis sëkmingai pakeistas.");
				OnDialogResponse(playerid, DIALOG_AM_FACTION_SALONS_LIST, 1, tmpIter[playerid], "");
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 9, "");
		}
		case DIALOG_AM_FACTIONS_SALON_EDIT_PRICE:
		{
			if(response)
			{
				new price;
				if(sscanf(inputtext,"d",price) || price < 0) return OnDialogResponse(playerid, DIALOG_AM_FACTION_SALONS_EDIT, 1, 1, "");
				new string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `sell_vehicles_factions` SET Price = '%d' WHERE id = '%d'", price, tmpArray[playerid][tmpIter[playerid]]);
				mysql_fquery(chandler, string, "SalonUpdated");
				MsgSuccess(playerid, "FRAKCIJOS", "Kaina sëkmingai pakeista.");
				OnDialogResponse(playerid, DIALOG_AM_FACTION_SALONS_LIST, 1, tmpIter[playerid], "");
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 9, "");
		}
		case DIALOG_AM_FACTION_SALONS_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// modelis
						ShowPlayerDialog(playerid, DIALOG_AM_FACTIONS_SALON_EDIT_MODEL, DIALOG_STYLE_INPUT, "Parduodamos tr. priemonës frakcijoms", "{FFFFFF}Áveskite naujà modelá", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// kaina
						ShowPlayerDialog(playerid, DIALOG_AM_FACTIONS_SALON_EDIT_PRICE, DIALOG_STYLE_INPUT, "Parduodamos tr. priemonës frakcijoms", "{FFFFFF}Áveskite naujà kainà", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// istrinti
						new string[126];
						mysql_format(chandler, string, sizeof string, "DELETE FROM `sell_vehicles_factions` WHERE id = '%d'", tmpArray[playerid][tmpIter[playerid]]);
						mysql_fquery(chandler, string, "SalonVehicleDeleted");
						MsgSuccess(playerid, "FRAKCIJOS", "Tr. priemonë paðalinta ið sàraðo.");
						OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 9, "");
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 9, "");
		}
		case DIALOG_AM_FACTION_SALONS_ADD:
		{
			if(response)
			{
				new model;
				if(sscanf(inputtext, "d", model) || model < 400 || model > 611) return OnDialogResponse(playerid, DIALOG_AM_FACTION_SALONS_LIST, 1, tmpTexture_MarkStart_CP[playerid], "");
				new string[126];
				mysql_format(chandler, string, sizeof string, "INSERT INTO `sell_vehicles_factions` (`Added`,`FactionType`,`Model`) VALUES ('%d','%d','%d')", PlayerInfo[playerid][pId], tmpSelected[playerid], model);
				mysql_fquery(chandler, string, "SalonVehicleAdd");
				MsgSuccess(playerid, "FRAKCIJOS", "Tr. priemonë sëkmingai pridëta á galimø pirkti sàraðà. Pakeiskite jos kainà");
				OnDialogResponse(playerid, DIALOG_AM_FACTION_SALONS_MAIN, 1, tmpSelected[playerid], "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
				log_set_values("'%d','%e','(AM) Pridejo automobili i galimu sarasa frakcijoms','%d'", LogPlayerId(playerid), LogPlayerName(playerid), model);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 9, "");
		}
		case DIALOG_AM_FACTION_SALONS_MAIN:
		{
			if(response)
			{
				new string[126];
				tmpSelected[playerid] = listitem;
				mysql_format(chandler, string, sizeof string, "SELECT * FROM `sell_vehicles_factions` WHERE FactionType = '%d'", listitem);
				mysql_tquery(chandler, string, "FactionSalonVehiclesLoad", "d", playerid);
			}
			else ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_GROUP_EDIT_PRIVILEGES:
		{
			if(response)
			{
				if(listitem >= tmpTexture_MarkStart_CP[playerid])
				{
					// atgal arba pirmyn
					new groupid = tmpIter[playerid];
					if(listitem == tmpTexture_MarkStart_CP[playerid] && tmpPage_Object[playerid] > 0)
					{
						// atgal
						new query[289];
						mysql_format(chandler, query, sizeof query, "\
							SELECT `list`.*,(CASE WHEN (SELECT COUNT(*) FROM `groups_permissions` `group` WHERE `group`.`Permission` = `list`.`Permission` AND `group`.`GroupId` = '%d') > 0 THEN 1 ELSE 0 END) as `HavePermission` FROM `groups_permissions_list` `list` LIMIT %d OFFSET %d",
							GroupsInfo[groupid][groupId],
							ADMIN_PERMISSIONS_PER_PAGE+1,
							(tmpPage_Object[playerid]-1)*ADMIN_PERMISSIONS_PER_PAGE);
						mysql_tquery(chandler, query, "GroupsPermissionsListLoad", "ddd", playerid, GroupsInfo[groupid][groupId], tmpPage_Object[playerid]-1);
					}
					else
					{
						// kitas 15
						new query[289];
						mysql_format(chandler, query, sizeof query, "\
							SELECT `list`.*,(CASE WHEN (SELECT COUNT(*) FROM `groups_permissions` `group` WHERE `group`.`Permission` = `list`.`Permission` AND `group`.`GroupId` = '%d') > 0 THEN 1 ELSE 0 END) as `HavePermission` FROM `groups_permissions_list` `list` LIMIT %d OFFSET %d",
							GroupsInfo[groupid][groupId],
							ADMIN_PERMISSIONS_PER_PAGE+1,
							(tmpPage_Object[playerid]+1)*ADMIN_PERMISSIONS_PER_PAGE);
						mysql_tquery(chandler, query, "GroupsPermissionsListLoad", "ddd", playerid, GroupsInfo[groupid][groupId], tmpPage_Object[playerid]+1);
					}
				}
				else
				{
					// pasirinko kazkuria
					new string[96],
						insert[126],
						groupid = tmpIter[playerid],
						permission_name[30];
					mysql_format(chandler, string, sizeof string, "SELECT `Permission` FROM `groups_permissions_list` LIMIT 1 OFFSET %d", tmpPage_Object[playerid]*ADMIN_PERMISSIONS_PER_PAGE+listitem);
					new Cache:result = mysql_query(chandler, string, true);
					cache_set_active(result);
					cache_get_value_name(0, "Permission", permission_name);
					cache_delete(result);
					// tikrinam ar egzistuoja
					mysql_format(chandler, insert, sizeof insert, "SELECT NULL FROM `groups_permissions` WHERE GroupId = '%d' AND Permission = '%e'", GroupsInfo[groupid][groupId], permission_name);
					result = mysql_query(chandler, insert, true);
					cache_set_active(result);
					if(cache_num_rows())
					{
						// then delete
						mysql_format(chandler, insert, sizeof insert, "DELETE FROM `groups_permissions` WHERE GroupId = '%d' AND Permission = '%e'", GroupsInfo[groupid][groupId], permission_name);
						mysql_query(chandler, insert, false);
					}
					else
					{
						// then insert
						mysql_format(chandler, insert, sizeof insert, "INSERT INTO `groups_permissions` (`GroupId`,`Permission`) VALUES ('%d','%e')", GroupsInfo[groupid][groupId], permission_name);
						mysql_query(chandler, insert, false); // nedarom threaded, kad nerodytu senos data.
					}
					cache_delete(result);
					// show everything again
					OnDialogResponse(playerid, DIALOG_AM_GROUP_EDIT_MAIN, 1, 1, "");
				}
			}
			else
			{
				tmpTexture_MarkStart_CP[playerid] =
				tmpPage_Object[playerid] = 0;
				OnDialogResponse(playerid, DIALOG_AM_GROUPS_ALL, 1, tmpSelected[playerid], "");
			}
		}
		case DIALOG_AM_GROUP_EDIT_NAME:
		{
			if(response)
			{
				new name[30],
					string[126],
					groupid = tmpIter[playerid];
				if(sscanf(inputtext,"s[30]",name) || strlen(name) > 30) return OnDialogResponse(playerid, DIALOG_AM_GROUP_EDIT_MAIN, 1, 0, "");
				format(GroupsInfo[groupid][groupName], 30, name);
				mysql_format(chandler, string, sizeof string, "UPDATE `groups_data` SET Name = '%e' WHERE id = '%d'", name, GroupsInfo[groupid][groupId]);
				mysql_fquery(chandler, string, "GroupSaved");
			}
			else OnDialogResponse(playerid, DIALOG_AM_GROUPS_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_AM_GROUP_EDIT_COMMANDS:
		{
			if(response)
			{
				// komanda pasirinko
				new	name[24],
					query[116],
					real,
					Cache:result,
					groupid = GroupsInfo[tmpIter[playerid]][groupId],
					CmdArray:array = PC_GetCommandArray();
				for(new i = 0, size = PC_GetArraySize(array); i < size; i++)
				{
					PC_GetCommandName(array, i, name, sizeof name);
					if(PC_GetFlags(name) & CMD_TYPE_ADMIN)
					{
						if(real == listitem) { break; }
						real++;
					}
				}
				mysql_format(chandler, query, sizeof query, "SELECT NULL FROM `groups_commands` WHERE GroupId = '%d' AND Command = '%e'", groupid, name);
				SendFormat(playerid, -1, query);
				result = mysql_query(chandler, query, true);
				cache_set_active(result);
				if(cache_num_rows())
				{
					// delete
					mysql_format(chandler, query, sizeof query, "DELETE FROM `groups_commands` WHERE GroupId = '%d' AND Command = '%e'", groupid, name);
					mysql_query(chandler, query, false);
					SendFormat(playerid, -1, query);
				}
				else
				{
					// insert
					mysql_format(chandler, query, sizeof query, "INSERT INTO `groups_commands` (`GroupId`,`Command`) VALUES ('%d','%e')", groupid, name);
					mysql_query(chandler, query, false);
					SendFormat(playerid, -1, query);
				}
				cache_delete(result);
				OnDialogResponse(playerid, DIALOG_AM_GROUP_EDIT_MAIN, 1, 2, "");
			}
			else OnDialogResponse(playerid, DIALOG_AM_GROUPS_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_AM_GROUP_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// pavadinimas
						ShowPlayerDialog(playerid, DIALOG_AM_GROUP_EDIT_NAME, DIALOG_STYLE_INPUT, "Grupës", "{FFFFFF}Áveskite naujà grupës pavadinimà. (maks. 30 simboliø)", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// teises
						new string[86],
							Cache:result,
							groupid = tmpIter[playerid];
						mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `groups_data` WHERE id = '%d' AND Super = '1'", GroupsInfo[groupid][groupId]);
						result = mysql_query(chandler, string, true);
						if(cache_num_rows())
						{
							cache_delete(result);
							SendError(playerid, "Ðios grupës teisiø redaguoti negalima.");
							return OnDialogResponse(playerid, DIALOG_AM_GROUPS_ALL, 1, tmpSelected[playerid], "");
						}
						else
						{
							cache_delete(result);
							if(HaveAdminPermission(playerid, "EditGroupPermissions"))
							{
								new query[289];
								mysql_format(chandler, query, sizeof query, "\
									SELECT `list`.*,(CASE WHEN (SELECT COUNT(*) FROM `groups_permissions` `group` WHERE `group`.`Permission` = `list`.`Permission` AND `group`.`GroupId` = '%d') > 0 THEN 1 ELSE 0 END) as `HavePermission` FROM `groups_permissions_list` `list` LIMIT %d OFFSET %d",
									GroupsInfo[groupid][groupId],
									ADMIN_PERMISSIONS_PER_PAGE+1,
									tmpPage_Object[playerid]*ADMIN_PERMISSIONS_PER_PAGE);
								mysql_tquery(chandler, query, "GroupsPermissionsListLoad", "ddd", playerid, GroupsInfo[groupid][groupId], tmpPage_Object[playerid]);
							}
							else InfoBox(playerid, IB_NO_PRIVILEGE);
						}
					}
					case 2:
					{
						// komandos
						new check[86],
							Cache:result;
						mysql_format(chandler, check, sizeof check, "SELECT NULL FROM `groups_data` WHERE id = '%d' AND Super = '1'", tmpArray[playerid][tmpSelected[playerid]]);
						result = mysql_query(chandler, check, true);
						if(cache_num_rows())
						{
							cache_delete(result);
							SendError(playerid, "Ðios grupës komandø redaguoti negalima.");
							return OnDialogResponse(playerid, DIALOG_AM_GROUPS_ALL, 1, tmpSelected[playerid], "");
						}
						else
						{
							cache_delete(result);
							if(HaveAdminPermission(playerid, "EditGroupCommands"))
							{
								new string[2565] = "{BABABA}Komanda\t{BABABA}Turi teisæ\n",
									line[56],
									name[24],
									query[116],
									groupid = tmpIter[playerid],
									CmdArray:array = PC_GetCommandArray();
								for(new i = 0, size = PC_GetArraySize(array); i < size; i++)
								{
									PC_GetCommandName(array, i, name, sizeof name);
									if(PC_GetFlags(name) & CMD_TYPE_ADMIN)
									{
										mysql_format(chandler, query, sizeof query, "SELECT NULL FROM `groups_commands` WHERE GroupId = '%d' AND Command = '%e'", GroupsInfo[groupid][groupId], name);
										result = mysql_query(chandler, query, true);
										format(line, sizeof line, "/%s\t%s\n", name, (cache_num_rows() ? ("+") : (" ")));
										cache_delete(result);
										strcat(string, line);
									}
								}
								ShowPlayerDialog(playerid, DIALOG_AM_GROUP_EDIT_COMMANDS, DIALOG_STYLE_TABLIST_HEADERS, "Grupës", string, "Keisti", "Atðaukti");
							}
							else return InfoBox(playerid, IB_NO_PRIVILEGE);
						}
					}

					case 3:
					{
						// istrinti
						if(HaveAdminPermission(playerid, "DeleteGroup"))
						{
							new groupid = tmpIter[playerid],
								string[500];
							mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `groups_data` WHERE id = '%d' AND Super = '1'", GroupsInfo[groupid][groupId]);
							new Cache:result = mysql_query(chandler, string, true);
							cache_set_active(result);
							if(cache_num_rows())
							{
								cache_delete(result);
								SendError(playerid, "Ðios grupës iðtrinti negalima.");
								return OnDialogResponse(playerid, DIALOG_AM_GROUPS_ALL, 1, tmpSelected[playerid], "");
							}
							else
							{
								log_init(true);
								log_set_table("logs_admins");
								log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`");
								log_set_values("'%d','%e','(AM) Istryne grupe','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), GroupsInfo[groupid][groupId], GroupsInfo[groupid][groupName]);
								log_commit();

								new groupSql = GroupsInfo[groupid][groupId];

								
								mysql_format(chandler, string, sizeof string, "DELETE FROM `groups_data` WHERE id = '%d'", groupSql);
								mysql_fquery(chandler, string, "GroupDeleted");
								mysql_format(chandler, string, sizeof string, "DELETE FROM `groups_permissions` WHERE GroupId = '%d'", groupSql);
								mysql_fquery(chandler, string, "GroupDeleted");
								mysql_format(chandler, string, sizeof string, "DELETE FROM `groups_commands` WHERE GroupId = '%d'", groupSql);
								mysql_fquery(chandler, string, "GroupDeleted");
								mysql_format(chandler, string, sizeof string, "UPDATE `users_data` SET Group1 = '0' WHERE Group1 = '%d'", groupSql);
								mysql_fquery(chandler, string, "GroupDeleted");
								mysql_format(chandler, string, sizeof string, "UPDATE `users_data` SET Group2 = '0' WHERE Group2 = '%d'", groupSql);
								mysql_fquery(chandler, string, "GroupDeleted");
								mysql_format(chandler, string, sizeof string, "UPDATE `users_data` SET Group3 = '0' WHERE Group3 = '%d'", groupSql);
								mysql_fquery(chandler, string, "GroupDeleted");

								MsgSuccess(playerid, "GRUPËS", "Grupë sëkmingai iðtrinta.");
								reset(AdminGroup, GroupsInfo[groupid], E_GROUP_DATA);
								Iter_Remove(AdminGroup, groupid);
							}
							cache_delete(result);
						}
						else return InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_GROUPS_MAIN, 1, 0, "");
		}
		case DIALOG_AM_GROUPS_ALL:
		{
			if(response)
			{
				tmpSelected[playerid] = listitem;
				new groupid; // itter
				GetSortedAsForeach(AdminGroup, listitem, groupid, EMPTY_STATEMENT);
				tmpIter[playerid] = groupid;
				tmpTexture_MarkStart_CP[playerid] =
				tmpPage_Object[playerid] = 0;
				ShowPlayerDialog(playerid, DIALOG_AM_GROUP_EDIT_MAIN, DIALOG_STYLE_LIST, "Grupës", "Keisti pavadinimà\nKeisti teises\nKeisti komandø teises\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 11, "");
		}
		case DIALOG_AM_GROUP_ADD:
		{
			if(response)
			{
				new name[30];

				if(sscanf(inputtext,"s[30]",name) || !strlen(name)) return OnDialogResponse(playerid, DIALOG_AM_GROUPS_MAIN, 1, 1, "");
				
				inline createNewGroup()
				{
					new iter = Iter_Free(AdminGroup);
					if(iter == ITER_NONE) return SendWarning(playerid, "Pasiektas grupiø limitas.");

					new group_sql = GroupsInfo[iter][groupId] = cache_insert_id();

					MsgSuccess(playerid, "GRUPËS", "Grupë sëkmingai sukurta.");
					ShowPlayerAdminMenu(playerid);

					format(GroupsInfo[iter][groupName], 30, name);
					Iter_Add(AdminGroup, iter);

					log_init(true);
					log_set_table("logs_admins");
					log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`");
					log_set_values("'%d','%e','(AM) Sukure nauja grupe','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), GroupsInfo[iter][groupId], inputtext);
					log_commit();

					inline getPermissions()
					{
						new permission_name[30];
						for(new i = 0, rows = cache_num_rows(); i < rows; i++)
						{
							cache_get_value_name(0, "Permission", permission_name);

							inline insertPermission() return 1;
							mysql_tquery_inline(chandler, using inline insertPermission, "\
								INSERT INTO `groups_permissions` (`GroupId`,`Permission`) VALUES ('%d','%s')", group_sql, permission_name
							);
						}
					}

					mysql_tquery_inline(chandler, using inline getPermissions, "SELECT `Permission` FROM `groups_permissions_list` WHERE DefaultValue > '0'");
					return 1;
				}
				mysql_tquery_inline(chandler, using inline createNewGroup, "\
					INSERT INTO `groups_data` (`Name`,`Super`,`Added`) VALUES ('%e','0','%d')", 
					name, PlayerInfo[playerid][pId]
				);
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 11, "");
		}
		case DIALOG_AM_GROUPS_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// visas
						if(HaveAdminPermission(playerid, "EditGroups"))
						{
							new line[56],
								i,
								string[512] = "{BABABA}Nr.\t{BABABA}Pavadinimas\n";
							foreach(new groupid : AdminGroup)
							{
								i++;
								format(line, sizeof line, "%d.\t%s (MySQL ID: %d)\n", i, GetGroupName(groupid, false), GroupsInfo[groupid][groupId]);
								strcat(string, line);
							}
							ShowPlayerDialog(playerid, DIALOG_AM_GROUPS_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Grupës", string, "Tæsti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						if(HaveAdminPermission(playerid, "CreateNewGroup"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_GROUP_ADD, DIALOG_STYLE_INPUT, "Grupës", "{FFFFFF}Áveskite naujà grupës pavadinimà.", "Kurti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
			else ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_FACTION_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// visas
						if(HaveAdminPermission(playerid, "EditFactions"))
						{
							new line[56],
								i,
								type[16],
								string[2024] = "{BABABA}Nr.\t{BABABA}Pavadinimas\t{BABABA}Tipas\n";
							foreach(new factionid : Faction)
							{
								if(FactionInfo[factionid][fId] == 0) { continue; }
								i++;
								switch(FactionInfo[factionid][fType])
								{
									case FACTION_TYPE_POLICE: format(type, sizeof type, "PD");
									case FACTION_TYPE_FIRE: format(type, sizeof type, "FD/MD");
									case FACTION_TYPE_GOVERNMENT: format(type, sizeof type, "Savivaldybë");
									case FACTION_TYPE_LEGAL: format(type, sizeof type, "Legali fr.");
									case FACTION_TYPE_ILLEGAL: format(type, sizeof type, "Nelegali fr.");
									case FACTION_TYPE_NONE: format(type, sizeof type, "Paprasta");
									case FACTION_TYPE_SAN_NEWS: format(type, sizeof type, "San News");
									default: format(type, sizeof type, "Neþinoma");
								}
								format(line, sizeof line, "%d.\t%0.30s (MySQL ID: %d)\t%s\n", i, FactionInfo[factionid][fName], FactionInfo[factionid][fId], type);
								strcat(string, line);
							}
							ShowPlayerDialog(playerid, DIALOG_AM_FACTIONS_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Frakcijos", string, "Tæsti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
					case 1:
					{
						if(HaveAdminPermission(playerid, "CreateNewFaction"))
						{
							ShowPlayerDialog(playerid, DIALOG_AM_FACTION_ADD, DIALOG_STYLE_INPUT, "Frakcijos", "{FFFFFF}Áveskite naujos frakcijos pavadinimà.", "Kurti", "Atðaukti");
						}
						else InfoBox(playerid, IB_NO_PRIVILEGE);
					}
				}
			}
			else ShowPlayerAdminMenu(playerid);
		}
		case DIALOG_AM_FACTIONS_ALL:
		{
			if(response)
			{
				new selected;
				GetSortedAsForeach(Faction, listitem, selected, FactionInfo[loopindex][fId] != 0);
				tmpSelected[playerid] = selected;
				ShowPlayerDialog(playerid, DIALOG_AM_FACTION_EDIT_MAIN, DIALOG_STYLE_LIST, "Frakcijos", "Keisti pavadinimà\nRedaguoti rankus\nKeisti spawn vietà\nKeisti tipà\nSuteikti/atimti frakcijos chat\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 8, "");
		}
		case DIALOG_AM_FACTION_EDIT_NAME:
		{
			if(response)
			{
				new selected = tmpSelected[playerid],
					name[48];
				if(sscanf(inputtext,"s[48]",name)) return OnDialogResponse(playerid, DIALOG_AM_FACTION_EDIT_MAIN, 1, 0, "");
				format(FactionInfo[selected][fName], 48, name);
				SaveFactionEx(selected, "Name", name);
				MsgSuccess(playerid, "FRAKCIJOS", "Pavadinimas sëkmingai pakeistas á %s", name);
				ShowPlayerAdminMenu(playerid);
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`");
				log_set_values("'%d','%e','(AM) Pakeite frakcijos pavadinima','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[selected][fId], inputtext);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 8, "");
		}
		case DIALOG_AM_FACTION_RANK_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// pavadinimas
						ShowPlayerDialog(playerid, DIALOG_AM_FACTION_RANK_EDIT_NAME, DIALOG_STYLE_INPUT, "Frakcijos rankai", "{FFFFFF}Áveskite naujà ranko pavadinimà.", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// alga
						ShowPlayerDialog(playerid, DIALOG_AM_FACTION_RANK_EDIT_SALARY, DIALOG_STYLE_INPUT, "Frakcijos rankai", "{FFFFFF}Áveskite naujà ranko algà.", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// trinti
						new factionid = tmpSelected[playerid],
							selected = tmpIter[playerid];
						FactionRankIds[factionid][selected] =
						FactionRankSalaries[factionid][selected] = 0;
						format(FactionRankNames[factionid][selected], 2, " ");
						new string[156];
						mysql_format(chandler, string, sizeof string, "DELETE FROM `factions_ranks` WHERE id = '%d'; UPDATE `factions_ranks` SET `Rank` = `Rank`-1 WHERE `Rank` > '%d'", FactionRankIds[factionid][selected], selected+1);
						mysql_fquery(chandler, string, "FactionSaved");
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`,`ReceiverId`");
						log_set_values("'%d','%e','(AM) Istryne frakcijos ranka','%d','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], FactionRankNames[factionid][selected], selected+1);
						log_commit();
						for(new i = selected; i < MAX_FACTION_RANKS; i++)
						{
							if(i != MAX_FACTION_RANKS-1)
							{
								FactionRankIds[factionid][i] = FactionRankIds[factionid][i+1];
								FactionRankSalaries[factionid][i] = FactionRankSalaries[factionid][i+1];
								strmid(FactionRankNames[factionid][i], FactionRankNames[factionid][i+1], 0, 84);
							}
						}
						ShowPlayerAdminMenu(playerid);
						MsgSuccess(playerid, "FRAKCIJOS", "Rankas sëkmingai iðtrintas");
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_FACTION_EDIT_MAIN, 1, 1, "");
		}
		case DIALOG_AM_FACTION_RANK_EDIT_NAME:
		{
			if(response)
			{
				new name[84];
				if(sscanf(inputtext,"s[84]",name)) return OnDialogResponse(playerid, DIALOG_AM_FACTION_RANK_EDIT_MAIN, 1, 0, "");
				new factionid = tmpSelected[playerid],
					selected = tmpIter[playerid],
					string[256];
				format(FactionRankNames[factionid][selected], 84, name);
				mysql_format(chandler, string, sizeof string, "UPDATE `factions_ranks` SET Name = '%e' WHERE id = '%d'", name, FactionRankIds[factionid][selected]);
				mysql_fquery(chandler, string, "FactionSaved");
				MsgSuccess(playerid, "FRAKCIJOS", "Ranko pavadinimas sëkmingai pakeistas.");
				OnDialogResponse(playerid, DIALOG_AM_FACTION_RANKS_ALL, 1, tmpIter[playerid], "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`,`ReceiverId`");
				log_set_values("'%d','%e','(AM) Pakeite frakcijos ranko pavadinima','%d','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], name, selected+1);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_FACTION_RANKS_ALL, 1, tmpIter[playerid], "");
		}
		case DIALOG_AM_FACTION_RANK_EDIT_SALARY:
		{
			if(response)
			{
				new salary;
				if(sscanf(inputtext,"d",salary) || salary < 0) return OnDialogResponse(playerid, DIALOG_AM_FACTION_RANK_EDIT_MAIN, 1, 1, "");
				new factionid = tmpSelected[playerid],
					selected = tmpIter[playerid],
					string[126];
				FactionRankSalaries[factionid][selected] = salary;
				mysql_format(chandler, string, sizeof string, "UPDATE `factions_ranks` SET Salary = '%d' WHERE id = '%d'", salary, FactionRankIds[factionid][selected]);
				mysql_fquery(chandler, string, "FactionSaved");
				MsgSuccess(playerid, "FRAKCIJOS", "Ranko alga sëkmingai pakeista.");
				OnDialogResponse(playerid, DIALOG_AM_FACTION_RANKS_ALL, 1, tmpIter[playerid], "");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`,`ReceiverId`,`Amount`");
				log_set_values("'%d','%e','(AM) Pakeite frakcijos ranko alga','%d','%e','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], FactionRankNames[factionid][selected], selected+1, salary);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_FACTION_RANKS_ALL, 1, tmpIter[playerid], "");
		}
		case DIALOG_AM_FACTION_RANKS_ALL:
		{
			if(response)
			{
				new factionid = tmpSelected[playerid];
				tmpIter[playerid] = listitem;
				if(FactionRankIds[factionid][listitem] != 0)
				{
					// edit
					new string[256];
					format(string, sizeof string, "{BABABA}Nustatymas\t{BABABA}Dabartinë reikðmë\nPavadinimas\t%s\nAlga\t$%d%s", FactionRankNames[factionid][listitem], FactionRankSalaries[factionid][listitem], listitem != 0 ? ("\n{C60000}Iðtrinti") : (""));
					ShowPlayerDialog(playerid, DIALOG_AM_FACTION_RANK_EDIT_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "Frakcijos rankai", string, "Tæsti", "Atðaukti");
				}
				else
				{
					// add
					ShowPlayerDialog(playerid, DIALOG_AM_FACTION_RANK_ADD, DIALOG_STYLE_INPUT, "Frakcijos rankai", "{FFFFFF}Áveskite naujo ranko pavadinimà.", "Tæsti", "Atðaukti");
				}
			}
		}
		case DIALOG_AM_FACTION_RANK_ADD:
		{
			if(response)
			{
				new name[24],
					selected = tmpSelected[playerid],
					string[256];
				if(sscanf(inputtext,"s[24]",name)) return OnDialogResponse(playerid, DIALOG_AM_FACTION_RANKS_ALL, 1, tmpIter[playerid], "");
				mysql_format(chandler, string, sizeof string, "INSERT INTO `factions_ranks` (`FactionId`,`Name`,`Added`,`Salary`,`Rank`) (SELECT '%d','%e','%d','0',MAX(Rank)+1 FROM `factions_ranks` WHERE FactionId = '%d')", FactionInfo[selected][fId], name, PlayerInfo[playerid][pId], FactionInfo[selected][fId]);
				new rank = tmpIter[playerid],
					Cache:result = mysql_query(chandler, string, true);
				cache_set_active(result);
				FactionRankIds[selected][rank] = cache_insert_id();
				cache_delete(result);
				format(FactionRankNames[selected][rank], 84, name);
				FactionRankSalaries[selected][rank] = 0;
				OnDialogResponse(playerid, DIALOG_AM_FACTION_EDIT_MAIN, 1, 1, "");
				MsgSuccess(playerid, "FRAKCIJOS", "Sëkmingai pridëjote rankà.");
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`,`ReceiverId`");
				log_set_values("'%d','%e','(AM) Pridejo frakcijos ranka','%d','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[selected][fId], name, selected+1);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_FACTION_EDIT_MAIN, 1, 1, "");
		}
		case DIALOG_AM_FACTION_EDIT_TYPE:
		{
			if(response)
			{
				new selected = tmpSelected[playerid];
				FactionInfo[selected][fType] = listitem;
				MsgSuccess(playerid, "FRAKCIJOS", "Tipas sëkmingai pakeistas.");
				SaveFactionIntEx(selected, "Type", listitem);
				ShowPlayerAdminMenu(playerid);
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
				log_set_values("'%d','%e','(AM) Pakeite frakcijos tipa','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[selected][fId], listitem);
				log_commit();
			}
		}
		case DIALOG_AM_FACTION_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// pavadinimas
						ShowPlayerDialog(playerid, DIALOG_AM_FACTION_EDIT_NAME, DIALOG_STYLE_INPUT, "Frakcijos", "{FFFFFF}Áveskite naujà frakcijos pavadinimà.", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// rankai
						new selected = tmpSelected[playerid],
							string[512] = "{BABABA}Nr.\t{BABABA}Pavadinimas\t{BABABA}Alga\n";
						for(new i = 0; i < MAX_FACTION_RANKS; i++)
						{
							if(strlen(FactionRankNames[selected][i]) > 0)
							{
								format(string, sizeof string, "%s%d\t%s\t$%d\n", string, i+1, FactionRankNames[selected][i], FactionRankSalaries[selected][i]);
							}
							else
							{
								strcat(string, "{82C84D}Pridëti");
								break;
							}
						}
						ShowPlayerDialog(playerid, DIALOG_AM_FACTION_RANKS_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Frakcijos rankai", string, "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// spawn vieta
						if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
						{
							SendError(playerid, "Turite bûti lauke");
							ShowPlayerAdminMenu(playerid);
							return 1;
						}
						new selected = tmpSelected[playerid],
							Float:x,
							Float:y,
							Float:z;
						GetPlayerPos(playerid, x, y, z);
						FactionInfo[selected][fSpawnX] = x,
						FactionInfo[selected][fSpawnY] = y,
						FactionInfo[selected][fSpawnZ] = z;
						SaveFactionFloatEx(selected, "SpawnX", FactionInfo[selected][fSpawnX]);
						SaveFactionFloatEx(selected, "SpawnY", FactionInfo[selected][fSpawnY]);
						SaveFactionFloatEx(selected, "SpawnZ", FactionInfo[selected][fSpawnZ]);
						MsgSuccess(playerid, "FRAKCIJOS", "SPAWN vieta sëkmingai pakeista.");
						ShowPlayerAdminMenu(playerid);
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','(AM) Pakeite frakcijos spawn','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[selected][fId]);
						log_commit();
					}
					case 3:
					{
						// tipas
						ShowPlayerDialog(playerid, DIALOG_AM_FACTION_EDIT_TYPE, DIALOG_STYLE_LIST, "Frakcijos", "Paprasta frakcija\nPolicijos departamentas\nUgniagesiai/medicinos departmentas\nSavivaldybë\nNelegali frakcija\nLegali frakcija\nSan News", "Tæsti", "Atðaukti");
					}
					case 4:
					{
						// atimti/leisti frakcijos chat
						new selected = tmpSelected[playerid];
						FactionInfo[selected][fHasChat] = !FactionInfo[selected][fHasChat];
						SaveFactionIntEx(selected, "HasChat", FactionInfo[selected][fHasChat]);
						MsgSuccess(playerid, "FRAKCIJOS", "Frakcijos %s pokalbiø kanalas buvo %s.", FactionInfo[selected][fName], (FactionInfo[selected][fHasChat] > 0 ? ("sukurtas") : ("iðtrintas")));
						ShowPlayerAdminMenu(playerid);
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
						log_set_values("'%d','%e','(AM) Pakeite frakcijos chat turejima','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[selected][fId], FactionInfo[selected][fHasChat]);
						log_commit();
					}
					case 5:
					{
						// istrinti
						new selected = tmpSelected[playerid],
							__reset_Faction[E_FACTION_DATA],
							string[256];
						log_init(true);
						log_set_table("logs_admins");
						log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`");
						log_set_values("'%d','%e','(AM) Istryne frakcija','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[selected][fId], FactionInfo[selected][fName]);
						log_commit();
						mysql_format(chandler, string, sizeof string, "DELETE FROM `factions_data` WHERE id = '%d'; DELETE FROM `factions_ranks` WHERE FactionId = '%d'; UPDATE `players_data` SET Faction = '0' AND JobLevel = '0' WHERE Faction = '%d'", FactionInfo[selected][fId], FactionInfo[selected][fId], FactionInfo[selected][fId]);
						mysql_fquery(chandler, string, "FactionDeleted");
						foreach(new receiverid : Player)
						{
							if(PlayerInfo[receiverid][pFaction] == FactionInfo[selected][fId])
							{
								PlayerInfo[receiverid][pFaction] =
								PlayerInfo[receiverid][pFactionLeader] =
								PlayerInfo[receiverid][pJobLevel] = 0;
								MsgError(receiverid, "INFORMACIJA", "Frakcija, kurioje dirbote, buvo iðtrinta.");
								continue;
							}
						}
						for(new i = 0; i < MAX_FACTION_RANKS; i++)
						{
							format(FactionRankNames[selected][i], 2, " ");
							FactionRankSalaries[selected][i] = 0;
						}
						FactionInfo[selected] = __reset_Faction;
						Iter_Remove(Faction, selected);
						MsgSuccess(playerid, "FRAKCIJOS", "Frakcija sëkmingai iðtrinta.");
						ShowPlayerAdminMenu(playerid);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 8, "");
		}
		case DIALOG_AM_FACTION_ADD:
		{
			if(response)
			{
				new name[48],
					string[126];
				if(sscanf(inputtext,"s[48]",name) || !strlen(name)) return OnDialogResponse(playerid, DIALOG_AM_FACTION_MAIN, 1, 1, "");
				mysql_format(chandler, string, sizeof string, "INSERT INTO `factions_data` (`Name`,`Added`) VALUES ('%e','%d')", name, PlayerInfo[playerid][pId]);
				new Cache:result = mysql_query(chandler, string, true);
				cache_set_active(result);
				new itter = Iter_Free(Faction);
				FactionInfo[itter][fId] = cache_insert_id();
				format(FactionInfo[itter][fName], 48, name);
				Iter_Add(Faction, itter);
				cache_delete(result);
				MsgSuccess(playerid, "FRAKCIJOS", "Frakcija sëkmingai sukurta.");
				ShowPlayerAdminMenu(playerid);
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`");
				log_set_values("'%d','%e','(AM) Sukure nauja frakcija','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[itter][fId], FactionInfo[itter][fName]);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 8, "");
		}
		case DIALOG_CLOTHES_MAIN:
		{
			if(response)
			{
				if(0 <= listitem <= 8)
				{
					tmpSelected[playerid] = listitem;
					if(AttachedClothes[playerid][listitem][attachedInventorySlot] <= -1)
					{
						// slotas tuscias, leidziam uzdeti
						new string[512];
						for(new i = 0; i < MAX_CLOTHES_INVENTORY_SLOTS; i++)
						{
							if(ClothesInventory[playerid][i] == 0) format(string, sizeof string, "%s{979797}%d. Tuðèia\n", string, i+1);
							else format(string, sizeof string, "%s{FFFFFF}%d. %s\n", string, i+1, GetClotheName(ClothesInventory[playerid][i]));
						}
						ShowPlayerDialog(playerid, DIALOG_CLOTHES_LIST, DIALOG_STYLE_LIST, "Drabuþiai", string, "Tæsti", "Atðaukti");
					}
					else
					{
						// slota redaguojam
						ShowPlayerDialog(playerid, DIALOG_CLOTHE_EDIT, DIALOG_STYLE_LIST, "Drabuþio redagavimas", "Keisti vietà (kaulà)\nKeisti pozicijà, pasukimà\nAtstatyti pozicijà\nNusiimti", "Tæsti", "Atðaukti");
					}
				}
				else
				{
					tmpSelected[playerid] = -1;
					new string[512];
					for(new i = 0; i < MAX_CLOTHES_INVENTORY_SLOTS; i++)
					{
						if(ClothesInventory[playerid][i] == 0) format(string, sizeof string, "%s{979797}%d. Tuðèia\n", string, i+1);
						else format(string, sizeof string, "%s{FFFFFF}%d. %s\n", string, i+1, GetClotheName(ClothesInventory[playerid][i]));
					}
					ShowPlayerDialog(playerid, DIALOG_CLOTHES_LIST, DIALOG_STYLE_LIST, "Visi turimi drabuþiai", string, "Tæsti", "Atðaukti");
				}
			}
		}
		case DIALOG_CLOTHES_LIST:
		{
			if(response)
			{
				if(tmpSelected[playerid] <= -1)
				{
					// tiesiog perziuri turimus drabuzius
					if(ClothesInventory[playerid][listitem] != 0)
					{
						ShowPlayerDialog(playerid, DIALOG_CLOTHES_LIST_EDIT, DIALOG_STYLE_LIST, "Visi turimi drabuþiai", "Perduoti kitam\n{C60000}Iðmesti", "Tæsti", "Atðaukti");
						tmpIter[playerid] = listitem;
					}
					else
					{
						OnDialogResponse(playerid, DIALOG_CLOTHES_MAIN, 1, 9, "");
					}
					return 1;
				}
				else
				{
					new slot_to_put = tmpSelected[playerid];
					if(ClothesInventory[playerid][listitem] == 0)
					{
						// turimi drabuziai = tuscia, neleidziam jo uzdeti i pasirinkta slota
						return OnDialogResponse(playerid, DIALOG_CLOTHES_MAIN, 1, tmpSelected[playerid], "");
					}
					// tuscias slotas pasirinktas, dedam tiesiog
					for(new i = 0; i < 9; i++)
					{
						if(AttachedClothes[playerid][i][attachedInventorySlot] == listitem)
						{
							// jau sitas daiktas yra kitame slote uzdetas, neleidziam.
							SendError(playerid, "Ðis drabuþis jau naudojamas.");
							pc_cmd_clothes(playerid, "");
							return 1;
						}
					}
					AttachedClothes[playerid][slot_to_put][attachedInventorySlot] = listitem;
					AttachedClothes[playerid][slot_to_put][attachedBone] = 1;
					SetPlayerAttachedObject(playerid, tmpSelected[playerid], ClothesInventory[playerid][listitem], 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
					MsgSuccess(playerid, "DRABUÞIAI", "Sëkmingai uþsidëjote drabuþá.");
					SaveAttachedClothes(playerid, slot_to_put);
					EditAttachedObject(playerid, slot_to_put);
					new string[256];
					mysql_format(chandler, string, sizeof string, "UPDATE `players_clothes_attached` SET InventorySlot = '%d' WHERE `Index` = '%d' AND PlayerId = '%d'", listitem, slot_to_put, PlayerInfo[playerid][pId]);
					mysql_fquery(chandler, string, "AttachedClotheAddFromClth");
				}
			}
			else pc_cmd_clothes(playerid, "");
		}
		case DIALOG_CLOTHES_LIST_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// perduoti
						new receiverid = GetClosestPlayer(playerid, 4.0, false);
						if(receiverid != INVALID_PLAYER_ID)
						{
							new slot = GetFreeClothesSlot(receiverid);
							if(slot != -1)
							{
								new clothe = ClothesInventory[playerid][tmpIter[playerid]];
								rp_me(playerid, _, "perduoda \"%s\" %s.", GetClotheName(clothe), GetPlayerNameEx(receiverid, true));
								MsgSuccess(playerid, "DRABUÞIAI", "Perdavëte %s þaidëjui %s.", GetClotheName(clothe), GetPlayerNameEx(receiverid, true));
								for(new i = 0; i < 9; i++)
								{
									if(AttachedClothes[playerid][i][attachedInventorySlot] == tmpIter[playerid])
									{
										// daiktas uzdetas, reik nuimt
										new __reset_Attached[E_ATTACHED_CLOTHES_DATA];
										AttachedClothes[playerid][i] = __reset_Attached;
										AttachedClothes[playerid][i][attachedInventorySlot] = -1;
										RemovePlayerAttachedObject(playerid, i);
										break;
									}
								}
								ClothesInventory[receiverid][slot] = clothe;
								ClothesInventory[playerid][tmpIter[playerid]] = 0;
								SaveClothes(receiverid);
								SaveClothes(playerid);
								SaveAttachedClothes(playerid);
								pc_cmd_clothes(playerid, "");
							}
							else return SendWarning(playerid, "Þaidëjas neturi vietos drabuþiø inventoriuje.");
						}
						else return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
					}
					case 1:
					{
						new clothe = ClothesInventory[playerid][tmpIter[playerid]];
						rp_me(playerid, _, "iðmeta \"%s\"", GetClotheName(clothe));
						for(new i = 0; i < 9; i++)
						{
							if(AttachedClothes[playerid][i][attachedInventorySlot] == tmpIter[playerid])
							{
								// daiktas uzdetas, reik nuimt
								new __reset_Attached[E_ATTACHED_CLOTHES_DATA];
								AttachedClothes[playerid][i] = __reset_Attached;
								AttachedClothes[playerid][i][attachedInventorySlot] = -1;
								RemovePlayerAttachedObject(playerid, i);
								break;
							}
						}
						ClothesInventory[playerid][tmpIter[playerid]] = 0;
						SaveClothes(playerid);
						SaveAttachedClothes(playerid);
						MsgSuccess(playerid, "DRABUÞIAI", "Iðmetëte drabuþá.");
						pc_cmd_clothes(playerid, "");
						// ismesti
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_CLOTHES_MAIN, 1, 9, "");
		}
		case DIALOG_CLOTHE_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// kaulas
						new string[720];
						strcat(string, "1. Spine (stuburas)\n\
							2. Head (galva)\n\
							3. Left upper arm (kairysis bicepsas)\n\
							4. Right upper arm (deðinysis bicepsas)\n\
							5. Left hand (kairë ranka)\n\
							6. Right hand (deðinë ranka)\n\
							7. Left thigh (kairë ðlaunis)\n\
							8. Right thigh (deðinë ðlaunis)\n\
							9. Left foot (kairë koja)\n\
							10. Right foot (deðinë koja)\n");
						strcat(string, "11. Right calf (deðinë blauzda)\n\
							12. Left calf (kairë blauzda)\n\
							13. Left forearm (kairysis dilbis)\n\
							14. Right forearm (deðinysis dilbis)\n\
							15. Left shoulder (kairysis petys)\n\
							16. Right shoulder (deðinysis petys)\n\
							17. Neck (kaklas)\n\
							18. Jaw (þandikaulis)");

						ShowPlayerDialog(playerid, DIALOG_CLOTHE_CHANGE_BONE, DIALOG_STYLE_LIST, "Drabuþio redagavimas", string, "Keisti", "Atðaukti");
					}
					case 1:
					{
						// pozicija
						new selected = tmpSelected[playerid];
						if(AttachedClothes[playerid][selected][attachedInventorySlot] != -1 && IsPlayerAttachedObjectSlotUsed(playerid, selected))
						{
							EditAttachedObject(playerid, selected);
						}
					}
					case 2:
					{
						// atstatyti pozicija
						new selected = tmpSelected[playerid];
						RemovePlayerAttachedObject(playerid, selected);
						SetPlayerAttachedObject(playerid, selected, ClothesInventory[playerid][AttachedClothes[playerid][selected][attachedInventorySlot]], AttachedClothes[playerid][selected][attachedBone], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
					}
					case 3:
					{
						// nusiimti
						new selected = tmpSelected[playerid],
							__reset_Attached[E_ATTACHED_CLOTHES_DATA];
						if(IsPlayerAttachedObjectSlotUsed(playerid, selected))
						{
							MsgSuccess(playerid, "DRABUÞIAI", "Sëkmingai nusiëmëte drabuþá", GetClotheName(ClothesInventory[playerid][AttachedClothes[playerid][selected][attachedInventorySlot]]));
							SaveAttachedClothes(playerid, selected);
							RemovePlayerAttachedObject(playerid, selected);
						}
						AttachedClothes[playerid][selected] = __reset_Attached;
						AttachedClothes[playerid][selected][attachedInventorySlot] = -1;
					}
				}
			}
			else pc_cmd_clothes(playerid, "");
		}
		case DIALOG_CLOTHE_CHANGE_BONE:
		{
			if(response)
			{
				new selected = tmpSelected[playerid];
				AttachedClothes[playerid][selected][attachedBone] = listitem+1;
				RemovePlayerAttachedObject(playerid, selected);
				SetPlayerAttachedObject(playerid, selected, ClothesInventory[playerid][AttachedClothes[playerid][selected][attachedInventorySlot]], listitem+1,
					AttachedClothes[playerid][selected][attachedOffsetX],
					AttachedClothes[playerid][selected][attachedOffsetY],
					AttachedClothes[playerid][selected][attachedOffsetZ],
					AttachedClothes[playerid][selected][attachedRotX],
					AttachedClothes[playerid][selected][attachedRotY],
					AttachedClothes[playerid][selected][attachedRotZ],
					AttachedClothes[playerid][selected][attachedScaleX],
					AttachedClothes[playerid][selected][attachedScaleY],
					AttachedClothes[playerid][selected][attachedScaleZ]);
				MsgSuccess(playerid, "DRABUÞIAI", "Sëkmingai pakeitëte kaulà á %d.", listitem+1);
				SaveAttachedClothes(playerid, selected);
			}
			else pc_cmd_clothes(playerid, "");
		}
		case DIALOG_REPORTS_LIST:
		{
			if(response)
			{
				tmpSelected[playerid] = listitem;
				new string[86];
				mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_reports` WHERE id = '%d' AND `Valid` = '1'", tmpArray[playerid][tmpSelected[playerid]]);
				mysql_tquery(chandler, string, "ReportDataLoad", "dd", playerid, tmpArray[playerid][tmpSelected[playerid]]);
			}
		}
		case DIALOG_REPORT_ACTION:
		{
			if(response)
			{
				new reportid = tmpArray[playerid][tmpSelected[playerid]],
					string[86];
				mysql_format(chandler, string, sizeof string, "UPDATE `players_reports` SET Valid = '0', Status = '1' WHERE id = '%d'", reportid);
				mysql_fquery(chandler, string, "ReportAccepted");
				mysql_format(chandler, string, sizeof string, "SELECT ReporterId FROM `players_reports` WHERE id = '%d'", reportid);
				new Cache:result = mysql_query(chandler, string, true);
				new reporterid;
				cache_get_value_name_int(0, "ReporterId", reporterid);
				if((reporterid = FindPlayerBySql(reporterid)) != INVALID_PLAYER_ID)
				{
					SendFormat(reporterid, 0x80AE3BFF, "Administratorius %s(%d) priëmë jûsø praneðimà.", GetPlayerNameEx(playerid), playerid);
				}
				SendFormat(playerid, 0x80AE3BFF, "Priëmëte praneðimà nr. %d", reportid);
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
				log_set_values("'%d','%e','(REPORT) Prieme reporta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), reportid);
				log_commit();
				format(string, sizeof string, "Administratorius %s priëmë reportà nr. %d", GetPlayerNameEx(playerid), reportid);
				SendAdminMessage(0xB0B0B0FF, false, string);
				cache_delete(result);
				pc_cmd_reports(playerid, "internal");
			}
			else
			{
				new reportid = tmpArray[playerid][tmpSelected[playerid]],
					string[86];
				mysql_format(chandler, string, sizeof string, "UPDATE `players_reports` SET Valid = '0', Status = '2' WHERE id = '%d'", reportid);
				mysql_fquery(chandler, string, "ReportDeclined");
				mysql_format(chandler, string, sizeof string, "SELECT ReporterId FROM `players_reports` WHERE id = '%d'", reportid);
				new Cache:result = mysql_query(chandler, string, true);
				new reporterid;
				cache_get_value_name_int(0, "ReporterId", reporterid);
				if((reporterid = FindPlayerBySql(reporterid)) != INVALID_PLAYER_ID)
				{
					SendFormat(reporterid, 0xD64D2EFF, "Administratorius %s(%d) atmetë jûsø praneðimà.", GetPlayerNameEx(playerid), playerid);
				}
				SendFormat(playerid, 0xD64D2EFF, "Atmetëte praneðimà nr. %d", reportid);
				log_init(true);
				log_set_table("logs_admins");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
				log_set_values("'%d','%e','(REPORT) Atmete reporta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), reportid);
				log_commit();
				format(string, sizeof string, "Administratorius %s atmetë reportà nr. %d", GetPlayerNameEx(playerid), reportid);
				SendAdminMessage(0xB0B0B0FF, false, string);
				cache_delete(result);
				pc_cmd_reports(playerid, "internal");
			}
		}
		case DIALOG_WEAPON_STORE:
		{
			if(response)
			{
				new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
				if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE || FactionInfo[factionid][fWares][0] <= 0 && GetGVarInt("EnabledPoliceWeaponUsage") > 0)
				{
					SendWarning(playerid, "Jûsø frakcijos sandëlyje nebëra atsargø.");
					return 1;
				}
				log_init(true);
				log_set_table("logs_factions");
				log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
				switch(listitem)
				{
					case 0:
					{
						if(PlayerInfo[playerid][pJobLevel] <= 1) return SendWarning(playerid, "Ðaunamieji ginklai leidþiami tik nuo 2 rango.");
						if(!PlayerHasWeaponInSlot(playerid, FAC_GetWeaponSlot(WEAPON_DEAGLE))) GivePlayerWeapon(playerid, WEAPON_DEAGLE, 70, WEAPON_GIVE_TYPE_NO_INVENTORY, 0);
						log_set_values("'%d','%e','Pasieme ginkla','%d'", LogPlayerId(playerid), LogPlayerName(playerid), WEAPON_DEAGLE);
					}
					case 1:
					{
						if(!PlayerHasWeaponInSlot(playerid, FAC_GetWeaponSlot(WEAPON_NITESTICK))) GivePlayerWeapon(playerid, WEAPON_NITESTICK, 1, WEAPON_GIVE_TYPE_NO_INVENTORY, 0);
						log_set_values("'%d','%e','Pasieme ginkla','%d'", LogPlayerId(playerid), LogPlayerName(playerid), WEAPON_NITESTICK);
					}
					case 2:
					{
						if(!PlayerHasWeaponInSlot(playerid, FAC_GetWeaponSlot(WEAPON_SPRAYCAN))) GivePlayerWeapon(playerid, WEAPON_SPRAYCAN, 500, WEAPON_GIVE_TYPE_NO_INVENTORY, 0);
						log_set_values("'%d','%e','Pasieme ginkla','%d'", LogPlayerId(playerid), LogPlayerName(playerid), WEAPON_SPRAYCAN);
					}
					case 3:
					{
						if(PlayerInfo[playerid][pJobLevel] <= 1) return SendWarning(playerid, "Ðaunamieji ginklai leidþiami tik nuo 2 rango.");
						if(!PlayerHasWeaponInSlot(playerid, FAC_GetWeaponSlot(WEAPON_SHOTGUN))) GivePlayerWeapon(playerid, WEAPON_SHOTGUN, 30, WEAPON_GIVE_TYPE_NO_INVENTORY, 0);
						log_set_values("'%d','%e','Pasieme ginkla','%d'", LogPlayerId(playerid), LogPlayerName(playerid), WEAPON_SHOTGUN);
					}
					case 4:
					{
						if(!PlayerHasWeaponInSlot(playerid, FAC_GetWeaponSlot(WEAPON_CAMERA))) GivePlayerWeapon(playerid, WEAPON_CAMERA, 1000, WEAPON_GIVE_TYPE_NO_INVENTORY, 0);
						log_set_values("'%d','%e','Pasieme ginkla','%d'", LogPlayerId(playerid), LogPlayerName(playerid), WEAPON_CAMERA);
					}
				}
				log_commit();
				pc_cmd_wepstore(playerid, "");
			}
		}
		case DIALOG_PLAYER_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					// speedo
					case 0:
					{
						TextdrawDisabled_Speedo{playerid} = !TextdrawDisabled_Speedo{playerid};
						if(TextdrawDisabled_Speedo{playerid}) Speedo_Hide(playerid);
						SaveAccountOption(playerid, "TextdrawDisabled_Speedo", TextdrawDisabled_Speedo{playerid});
					}
					case 1:
					{
						TextdrawDisabled_JailTimer{playerid} = !TextdrawDisabled_JailTimer{playerid};
						if(TextdrawDisabled_JailTimer{playerid} && ShowingJailTimer{playerid}) HideJailTimer(playerid);
						SaveAccountOption(playerid, "TextdrawDisabled_JailTimer", TextdrawDisabled_JailTimer{playerid});
					}
					case 2:
					{
						TextdrawDisabled_InfoBar{playerid} = !TextdrawDisabled_InfoBar{playerid};
						if(TextdrawDisabled_InfoBar{playerid} && ShowingInfoBar{playerid}) HideInfoBar(playerid);
						SaveAccountOption(playerid, "TextdrawDisabled_InfoBar", TextdrawDisabled_InfoBar{playerid});
					}
					case 3:
					{
						TextdrawDisabled_Tips{playerid} = !TextdrawDisabled_Tips{playerid};
						SaveAccountOption(playerid, "TextdrawDisabled_Tips", TextdrawDisabled_Tips{playerid});
					}
				}
				pc_cmd_screen(playerid, "");
			}
		}
		case DIALOG_FM_MAIN:
		{
			if(response)
			{
				if(listitem == 0)
				{
					// rankai ir zmones
					ShowPlayerDialog(playerid, DIALOG_FM_RANKS_AND_USERS, DIALOG_STYLE_LIST, "Frakcijos rangai ir nariai", "Nariø valdymas\nRangø tvarkymas", "Tæsti", "Atðaukti");
				}
				else if(listitem == 1)
				{
					// inventorius
					ShowPlayerDialog(playerid, DIALOG_FM_INVENTORY, DIALOG_STYLE_LIST, "Frakcijos inventorius", "Biudþetas\nTr. priemonës\nGinklai", "Tæsti", "Atðaukti");
				}
			}
		}
		case DIALOG_FM_RANKS_AND_USERS:
		{
			if(response)
			{
				if(listitem == 0)
				{
					// nariai
					new string[86];
					mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_data` WHERE Faction = '%d'", PlayerInfo[playerid][pFaction]);
					mysql_tquery(chandler, string, "FactionUsersLoaded", "d", playerid);
				}
				else if(listitem == 1)
				{
					// rankai
					MsgInfo(playerid, "FRAKCIJA", "Pasirinkite rangà, kurio pavadinimà norite pakeisti.");
					new string[248],
						factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
						line[126];
					if(factionid != -1)
					{
						for(new rank = 0; rank < MAX_FACTION_RANKS; rank++)
						{
							if(!strlen(FactionRankNames[factionid][rank])) { break; }
							format(line, sizeof line, "%s\n", FactionRankNames[factionid][rank]);
							strcat(string, line);
						}
						ShowPlayerDialog(playerid, DIALOG_FM_RANKS_MAIN, DIALOG_STYLE_LIST, "Frakcijos rangai", string, "Pervadinti", "Atðaukti");
					}
				}
			}
			else pc_cmd_fmenu(playerid, "");
		}
		case DIALOG_FM_USERS_MAIN:
		{
			if(response)
			{
				tmpSelected[playerid] = listitem;
				if(tmpArray[playerid][listitem] == INVALID_PLAYER_ID)
				{
					ShowPlayerDialog(playerid, DIALOG_FM_USER_ADD, DIALOG_STYLE_INPUT, "Frakcijos nariai", "{E4E4E4}Áveskite pilnà þaidëjo vardà, kurá norite priimti á frakcijà.", "Tæsti", "Atðaukti");
				}
				else
				{
					new string[256],
						selected = tmpArray[playerid][listitem],
						workerid = FindPlayerBySql(selected);
					format(string, sizeof string, "%s [%s]\n{FFFFFF}Keisti rangà\nKeisti privilegijas\n{CE3F3F}Iðmesti", GetNameBySql(selected), (workerid == INVALID_PLAYER_ID ? ("{D16464}atsijungæs") : ("{8AD164}prisijungæs")));
					ShowPlayerDialog(playerid, DIALOG_FM_USER_EDIT, DIALOG_STYLE_LIST, "Frakcijos nariai", string, "Tæsti", "Atðaukti");
				}
			}
			else OnDialogResponse(playerid, DIALOG_FM_MAIN, 1, 0, "");
		}
		case DIALOG_FM_USER_ADD:
		{
			if(response)
			{
				new name[24];
				if(sscanf(inputtext,"s[24]",name)) return OnDialogResponse(playerid, DIALOG_FM_USERS_MAIN, 1, tmpSelected[playerid], "");
				new receiverid = FindPlayerByName(name);
				if(receiverid == INVALID_PLAYER_ID)
				{
					new string[126];
					mysql_format(chandler, string, sizeof string, "SELECT id,Name FROM `players_data` WHERE Name = '%e'", name);
					mysql_tquery(chandler, string, "PlayerFactionAddLoad", "d", playerid);
				}
				else
				{
					new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
					if(factionid == -1) return 0;
					if(PlayerInfo[receiverid][pFaction] != 0)
					{
						MsgError(playerid, "FRAKCIJA", "Þaidëjas jau yra frakcijoje.");
						pc_cmd_fmenu(playerid, "");
						return 1;
					}
					PlayerInfo[receiverid][pJob] = 0;
					PlayerInfo[receiverid][pFaction] = PlayerInfo[playerid][pFaction];
					PlayerInfo[receiverid][pJobLevel] = 1;
					PlayerInfo[receiverid][pFactionLeader] = 0;
					SaveAccountIntEx(receiverid, "Faction", PlayerInfo[receiverid][pFaction]);
					SaveAccountIntEx(receiverid, "JobLevel", 1);
					MsgSuccess(receiverid, "FRAKCIJA", "%s pridëjo jus á frakcijà \"%s\"", GetPlayerNameEx(playerid), FactionInfo[factionid][fName]);
					MsgSuccess(playerid, "FRAKCIJA", "Priëmëte %s á frakcijà.", GetPlayerNameEx(receiverid));
					pc_cmd_fmenu(playerid, "");
					log_init(true);
					log_set_table("logs_factions");
					log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ReceiverId`,`ReceiverName`");
					log_set_values("'%d','%e','%d','%e','(FM) Prieme i frakcija','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), LogPlayerId(receiverid), LogPlayerName(receiverid));
					log_commit();
				}
			}
			else OnDialogResponse(playerid, DIALOG_FM_RANKS_AND_USERS, 1, 0, "");
		}
		case DIALOG_FM_USER_PRIVILEGES:
		{
			if(response)
			{
				new workerid = tmpArray[playerid][tmpSelected[playerid]],
					receiverid = FindPlayerBySql(workerid),
					string[126];
				log_init(true);
				log_set_table("logs_factions");
				log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ReceiverId`,`ReceiverName`");
				switch(listitem)
				{
					case 0:
					{
						// swta
						mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET `FactionPermission1` = 1  - `FactionPermission1` WHERE id = '%d'", workerid);
						mysql_fquery(chandler, string, "FactionSaved");
						log_set_values("'%d','%e','%d','%e','(FM) Pakeite 1 grupes nustatyma darbuotojui','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[playerid][pFaction], GetFactionName(PlayerInfo[playerid][pFaction]), workerid, GetNameBySql(workerid));
					}
					case 1:
					{
						// detective
						mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET `FactionPermission1` = 1  - `FactionPermission1` WHERE id = '%d'", workerid);
						mysql_fquery(chandler, string, "FactionSaved");
						log_set_values("'%d','%e','%d','%e','(FM) Pakeite 1 grupes nustatyma darbuotojui','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[playerid][pFaction], GetFactionName(PlayerInfo[playerid][pFaction]), workerid, GetNameBySql(workerid));
					}
					case 2:
					{
						// spec
						mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET `FactionPermission1` = 1  - `FactionPermission1` WHERE id = '%d'", workerid);
						mysql_fquery(chandler, string, "FactionSaved");
						log_set_values("'%d','%e','%d','%e','(FM) Pakeite 1 grupes nustatyma darbuotojui','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[playerid][pFaction], GetFactionName(PlayerInfo[playerid][pFaction]), workerid, GetNameBySql(workerid));
					}
				}
				if(IsPlayerConnected(receiverid) && PlayerInfo[receiverid][pFaction] == PlayerInfo[playerid][pFaction])
				{
					PlayerInfo[receiverid][pFactionPermissions][listitem] = !PlayerInfo[playerid][pFactionPermissions][listitem];
					MsgSuccess(receiverid, "FRAKCIJA", "Jûsø frakcijos grupë buvo %s", PlayerInfo[playerid][pFactionPermissions][listitem] > 0 ? ("uþdëta") : ("nuimta"));
				}
				MsgSuccess(playerid, "FRAKCIJA", "Nustatymai darbuotojui atnaujinti.");
				OnDialogResponse(playerid, DIALOG_FM_USERS_MAIN, 1, tmpSelected[playerid], "");

				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_FM_USERS_MAIN, 1, tmpSelected[playerid], "");
		}
		case DIALOG_FM_USER_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// nieko
						OnDialogResponse(playerid, DIALOG_FM_USERS_MAIN, 1, tmpSelected[playerid], "");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_FM_USER_RANK, DIALOG_STYLE_INPUT, "Frakcijos nariai", "{E4E4E4}Áveskite naujà rangà frakcijos nariui.", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// keisti priv
						new workerid = tmpArray[playerid][tmpSelected[playerid]],
							perm[3],
							string[256],
							factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
							type = (factionid == -1 ? (0) : FactionInfo[factionid][fType]);
						if(type != FACTION_TYPE_POLICE) return OnDialogResponse(playerid, DIALOG_FM_USERS_MAIN, 1, tmpSelected[playerid], "");
						mysql_format(chandler, string, sizeof string, "SELECT FactionPermission1, FactionPermission2, FactionPermission3 FROM `players_data` WHERE id = '%d'", workerid);
						new Cache:result = mysql_query(chandler, string, true);
						cache_set_active(result);
						if(cache_num_rows())
						{
							cache_get_value_name_int(0, "FactionPermission1", perm[0]);
							cache_get_value_name_int(0, "FactionPermission2", perm[1]);
							cache_get_value_name_int(0, "FactionPermission3", perm[2]);
							format(string, sizeof string, "%s SWAT\n%s detektyvà\n%s spec. komandas", perm[0] > 0 ? ("Nuimti") : ("Uþdëti"), perm[1] > 0 ? ("Nuimti") : ("Uþdëti"), perm[2] > 0 ? ("Nuimti") : ("Uþdëti"));
							ShowPlayerDialog(playerid, DIALOG_FM_USER_PRIVILEGES, DIALOG_STYLE_LIST, "Frakcijos nariai", string, "Tæsti", "Atðaukti");
						}
						cache_delete(result);
					}
					case 3:
					{
						new workerid = tmpArray[playerid][tmpSelected[playerid]],
							receiverid,
							factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
							type = (factionid == -1 ? (0) : (FactionInfo[factionid][fType]));
						if((receiverid = FindPlayerBySql(workerid)) != INVALID_PLAYER_ID)
						{
							if(factionid != -1)
							{
								MsgError(receiverid, "FRAKCIJA", "%s iðmetë jus ið frakcijos %s.", GetPlayerNameEx(playerid), FactionInfo[factionid][fName]);
							}
							if(type == FACTION_TYPE_POLICE)
							{
								for(new i = 0; i < 3; i++)
								{
									PlayerInfo[receiverid][pFactionPermissions][i] = 0;
								}
								if(IsValidDynamic3DTextLabel(PlayerExtra[receiverid][pePoliceBadgeText]))
								{
									DestroyDynamic3DTextLabel(PlayerExtra[receiverid][pePoliceBadgeText]);
								}
								PlayerExtra[receiverid][pePoliceBadgeText] = INVALID_3DTEXT_ID;
							}
							PlayerInfo[receiverid][pFaction] = 0;
							PlayerInfo[receiverid][pFactionLeader] = 0;
							PlayerInfo[receiverid][pJobLevel] = 0;
							PlayerInfo[receiverid][pPoliceBadge] = 0;
							new channel = PlayerInfo[receiverid][pRadioChannel];
							if((900 <= channel < 950) || (950 <= channel < 1000) || (1000 <= channel < 1050)) PlayerInfo[receiverid][pRadioChannel] = 0;
							SaveAccountIntEx(receiverid, "Faction", 0);
							SaveAccountIntEx(receiverid, "FactionLeader", 0);
							SaveAccountIntEx(receiverid, "JobLevel", 0);
							SaveAccountIntEx(receiverid, "PoliceBadge", 0);
						
							ResetPlayerWeapons(receiverid);

							PlayerExtra[receiverid][peTazer] = 0;
						}
						else
						{
							new string[256];
							mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET Faction = '0', FactionPermission1 = '0', FactionPermission2 = '0', FactionPermission3 = '0', JobLevel = '0', PoliceBadge = '0', RadioChannel = '0' WHERE id = '%d'", workerid);
							mysql_fquery(chandler, string, "WorkerDeleted");
						}
						MsgWarning(playerid, "FRAKCIJA", "Iðmetëte %s ið frakcijos.", GetNameBySql(workerid));
						log_init(true);
						log_set_table("logs_factions");
						log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`FactionId`,`FactionName`,`ActionText`");
						log_set_values("'%d','%e','%d','%e','%d','%e','(FM) Ismete is frakcijos'", LogPlayerId(playerid), LogPlayerName(playerid), workerid, GetNameBySql(workerid), GetFactionName(factionid, false), FactionInfo[factionid][fId]);
						log_commit();
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_FM_RANKS_AND_USERS, 1, 0, "");
		}
		case DIALOG_FM_USER_RANK:
		{
			if(response)
			{
				new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
				if(factionid == -1) return 0;
				new rankid;
				if(sscanf(inputtext,"d",rankid) || rankid < 1) return OnDialogResponse(playerid, DIALOG_FM_USER_EDIT, 1, 1, "");
				if(!strlen(FactionRankNames[factionid][rankid-1]) || rankid > MAX_FACTION_RANKS)
				{
					// tokio ranko nera
					MsgError(playerid, "FRAKCIJA", "Tokio rango nëra.");
					return OnDialogResponse(playerid, DIALOG_FM_USER_EDIT, 1, 1, "");
				}
				new workerid = tmpArray[playerid][tmpSelected[playerid]],
					receiverid;
				if((receiverid = FindPlayerBySql(workerid)) != INVALID_PLAYER_ID)
				{
					//if(receiverid == playerid) return 0; lol
					MsgSuccess(receiverid, "FRAKCIJA", "%s pakeitë jûsø rangà á %s", GetPlayerNameEx(playerid), FactionRankNames[factionid][rankid-1]);
					PlayerInfo[receiverid][pJobLevel] = rankid;
					SaveAccountIntEx(receiverid, "JobLevel", rankid);
					if(!strlen(FactionRankNames[factionid][rankid]) || rankid == MAX_FACTION_RANKS) // ar sitas rank yra max
					{
						PlayerInfo[receiverid][pFactionLeader] = 1;
						SaveAccountIntEx(receiverid, "FactionLeader", 1);
					}
				}
				else
				{
					new string[126];
					mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET JobLevel = '%d' WHERE id = '%d'", rankid, workerid);
					mysql_fquery(chandler, string, "WorkerDeleted");
					if(!strlen(FactionRankNames[factionid][rankid]) || rankid == MAX_FACTION_RANKS) // ar sitas rank yra max
					{
						mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET FactionLeader = '1' WHERE id = '%d'", workerid);
						mysql_fquery(chandler, string, "WorkerDeleted");
					}
				}
				MsgSuccess(playerid, "FRAKCIJA", "Pakeitëte %s rangà á %s", GetNameBySql(workerid), FactionRankNames[factionid][rankid-1]);
				log_init(true);
				log_set_table("logs_factions");
				log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`FactionId`,`FactionName`,`ActionText`,`ExtraString`");
				log_set_values("'%d','%e','%d','%e','%d','%e','(FM) Pakeite ranga','%e'", LogPlayerId(playerid), LogPlayerName(playerid), workerid, GetNameBySql(workerid), GetFactionName(factionid, false), FactionInfo[factionid][fId], FactionRankNames[factionid][rankid-1]);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_FM_USERS_MAIN, 1, tmpSelected[playerid], "");
		}
		case DIALOG_FM_RANKS_MAIN:
		{
			if(response)
			{
				new string[126],
					factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
				if(factionid == -1) return 0;
				format(string, sizeof string, "{E4E4E4}Áveskite naujà rango {57AAD6}%s (%d){E4E4E4} pavadinimà.", FactionRankNames[factionid][listitem], listitem+1);
				tmpSelected[playerid] = listitem;
				ShowPlayerDialog(playerid, DIALOG_FM_RANK_EDIT, DIALOG_STYLE_INPUT, "Frakcijos rangai", string, "Keisti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_FM_MAIN, 1, 0, "");
		}
		case DIALOG_FM_RANK_EDIT:
		{
			if(response)
			{
				// keicia rnako pavadinima
				if(!strlen(inputtext)) return OnDialogResponse(playerid, DIALOG_FM_RANKS_MAIN, 1, tmpSelected[playerid], "");
				new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
					string[256];
				if(factionid == -1) return 0;
				MsgSuccess(playerid, "FRAKCIJA", "Pervadinote %d rangà á %s", tmpSelected[playerid]+1, inputtext);
				mysql_format(chandler, string, sizeof string, "UPDATE `factions_ranks` SET Name = '%e' WHERE FactionId = '%d' AND Name = '%e' AND Rank = '%d'", inputtext, FactionInfo[factionid][fId], FactionRankNames[factionid][tmpSelected[playerid]], tmpSelected[playerid]);
				mysql_fquery(chandler, string, "FactionSaved");
				format(FactionRankNames[factionid][tmpSelected[playerid]], 24, inputtext);
				pc_cmd_fmenu(playerid, "");
				log_init(true);
				log_set_table("logs_factions");
				log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`ExtraString`");
				log_set_values("'%d','%e','%d','%e','%d','%e','(FM) Pervadino ranga','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), GetFactionName(factionid, false), FactionInfo[factionid][fId], tmpSelected[playerid]+1, inputtext);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_FM_RANKS_AND_USERS, 1, 1, "");
		}
		case DIALOG_FM_INVENTORY:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// biudzetas
						new string[126],
							factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
						if(factionid == -1) return 0;
						format(string, sizeof string, "Frakcijos biudþete: {AFEE9E}$%d\n{8BDA76}Padëti á biudþetà\n{E47059}Paimti ið biudþeto", FactionInfo[factionid][fBudget]);
						ShowPlayerDialog(playerid, DIALOG_FM_BUDGET_MAIN, DIALOG_STYLE_LIST, "Frakcijos biudþetas", string, "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// tr. priemones
						ShowPlayerDialog(playerid, DIALOG_FM_VEHICLES_MAIN, DIALOG_STYLE_LIST, "Frakcijos inventorius", "Turimos tr. priemonës\nTr. priemoniø pirkimas", "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// ginklai
						new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
						if(factionid == -1) return 0;
						if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE)
						{
							OnDialogResponse(playerid, DIALOG_FM_MAIN, 1, 1, "");
							return MsgWarning(playerid, "FRAKCIJA", "Jûsø frakcija ðios funkcijos neturi.");
						}
						new string[126];
						new Float:onepercent = 100.0/GetGVarInt("AddPDWaresAmount");
						format(string, sizeof string, "Ginklai, amunicija: %d%%\nUniformos, aprangos: %d%%\nSpecialiøjø operacijø ir kita áranga: %d%%\nPapildyti ginkluotæ", floatround(FactionInfo[factionid][fWares][0]*onepercent, floatround_ceil), floatround(FactionInfo[factionid][fWares][1]*onepercent, floatround_ceil), floatround(FactionInfo[factionid][fWares][2]*onepercent, floatround_ceil));
						ShowPlayerDialog(playerid, DIALOG_FM_WEAPONS_MAIN, DIALOG_STYLE_LIST, "Frakcijos ginklai", string, "Tæsti", "Atðaukti");
					}
				}
			}
			else pc_cmd_fmenu(playerid, "");
		}
		case DIALOG_FM_WEAPONS_MAIN:
		{
			if(GetGVarInt("EnabledPoliceWeaponUsage"))
			{
				if(response)
				{
					if(0 <= listitem <= 2) return OnDialogResponse(playerid, DIALOG_FM_INVENTORY, 1, 2, "");
					if(listitem == 3)
					{
						// paimti nauju ginklu
						ShowPlayerDialog(playerid, DIALOG_FM_WEAPONS_TYPE, DIALOG_STYLE_LIST, "Frakcijos ginklai", "Ginklø bei amunicijos atsargø papildymas\nUniformos, apranga, spec. inventorius\nSpecialiøjø operacijø ir kita áranga", "Tæsti", "Atðaukti");
					}
				}
				else OnDialogResponse(playerid, DIALOG_FM_MAIN, 1, 1, "");
			}
		}
		case DIALOG_FM_WEAPONS_TYPE:
		{
			if(response)
			{
				if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
				if(VehicleTrunkSpace[GetVehicleModel(GetPlayerVehicleID(playerid))-400] < TRUNKS_SPACE_POLICE_WEAPONS)
				{
					MsgWarning(playerid, "UÞSAKYMAS", "Tr. priemonë nepakankamai talpi.");
					return pc_cmd_fmenu(playerid, "");
				}
				new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
				if(listitem == 0)
				{
					// ginklai ammo
					new Float:onepercent = 100.0/GetGVarInt("AddPDWaresAmount");
					new Float:currentpercent = floatround(FactionInfo[factionid][fWares][0]*onepercent, floatround_ceil);
					if(currentpercent > 10.0)
					{
						MsgError(playerid, "FRAKCIJA", "Jûs dar turite daugiau nei 10proc. amunicijos.");
						return 1;
					}
					if(FactionInfo[factionid][fBudget] < DEFAULT_POLICE_WEAPONS_PRICE) return InfoBox(playerid, "NEPAKANKAMAI", "PINIGU BIUDZETE");
					SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_PD_WEAPONS_AMMO, DEFAULT_POLICE_WEAPON_BUY_SPOT, 2.3);
					SendFactionMessage(PlayerInfo[playerid][pFaction], 0x009AB5FF, true, "-------------------------------------------------------");
					SendFactionMessage(PlayerInfo[playerid][pFaction], 0x32B9D0FF, true, "DISPEÈERINË: {82CDDA}Ginklø, bei amunicijos atsargos paruoðtos paëmimui.");
					SendFactionMessage(PlayerInfo[playerid][pFaction], 0x32B9D0FF, true, "DISPEÈERINË: {82CDDA}Vieta - sandëliai.");
					SendFactionMessage(PlayerInfo[playerid][pFaction], 0x009AB5FF, true, "-------------------------------------------------------");
					SendFormat(playerid, 0x39A8D7FF, "[UÞSAKYMAS] {4FB3DF}Nuvykite á sandëli, paþymëtà þemëlapyje ir paimkite uþsakymà.");
					SendFormat(playerid, 0x4FB3DFFF, "Jûsø tr. priemonë turi bûti pakankamai talpi (rekomenduotina autobusiukas).");
				}
				else if(listitem == 1)
				{
					// skinai
					new Float:onepercent = 100.0/GetGVarInt("AddPDWaresAmount");
					new Float:currentpercent = floatround(FactionInfo[factionid][fWares][0]*onepercent, floatround_ceil);
					if(currentpercent > 10.0)
					{
						MsgError(playerid, "FRAKCIJA", "Jûs dar turite daugiau nei 10proc. amunicijos.");
						return 1;
					}
					if(FactionInfo[factionid][fBudget] < DEFAULT_POLICE_SKINS_PRICE) return InfoBox(playerid, "NEPAKANKAMAI", "PINIGU BIUDZETE");
					SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_PD_SKINS, DEFAULT_POLICE_WEAPON_BUY_SPOT, 2.3);
					SendFactionMessage(PlayerInfo[playerid][pFaction], 0x009AB5FF, true, "-------------------------------------------------------");
					SendFactionMessage(PlayerInfo[playerid][pFaction], 0x32B9D0FF, true, "DISPEÈERINË: {82CDDA}Uniformø, aprangos, spec. inventoriaus atsargos paruoðtos paëmimui.");
					SendFactionMessage(PlayerInfo[playerid][pFaction], 0x32B9D0FF, true, "DISPEÈERINË: {82CDDA}Vieta - sandëliai.");
					SendFactionMessage(PlayerInfo[playerid][pFaction], 0x009AB5FF, true, "-------------------------------------------------------");
					SendFormat(playerid, 0x39A8D7FF, "[UÞSAKYMAS] {4FB3DF}Nuvykite á sandëli, paþymëtà þemëlapyje ir paimkite uþsakymà.");
					SendFormat(playerid, 0x4FB3DFFF, "Jûsø tr. priemonë turi bûti pakankamai talpi (rekomenduotina autobusiukas).");
				}
				else if(listitem == 2)
				{
					// special forces
					new Float:onepercent = 100.0/GetGVarInt("AddPDWaresAmount");
					new Float:currentpercent = floatround(FactionInfo[factionid][fWares][0]*onepercent, floatround_ceil);
					if(currentpercent > 10.0)
					{
						MsgError(playerid, "FRAKCIJA", "Jûs dar turite daugiau nei 10proc. amunicijos.");
						return 1;
					}
					if(FactionInfo[factionid][fBudget] < DEFAULT_POLICE_SPECIAL_PRICE) return InfoBox(playerid, "NEPAKANKAMAI", "PINIGU BIUDZETE");
					SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_PD_SPECIAL, DEFAULT_POLICE_WEAPON_BUY_SPOT, 2.3);
					SendFactionMessage(PlayerInfo[playerid][pFaction], 0x009AB5FF, true, "-------------------------------------------------------");
					SendFactionMessage(PlayerInfo[playerid][pFaction], 0x32B9D0FF, true, "DISPEÈERINË: {82CDDA}Uniformø, aprangos, spec. inventoriaus atsargos paruoðtos paëmimui.");
					SendFactionMessage(PlayerInfo[playerid][pFaction], 0x32B9D0FF, true, "DISPEÈERINË: {82CDDA}Vieta - sandëliai.");
					SendFactionMessage(PlayerInfo[playerid][pFaction], 0x009AB5FF, true, "-------------------------------------------------------");
					SendFormat(playerid, 0x39A8D7FF, "[UÞSAKYMAS] {4FB3DF}Nuvykite á sandëli, paþymëtà þemëlapyje ir paimkite uþsakymà.");
					SendFormat(playerid, 0x4FB3DFFF, "Jûsø tr. priemonë turi bûti pakankamai talpi (rekomenduotina autobusiukas).");
				}
			}
			else OnDialogResponse(playerid, DIALOG_FM_INVENTORY, 1, 2, "");
		}
		case DIALOG_FM_VEHICLES_MAIN:
		{
			if(response)
			{
				if(listitem == 0)
				{
					// turimos
					new playerfaction = PlayerInfo[playerid][pFaction],
						id,
						string[4024] = "{BABABA}Nr.\t{BABABA}Modelis\t{BABABA}Numeriai\n{FFFFFF}",
						line[86];
					foreach(new vehicleid : Vehicle)
					{
						if(VehicleInfo[vehicleid][vFaction] == playerfaction)
						{
							tmpArray[playerid][id] = vehicleid;
							id++;
							format(line, sizeof line, "%d.\t%s\t%s\n", id, GetModelName(GetVehicleModel(vehicleid)), VehicleInfo[vehicleid][vNumbers]);
							strcat(string, line);
						}
					}
					if(id == 0)
					{
						MsgError(playerid, "FRAKCIJA", "Tr. priemoniø nëra.");
					}
					else ShowPlayerDialog(playerid, DIALOG_FM_VEHICLES_LIST, DIALOG_STYLE_TABLIST_HEADERS, "Frakcijos tr. priemonës", string, "Tæsti", "Atðaukti");
				}
				else
				{
					// pirkimas
					new string[126],
						factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
					if(factionid == -1) return 1;
					MsgInfo(playerid, "FRAKCIJA", "Nupirkta transporto priemonë atsiras jûsø pozicijoje!");
					mysql_format(chandler, string, sizeof string, "SELECT `Model`,`Price`,`id` FROM `sell_vehicles_factions` WHERE FactionType = '%d'", FactionInfo[factionid][fType]);
					mysql_tquery(chandler, string, "FactionSellListLoaded", "d", playerid);
				}
			}
			else OnDialogResponse(playerid, DIALOG_FM_MAIN, 1, 1, "");
		}
		case DIALOG_FM_VEHICLES_SHOP:
		{
			if(response)
			{
				new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
					price,
					model,
					string[126];
				if(factionid == -1) return 0;
				mysql_format(chandler, string, sizeof string, "SELECT `Price`,`Model` FROM `sell_vehicles_factions` WHERE id = '%d'", tmpArray[playerid][listitem]);
				new Cache:result = mysql_query(chandler, string, true);
				cache_get_value_name_int(0, "Price", price);
				cache_get_value_name_int(0, "Model", model);
				cache_delete(result);
				if(FactionInfo[factionid][fBudget] < price)
				{
					InfoBox(playerid, "NEPAKANKAMAI", "PINIGU BIUDZETE");
					return OnDialogResponse(playerid, DIALOG_FM_VEHICLES_MAIN, 1, 1, "");
				}
				FactionInfo[factionid][fBudget] -= price;
				SaveFactionIntEx(factionid, "Budget", FactionInfo[factionid][fBudget]);
				new Float:x, Float:y, Float:z, Float:a;
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, a);
				AddServerVehicle(model, factionid, -1, playerid, x+1.0, y+1.0, z, a, 32, 32, price, .added_by_admin = false);
				MsgSuccess(playerid, "FRAKCIJA", "Nupirkote %s uþ $%d savo frakcijai.", GetModelName(model), price);
				log_init(true);
				log_set_table("logs_factions");
				log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`Amount`");
				log_set_values("'%d','%e','%d','%e','(FM) Nupirko automobili','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GetFactionName(factionid, false), FactionInfo[factionid][fId], model, price);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_FM_INVENTORY, 1, 1, "");
		}
		case DIALOG_FM_VEHICLES_LIST:
		{
			if(response)
			{
				tmpSelected[playerid] = listitem;
				new vehicleid = tmpArray[playerid][listitem],
					string[256],
					factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
				if(factionid == -1) return 0;
				if(VehicleInfo[vehicleid][vFaction] != PlayerInfo[playerid][pFaction]) return pc_cmd_fmenu(playerid, "");
				if(VehicleInfo[vehicleid][vRequiredLevel] <= 0) VehicleInfo[vehicleid][vRequiredLevel] = 1;
				format(string, sizeof string, "{BABABA}Nustatymas\t{BABABA}Dabartinë reikðmë\nRida\t{D9EB80}%0.2f\n{FFFFFF}Minimalus rangas\t{D9EB80}%s (%d)\n{FFFFFF}Ekipaþas\t{D9EB80}%s\n{FFFFFF}Iðsaugoti pozicijà\nPerdaþyti\n{D54B4B}Parduoti tr. priemonæ", VehicleInfo[vehicleid][vKM], FactionRankNames[factionid][VehicleInfo[vehicleid][vRequiredLevel]-1], VehicleInfo[vehicleid][vRequiredLevel], VehicleInfo[vehicleid][vUnitText]);
				ShowPlayerDialog(playerid, DIALOG_FM_VEHICLE_EDIT, DIALOG_STYLE_TABLIST_HEADERS, "Frakcijos tr. priemonës", string, "Tæsti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_FM_INVENTORY, 1, 1, "");
		}
		case DIALOG_FM_VEHICLE_EDIT:
		{
			if(response)
			{
				if(listitem == 0)
				{
					OnDialogResponse(playerid, DIALOG_FM_VEHICLES_LIST, 1, tmpSelected[playerid], "");
				}
				if(listitem == 1)
				{
					// minimalus rangas
					MsgInfo(playerid, "FRAKCIJA", "Pasirinkite rangà, nuo kurio leisite vairuoti %s", GetModelName(GetVehicleModel(tmpArray[playerid][tmpSelected[playerid]])));
					new string[1024],
						factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
					for(new i = 0; i < MAX_FACTION_RANKS; i++)
					{
						if(!strlen(FactionRankNames[factionid][i])) { break; }
						format(string, sizeof string, "%s%s (%d)\n", string, FactionRankNames[factionid][i], i+1);
					}
					ShowPlayerDialog(playerid, DIALOG_FM_VEHICLE_SET_RANK, DIALOG_STYLE_LIST, "Frakcijos tr. priemonës", string, "Tæsti", "Atðaukti");
				}
				else if(listitem == 2)
				{
					// ekipazas
					new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
					if(FactionInfo[factionid][fType] == FACTION_TYPE_POLICE || FactionInfo[factionid][fType] == FACTION_TYPE_FIRE)
					{
						ShowPlayerDialog(playerid, DIALOG_FM_VEHICLE_SET_UNIT, DIALOG_STYLE_INPUT, "Frakcijos tr. priemonës", "{E4E4E4}Ávesktite ekipaþo pavadinimà, kurá rodys ant tr. priemonës\n{B4B4B4}Norëdami iðtrinti esamà, nieko neáveskite.", "Tæsti", "Atðaukti");
					}
					else OnDialogResponse(playerid, DIALOG_FM_VEHICLES_LIST, 1, tmpSelected[playerid], ""), MsgError(playerid, "FRAKCIJA", "Jûsø frakcija ðios funkcijos neturi.");
				}
				else if(listitem == 3)
				{
					// pos change
					if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE), OnDialogResponse(playerid, DIALOG_FM_VEHICLES_LIST, 1, tmpSelected[playerid], "");
					new vehicleid = GetPlayerVehicleID(playerid);
					if(VehicleInfo[vehicleid][vFaction] != PlayerInfo[playerid][pFaction]) return OnDialogResponse(playerid, DIALOG_FM_VEHICLES_LIST, 1, tmpSelected[playerid], "");
					else
					{
						new Float:x, Float:y, Float:z, Float:a, model, color1, color2, id, addsiren, respawntime, addtype, string[126], price, Float:km,
							factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
						GetVehiclePos(vehicleid, x, y, z);
						GetVehicleZAngle(vehicleid, a);
						GetVehicleColor(vehicleid, color1, color2);
						VehicleInfo[vehicleid][vSyncX] = x;
						VehicleInfo[vehicleid][vSyncY] = y;
						VehicleInfo[vehicleid][vSyncZ] = z;
						VehicleInfo[vehicleid][vSyncA] = a;
						id = VehicleInfo[vehicleid][vId];
						addtype = VehicleInfo[vehicleid][vExtraId];
						addsiren = VehicleInfo[vehicleid][vAddSiren];
						respawntime = VehicleInfo[vehicleid][vRespawnTime];
						price = VehicleInfo[vehicleid][vPrice];
						km = VehicleInfo[vehicleid][vKM];
						model = GetVehicleModel(vehicleid);
						format(string, sizeof string, VehicleInfo[vehicleid][vUnitText]);
						DestroyVehicle(vehicleid);
						
						Vehicle_ResetTrunkWeapons(vehicleid);

						new newvehicleid = AddServerVehicle(model, factionid, -1, playerid, x, y, z, a, color1, color2, price, addsiren, respawntime, .added_by_admin = !!addtype, .add_to_mysql = false);
						VehicleInfo[newvehicleid][vId] = id;
						VehicleInfo[newvehicleid][vKM] = km;
						PutFactionWeaponsInVehicle(newvehicleid);

						if(strlen(string))
						{
							new Float:mx, Float:mz, Float:my;
							GetVehicleModelInfo(GetVehicleModel(newvehicleid), VEHICLE_MODEL_INFO_SIZE, mx, my, mz);
							VehicleInfo[newvehicleid][vUnitLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, 0.425*mx, (-0.45*my), (-0.1*mz), 15.0, INVALID_PLAYER_ID, vehicleid, 1);
						}

						Vehicle_SetServerNumberPlate(vehicleid);

						mysql_format(chandler, string, sizeof string, "UPDATE `vehicles_server` SET X='%f',Y='%f',Z='%f',A='%f' WHERE id = '%d'", x, y, z, a, VehicleInfo[newvehicleid][vId]);
						mysql_fquery(chandler, string, "FactionVehiclePosUpdate");
						OnDialogResponse(playerid, DIALOG_FM_VEHICLES_LIST, 1, tmpSelected[playerid], "");
						MsgSuccess(playerid, "FRAKCIJA", "Tr. priemonës pozicija iðsaugota.");

						log_init(true);
						log_set_table("logs_factions");
						log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`");
						log_set_values("'%d','%e','%d','%e','(FM) Atnaujino automobilio pozicija','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), VehicleInfo[newvehicleid][vId]);
						log_commit();
					}
				}
				else if(listitem == 4)
				{
					// perdazyti
					ShowPlayerDialog(playerid, DIALOG_FM_VEHICLE_COLOR, DIALOG_STYLE_INPUT, "Frakcijos tr. priemonës", "{E4E4E4}Áveskite tr. priemonës spalvas\nPvz.: 0 0, 251 32", "Keisti", "Atðaukti");
				}
				else if(listitem == 5)
				{
					// parduoti
					new vehicleid = tmpArray[playerid][tmpSelected[playerid]],
						factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
					if(factionid == -1) return 1;
					if(IsValidVehicle(vehicleid) && VehicleInfo[vehicleid][vFaction] == PlayerInfo[playerid][pFaction])
					{
						if(VehicleInfo[vehicleid][vExtraId] == 1)
						{
							// pridejo adminas, negalim parduoti
							MsgError(playerid, "FRAKCIJA", "Ðios tr. priemonës parduoti negalite.");
							return 1;
						}

						FactionInfo[factionid][fBudget] += VehicleInfo[vehicleid][vPrice];
						new string[126],
							money = VehicleInfo[vehicleid][vPrice] - floatround(VehicleInfo[vehicleid][vKM]/200.0);

						log_init(true);
						log_set_table("logs_factions");
						log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`Amount`");
						log_set_values("'%d','%e','%d','%e','(FM) Pardave automobili','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), VehicleInfo[vehicleid][vId], money);
						log_commit();

						if(money < 0) money = 0;
						mysql_format(chandler, string, sizeof string, "DELETE FROM `vehicles_server` WHERE id = '%d'", VehicleInfo[vehicleid][vId]);
						mysql_fquery(chandler, string, "VehicleDeletedEx");
						DestroyVehicle(vehicleid);
						MsgSuccess(playerid, "FRAKCIJA", "Tr. priemonë parduota, gavote $%d.", money);
					}
				}
			}
			else
			{
				OnDialogResponse(playerid, DIALOG_FM_VEHICLES_MAIN, 1, 0, "");
			}
		}
		case DIALOG_FM_VEHICLE_COLOR:
		{
			if(response)
			{
				new col1, col2;
				if(sscanf(inputtext,"dd",col1,col2)) return OnDialogResponse(playerid, DIALOG_FM_VEHICLE_EDIT, 1, 4, "");
				new vehicleid = tmpArray[playerid][tmpSelected[playerid]];
				if(IsValidVehicle(vehicleid))
				{
					ChangeVehicleColor(vehicleid, col1, col2);
					SaveServerVehicleIntEx(vehicleid, "Color1", col1);
					SaveServerVehicleIntEx(vehicleid, "Color2", col2);
					MsgSuccess(playerid, "FRAKCIJA", "Tr. priemonë perdaþyta.");
					OnDialogResponse(playerid, DIALOG_FM_VEHICLES_LIST, 1, tmpSelected[playerid], "");
				}
				log_init(true);
				log_set_table("logs_factions");
				log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`Amount`");
				log_set_values("'%d','%e','%d','%e','Perdaze automobili','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[playerid][pFaction], GetFactionName(PlayerInfo[playerid][pFaction]), VehicleInfo[vehicleid][vId], col1);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_FM_VEHICLES_LIST, 1, tmpSelected[playerid], "");
		}
		case DIALOG_FM_VEHICLE_SET_RANK:
		{
			if(response)
			{
				new vehicleid = tmpArray[playerid][tmpSelected[playerid]],
					factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
				VehicleInfo[vehicleid][vRequiredLevel] = listitem+1;
				SaveServerVehicleIntEx(vehicleid, "RequiredLevel", listitem+1);
				/*new __reset_Trunk[E_FACTION_TRUNK_WEAPONS_DATA];
				for(new i = 0; i < MAX_VEHICLE_WEAPON_SLOTS; i++) VehicleWeaponsInventory[vehicleid][i] = __reset_Trunk;
				PutFactionWeaponsInVehicle(vehicleid);*/
				MsgSuccess(playerid, "FRAKCIJA", "Nustatëte minimalø rangà á %s tr. priemonei %s", FactionRankNames[factionid][listitem], GetModelName(GetVehicleModel(vehicleid)));
				pc_cmd_fmenu(playerid, "");
				log_init(true);
				log_set_table("logs_factions");
				log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`Amount`");
				log_set_values("'%d','%e','%d','%e','Pakeite automobilio ranga','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), VehicleInfo[vehicleid][vId], listitem+1);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_FM_VEHICLES_LIST, 1, tmpSelected[playerid], "");
		}
		case DIALOG_FM_VEHICLE_SET_UNIT:
		{
			if(response)
			{
				new vehicleid = tmpArray[playerid][tmpSelected[playerid]];
				if(IsValidVehicle(vehicleid))
				{
					if(!strlen(inputtext))
					{
						if(strlen(VehicleInfo[vehicleid][vUnitText]))
						{
							// sena istrinam
							if(IsValidDynamic3DTextLabel(VehicleInfo[vehicleid][vUnitLabel]))
							{
								DestroyDynamic3DTextLabel(VehicleInfo[vehicleid][vUnitLabel]);
							}
							VehicleInfo[vehicleid][vUnitLabel] = INVALID_3DTEXT_ID;
							log_init(true);
							log_set_table("logs_factions");
							log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`ExtraString`");
							log_set_values("'%d','%e','%d','%e','(FM) Pasalino automobilio unit','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[playerid][pFaction], GetFactionName(PlayerInfo[playerid][pFaction]), VehicleInfo[vehicleid][vId], VehicleInfo[vehicleid][vUnitText]);
							log_commit();

							format(VehicleInfo[vehicleid][vUnitText], 1, "");
							MsgSuccess(playerid, "FRAKCIJA", "Sëkmingai paðalinote ekipaþo pavadinimà.");
							OnDialogResponse(playerid, DIALOG_FM_VEHICLES_LIST, 1, tmpSelected[playerid], "");

							new string[256];
							mysql_format(chandler, string, sizeof string, "UPDATE `vehicles_server` SET Unit = '' WHERE id = '%d'", VehicleInfo[vehicleid][vId]);
							mysql_fquery(chandler, string, "VehicleSavedEx");
						}
						else OnDialogResponse(playerid, DIALOG_FM_VEHICLES_LIST, 1, tmpSelected[playerid], "");
					}
					else
					{
						// ivede
						if(IsValidDynamic3DTextLabel(VehicleInfo[vehicleid][vUnitLabel]))
						{
							UpdateDynamic3DTextLabelText(VehicleInfo[vehicleid][vUnitLabel], 0xFFFFFFFF, inputtext);
						}
						else
						{
							new Float:x, Float:z, Float:y;
							GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, x, y, z);
							VehicleInfo[vehicleid][vUnitLabel] = CreateDynamic3DTextLabel(inputtext, 0xFFFFFFFF, 0.425*x, (-0.45*y), (-0.1*z), 15.0, INVALID_PLAYER_ID, vehicleid, 1);
						}
						format(VehicleInfo[vehicleid][vUnitText], 15, inputtext);
						Streamer_Update(playerid);

						log_init(true);
						log_set_table("logs_factions");
						log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`ExtraString`");
						log_set_values("'%d','%e','%d','%e','(FM) Pakeite automobilio unit','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[playerid][pFaction], GetFactionName(PlayerInfo[playerid][pFaction]), VehicleInfo[vehicleid][vId], inputtext);
						log_commit();

						new string[256];
						mysql_format(chandler, string, sizeof string, "UPDATE `vehicles_server` SET Unit = '%e' WHERE id = '%d'", inputtext, VehicleInfo[vehicleid][vId]);
						mysql_fquery(chandler, string, "VehicleSavedEx");

						MsgSuccess(playerid, "FRAKCIJA", "Sëkmingai atnaujinote ekipaþà: \"%s\"", inputtext);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_FM_VEHICLES_LIST, 1, tmpSelected[playerid], "");
		}
		case DIALOG_FM_BUDGET_MAIN:
		{
			if(response)
			{
				if(listitem == 0) OnDialogResponse(playerid, DIALOG_FM_INVENTORY, 1, 0, "");
				if(listitem == 1)
				{
					new string[126];
					format(string, sizeof string, "{E4E4E4}Áveskite kieká pinigø, kurá norite padëti á biudþetà.\nRankose turite: {AFEE9E}$%d", GetPlayerMoney(playerid));
					ShowPlayerDialog(playerid, DIALOG_FM_BUDGET_PUT, DIALOG_STYLE_INPUT, "Frakcijos biudþetas", string, "Tæsti", "Atðaukti");
				}
				else if(listitem == 2)
				{
					new string[126],
						factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
					format(string, sizeof string, "{E4E4E4}Áveskite kieká pinigø, kurá norite nuimti ið biudþeto.\nDabar yra: {AFEE9E}$%d", FactionInfo[factionid][fBudget]);
					ShowPlayerDialog(playerid, DIALOG_FM_BUDGET_TAKE, DIALOG_STYLE_INPUT, "Frakcijos biudþetas", string, "Tæsti", "Atðaukti");
				}
			}
			else OnDialogResponse(playerid, DIALOG_FM_MAIN, 1, 1, "");
		}

		case DIALOG_FM_BUDGET_PUT:
		{
			if(response)
			{
				new amount, factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
				if(sscanf(inputtext,"d",amount)) return OnDialogResponse(playerid, DIALOG_FM_BUDGET_MAIN, 1, 1, "");
				if(GetPlayerMoney(playerid) < amount || amount < 0) return OnDialogResponse(playerid, DIALOG_FM_BUDGET_MAIN, 1, 1, "") , InfoBox(playerid, IB_NOT_ENOUGH_MONEY, amount);
				FactionInfo[factionid][fBudget] += amount;
				GivePlayerMoney(playerid, -amount);
				MsgSuccess(playerid, "FRAKCIJA", "Padëjote $%d á frakcijos biudþetà.", amount);
				OnDialogResponse(playerid, DIALOG_FM_BUDGET_MAIN, 1, 1, "");
				SaveFactionIntEx(factionid, "Budget", FactionInfo[factionid][fBudget]);
				log_init(true);
				log_set_table("logs_factions");
				log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`Amount`");
				log_set_values("'%d','%e','%d','%e','(FM) Padejo i frakcijos biudzeta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), amount);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_FM_INVENTORY, 1, 0, "");
		}
		case DIALOG_FM_BUDGET_TAKE:
		{
			if(response)
			{
				new amount, factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
				if(sscanf(inputtext,"d",amount)) return OnDialogResponse(playerid, DIALOG_FM_BUDGET_MAIN, 1, 2, "");
				if(FactionInfo[factionid][fBudget] < amount || amount < 0) return OnDialogResponse(playerid, DIALOG_FM_BUDGET_MAIN, 1, 2, "") , InfoBox(playerid, "NEPAKANKAMAI", "PINIGU BIUDZETE");
				FactionInfo[factionid][fBudget] -= amount;
				GivePlayerMoney(playerid, amount);
				MsgSuccess(playerid, "FRAKCIJA", "Paëmete $%d ið frakcijos biudþeto.", amount);
				OnDialogResponse(playerid, DIALOG_FM_BUDGET_MAIN, 1, 2, "");
				SaveFactionIntEx(factionid, "Budget", FactionInfo[factionid][fBudget]);
				log_init(true);
				log_set_table("logs_factions");
				log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`Amount`");
				log_set_values("'%d','%e','%d','%e','(FM) Paeme is frakcijos biudzeto','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), amount);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_FM_INVENTORY, 1, 0, "");
		}
		case DIALOG_MECHANIC_SELECT_COLORS:
		{
			if(response)
			{
				new color1, color2;
				if(sscanf(inputtext,"dd",color1,color2)) return ShowPlayerDialog(playerid, DIALOG_MECHANIC_SELECT_COLORS, DIALOG_STYLE_INPUT, "Perdaþymas", "{FFFFFF}Áveskite abiejø spalvø kodà, pvz: 0 10\n{BABABA}(wiki.sa-mp.com/wiki/Vehicle_Color_IDs)", "Tæsti", "Atðaukti");
				//if((weaponid = PlayerHasWeaponInSlot(playerid, 9)) != 0)
				//{
					//return SendWarning(playerid, "pasidëkite ginklà %s á inventoriø ir bandykite dar kartà.", GetWeaponName(weaponid));
				//}
				PlayerInfo[playerid][pJobCurrentType] = color1;
				PlayerInfo[playerid][pJobDestination] = color2;
				if(MECHANIC_REPAINT_ZONE_RADIUS <= GetVehicleDistanceFromPoint(PlayerInfo[playerid][pJobVehicle], DEFAULT_MECHANIC_REPAINT_SPOT) || !IsValidVehicle(PlayerInfo[playerid][pJobVehicle]))
				{
					SendFormat(playerid, 0xE47474FF, "Jûsø perdaþoma tr. priemonë nebëra garaþe.");
					DisablePlayerCheckpointEx(playerid);
					return ResetPlayerJobTask(playerid, true);
				}
				GivePlayerWeapon(playerid, 41, 7500, WEAPON_GIVE_TYPE_NO_INVENTORY, 0);
				new Float:x, Float:y, Float:z;
				GetPosFrontVehicle(PlayerInfo[playerid][pJobVehicle], x, y, z, 1.5);
				SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_REPAINT_VEHICLE, x, y, z, 2.3);
				GivePlayerMoney(playerid, -DEFAULT_REPAINT_PRICE);
				PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_REPAINT_VEHICLE;
				PlayerInfo[playerid][pJobActionTime] = 60;
				PlayerInfo[playerid][pJobActionIndex] = 0;
			}
		}
		case DIALOG_FARMER_SELECT_JOB:
		{
			if(response)
			{
				if(listitem == 0)
				{
					if(GetPlayerVehicleID(playerid) == INVALID_VEHICLE_ID || VehicleInfo[GetPlayerVehicleID(playerid)][vJob] != JOB_FARMER)
					{
						PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TAKE_COMBAIN;
						PlayerInfo[playerid][pJobActionTime] = 15;
						SendFormat(playerid, 0xFFBA41FF, "Atsisëskite á artimiausià kombainà.");
					}
					else
					{
						PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_COLLECT_COMBAIN;
						PlayerInfo[playerid][pJobActionTime] = 30;
						PlayerInfo[playerid][pJobVehicle] = GetPlayerVehicleID(playerid);
						new index = random(sizeof FarmerSpots);
						PlayerInfo[playerid][pJobDestination] = index;
						SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_FARMER_SPOT, FarmerSpots[index][0], FarmerSpots[index][1], FarmerSpots[index][2], 2.3);
						SendFormat(playerid, 0xACE656FF, "Vaþiuokite á paþymëtus taðkus þemëlapyje.");
					}
					JobGUI_Show(playerid);
					JobGUI_Update(playerid, .bottext = "_~n~_");
				}
				else if(listitem == 1)
				{
					JobGUI_Show(playerid);
					JobGUI_Update(playerid, .bottext = "~n~_");
					PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TAKE_BAG;
					PlayerInfo[playerid][pJobActionTime] = 60;
					new index = random(sizeof FarmerBagSpots);
					PlayerInfo[playerid][pJobDestination] = index;
					SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_FARMER_TAKE_BAG, FarmerBagSpots[index][0], FarmerBagSpots[index][1], FarmerBagSpots[index][2], 2.3);
					SendFormat(playerid, 0xACE656FF, "Paimkite maiðà ið paþymëtos vietos þemëlapyje.");
				}
			}
			else
			{
				PlayerInfo[playerid][pJobDuty] = 0;
			}
		}
		case DIALOG_FURNITURE_MAIN:
		{
			if(response)
			{
				if(listitem == 0)
				{
					// esami
					ShowOwnedFurniture(playerid, 0, tmpType_Salon[playerid], tmpIter[playerid]);
				}
				if(listitem == 1)
				{
					// pirkti
					switch(tmpType_Salon[playerid])
					{
						case 1:
						{
							// namui
							if( (PlayerInfo[playerid][pDonator] == DONATOR_NONE && CountHouseFurniture(tmpIter[playerid]) >= MAX_HFURNITURE) ||
								(PlayerInfo[playerid][pDonator] == DONATOR_BRONZE && CountHouseFurniture(tmpIter[playerid]) >= MAX_HFURNITURE_BRONZE) ||
								(PlayerInfo[playerid][pDonator] == DONATOR_SILVER && CountHouseFurniture(tmpIter[playerid]) >= MAX_HFURNITURE_SILVER) ||
								(PlayerInfo[playerid][pDonator] == DONATOR_GOLD && CountHouseFurniture(tmpIter[playerid]) >= MAX_HFURNITURE_GOLD))
							{
								SendError(playerid, "Jûs jau esatæ pasiekæs baldø limità. Daugiau apie limitus: www."#PROJECT_NAME"."#PROJECT_DOMAIN"");
								return 1;
							}
						}
						case 2:
						{
							// verslui
							if( (PlayerInfo[playerid][pDonator] == DONATOR_NONE && CountBusinessFurniture(tmpIter[playerid]) >= MAX_BFURNITURE) ||
								(PlayerInfo[playerid][pDonator] == DONATOR_BRONZE && CountBusinessFurniture(tmpIter[playerid]) >= MAX_BFURNITURE_BRONZE) ||
								(PlayerInfo[playerid][pDonator] == DONATOR_SILVER && CountBusinessFurniture(tmpIter[playerid]) >= MAX_BFURNITURE_SILVER) ||
								(PlayerInfo[playerid][pDonator] == DONATOR_GOLD && CountBusinessFurniture(tmpIter[playerid]) >= MAX_BFURNITURE_GOLD))
							{
								SendError(playerid, "Jûs jau esatæ pasiekæs baldø limità. Daugiau apie limitus: www."#PROJECT_NAME"."#PROJECT_DOMAIN"");
								return 1;
							}
						}
						case 3:
						{
							// garazui
							if( (PlayerInfo[playerid][pDonator] == DONATOR_NONE && CountGarageFurniture(tmpIter[playerid]) >= MAX_GFURNITURE) ||
								(PlayerInfo[playerid][pDonator] == DONATOR_BRONZE && CountGarageFurniture(tmpIter[playerid]) >= MAX_GFURNITURE_BRONZE) ||
								(PlayerInfo[playerid][pDonator] == DONATOR_SILVER && CountGarageFurniture(tmpIter[playerid]) >= MAX_GFURNITURE_SILVER) ||
								(PlayerInfo[playerid][pDonator] == DONATOR_GOLD && CountGarageFurniture(tmpIter[playerid]) >= MAX_GFURNITURE_GOLD))
							{
								SendError(playerid, "Jûs jau esatæ pasiekæs baldø limità. Daugiau apie limitus: www."#PROJECT_NAME"."#PROJECT_DOMAIN"");
								return 1;
							}
						}
					}
					new string[1024];
					for(new list = 0; list < sizeof FurnitureListNames; list++)
					{
						format(string, sizeof string, "%s%s\n", string, FurnitureListNames[list]);
					}
					ShowPlayerDialog(playerid, DIALOG_FURNITURE_CATEGORIES, DIALOG_STYLE_LIST, "Baldø pirkimas", string, "Tæsti", "Atðaukti");
				}
			}
		}

		case DIALOG_FURNITURE_OWNED:
		{
			if(response)
			{
				/*if(listitem >= tmpTexture_MarkStart_CP[playerid])
				{
					if(GetGVarInt("EnabledFurnitureMultiSelect"))
					{
						// paspaude Ijungti/isjungti zymejima
						if(listitem == tmpTexture_MarkStart_CP[playerid])
						{
							FurnitureMultiSelectionEnabled{playerid} = !FurnitureMultiSelectionEnabled{playerid};
							if(FurnitureMultiSelectionEnabled{playerid} == true)
							{
								SendFormat(playerid, 0xFFCB69FF, "Ájungëte multi-þymëjimà.");
							}
							else
							{
								SendFormat(playerid, 0xFFCB69FF, "Iðjungëte multi-þymëjimà.");
								for(new i = 0; i < FURNITURE_ARRAY_LIMIT; i++)
								{
									// nullinam data
									tmpArray[playerid][i] = 0;
								}
							}
							OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
						}
						else if(listitem == tmpTexture_MarkStart_CP[playerid]+1)
						{
							// pazymeti visus, kitas neimanomas pasirinkimas
							for(new i = 0; i < FURNITURE_ARRAY_LIMIT; i++)
							{
								tmpArray[playerid][i] = 1;
							}
							OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
						}
						else if(listitem == tmpTexture_MarkStart_CP[playerid]+2)
						{
							// atzymeti visus kitas neimanomas pasirinkimas cia
							for(new i = 0; i < FURNITURE_ARRAY_LIMIT; i++)
							{
								tmpArray[playerid][i] = 0;
							}
							OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
						}
						else if(listitem == tmpTexture_MarkStart_CP[playerid]+3)
						{
							// redaguoti
							ShowPlayerDialog(playerid, DIALOG_FURNITURE_EDIT_SELECTED, DIALOG_STYLE_LIST, "Pasirinktø baldø redagavimas", "Atstatyti pasukimà\nPasukimo keitimas\nParduoti", "Tæsti", "Atðaukti");
						}
					}
				}
				else
				{
				if(FurnitureMultiSelectionEnabled{playerid} == true)
				{
					// pazymejo kazkuri
					tmpArray[playerid][listitem] = !tmpArray[playerid][listitem];
					OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
				}*/
				
				if(listitem >= MAX_FURNITURE_PER_PAGE)
				{
					if(listitem == MAX_FURNITURE_PER_PAGE && tmpFurnitureNextPage[playerid]) ShowOwnedFurniture(playerid, tmpFurniturePage[playerid] + 1, tmpType_Salon[playerid], tmpIter[playerid]);
					else if((listitem == MAX_FURNITURE_PER_PAGE && !tmpFurnitureNextPage[playerid]) || (listitem == MAX_FURNITURE_PER_PAGE - 1 && tmpFurnitureNextPage[playerid]) && tmpFurniturePage[playerid] > 0)  ShowOwnedFurniture(playerid, tmpFurniturePage[playerid] + 1, tmpType_Salon[playerid], tmpIter[playerid]);
				}
				else
				{
					switch(tmpType_Salon[playerid])
					{
						case 1:
						{
							// tiesiog rodom editinima
							new id;
							foreach(new tmpfurnitureid : HFurniture) // vietoj tmpSlots
							{
								if(hFurnitureInfo[tmpfurnitureid][hfOwner] == HouseInfo[tmpIter[playerid]][hId])
								{
									if(id == listitem + tmpFurniturePage[playerid]*MAX_FURNITURE_PER_PAGE)
									{
										tmpSelected[playerid] = tmpfurnitureid;
										break;
									}
									id++;
								}
							}
						}
						case 2:
						{
							new id;
							foreach(new tmpfurnitureid : BFurniture) // vietoj tmpSlots
							{
								if(bFurnitureInfo[tmpfurnitureid][bfOwner] == BusinessInfo[tmpIter[playerid]][bId])
								{
									if(id == listitem + tmpFurniturePage[playerid]*MAX_FURNITURE_PER_PAGE)
									{
										tmpSelected[playerid] = tmpfurnitureid;
										break;
									}
									id++;
								}
							}
						}
						case 3:
						{
							new id;
							foreach(new tmpfurnitureid : GFurniture) // vietoj tmpSlots
							{
								if(gFurnitureInfo[tmpfurnitureid][gfOwner] == GarageInfo[tmpIter[playerid]][gId])
								{
									if(id == listitem + tmpFurniturePage[playerid]*MAX_FURNITURE_PER_PAGE)
									{
										tmpSelected[playerid] = tmpfurnitureid;
										break;
									}
									id++;
								}
							}
						}
					}
					ShowPlayerDialog(playerid, DIALOG_FURNITURE_EDIT_MAIN, DIALOG_STYLE_LIST, "Baldo redagavimas", "Pozicijos keitimas\nPervadinti baldà\nAtstatyti pasukimà\nPasukimo keitimas\nTekstûrø keitimas\nDuplikuoti\nParduoti", "Tæsti", "Atðaukti");
				}
				//}
			}
			else pc_cmd_furniture(playerid, "");
		}

		case DIALOG_FURNITURE_EDIT_SELECTED:
		{
			if(GetGVarInt("EnabledFurnitureMultiSelect"))
			{
				if(response)
				{
					switch(listitem)
					{
						case 0: // atstatyti pasukima
						{
							new array[150],
								index;
							FurnitureFromIteratorToArray(array, index, tmpType_Salon[playerid], tmpIter[playerid]);
							for(new i = 0; i < sizeof tmpArray[]; i++)
							{
								if(tmpArray[playerid][i] == 1)
								{
									// jei sitas pazymetas, tada
									new string[126];
									switch(tmpType_Salon[playerid])
									{
										case 1:
										{
											mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET RX = '0.0', RY = '0.0', RZ = '0.0' WHERE id = '%d'", hFurnitureInfo[array[i]][hfId]);
											SetDynamicObjectRot(hFurnitureInfo[array[i]][hfObject], 0.0, 0.0, 0.0);
										}
										case 2:
										{
											mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET RX = '0.0', RY = '0.0', RZ = '0.0' WHERE id = '%d'", bFurnitureInfo[array[i]][bfId]);
											SetDynamicObjectRot(bFurnitureInfo[array[i]][bfObject], 0.0, 0.0, 0.0);
										}
										case 3:
										{
											mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET RX = '0.0', RY = '0.0', RZ = '0.0' WHERE id = '%d'", gFurnitureInfo[array[i]][gfId]);
											SetDynamicObjectRot(gFurnitureInfo[array[i]][gfObject], 0.0, 0.0, 0.0);
										}
									}
									mysql_fquery(chandler, string, "FurnitureSaved");
									InfoBox(playerid, "~w~POZICIJA", "~g~ATSTATYTA");
									OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
								}
							}
						}
						case 1: // pasukimas
						{
							ShowPlayerDialog(playerid, DIALOG_FURNITURE_CHANGE_RX_M, DIALOG_STYLE_INPUT, "Baldo redagavimas", "{BABABA}Áveskite naujà {FFFFFF}X{BABABA} pasukimo kampà.\n{BABABA}Sekanèiame lange galësite ávesti Y kampà.\nJei nenorite keisti - nieko neáraðykite.", "Tæsti", "Atðaukti");
						}
						case 2: // parduoti
						{

						}
					}
				}
				else OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
			}
		}
		case DIALOG_FURNITURE_CHANGE_RX_M:
		{
			if(response)
			{
				if(strlen(inputtext))
				{
					new string[126],
						array[150],
						Float:ry,
						Float:rz,
						Float:unused,
						type = tmpType_Salon[playerid],
						index;
					FurnitureFromIteratorToArray(array, index, type, tmpIter[playerid]);
					for(new i = 0; i < sizeof tmpArray[]; i++)
					{
						if(tmpArray[playerid][i] == 1)
						{
							// sitas pazymetas
							switch(type)
							{
								case 1:
								{
									mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET RX = '%f' WHERE id = '%d'", floatstr(inputtext), hFurnitureInfo[array[i]][hfId]);
									mysql_fquery(chandler, string, "SelectedFurnitureUpdate");
									GetDynamicObjectRot(hFurnitureInfo[array[i]][hfObject], unused, ry, rz);
									SetDynamicObjectRot(hFurnitureInfo[array[i]][hfObject], floatstr(inputtext), ry, rz);
									hFurnitureInfo[array[i]][hfRot][0] = floatstr(inputtext);
								}
								case 2:
								{
									mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET RX = '%f' WHERE id = '%d'", floatstr(inputtext), bFurnitureInfo[array[i]][bfId]);
									mysql_fquery(chandler, string, "SelectedFurnitureUpdate");
									GetDynamicObjectRot(bFurnitureInfo[array[i]][bfObject], unused, ry, rz);
									SetDynamicObjectRot(bFurnitureInfo[array[i]][bfObject], floatstr(inputtext), ry, rz);
									bFurnitureInfo[array[i]][bfRot][0] = floatstr(inputtext);
								}
								case 3:
								{
									mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET RX = '%f' WHERE id = '%d'", floatstr(inputtext), gFurnitureInfo[array[i]][gfId]);
									mysql_fquery(chandler, string, "SelectedFurnitureUpdate");
									GetDynamicObjectRot(gFurnitureInfo[array[i]][gfObject], unused, ry, rz);
									SetDynamicObjectRot(gFurnitureInfo[array[i]][gfObject], floatstr(inputtext), ry, rz);
									gFurnitureInfo[array[i]][gfRot][0] = floatstr(inputtext);
								}
							}
						}
					}
					InfoBox(playerid, "~g~ATNAUJINTAS", "PASUKIMO KAMPAS X");
				}
				ShowPlayerDialog(playerid, DIALOG_FURNITURE_CHANGE_RY_M, DIALOG_STYLE_INPUT, "Baldo redagavimas", "{BABABA}Áveskite naujà {FFFFFF}Y{BABABA} pasukimo kampà.\n{BABABA}Sekanèiame lange galësite ávesti Z kampà.\nJei nenorite keisti - nieko neáraðykite.", "Tæsti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
		}
		case DIALOG_FURNITURE_CHANGE_RY_M:
		{
			if(response)
			{
				if(strlen(inputtext))
				{
					new string[126],
						Float:rx,
						array[150],
						Float:rz,
						Float:unused,
						type = tmpType_Salon[playerid],
						index;
					FurnitureFromIteratorToArray(array, index, type, tmpIter[playerid]);
					for(new i = 0; i < sizeof tmpArray[]; i++)
					{
						if(tmpArray[playerid][i] == 1)
						{
							// sitas pazymetas
							switch(type)
							{
								case 1:
								{
									mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET RY = '%f' WHERE id = '%d'", floatstr(inputtext), hFurnitureInfo[array[i]][hfId]);
									mysql_fquery(chandler, string, "SelectedFurnitureUpdate");
									GetDynamicObjectRot(hFurnitureInfo[array[i]][hfObject], rx, unused, rz);
									SetDynamicObjectRot(hFurnitureInfo[array[i]][hfObject], rx, floatstr(inputtext), rz);
									hFurnitureInfo[array[i]][hfRot][1] = floatstr(inputtext);
								}
								case 2:
								{
									mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET RY = '%f' WHERE id = '%d'", floatstr(inputtext), bFurnitureInfo[array[i]][bfId]);
									mysql_fquery(chandler, string, "SelectedFurnitureUpdate");
									GetDynamicObjectRot(bFurnitureInfo[array[i]][bfObject], rx, unused, rz);
									SetDynamicObjectRot(bFurnitureInfo[array[i]][bfObject], rx, floatstr(inputtext), rz);
									bFurnitureInfo[array[i]][bfRot][1] = floatstr(inputtext);
								}
								case 3:
								{
									mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET RY = '%f' WHERE id = '%d'", floatstr(inputtext), gFurnitureInfo[array[i]][gfId]);
									mysql_fquery(chandler, string, "SelectedFurnitureUpdate");
									GetDynamicObjectRot(gFurnitureInfo[array[i]][gfObject], rx, unused, rz);
									SetDynamicObjectRot(gFurnitureInfo[array[i]][gfObject], rx, floatstr(inputtext), rz);
									gFurnitureInfo[array[i]][gfRot][1] = floatstr(inputtext);
								}
							}
						}
					}
					InfoBox(playerid, "~g~ATNAUJINTAS", "PASUKIMO KAMPAS Y");
				}
				ShowPlayerDialog(playerid, DIALOG_FURNITURE_CHANGE_RY_M, DIALOG_STYLE_INPUT, "Baldo redagavimas", "{BABABA}Áveskite naujà {FFFFFF}Z{BABABA} pasukimo kampà.\n{BABABA}Sekanèiame lange galësite ávesti Z kampà.\nJei nenorite keisti - nieko neáraðykite.", "Tæsti", "Atðaukti");
			}
			else OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
		}
		case DIALOG_FURNITURE_CHANGE_RZ_M:
		{
			if(response)
			{
				if(strlen(inputtext))
				{
					new string[126],
						array[150],
						Float:rx,
						Float:ry,
						Float:unused,
						type = tmpType_Salon[playerid],
						index;
					FurnitureFromIteratorToArray(array, index, type, tmpIter[playerid]);
					for(new i = 0; i < sizeof tmpArray[]; i++)
					{
						if(tmpArray[playerid][i] == 1)
						{
							// sitas pazymetas
							switch(type)
							{
								case 1:
								{
									mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET RZ = '%f' WHERE id = '%d'", floatstr(inputtext), hFurnitureInfo[array[i]][hfId]);
									mysql_fquery(chandler, string, "SelectedFurnitureUpdate");
									GetDynamicObjectRot(hFurnitureInfo[array[i]][hfObject], rx, ry, unused);
									SetDynamicObjectRot(hFurnitureInfo[array[i]][hfObject], rx, ry, floatstr(inputtext));
									hFurnitureInfo[array[i]][hfRot][2] = floatstr(inputtext);
								}
								case 2:
								{
									mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET RZ = '%f' WHERE id = '%d'", floatstr(inputtext), bFurnitureInfo[array[i]][bfId]);
									mysql_fquery(chandler, string, "SelectedFurnitureUpdate");
									GetDynamicObjectRot(bFurnitureInfo[array[i]][bfObject], rx, ry, unused);
									SetDynamicObjectRot(bFurnitureInfo[array[i]][bfObject], rx, ry, floatstr(inputtext));
									bFurnitureInfo[array[i]][bfRot][2] = floatstr(inputtext);
								}
								case 3:
								{
									mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET RZ = '%f' WHERE id = '%d'", floatstr(inputtext), gFurnitureInfo[array[i]][gfId]);
									mysql_fquery(chandler, string, "SelectedFurnitureUpdate");
									GetDynamicObjectRot(gFurnitureInfo[array[i]][gfObject], rx, ry, unused);
									SetDynamicObjectRot(gFurnitureInfo[array[i]][gfObject], rx, ry, floatstr(inputtext));
									gFurnitureInfo[array[i]][gfRot][2] = floatstr(inputtext);
								}
							}
						}
					}
					InfoBox(playerid, "~g~ATNAUJINTAS", "PASUKIMO KAMPAS Z");
				}
				pc_cmd_furniture(playerid, "");
			}
			else OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
		}
		case DIALOG_FURNITURE_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: // pozicija
					{
						tmpEditing_Component_DMV[playerid] = EDITING_TYPE_DYNAMIC_FURNITURE;
						switch(tmpType_Salon[playerid])
						{
							case 1: EditDynamicObject(playerid, hFurnitureInfo[tmpSelected[playerid]][hfObject]);
							case 2: EditDynamicObject(playerid, bFurnitureInfo[tmpSelected[playerid]][bfObject]);
							case 3: EditDynamicObject(playerid, gFurnitureInfo[tmpSelected[playerid]][gfObject]);
						}
					}
					case 1:
					{
						new string[156],
							name[86];
						switch(tmpType_Salon[playerid])
						{
							case 1: format(name, sizeof name, hFurnitureInfo[tmpSelected[playerid]][hfName]);
							case 2: format(name, sizeof name, bFurnitureInfo[tmpSelected[playerid]][bfName]);
							case 3: format(name, sizeof name, gFurnitureInfo[tmpSelected[playerid]][gfName]);
						}
						format(string, sizeof string, "{BABABA}Áveskite naujà baldo pavadinimà. Dabartinis:\n%s", name);
						ShowPlayerDialog(playerid, DIALOG_FURNITURE_CHANGE_NAME, DIALOG_STYLE_INPUT, "Baldo redagavimas", string, "Keisti", "Atðaukti");
					}
					case 2:
					{
						new string[126];
						switch(tmpType_Salon[playerid])
						{
							case 1:
							{
								mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET RX = '0.0', RY = '0.0', RZ = '0.0' WHERE id = '%d'", hFurnitureInfo[tmpSelected[playerid]][hfId]);
								SetDynamicObjectRot(hFurnitureInfo[tmpSelected[playerid]][hfObject], 0.0, 0.0, 0.0);
							}
							case 2:
							{
								mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET RX = '0.0', RY = '0.0', RZ = '0.0' WHERE id = '%d'", bFurnitureInfo[tmpSelected[playerid]][bfId]);
								SetDynamicObjectRot(bFurnitureInfo[tmpSelected[playerid]][bfObject], 0.0, 0.0, 0.0);
							}
							case 3:
							{
								mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET RX = '0.0', RY = '0.0', RZ = '0.0' WHERE id = '%d'", gFurnitureInfo[tmpSelected[playerid]][gfId]);
								SetDynamicObjectRot(gFurnitureInfo[tmpSelected[playerid]][gfObject], 0.0, 0.0, 0.0);
							}
						}
						mysql_fquery(chandler, string, "FurnitureSaved");
						InfoBox(playerid, "~w~POZICIJA", "~g~ATSTATYTA");
						OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
					}
					case 3:
					{
						new string[256],
							Float:cur, Float:un;
						switch(tmpType_Salon[playerid])
						{
							case 1: GetDynamicObjectRot(hFurnitureInfo[tmpSelected[playerid]][hfObject], cur, un, un);
							case 2: GetDynamicObjectRot(bFurnitureInfo[tmpSelected[playerid]][bfObject], cur, un, un);
							case 3: GetDynamicObjectRot(gFurnitureInfo[tmpSelected[playerid]][gfObject], cur, un, un);
						}
						format(string, sizeof string, "{BABABA}Áveskite naujà {FFFFFF}X{BABABA} pasukimo kampà. Dabartinis: {FFFFFF}%0.1f\n{BABABA}Sekanèiame lange galësite ávesti Y ir Z kampus.\nJei nenorite keisti - nieko neáraðykite.", cur);
						ShowPlayerDialog(playerid, DIALOG_FURNITURE_CHANGE_RX, DIALOG_STYLE_INPUT, "Baldo redagavimas", string, "Keisti", "Atðaukti");
					}
					case 4:
					{
						// teksturos
						new string[212];
						for(new i = 0; i < MAX_TEXTURE_SLOTS; i++)	format(string, sizeof string, "%sSlot %d\n", string, i);
						ShowPlayerDialog(playerid, DIALOG_FURNITURE_TEXTURES, DIALOG_STYLE_LIST, "Baldo redagavimas", string, "Tæsti", "Atðaukti");
					}
					case 5:
					{
						// duplikuoti
						// tmpselected = objekto itter

						new price, owner, Float:pos[3], Float:rot[3],
							model, name[34],
							selected = tmpSelected[playerid],
							building = tmpIter[playerid];
						switch(tmpType_Salon[playerid])
						{
							case 1:
							{
								// hf
								if( (PlayerInfo[playerid][pDonator] == DONATOR_NONE && CountHouseFurniture(building) >= MAX_HFURNITURE) ||
									(PlayerInfo[playerid][pDonator] == DONATOR_BRONZE && CountHouseFurniture(building) >= MAX_HFURNITURE_BRONZE) ||
									(PlayerInfo[playerid][pDonator] == DONATOR_SILVER && CountHouseFurniture(building) >= MAX_HFURNITURE_SILVER) ||
									(PlayerInfo[playerid][pDonator] == DONATOR_GOLD && CountHouseFurniture(building) >= MAX_HFURNITURE_GOLD))
								{
									return SendError(playerid, "Jûs jau esatæ pasiekæs baldø limità. Daugiau apie limitus: www."#PROJECT_NAME"."#PROJECT_DOMAIN"");
								}
								owner = HouseInfo[building][hId];
								price = hFurnitureInfo[selected][hfPrice];
								model = hFurnitureInfo[selected][hfModel];
								for(new i = 0; i < 3; i++)
								{
									pos[i] = hFurnitureInfo[selected][hfPos][i];
									rot[i] = hFurnitureInfo[selected][hfRot][i];
								}
								format(name, 34, hFurnitureInfo[selected][hfName]);
							}
							case 2:
							{
								// bf
								if( (PlayerInfo[playerid][pDonator] == DONATOR_NONE && CountBusinessFurniture(building) >= MAX_BFURNITURE) ||
									(PlayerInfo[playerid][pDonator] == DONATOR_BRONZE && CountBusinessFurniture(building) >= MAX_BFURNITURE_BRONZE) ||
									(PlayerInfo[playerid][pDonator] == DONATOR_SILVER && CountBusinessFurniture(building) >= MAX_BFURNITURE_SILVER) ||
									(PlayerInfo[playerid][pDonator] == DONATOR_GOLD && CountBusinessFurniture(building) >= MAX_BFURNITURE_GOLD))
								{
									return SendError(playerid, "Jûs jau esatæ pasiekæs baldø limità. Daugiau apie limitus: www."#PROJECT_NAME"."#PROJECT_DOMAIN"");
								}
								owner = BusinessInfo[building][bId];
								price = bFurnitureInfo[selected][bfPrice];
								model = bFurnitureInfo[selected][bfModel];
								for(new i = 0; i < 3; i++)
								{
									pos[i] = bFurnitureInfo[selected][bfPos][i];
									rot[i] = bFurnitureInfo[selected][bfRot][i];
								}
								format(name, 34, bFurnitureInfo[selected][bfName]);
							}
							case 3:
							{
								// gf
								if( (PlayerInfo[playerid][pDonator] == DONATOR_NONE && CountGarageFurniture(building) >= MAX_GFURNITURE) ||
									(PlayerInfo[playerid][pDonator] == DONATOR_BRONZE && CountGarageFurniture(building) >= MAX_GFURNITURE_BRONZE) ||
									(PlayerInfo[playerid][pDonator] == DONATOR_SILVER && CountGarageFurniture(building) >= MAX_GFURNITURE_SILVER) ||
									(PlayerInfo[playerid][pDonator] == DONATOR_GOLD && CountGarageFurniture(building) >= MAX_GFURNITURE_GOLD))
								{
									return SendError(playerid, "Jûs jau esatæ pasiekæs baldø limità. Daugiau apie limitus: www."#PROJECT_NAME"."#PROJECT_DOMAIN"");
								}
								owner = GarageInfo[building][gId];
								price = gFurnitureInfo[selected][gfPrice];
								model = gFurnitureInfo[selected][gfModel];
								for(new i = 0; i < 3; i++)
								{
									pos[i] = gFurnitureInfo[selected][gfPos][i];
									rot[i] = gFurnitureInfo[selected][gfRot][i];
								}
								format(name, 34, gFurnitureInfo[selected][gfName]);
							}
						}
						if(GetPlayerMoney(playerid) < price) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, price);
						else
						{
							//BuyFurniture(playerid, tmpType_Salon[playerid], ownerid, FurnitureList[tmpSelected[playerid]][furnitureListPrice], FurnitureList[tmpSelected[playerid]][furnitureListModel], FurnitureList[tmpSelected[playerid]][furnitureListName], FurnitureListNames[FurnitureList[tmpSelected[playerid]][furnitureListCategory]], PlayerInfo[playerid][pPosX]+2.0, PlayerInfo[playerid][pPosY]+2.0, PlayerInfo[playerid][pPosZ]+1.0, 0.0, 0.0, 0.0);
							GivePlayerMoney(playerid, -price);
							BuyFurniture(playerid, tmpType_Salon[playerid], owner, price, model, name, "Duplikuoti", pos[0], pos[1], pos[2], rot[0], rot[1], rot[2]);
						}
					}
					case 6:
					{
						// pardavimas
						new name[26],
							string[126],
							price;
						log_init(true);
						switch(tmpType_Salon[playerid])
						{
							case 1:
							{
								price = hFurnitureInfo[tmpSelected[playerid]][hfPrice]/2;
								GivePlayerMoney(playerid, price);
								format(name, sizeof name, hFurnitureInfo[tmpSelected[playerid]][hfName]);
								Iter_Remove(HFurniture, tmpSelected[playerid]);
								mysql_format(chandler, string, sizeof string, "DELETE FROM `houses_furniture` WHERE id = '%d'", hFurnitureInfo[tmpSelected[playerid]][hfId]);
								mysql_fquery(chandler, string, "FurnitureDeleted");
								log_set_table("logs_houses");
								log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`Amount`");
								log_set_values("'%d','%e','%d','Pardave balda','%d'", LogPlayerId(playerid), LogPlayerName(playerid), hFurnitureInfo[tmpSelected[playerid]][hfOwner], price);
							}
							case 2:
							{
								price = bFurnitureInfo[tmpSelected[playerid]][bfPrice]/2;
								new businessid = FindBusinessBySql(bFurnitureInfo[tmpSelected[playerid]][bfOwner]);
								GivePlayerMoney(playerid, price);
								format(name, sizeof name, bFurnitureInfo[tmpSelected[playerid]][bfName]);
								Iter_Remove(BFurniture, tmpSelected[playerid]);
								mysql_format(chandler, string, sizeof string, "DELETE FROM `business_furniture` WHERE id = '%d'", bFurnitureInfo[tmpSelected[playerid]][bfId]);
								mysql_fquery(chandler, string, "FurnitureDeleted");
								log_set_table("logs_business");
								log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`BusinessName`,`ActionText`,`Amount`");
								log_set_values("'%d','%e','%d','%e','Pardave balda','%d'", LogPlayerId(playerid), LogPlayerName(playerid), bFurnitureInfo[tmpSelected[playerid]][bfOwner], BusinessInfo[businessid][bName], price);
							}
							case 3:
							{
								price = gFurnitureInfo[tmpSelected[playerid]][gfPrice]/2;
								GivePlayerMoney(playerid, price);
								format(name, sizeof name, gFurnitureInfo[tmpSelected[playerid]][gfName]);
								Iter_Remove(GFurniture, tmpSelected[playerid]);
								mysql_format(chandler, string, sizeof string, "DELETE FROM `garages_furniture` WHERE id = '%d'", gFurnitureInfo[tmpSelected[playerid]][gfId]);
								mysql_fquery(chandler, string, "FurnitureDeleted");
								log_set_table("logs_garages");
								log_set_keys("`PlayerId`,`PlayerName`,`GarageId`,`ActionText`,`Amount`");
								log_set_values("'%d','%e','%d','Pardave balda','%d'", LogPlayerId(playerid), LogPlayerName(playerid), gFurnitureInfo[tmpSelected[playerid]][gfOwner], price);
							}
						}
						log_commit();
						SendFormat(playerid, 0xBABABAFF, "Baldas \"%s\" sëkmingai parduotas. Gavote $%d", name, price);
						NullFurnitureItem(tmpType_Salon[playerid], tmpSelected[playerid]);
						pc_cmd_furniture(playerid, "");
					}
				}
			}
			else pc_cmd_furniture(playerid, "");
		}
		case DIALOG_FURNITURE_TEXTURES:
		{
			if(response)
			{
				tmpTexture_MarkStart_CP[playerid] = listitem;
				new string[212],
					selected = tmpSelected[playerid],
					current_txt[25],
					current_col[25];
				switch(tmpType_Salon[playerid])
				{
					case 1:
					{
						format(current_txt, 25, FurnitureTextures[hFurnitureInfo[selected][hfTexture][listitem]][textureName]);
						format(current_col, 25, FurnitureColors[hFurnitureInfo[selected][hfColor][listitem]][colorName]);
					}
					case 2:
					{
						format(current_txt, 25, FurnitureTextures[bFurnitureInfo[selected][bfTexture][listitem]][textureName]);
						format(current_col, 25, FurnitureColors[bFurnitureInfo[selected][bfColor][listitem]][colorName]);
					}
					case 3:
					{
						format(current_txt, 25, FurnitureTextures[gFurnitureInfo[selected][gfTexture][listitem]][textureName]);
						format(current_col, 25, FurnitureColors[gFurnitureInfo[selected][gfColor][listitem]][colorName]);
					}
				}
				format(string, sizeof string, "Tekstûros keitimas [%s]\nSpalvos keitimas [%s]", current_txt, current_col);
				ShowPlayerDialog(playerid, DIALOG_FURNITURE_TEXTURE_EDIT, DIALOG_STYLE_LIST, "Baldo redagavimas", string, "Tæsti", "Atðaukti");
			}
			else pc_cmd_furniture(playerid, "");
		}
		case DIALOG_FURNITURE_TEXTURE_EDIT:
		{
			if(response)
			{
				if(listitem == 0)
				{
					new string[512] = "Paðalinti esamà\n";
					for(new i = 1; i < sizeof FurnitureTextures; i++)
					{
						strcat(string, FurnitureTextures[i][textureName]);
						strcat(string, "\n");
					}
					ShowPlayerDialog(playerid, DIALOG_FURNITURE_TEXTURES_LIST, DIALOG_STYLE_LIST, "Baldo redagavimas", string, "Tæsti", "Atðaukti");
				}
				else if(listitem == 1)
				{
					new
						string[512] = "Paðalinti esamà\n";
					for(new i = 1; i < sizeof FurnitureColors; i++)
					{
						format(string, sizeof string, "%s{%06x}%s\n", string, (FurnitureColors[i][colorCode] * 0x100) >>> 8, FurnitureColors[i][colorName]);
					}
					ShowPlayerDialog(playerid, DIALOG_FURNITURE_COLORS_LIST, DIALOG_STYLE_LIST, "Baldo redagavimas", 	string, "Tæsti", "Atðaukti");
				}
			}
			else pc_cmd_furniture(playerid, "");
		}
		case DIALOG_FURNITURE_TEXTURES_LIST:
		{
			if(response)
			{
				if(listitem == 0)
				{
					// pasalinti esama
					new object,
						model,
						color,
						selected = tmpSelected[playerid],
						texture = tmpTexture_MarkStart_CP[playerid],
						string[126];
					switch(tmpType_Salon[playerid])
					{
						case 1:
						{
							object = hFurnitureInfo[selected][hfObject];
							model = hFurnitureInfo[selected][hfModel];
							color = hFurnitureInfo[selected][hfColor][texture];
							mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET `Texture%d` = '0' WHERE id = '%d'", texture, hFurnitureInfo[selected][hfId]);
						}
						case 2:
						{
							object = bFurnitureInfo[selected][bfObject];
							model = bFurnitureInfo[selected][bfModel];
							color = bFurnitureInfo[selected][bfColor][texture];
							mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET `Texture%d` = '0' WHERE id = '%d'", texture, bFurnitureInfo[selected][bfId]);
						}
						case 3:
						{
							object = gFurnitureInfo[selected][gfObject];
							model = gFurnitureInfo[selected][gfModel];
							color = gFurnitureInfo[selected][gfColor][texture];
							mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET `Texture%d` = '0' WHERE id = '%d'", texture, gFurnitureInfo[selected][gfId]);
						}
					}
					if(IsDynamicObjectMaterialUsed(object, texture))
					{
						switch(tmpType_Salon[playerid])
						{
							case 1: hFurnitureInfo[selected][hfTexture][texture] = 0;
							case 2: bFurnitureInfo[selected][bfTexture][texture] = 0;
							case 3: gFurnitureInfo[selected][gfTexture][texture] = 0;
						}
						SetDynamicObjectMaterial(object, texture, model, "none", "none", color == 0 ? 0 : FurnitureColors[color][colorCode]);
						mysql_fquery(chandler, string, "FurnitureTextureSave");
					}
					else
					{
						InfoBox(playerid, "NERA", "TEKSTUROS");
						OnDialogResponse(playerid, DIALOG_FURNITURE_EDIT_MAIN, 1, 4, "");
					}
				}
				else
				{
					new object,
						selected = tmpSelected[playerid],
						texture = tmpTexture_MarkStart_CP[playerid],
						string[186];
					switch(tmpType_Salon[playerid])
					{
						case 1:
						{
							object = hFurnitureInfo[selected][hfObject];
						}
						case 2:
						{
							object = bFurnitureInfo[selected][bfObject];
						}
						case 3:
						{
							object = gFurnitureInfo[selected][gfObject];
						}
					}

					SetDynamicObjectMaterial(object, texture, FurnitureTextures[listitem][textureModel], FurnitureTextures[listitem][textureFile], FurnitureTextures[listitem][textureName], 0);
					Streamer_Update(playerid);
					SendFormat(playerid, 0xBABABAFF, "Pakeitëte tekstûrà %d slote.", texture); 
					switch(tmpType_Salon[playerid])
					{
						case 1:
						{
							hFurnitureInfo[selected][hfTexture][texture] = listitem; 
							hFurnitureInfo[selected][hfColor][texture] = 0; // istrinam ir spalva
							mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET `Texture%d` = '%d', `Color%d` = '0' WHERE id = '%d'", texture, listitem, texture, hFurnitureInfo[selected][hfId]);
						}
						case 2:
						{
							bFurnitureInfo[selected][bfTexture][texture] = listitem;
							bFurnitureInfo[selected][bfColor][texture] = 0;
							mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET `Texture%d` = '%d', `Color%d` = '0' WHERE id = '%d'", texture, listitem, texture, bFurnitureInfo[selected][bfId]);
						}
						case 3:
						{
							gFurnitureInfo[selected][gfTexture][texture] = listitem;
							gFurnitureInfo[selected][gfColor][texture] = 0;
							mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET `Texture%d` = '%d', `Color%d` = '0' WHERE id = '%d'", texture, listitem, texture, gFurnitureInfo[selected][gfId]);
						}
					}
					mysql_fquery(chandler, string, "FurnitureTextureSave");
				}
			}
			else OnDialogResponse(playerid, DIALOG_FURNITURE_EDIT_MAIN, 1, 4, "");
		}
		case DIALOG_FURNITURE_COLORS_LIST:
		{
			if(response)
			{
				if(listitem == 0)
				{
					new object,
						model,
						color,
						selected = tmpSelected[playerid],
						texture = tmpTexture_MarkStart_CP[playerid],
						texture_id,
						string[126];
					switch(tmpType_Salon[playerid])
					{
						case 1:
						{
							object = hFurnitureInfo[selected][hfObject];
							model = hFurnitureInfo[selected][hfModel];
							color = hFurnitureInfo[selected][hfColor][texture];
							texture_id = hFurnitureInfo[selected][hfTexture][texture];
							mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET `Color%d` = '0' WHERE id = '%d'", texture, hFurnitureInfo[selected][hfId]);
						}
						case 2:
						{
							object = bFurnitureInfo[selected][bfObject];
							model = bFurnitureInfo[selected][bfModel];
							color = bFurnitureInfo[selected][bfColor][texture];
							texture_id = bFurnitureInfo[selected][bfTexture][texture];
							mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET `Color%d` = '0' WHERE id = '%d'", texture, bFurnitureInfo[selected][bfId]);
						}
						case 3:
						{
							object = gFurnitureInfo[selected][gfObject];
							model = gFurnitureInfo[selected][gfModel];
							color = gFurnitureInfo[selected][gfColor][texture];
							texture_id = gFurnitureInfo[selected][gfTexture][texture];
							mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET `Color%d` = '0' WHERE id = '%d'", texture, gFurnitureInfo[selected][gfId]);
						}
					}
					// pasalinti esama
					if(color != 0)
					{
						if(texture_id == 0)
						{
							// nera teksturos
							SetDynamicObjectMaterial(object, texture, model, "none", "none", 0);
						}
						else
						{
							// tekstura yra, ja issaugom, nuimam tik spalva
							SetDynamicObjectMaterial(object, texture, FurnitureTextures[texture_id][textureModel], FurnitureTextures[texture_id][textureFile], FurnitureTextures[texture_id][textureName], 0);
							switch(tmpType_Salon[playerid])
							{
								case 1:
								{
									hFurnitureInfo[selected][hfColor][texture] = 0;
								}
								case 2:
								{
									bFurnitureInfo[selected][bfColor][texture] = 0;
								}
								case 3:
								{
									gFurnitureInfo[selected][gfColor][texture] = 0;
								}
							}
						}
						mysql_fquery(chandler, string, "FurnitureColorSave");
					}
					else
					{
						InfoBox(playerid, "NERA", "SPALVOS");
						OnDialogResponse(playerid, DIALOG_FURNITURE_EDIT_MAIN, 1, 4, "");
					}
				}
				else
				{
					new object,
						selected = tmpSelected[playerid],
						texture = tmpTexture_MarkStart_CP[playerid],
						texture_id,
						string[126];
					switch(tmpType_Salon[playerid])
					{
						case 1:
						{
							object = hFurnitureInfo[selected][hfObject];
							texture_id = hFurnitureInfo[selected][hfTexture][texture];
							hFurnitureInfo[selected][hfColor][texture] = listitem;
							mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET `Color%d` = '%d' WHERE id = '%d'", texture, listitem, hFurnitureInfo[selected][hfId]);
						}
						case 2:
						{
							object = bFurnitureInfo[selected][bfObject];
							texture_id = bFurnitureInfo[selected][bfTexture][texture];
							bFurnitureInfo[selected][bfColor][texture] = listitem;
							mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET `Color%d` = '%d' WHERE id = '%d'", texture, listitem, bFurnitureInfo[selected][bfId]);
						}
						case 3:
						{
							object = gFurnitureInfo[selected][gfObject];
							texture_id = gFurnitureInfo[selected][gfTexture][texture];
							gFurnitureInfo[selected][gfColor][texture] = listitem;
							mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET `Color%d` = '%d' WHERE id = '%d'", texture, listitem, gFurnitureInfo[selected][gfId]);
						}
					}
					if(texture_id == 0)
					{
						// nera teksturos, tik spalva keiciam
						SetDynamicObjectMaterial(object, texture, -1, " ", " ", FurnitureColors[listitem][colorCode]);
					}
					else
					{
						// paliekam tekstura, tik pridedam spalva
						SetDynamicObjectMaterial(object, texture, FurnitureTextures[texture_id][textureModel], FurnitureTextures[texture_id][textureFile], FurnitureTextures[texture_id][textureName], FurnitureColors[listitem][colorCode]);
					}
					Streamer_Update(playerid);
					SendFormat(playerid, 0xBABABAFF, "Pakeitëte spalvà %d slote.", texture);
					mysql_fquery(chandler, string, "FurnitureColorSave");
				}
			}
			else OnDialogResponse(playerid, DIALOG_FURNITURE_EDIT_MAIN, 1, 4, "");
		}
		case DIALOG_FURNITURE_CHANGE_RX:
		{
			if(response)
			{
				if(strlen(inputtext))
				{
					new Float:rx, Float:ry, Float:rz, string[126];
					switch(tmpType_Salon[playerid])
					{
						case 1:
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET RX = '%f' WHERE id = '%d'", floatstr(inputtext), hFurnitureInfo[tmpSelected[playerid]][hfId]);
							GetDynamicObjectRot(hFurnitureInfo[tmpSelected[playerid]][hfObject], rx, ry, rz);
							SetDynamicObjectRot(hFurnitureInfo[tmpSelected[playerid]][hfObject], floatstr(inputtext), ry, rz);
							hFurnitureInfo[tmpSelected[playerid]][hfRot][0] = floatstr(inputtext);
						}
						case 2:
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET RX = '%f' WHERE id = '%d'", floatstr(inputtext), bFurnitureInfo[tmpSelected[playerid]][bfId]);
							GetDynamicObjectRot(bFurnitureInfo[tmpSelected[playerid]][bfObject], rx, ry, rz);
							SetDynamicObjectRot(bFurnitureInfo[tmpSelected[playerid]][bfObject], floatstr(inputtext), ry, rz);
							bFurnitureInfo[tmpSelected[playerid]][bfRot][0] = floatstr(inputtext);
						}
						case 3:
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET RX = '%f' WHERE id = '%d'", floatstr(inputtext), gFurnitureInfo[tmpSelected[playerid]][gfId]);
							GetDynamicObjectRot(gFurnitureInfo[tmpSelected[playerid]][gfObject], rx, ry, rz);
							SetDynamicObjectRot(gFurnitureInfo[tmpSelected[playerid]][gfObject], floatstr(inputtext), ry, rz);
							gFurnitureInfo[tmpSelected[playerid]][gfRot][0] = floatstr(inputtext);
						}
					}
					mysql_fquery(chandler, string, "FurnitureSaved");
					InfoBox(playerid, "~g~ATNAUJINTAS", "PASUKIMO KAMPAS X");
				}
				new string[256],
					Float:cur, Float:un;
				if(tmpType_Salon[playerid] == 1) GetDynamicObjectRot(hFurnitureInfo[tmpSelected[playerid]][hfObject], un, cur, un);
				else if(tmpType_Salon[playerid] == 2) GetDynamicObjectRot(bFurnitureInfo[tmpSelected[playerid]][bfObject], un, cur, un);
				else if(tmpType_Salon[playerid] == 3) GetDynamicObjectRot(gFurnitureInfo[tmpSelected[playerid]][gfObject], un, cur, un);
				format(string, sizeof string, "{BABABA}Áveskite naujà {FFFFFF}Y{BABABA} pasukimo kampà. Dabartinis: {FFFFFF}%0.1f\nJei nenorite keisti - nieko neáraðykite.", cur);
				ShowPlayerDialog(playerid, DIALOG_FURNITURE_CHANGE_RY, DIALOG_STYLE_INPUT, "Baldo redagavimas", string, "Keisti", "Atðaukti");
			}
			else pc_cmd_furniture(playerid, "");
		}
		case DIALOG_FURNITURE_CHANGE_RY:
		{
			if(response)
			{
				if(strlen(inputtext))
				{
					new Float:rx, Float:ry, Float:rz, string[126];
					switch(tmpType_Salon[playerid])
					{
						case 1:
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET RY = '%f' WHERE id = '%d'", floatstr(inputtext), hFurnitureInfo[tmpSelected[playerid]][hfId]);
							GetDynamicObjectRot(hFurnitureInfo[tmpSelected[playerid]][hfObject], rx, ry, rz);
							SetDynamicObjectRot(hFurnitureInfo[tmpSelected[playerid]][hfObject], rx, floatstr(inputtext), rz);
							hFurnitureInfo[tmpSelected[playerid]][hfRot][1] = floatstr(inputtext);
						}
						case 2:
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET RY = '%f' WHERE id = '%d'", floatstr(inputtext), bFurnitureInfo[tmpSelected[playerid]][bfId]);
							GetDynamicObjectRot(bFurnitureInfo[tmpSelected[playerid]][bfObject], rx, ry, rz);
							SetDynamicObjectRot(bFurnitureInfo[tmpSelected[playerid]][bfObject], rx, floatstr(inputtext), rz);
							bFurnitureInfo[tmpSelected[playerid]][bfRot][1] = floatstr(inputtext);
						}
						case 3:
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET RY = '%f' WHERE id = '%d'", floatstr(inputtext), gFurnitureInfo[tmpSelected[playerid]][gfId]);
							GetDynamicObjectRot(gFurnitureInfo[tmpSelected[playerid]][gfObject], rx, ry, rz);
							SetDynamicObjectRot(gFurnitureInfo[tmpSelected[playerid]][gfObject], rx, floatstr(inputtext), rz);
							gFurnitureInfo[tmpSelected[playerid]][gfRot][1] = floatstr(inputtext);
						}
					}
					mysql_fquery(chandler, string, "FurnitureSaved");
					InfoBox(playerid, "~g~ATNAUJINTAS", "PASUKIMO KAMPAS Y");
				}
				new string[256],
					Float:cur, Float:un;
				if(tmpType_Salon[playerid] == 1) GetDynamicObjectRot(hFurnitureInfo[tmpSelected[playerid]][hfObject], un, un, cur);
				else if(tmpType_Salon[playerid] == 2) GetDynamicObjectRot(bFurnitureInfo[tmpSelected[playerid]][bfObject], un, un, cur);
				else if(tmpType_Salon[playerid] == 3) GetDynamicObjectRot(gFurnitureInfo[tmpSelected[playerid]][gfObject], un, un, cur);
				format(string, sizeof string, "{BABABA}Áveskite naujà {FFFFFF}Z{BABABA} pasukimo kampà. Dabartinis: {FFFFFF}%0.1f\nJei nenorite keisti - nieko neáraðykite.", cur);
				ShowPlayerDialog(playerid, DIALOG_FURNITURE_CHANGE_RZ, DIALOG_STYLE_INPUT, "Baldo redagavimas", string, "Keisti", "Atðaukti");
			}
			else pc_cmd_furniture(playerid, "");
		}
		case DIALOG_FURNITURE_CHANGE_RZ:
		{
			if(response)
			{
				if(strlen(inputtext))
				{
					new Float:rx, Float:ry, Float:rz, string[126];
					switch(tmpType_Salon[playerid])
					{
						case 1:
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET RZ = '%f' WHERE id = '%d'", floatstr(inputtext), hFurnitureInfo[tmpSelected[playerid]][hfId]);
							GetDynamicObjectRot(hFurnitureInfo[tmpSelected[playerid]][hfObject], rx, ry, rz);
							SetDynamicObjectRot(hFurnitureInfo[tmpSelected[playerid]][hfObject], rx, ry, floatstr(inputtext));
							hFurnitureInfo[tmpSelected[playerid]][hfRot][2] = floatstr(inputtext);
						}
						case 2:
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET RZ = '%f' WHERE id = '%d'", floatstr(inputtext), bFurnitureInfo[tmpSelected[playerid]][bfId]);
							GetDynamicObjectRot(bFurnitureInfo[tmpSelected[playerid]][bfObject], rx, ry, rz);
							SetDynamicObjectRot(bFurnitureInfo[tmpSelected[playerid]][bfObject], rx, ry, floatstr(inputtext));
							bFurnitureInfo[tmpSelected[playerid]][bfRot][2] = floatstr(inputtext);
						}
						case 3:
						{
							mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET RZ = '%f' WHERE id = '%d'", floatstr(inputtext), gFurnitureInfo[tmpSelected[playerid]][gfId]);
							GetDynamicObjectRot(gFurnitureInfo[tmpSelected[playerid]][gfObject], rx, ry, rz);
							SetDynamicObjectRot(gFurnitureInfo[tmpSelected[playerid]][gfObject], rx, ry, floatstr(inputtext));
							gFurnitureInfo[tmpSelected[playerid]][gfRot][2] = floatstr(inputtext);
						}
					}
					mysql_fquery(chandler, string, "FurnitureSaved");
					InfoBox(playerid, "~g~ATNAUJINTAS", "PASUKIMO KAMPAS Z");
				}
			}
			OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
		}
		case DIALOG_FURNITURE_CHANGE_NAME:
		{
			if(response)
			{
				if(!strlen(inputtext) || strsymbols(inputtext, "{") || strsymbols(inputtext, "}")) return OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 1, "") , InfoBox(playerid, "NETEISINGAS", "FORMATAS");
				new string[186];
				switch(tmpType_Salon[playerid])
				{
					case 1:
					{
						format(hFurnitureInfo[tmpSelected[playerid]][hfName], 24, inputtext);
						mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET Name = '%e' WHERE id = '%d'", inputtext, hFurnitureInfo[tmpSelected[playerid]][hfId]);
					}
					case 2:
					{
						format(bFurnitureInfo[tmpSelected[playerid]][bfName], 24, inputtext);
						mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET Name = '%e' WHERE id = '%d'", inputtext, bFurnitureInfo[tmpSelected[playerid]][bfId]);
					}
					case 3:
					{
						format(gFurnitureInfo[tmpSelected[playerid]][gfName], 24, inputtext);
						mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET Name = '%e' WHERE id = '%d'", inputtext, gFurnitureInfo[tmpSelected[playerid]][gfId]);
					}
				}
				SendFormat(playerid, 0xBABABAFF, "Pavadinimas pakeistas á: {FFFFFF}%s", inputtext);
				InfoBox(playerid, "~g~ISSAUGOTAS", "BALDO PAVADINIMAS");
				OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 0, "");
				mysql_fquery(chandler, string, "FurnitureSaved");
			}
			else OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 1, "");
		}
		case DIALOG_FURNITURE_CATEGORIES:
		{
			if(response)
			{
				new items[1024],
					count;
				for(new i = 0; i < sizeof FurnitureList; i++)
				{
					if(FurnitureList[i][furnitureListCategory] == listitem)
					{
						items[count] = FurnitureList[i][furnitureListModel];
						count++;
					}
				}
				ShowModelSelectionMenuEx(playerid, items, count, formatlt(FurnitureListNames[listitem]), listitem+5000, 0.0, 0.0, 30.0);
			}
			else pc_cmd_furniture(playerid, "");
		}
		case DIALOG_PHONE_OPTIONS_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						PhoneInfo[playerid][phoneMuted] = !PhoneInfo[playerid][phoneMuted];
						SendFormat(playerid, 0xFFB488FF, "%sjungëte telefono garsà.", PhoneInfo[playerid][phoneMuted] > 0 ? ("Ið") : ("Á"));
					}
					case 1:
					{
						PhoneInfo[playerid][phoneDisabled] = !PhoneInfo[playerid][phoneDisabled];
						SendFormat(playerid, 0xFFB488FF, "%sjungëte telefonà.", PhoneInfo[playerid][phoneDisabled] > 0 ? ("Ið") : ("Á"));
						if(PhoneInfo[playerid][phoneDisabled] <= 0)
						{
							// isijunge telefona
							new string[126];
							mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `players_sms` WHERE ReceiverNumber = '%d' AND Notification = '1'", PlayerInfo[playerid][pPhoneNumber]);
							new Cache:result = mysql_query(chandler, string, true);
							if(cache_num_rows())
							{
								SendFormat(playerid, 0x50BAD7FF, "Gavote %d þinuèiø, kol telefonas buvo iðjungtas.", cache_num_rows());
							}
							cache_delete(result);
							mysql_format(chandler, string, sizeof string, "UPDATE `players_sms` SET Notification = '0' WHERE Notification = '1' AND ReceiverNumber = '%d'", PlayerInfo[playerid][pPhoneNumber]);
							mysql_fquery(chandler, string, "PlayerSavedEx");
						}
					}
				}
			}
		}
		case DIALOG_PHONE_SMS_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// gautos
						new string[126];
						mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_sms` WHERE ReceiverNumber = '%d' ORDER BY Date ASC LIMIT 15", PlayerInfo[playerid][pPhoneNumber]);
						mysql_tquery(chandler, string, "ReceivedSMSLoad", "d", playerid);
					}
					case 1:
					{
						// issiustos
						new string[126];
						mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_sms` WHERE SenderNumber = '%d' ORDER BY Date ASC LIMIT 15", PlayerInfo[playerid][pPhoneNumber]);
						mysql_tquery(chandler, string, "SentSMSLoad", "d", playerid);
					}
					case 2:
					{
						// new
						ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_NEW_RECEIVER_MAIN, DIALOG_STYLE_LIST, "Nauja þinutë", "Ávesti numerá\nPasirinkti ið kontaktø", "Tæsti", "Atðaukti");
					}
				}
			}
		}
		case DIALOG_PHONE_CALL_CONTACTS:
		{
			if(response)
			{
				// pasirinko kontakta
				PlayerPhoneCall(playerid, PlayerContacts[playerid][listitem][contactNumber]);
			}
		}
		case DIALOG_PHONE_SMS_NEW_RECEIVER_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// ivesti nr
						ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_NEW_RECEIVER_INPUT, DIALOG_STYLE_INPUT, "Nauja þinutë", "{FFFFFF}Áveskite gavëjo numerá.", "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// kontaktai
						new string[1024];
						for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
						{
							if(PlayerContacts[playerid][i][contactNumber] != 0)
							{
								format(string, sizeof string, "%s%s\t%d\n", string, PlayerContacts[playerid][i][contactName], PlayerContacts[playerid][i][contactNumber]);
							}
							else { break; }
						}
						if(!strlen(string))
						{
							SendWarning(playerid, "Neturite kontaktø.");
							ShowPlayerPhoneSMS(playerid);
							return 1;
						}
						else ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_NEW_CONTACTS_ALL, DIALOG_STYLE_TABLIST, "Nauja þinutë", string, "Tæsti", "Atðaukti");
					}
				}
			}
			else ShowPlayerPhoneSMS(playerid);
		}
		case DIALOG_PHONE_SMS_NEW_RECEIVER_INPUT:
		{
			if(response)
			{
				new number;
				if(sscanf(inputtext,"d",number)) return OnDialogResponse(playerid, DIALOG_PHONE_SMS_NEW_RECEIVER_MAIN, 1, 0, "");
				tmpSelected[playerid] = number;
				ShowPlayerPhoneSMSText(playerid);
			}
			else OnDialogResponse(playerid, DIALOG_PHONE_SMS_MAIN, 1, 2, "");
		}
		case DIALOG_PHONE_SMS_NEW_CONTACTS_ALL:
		{
			if(response)
			{
				tmpSelected[playerid] = PlayerContacts[playerid][listitem][contactNumber];
				ShowPlayerPhoneSMSText(playerid);
			}
			else OnDialogResponse(playerid, DIALOG_PHONE_SMS_MAIN, 1, 2, "");
		}
		case DIALOG_PHONE_SMS_NEW_TEXT:
		{
			if(response)
			{
				new text[128];
				if(sscanf(inputtext,"s[128]",text)) return ShowPlayerPhoneSMSText(playerid);
				PlayerPhoneSMS(playerid, tmpSelected[playerid], inputtext);
			}
		}
		case DIALOG_PHONE_CONTACT_EDIT_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// pavadinimas
						new selected = tmpSelected[playerid],
							string[126];
						format(string, sizeof string, "{FFFFFF}Áveskite naujà kontakto %s vardà.", PlayerContacts[playerid][selected][contactName]);
						ShowPlayerDialog(playerid, DIALOG_PHONE_CONTACTS_EDIT_NAME, DIALOG_STYLE_INPUT, "Kontaktai", string, "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// numeris
						new selected = tmpSelected[playerid],
							string[126];
						format(string, sizeof string, "{FFFFFF}Áveskite naujà kontakto %s numerá.", PlayerContacts[playerid][selected][contactName]);
						ShowPlayerDialog(playerid, DIALOG_PHONE_CONTACTS_EDIT_NUMBER, DIALOG_STYLE_INPUT, "Kontaktai", string, "Tæsti", "Atðaukti");
					}
					case 2:
					{
						// istrinti
						new selected = tmpSelected[playerid],
							__reset_Contact[E_CONTACTS_DATA];

						log_init(true);
						log_set_table("logs_phones");
						log_set_keys("`OwnerId`,`OwnerName`,`ReceiverName`,`ActionText`");
						log_set_values("'%d','%e','%e','Istryne kontakta'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerContacts[playerid][selected][contactName]);
						log_commit();

						PlayerContacts[playerid][selected] = __reset_Contact;
						SortEnumArray(PlayerContacts[playerid], 0, MAX_PLAYER_CONTACTS, [contactNumber], 0, E_CONTACTS_DATA, FALSE);
						MsgSuccess(playerid, "KONTAKTAI", "Sëkmingai iðtrynëte kontaktà.");
						ShowPlayerPhoneContacts(playerid);
						SaveContacts(playerid);
					}
				}
			}
			else OnDialogResponse(playerid, DIALOG_PHONE_CONTACTS_MAIN, 1, 0, "");
		}
		case DIALOG_PHONE_CONTACTS_EDIT_NAME:
		{
			if(response)
			{
				new name[24];
				if(sscanf(inputtext,"s[24]",name) || strfind(inputtext,"|") != -1) return OnDialogResponse(playerid, DIALOG_PHONE_CONTACT_EDIT_MAIN, 1, 1, "");
				new selected = tmpSelected[playerid];

				log_init(true);
				log_set_table("logs_phones");
				log_set_keys("`OwnerId`,`OwnerName`,`ReceiverName`,`ActionText`,`ExtraString`");
				log_set_values("'%d','%e','%e','Atnaujino kontakto varda','%e'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerContacts[playerid][selected][contactName], inputtext);
				log_commit();

				format(PlayerContacts[playerid][selected][contactName], 24, name);
				OnDialogResponse(playerid, DIALOG_PHONE_CONTACTS_MAIN, 1, 0, "");
				MsgSuccess(playerid, "KONTAKTAI", "Kontaktas atnaujintas.");
				SaveContacts(playerid);
			}
			else OnDialogResponse(playerid, DIALOG_PHONE_CONTACTS_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_PHONE_CONTACTS_EDIT_NUMBER:
		{
			if(response)
			{
				new number;
				if(sscanf(inputtext,"d",number)) return OnDialogResponse(playerid, DIALOG_PHONE_CONTACT_EDIT_MAIN, 1, 1, "");
				new selected = tmpSelected[playerid];
				PlayerContacts[playerid][selected][contactNumber] = number;
				OnDialogResponse(playerid, DIALOG_PHONE_CONTACTS_MAIN, 1, 0, "");
				MsgSuccess(playerid, "KONTAKTAI", "Kontaktas atnaujintas.");
				SaveContacts(playerid);
				log_init(true);
				log_set_table("logs_phones");
				log_set_keys("`OwnerId`,`OwnerName`,`ReceiverName`,`ActionText`,`ExtraId`");
				log_set_values("'%d','%e','%e','Atnaujino kontakto numeri','%d'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerContacts[playerid][selected][contactName], number);
				log_commit();
			}
			else OnDialogResponse(playerid, DIALOG_PHONE_CONTACTS_ALL, 1, tmpSelected[playerid], "");
		}
		case DIALOG_PHONE_CONTACTS_ALL:
		{
			if(response)
			{
				tmpSelected[playerid] = listitem;
				ShowPlayerDialog(playerid, DIALOG_PHONE_CONTACT_EDIT_MAIN, DIALOG_STYLE_LIST, "Kontaktai", "Keisti pavadinimà\nKeisti numerá\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
			}
			else ShowPlayerPhoneContacts(playerid);
		}
		case DIALOG_PHONE_CONTACTS_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						// visi
						new string[1024];
						for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
						{
							if(PlayerContacts[playerid][i][contactNumber] > 0)
							{
								format(string, sizeof string, "%s%s\t%d\n", string, PlayerContacts[playerid][i][contactName], PlayerContacts[playerid][i][contactNumber]);
							}
							else { break; }
						}
						if(!strlen(string))
						{
							SendError(playerid, "Neturite kontaktø.");
							return ShowPlayerPhoneContacts(playerid);
						}
						else ShowPlayerDialog(playerid, DIALOG_PHONE_CONTACTS_ALL, DIALOG_STYLE_TABLIST, "Kontaktai", string, "Tæsti", "Atðaukti");
					}
					case 1:
					{
						// prideti
						if(PlayerContacts[playerid][MAX_PLAYER_CONTACTS-1][contactNumber] != 0)
						{
							// paskutuinis uzimtas, reiskias nera slotu
							SendWarning(playerid, "Jûs jau turite iðsaugojæs "#MAX_PLAYER_CONTACTS" kontaktus.");
							ShowPlayerPhoneContacts(playerid);
						}
						else
						{
							ShowPlayerDialog(playerid, DIALOG_PHONE_CONTACTS_ADD_NUMBER, DIALOG_STYLE_INPUT, "Kontakto kûrimas", "{FFFFFF}Áveskite naujo kontakto numerá\n{E0E4A7}Kitame lange turësite ávesti jo pavadinimà.", "Tæsti", "Atðaukti");
						}
					}
				}
			}
		}
		case DIALOG_PHONE_CONTACTS_ADD_NUMBER:
		{
			if(response)
			{
				new number;
				if(sscanf(inputtext,"d",number) || number <= 0) return OnDialogResponse(playerid, DIALOG_PHONE_CONTACTS_MAIN, 1, 1, "");
				ShowPlayerDialog(playerid, DIALOG_PHONE_CONTACTS_ADD_NAME, DIALOG_STYLE_INPUT, "Kontakto kûrimas", "{FFFFFF}Áveskite kuriamo kontakto pavadinimà", "Kurti", "Atðaukti");
				tmpDubStart_Price[playerid] = number;
			}
			else ShowPlayerPhoneContacts(playerid);
		}
		case DIALOG_PHONE_CONTACTS_ADD_NAME:
		{
			if(response)
			{
				new name[24];
				if(sscanf(inputtext,"s[24]",name) || strfind(inputtext,"|") != -1) return OnDialogResponse(playerid, DIALOG_PHONE_CONTACTS_ADD_NUMBER, 1, 0, tmpDubStart_Price[playerid]);
				new slot = -1;
				for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
				{
					if(PlayerContacts[playerid][i][contactNumber] == 0)
					{
						slot = i;
						break;
					}
				}
				if(slot != -1)
				{
					PlayerContacts[playerid][slot][contactNumber] = tmpDubStart_Price[playerid];
					format(PlayerContacts[playerid][slot][contactName], 24, name);
					MsgSuccess(playerid, "KONTAKTAI", "Sëkmingai pridëjote kontaktà %s (%d)", name, tmpDubStart_Price[playerid]);
					SaveContacts(playerid);
					log_init(true);
					log_set_table("logs_phones");
					log_set_keys("`OwnerId`,`OwnerName`,`ReceiverName`,`ActionText`,`ExtraId`");
					log_set_values("'%d','%e','%e','Pridejo kontakta','%d'", LogPlayerId(playerid), LogPlayerName(playerid), name, tmpDubStart_Price[playerid]);
					log_commit();
				}
				else ShowPlayerPhoneContacts(playerid);
			}
			else OnDialogResponse(playerid, DIALOG_PHONE_CONTACTS_MAIN, 1, 1, "");
		}
	}
	return 1;
}

forward ReceivedSMSLoad(playerid);
public ReceivedSMSLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] ReceivedSMSLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	if(!cache_num_rows()) return SendWarning(playerid, "Þinuèiø nëra.");
	new
		date[24],
		currentDate[3],
		sender,
		string[512] = "{BABABA}Nr.\t{BABABA}Siuntëjas\t{BABABA}Þinutë\t{BABABA}Data\n",
		line[86];
	getdate(currentDate[0], currentDate[1], currentDate[2]);
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name(i, "Date", date);
		cache_get_value_name_int(i, "SenderNumber", sender);
		cache_get_value_name(i, "Text", line);

		/*format(short, sizeof short, "%.4s", date[0]);
		smsDate[0] = strval(short);
		format(short, sizeof short, "%.2s", date[5]);
		smsDate[1] = strval(short);
		format(short, sizeof short, "%.2s", date[8]);
		smsDate[2] = strval(short);*/

		/*if(smsDate[0] == currentDate[0] && smsDate[1]+3 >= currentDate[1])
		{
			format(fullDate, sizeof fullDate, "%s %dd.", GetMonthNameForMobile(smsDate[1]), smsDate[2]);
		}
		else
		{
			format(fullDate, sizeof fullDate, "%.10s", date[0]);
		}*/
		format(line, sizeof line, "%d.\t%s\t%.40s%s\t%s\n", i+1, GetNumberFromContacts(playerid, sender), line, strlen(line) > 40 ? ("...") : (""), date);
		strcat(string, line);
		cache_get_value_name_int(i, "id", tmpArray[playerid][i]);
	}
	ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_RECEIVED_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Gautos þinutës", string, "Tæsti", "Atðaukti");
	return 1;
}

forward SentSMSLoad(playerid);
public SentSMSLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] SentSMSLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	if(!cache_num_rows()) return SendWarning(playerid, "Þinuèiø nëra.");
	new // tik data
		date[24],
		short[10],
		smsDate[3],
		currentDate[3],
		fullDate[20],
		// other
		receiver,
		string[512] = "{BABABA}Nr.\t{BABABA}Gavëjas\t{BABABA}Þinutë\t{BABABA}Data\n",
		line[86];
	getdate(currentDate[0], currentDate[1], currentDate[2]);
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name(i, "Date", date);
		cache_get_value_name_int(i, "ReceiverNumber", receiver);
		cache_get_value_name(i, "Text", line);

		format(short, sizeof short, "%.4s", date[0]);
		smsDate[0] = strval(short);
		format(short, sizeof short, "%.2s", date[5]);
		smsDate[1] = strval(short);
		format(short, sizeof short, "%.2s", date[8]);
		smsDate[2] = strval(short);

		if(smsDate[0] == currentDate[0] && smsDate[1]+3 >= currentDate[1]) // tie patys metai, menesiu ne daugiau nei 3
		{
			format(fullDate, sizeof fullDate, "%s %dd.", GetMonthNameForMobile(smsDate[1]), smsDate[2]);
		}
		else
		{
			format(fullDate, sizeof fullDate, "%.10s", date[0]);
		}
		format(line, sizeof line, "%d.\t%s\t%.40s%s\t%s %.5s", i+1, GetNumberFromContacts(playerid, receiver), line, strlen(line) > 40 ? ("...") : (" "), fullDate, date[11]);
		strcat(string, line);
		cache_get_value_name_int(i, "id", tmpArray[playerid][i]);
	}
	ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_SENT_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Iðsiøstos þinutës", string, "Tæsti", "Atðaukti");
	return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] OnPlayerModelSelection(%s, %d, %d, %d)", GetPlayerNameEx(playerid), response, listid, modelid);
	#endif
	if(listid == mdskinslist || listid == pdskinslist || listid == clskinslist)
	{
		if(response)
		{
			SetPlayerSkin(playerid, modelid);
		}
	}
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	/*new TimeNow = gettime(),
		unique = sd_GetWeaponUniqueId(playerid, weaponid),
		string[86];
	if((weaponid == 23 && PlayerExtra[playerid][peTazer] == 1) || sd_GetWeaponType(playerid, weaponid) == WEAPON_GIVE_TYPE_NO_INVENTORY || unique == 0)
	{
		// Tazeriui ir frakciniams ginklams gilziu nekuriam
		return 1;
	}
	if((TimeNow-LastShotTime[playerid] >= 3 && LastShotTime[playerid] != 0) || !IsPlayerInRangeOfPoint(playerid, 1.75, LastShellShotVector[playerid][0], LastShellShotVector[playerid][1], LastShellShotVector[playerid][2]) || LastWeapon[playerid] != weaponid)
	{
		// jei sove seniau nei pries 3 sekundes arba vieta pasikeite labai arba kitas ginklas, tada pridedam
		new Float:x,
			Float:y,
			Float:z,
			itter = LastShellItter[playerid] = Iter_Free(Shell);

		GetPlayerPos(playerid, x, y, z);

		LastShellShotVector[playerid][0] = Shells[itter][shellPos][0] = x,
		LastShellShotVector[playerid][1] = Shells[itter][shellPos][1] = y,
		LastShellShotVector[playerid][2] = Shells[itter][shellPos][2] = z;

		Shells[itter][shellLabel] = CreateDynamic3DTextLabel("Kulkø gilzës (( {2599BC}1{6AB3C9} ))\n{F8F8F8}/pickcases", 0x6AB3C9FF, x, y, z-0.75, 1.8, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)),
		Shells[itter][shellObject] = CreateDynamicObject(3027, x, y, z-0.87, 0.0, 90.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), .called = "shells", .extra = "create");  // 19625first 19182white //19177biggerwhite
		SetDynamicObjectMaterial(Shells[itter][shellObject], 0, 1650, "petrolcan", "redcan", 0xFFFFFFFF);

		Shells[itter][shellUniqueId] = unique;
		Shells[itter][shellCount] = 1;
		Shells[itter][shellTime] = TimeNow;
		Iter_Add(Shell, itter);
	}
	else
	{
		// toj pacioj vietoj arba dar saudo
		new itter = LastShellItter[playerid];
		Shells[itter][shellCount]++;
		format(string, sizeof string, "Kulkø gilzës (( {2599BC}%d{6AB3C9} ))\n{F8F8F8}/pickcases", Shells[itter][shellCount]);
		UpdateDynamic3DTextLabelText(Shells[itter][shellLabel], 0x6AB3C9FF, string);
	}
	LastWeapon[playerid] = weaponid,
	LastShotTime[playerid] = TimeNow;
	Streamer_Update(playerid);*/
    return 1;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] OnPlayerModelSelectionEx(%s, %d, %d, %d)", GetPlayerNameEx(playerid), response, extraid, modelid);
	#endif
	if(extraid >= 100 && extraid < 5000)
	{
		if(response)
		{
			new category = extraid-100;
			for(new i = 0; i < sizeof ClothesList; i++)
			{
				if(ClothesList[i][clothesListCategory] == category && ClothesList[i][clothesListModel] == modelid)
				{
					new string[1024];
					tmpSelected[playerid] = i;
					format(string, sizeof string, "{FAFAFA}Pavadinimas: {B575F0}%s\n{FAFAFA}Kategorija: {B575F0}%s\n{FAFAFA}Kaina: {B575F0}$%d\n\n{FFFFFF}Ar norite pirkti ðá daiktà?", ClothesList[i][clothesListName], ClothesListNames[tmpType_Salon[playerid]], ClothesList[i][clothesListPrice]);
					ShowPlayerDialog(playerid, DIALOG_BUY_CLOTHES_CONFIRM, DIALOG_STYLE_MSGBOX, "Drabuþiø pirkimas", string, "Taip", "Ne");
					break;
				}
			}
		}
		else pc_cmd_buyclothes(playerid, "");
	}
	else if(extraid >= 5000)
	{
		if(response)
		{
			new category = extraid-5000;
			for(new i = 0; i < sizeof FurnitureList; i++)
			{
				if(FurnitureList[i][furnitureListCategory] == category && FurnitureList[i][furnitureListModel] == modelid)
				{
					SetTimerEx("FurniturePreviewTimer", 200, false, "dd", playerid, i);
					break;
				}
			}
		}
		else OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 1, "recalled");
	}
	return 1;
}

forward BankHistoryTimer(playerid);
public BankHistoryTimer(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] BankHistoryTimer(%s)", GetPlayerNameEx(playerid));
	#endif
	new string[126];
	mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_bank_history` WHERE PlayerId = '%d' ORDER BY Date DESC LIMIT 7;", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "BankHistoryLoad", "d", playerid);
	return 1;
}

forward HouseDubkeysLoad(playerid);
public HouseDubkeysLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] HouseDubkeysLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	new p_furniturecontrol, id, player, type,
		string[512] = "{BABABA}Nr.\t{BABABA}Vardas\t{BABABA}Gali naudoti /furniture\n",
		line[56];
	if(!cache_num_rows()) return pc_cmd_hmenu(playerid, "") , SendWarning(playerid, "Raktø nëra.");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
	 	cache_get_value_name_int(i, "id", id);
	 	cache_get_value_name_int(i, "PlayerId", player);
	 	cache_get_value_name_int(i, "Type", type);
	 	tmpArray[playerid][i] = player;
	 	cache_get_value_name_int(i, "P_FurnitureControl", p_furniturecontrol);
	 	format(line, sizeof line, "%d.\t%s\t%s%s\n", i+1, GetNameBySql(player), p_furniturecontrol > 0 ? ("Taip") : ("Ne"), (type == 0 ? (" ") : (" (þmogus nuomojas)")));
	 	strcat(string, line);
	}
	ShowPlayerDialog(playerid, DIALOG_HM_DUBKEYS_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Namo raktai", string, "Valdyti", "Atðaukti");
	return 1;
}

forward BankHistoryLoad(playerid);
public BankHistoryLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] BankHistoryLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	new string[1200],
		date[21],
		amount,
		line[156];
	if(!cache_num_rows()) format(string, sizeof string, "{CD6666}ÁRAÐØ NËRA.\nNerasta jokiø áraðø banko istorijoje.");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name(i, "Date", date);
		cache_get_value_name(i, "String", line);
		cache_get_value_name_int(i, "Amount", amount);
		format(line, sizeof line, "{61AF70}VEIKSMAS:{E9E9E9} %s\n{61AF70}SUMA:{E9E9E9} $%d\n{CD6666}DATA:{E9E9E9} %s\n--\n", line, amount, date);
		strcat(string, line);
	}
	ShowPlayerDialog(playerid, DIALOG_BANK_HISTORY, DIALOG_STYLE_MSGBOX, "Banko iðklotinë", string, "Uþdaryti", "");
	return 1;
}

forward SalonSpawnsArray(playerid);
public SalonSpawnsArray(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] SalonSpawnsArray(%s)", GetPlayerNameEx(playerid));
	#endif
	new i,
		rows = cache_num_rows(), Float:x, Float:y, Float:z,
		line[86], string[512] = "{BABABA}X\t{BABABA}Y\t{BABABA}Z\t{BABABA}Vieta\n";
	for(; i < rows; i++)
	{
		cache_get_value_name_int(i, "id", tmpArray[playerid][i]);
		cache_get_value_name_float(i, "X", x);
		cache_get_value_name_float(i, "Y", y);
		cache_get_value_name_float(i, "Z", z);
		GetCoords2DZone(line, 28, x, y);
		format(line, sizeof line, "%0.2f\t%0.2f\t%0.2f\t%s\n", x, y, z, line);
		strcat(string, line);
	}
	for(new array = i; array < sizeof tmpArray[]; array++) tmpArray[playerid][array] = 0;
	strcat(string, "Pridëti");
	ShowPlayerDialog(playerid, DIALOG_AM_SALON_SPAWNS_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Tr. priemoniø salonai", string, "Tæsti", "Atðaukti");
	return 1;
}


forward PlayerFactionAddLoad(playerid);
public PlayerFactionAddLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] PlayerFactionAddLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	if(!cache_num_rows())
	{
		SendWarning(playerid, "Toks þaidëjas nerastas.");
		OnDialogResponse(playerid, DIALOG_FM_USERS_MAIN, 1, tmpSelected[playerid], "");
	}
	else
	{
		new id, name[24];
		cache_get_value_name_int(0, "id", id);
		cache_get_value_name(0, "Name", name);
		new string[126];
		new Cache:sys_mem = cache_save();
		mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `players_data` WHERE id = '%d' AND Faction = '%d'", id, PlayerInfo[playerid][pFaction]);
		new Cache:result = mysql_query(chandler, string, true);
		cache_set_active(result);
		if(cache_num_rows())
		{
			MsgError(playerid, "FRAKCIJA", "Þaidëjas jau frakcijoje.");
			cache_delete(result);
			cache_set_active(sys_mem);
			return 1;
		}
		cache_delete(result);
		cache_set_active(sys_mem);
		mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET Faction = '%d', JobLevel = '1', FactionLeader = '0', Job = '0' WHERE id = '%d'", PlayerInfo[playerid][pFaction], id);
		mysql_fquery(chandler, string, "PlayerAddedToFaction");
		MsgSuccess(playerid, "FRAKCIJA", "Priëmëte %s á frakcijà", name);
		log_init(true);
		log_set_table("logs_factions");
		log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ReceiverId`,`ReceiverName`");
		log_set_values("'%d','%e','%d','%e','(FM) Prieme i frakcija','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[playerid][pFaction], GetFactionName(PlayerInfo[playerid][pFaction]), id, name);
		log_commit();
	}
	return 1;
}

thread(SelectedFurnitureUpdate);
thread(DealerGunAdded);
thread(DealerDrugAdded);
thread(DealerSaved);
thread(ParkingUpdated);
thread(ParkingDeleted);
thread(SalonVehicleAdd);
thread(SalonVehicleDeleted);
thread(BankLogAdd);
thread(SalonUpdated);
thread(SalonDeleted);
thread(BusinessDeleted);
thread(BusinessUpdated);
thread(HouseDeleted);
thread(HouseUpdated);
thread(DealerHouseDeleted);
thread(DealerHouseUpdated);
thread(GarageUpdated);
thread(GarageDeleted);
thread(PlayerAddedToFaction);
thread(FactionVehiclePosUpdate);
thread(PayPhoneUpdate);
thread(PayPhoneDeleted);

forward RoomersLoad(playerid);
public RoomersLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] RoomersLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	new rows = cache_num_rows(),
		canfurniture,
		name[24],
		line[86],
		date[20],
		string[512] = "{BABABA}Nr.\t{BABABA}Vardas\t{BABABA}Gali naudoti /furniture\t{BABABA}Data\n";
	if(rows == 0)
	{
		pc_cmd_hmenu(playerid, "");
		return SendError(playerid, "Nuomininkø nëra.");
	}
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name(i, "Name", name);
		cache_get_value_name_int(i, "id", tmpArray[playerid][i]);
		SendFormat(playerid, -1, "%d %s", tmpArray[playerid][i], name);
		cache_get_value_name_int(i, "P_FurnitureControl", canfurniture);
		cache_get_value_name(i, "Date", date);
		format(line, sizeof line, "%d.\t%s\t%s\t%s\n", i+1, name, canfurniture > 0 ? ("Taip") : ("Ne"), date);
		strcat(string, line);
	}
	ShowPlayerDialog(playerid, DIALOG_HM_RENT_EDIT_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Namo nuoma", string, "Tæsti", "Atðaukti");
	return 1;
}

forward DealerDrugDataLoadedAM(playerid);
public DealerDrugDataLoadedAM(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerDrugDataLoadedAM(%s)", GetPlayerNameEx(playerid));
	#endif
	if(cache_num_rows())
	{
		new drugid,
			maxorder,
			amount,
			price,
			string[256];
		cache_get_value_name_int(0, "DrugId", drugid);
		cache_get_value_name_int(0, "DrugAmount", amount);
		cache_get_value_name_int(0, "DrugMaxAmount", maxorder);
		cache_get_value_name_int(0, "DrugPrice", price);
		format(string, sizeof string, "{BABABA}Nustatymas\t{BABABA}Dabartinë reikðmë\nDidþiausias uþsakymo kiekis\t%dg\nGramo kaina\t$%d\nKiekis sandelyje\t%dg\n{C60000}Iðtrinti narkotikà", maxorder, price, amount);
		ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_DRUG_MAIN, DIALOG_STYLE_TABLIST_HEADERS, GetInventoryItemName(drugid), string, "Tæsti", "Atðaukti");
	}
	return 1;
}

forward DealerGunDataLoadedAM(playerid);
public DealerGunDataLoadedAM(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerGunDataLoadedAM(%s)", GetPlayerNameEx(playerid));
	#endif
	if(cache_num_rows())
	{
		new weaponid,
			maxorder,
			price,
			amount,
			string[256];
		cache_get_value_name_int(0, "WeaponId", weaponid);
		cache_get_value_name_int(0, "WeaponMaxAmount", maxorder);
		cache_get_value_name_int(0, "WeaponAmount", amount);
		cache_get_value_name_int(0, "WeaponPrice", price);
		format(string, sizeof string, "{BABABA}Nustatymas\t{BABABA}Dabartinë reikðmë\nDidþiausias uþsakymo kiekis\t%dvnt.\nVieneto kaina\t$%d\nKiekis sandelyje\t%dvnt.\n{C60000}Iðtrinti ginklà", maxorder, price, amount);
		ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_GUN_MAIN, DIALOG_STYLE_TABLIST_HEADERS, GetInventoryItemName(weaponid), string, "Tæsti", "Atðaukti");
	}
	return 1;
}

forward DealerVehicleDataLoadAM(playerid);
public DealerVehicleDataLoadAM(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerVehicleDataLoadAM(%s)", GetPlayerNameEx(playerid));
	#endif
	new price,
		model,
		spawn,
		date[20],
		numbers[16],
		string[256];
	if(cache_num_rows())
	{
		cache_get_value_name_int(0, "Model", model);
		cache_get_value_name_int(0, "Price", price);
		cache_get_value_name_int(0, "SpawnedId", spawn);
		cache_get_value_name(0, "Date", date);
		cache_get_value_name(0, "Numbers", numbers);
		format(string, sizeof string, "Modelis:\t%s\nNumeriai:\t%s\nSumokëta kaina:\t$%d\nPirkimo data:\t%d\nIðspawninta:\t%s\n{C60000}Iðtrinti tr. priemonæ", GetModelName(model), numbers, price, date, TOS(spawn > 0, "Taip", "Ne"));
		ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_VEHICLE_EDIT_MAIN, DIALOG_STYLE_TABLIST, "Ginklø ir narkotikø tiekëjai", string, "Tæsti", "Atðaukti");
	}
	return 1;
}

forward DealerGunSpawns(playerid);
public DealerGunSpawns(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerGunSpawns(%s)", GetPlayerNameEx(playerid));
	#endif
	new string[512] = "Nr.\tKoordinatës\tVieta\n",
		line[64],
		Float:x, Float:y, Float:z, rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_float(i, "X", x);
		cache_get_value_name_float(i, "Y", y);
		cache_get_value_name_float(i, "Z", z);
		GetCoords2DZone(line, 24, x, y);
		format(line, sizeof line, "%d.\t%0.2f, %0.2f, %0.2f\t%s\n",i+1, x, y, z, line);
		strcat(string, line);
	}
	tmpTexture_MarkStart_CP[playerid] = rows;
	strcat(string, "{5FBD36}Pridëti naujà");
	ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_GUN_SPAWNS, DIALOG_STYLE_TABLIST_HEADERS, "Ginklø ir narkotikø tiekëjai", string, "Tæsti", "Atðaukti");
	return 1;
}

forward DealerDrugSpawns(playerid);
public DealerDrugSpawns(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerDrugSpawns(%s)", GetPlayerNameEx(playerid));
	#endif
	new string[512] = "Nr.\tKoordinatës\tVieta\n",
		line[64],
		Float:x, Float:y, Float:z, rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_float(i, "X", x);
		cache_get_value_name_float(i, "Y", y);
		cache_get_value_name_float(i, "Z", z);
		GetCoords2DZone(line, 24, x, y);
		format(line, sizeof line, "%d.\t%0.2f, %0.2f, %0.2f\t%s\n",i+1, x, y, z, line);
		strcat(string, line);
	}
	tmpTexture_MarkStart_CP[playerid] = rows;
	strcat(string, "{5FBD36}Pridëti naujà");
	ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_DRUG_SPAWNS, DIALOG_STYLE_TABLIST_HEADERS, "Ginklø ir narkotikø tiekëjai", string, "Tæsti", "Atðaukti");
	return 1;
}

forward DealerStatsLoad(playerid);
public DealerStatsLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerStatsLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	return 1;
}

forward DealerHousesLoadAM(playerid);
public DealerHousesLoadAM(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerHousesLoadAM(%s)", GetPlayerNameEx(playerid));
	#endif
	new line[86],
		string[512] = "{FFFFFF}Þaidëjo iðsipirkti konspiraciniai namai:\n\n",
		Float:x, Float:y, id, rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_float(i, "EnterX", x);
		cache_get_value_name_float(i, "EnterY", y);
		cache_get_value_name_int(i, "id", id);
		GetCoords2DZone(line, 24, x, y);
		format(line, sizeof line, "{E76565}{E6E6E6} %d.\tVieta: %s, MySQL ID: %d\n", i+1, line, id);
		strcat(string, line);
	}
	if(rows == 0) strcat(string, "Namø nëra.");
	strcat(string, "\n\n{DADADA}Namus galite valdyti {FFFFFF}Juodoji rinka > Konspiraciniai namai\n");
	ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_HOUSES_ALL, DIALOG_STYLE_MSGBOX, "Ginklø ir narkotikø tiekëjai", string, "Tæsti", "Atðaukti");
	return 1;
}

forward DealerVehiclesLoadAM(playerid);
public DealerVehiclesLoadAM(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerVehiclesLoadAM(%s)", GetPlayerNameEx(playerid));
	#endif
	new model,
		string[512] = "{BABABA}Nr. Modelis\t{BABABA}Numeriai\t{BABABA}Serverio ID",
		id, numbers[24],
		spawnedid;

	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "Model", model);
		cache_get_value_name_int(i, "SpawnedId", spawnedid);
		cache_get_value_name(i, "Numbers", numbers);
		format(string, sizeof string, "%s%d. %s\t%s\t%d\n", string, i+1, GetModelName(model), strlen(numbers) > 0 ? (numbers) : ("nera"), spawnedid);
	}
	ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_VEHICLES_ALL, DIALOG_STYLE_LIST, "Ginklø ir narkotikø tiekëjai", string, "Tæsti", "Atðaukti");
	return 1;
}

forward DealerBuyableVehicles(playerid);
public DealerBuyableVehicles(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerBuyableVehicles(%s)", GetPlayerNameEx(playerid));
	#endif
	new rows = cache_num_rows(),
		price, model, line[86], string[512] = "{BABABA}Nr. Modelis\t{BABABA}Kaina\n";
	if(rows == 0) return SendWarning(playerid, "Administratorius jums nëra priskyræs tr. priemoniø pirkimui.") , pc_cmd_dealermenu(playerid, "");
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "Model", model);
		cache_get_value_name_int(i, "Price", price);
		format(line, sizeof line, "%d. %s\t$%d\n", i+1, GetModelName(model), price);
		strcat(string, line);
	}
	ShowPlayerDialog(playerid, DIALOG_DM_VEHICLES_BUY_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Ginklø ir narkotikø tiekëjai", string, "Pirkti", "Atðaukti");
	return 1;
}

forward DealerDrugsList(playerid);
public DealerDrugsList(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerDrugsList(%s)", GetPlayerNameEx(playerid));
	#endif
	new rows = cache_num_rows(),
		string[512] = "{BABABA}Nr.\t{BABABA}Narkotikas\n",
		line[56],
		drugid;
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "DrugId", drugid);
		format(line, sizeof line, "%d.\t%s\n", i+1, GetInventoryItemName(drugid));
		strcat(string, line);
	}
	strcat(string, "{5FBD36}Pridëti naujà");
	tmpTexture_MarkStart_CP[playerid] = rows;
	ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_DRUGS_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Ginklø ir narkotikø tiekëjai", string, "Tæsti", "Atðaukti");
	return 1;
}

forward DealerGunsList(playerid);
public DealerGunsList(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerGunsList(%s)", GetPlayerNameEx(playerid));
	#endif
	new weaponid,
		string[512] = "{BABABA}Nr.\t{BABABA}Ginklas\n",
		line[56],
		rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "WeaponId", weaponid);
		format(line, sizeof line, "%d.\t%s\n", i+1, GetInventoryItemName(weaponid));
		strcat(string, line);
	}
	strcat(string, "{5FBD36}Pridëti naujà");
	tmpTexture_MarkStart_CP[playerid] = rows;
	ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALER_EDIT_GUNS_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Ginklø ir narkotikø tiekëjai", string, "Tæsti", "Atðaukti");
	return 1;
}

forward DealerDrugsOrderList(playerid, update, limit);
public DealerDrugsOrderList(playerid, update, limit)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerDrugsOrderList(%s, %d, %d)", GetPlayerNameEx(playerid), update, limit);
	#endif
	new rows = cache_num_rows(),
		drugid,
		price,
		amount,
		maxorder,
		total_price,
		string[512] = "{BABABA}Narkotikas\t{BABABA}Gramo kaina\t{BABABA}Sandëlyje\t{BABABA}Uþsakoma/max\n",
		line[86];
	static total_drugs[MAX_PLAYERS];
	if(!cache_num_rows()) return SendWarning(playerid, "Jûs negalite uþsakyti jokiø narkotikø.");
	if(limit <= 0 || limit > MAX_DRUGS_PER_ORDER) return SendWarning(playerid, "Jums neleidþiama uþsakyti jokiø ginklø.");
	if(update == -1)
	{
		for(new i = 0; i < MAX_DRUGS_PER_ORDER; i++) tmpArray[playerid][i] = 0;
		total_drugs[playerid] = 0;
	}
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "DrugMaxAmount", maxorder);
		cache_get_value_name_int(i, "DrugAmount", amount);
		cache_get_value_name_int(i, "DrugPrice", price);
		cache_get_value_name_int(i, "DrugId", drugid);
		if(update == i)
		{
			if(tmpArray[playerid][i] >= maxorder)
			{
				total_drugs[playerid] -= tmpArray[playerid][i]; // cia buvo bug
				tmpArray[playerid][i] = 0;
			}
			else if(tmpArray[playerid][i] >= amount)
			{
				SendWarning(playerid, "Ðio narkotiko daugiau ðiuo metu nëra.");
			}
			else
			{
				if(total_drugs[playerid] < limit)
				{
					tmpArray[playerid][i]++;
					total_drugs[playerid]++;
				}
				else
				{
					SendWarning(playerid, "Jau paþymëjote %d narkotikø.", limit);
				}
			}
		}
		total_price += tmpArray[playerid][i]*price;
		format(line, sizeof line, "%d. %s\t$%d\t%d\t%d/%d\n", i+1, GetInventoryItemName(drugid), price, amount, tmpArray[playerid][i], maxorder);
		strcat(string, line);
	}
	format(line, sizeof line, "{BABABA}> Iðvalyti\n{BABABA}> Uþsakyti ($%d)", total_price);
	strcat(string, line);
	ShowPlayerDialog(playerid, DIALOG_DM_DRUGS_ORDER_LIST, DIALOG_STYLE_TABLIST_HEADERS, "Narkotikø uþsakymas", string, "Tæsti", "Atðaukti");
	tmpTexture_MarkStart_CP[playerid] = rows;
	return 1;
}

forward DealerGunsOrderList(playerid, update, limit);
public DealerGunsOrderList(playerid, update, limit)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerGunsOrderList(%s, %d, %d)", GetPlayerNameEx(playerid), update, limit);
	#endif
	new rows = cache_num_rows(),
		maxorder,
		amount,
		weapon,
		total_price,
		price,
		string[512] = "{BABABA}Ginklas\t{BABABA}Vnt. kaina\t{BABABA}Sandëlyje\t{BABABA}Uþsakoma/max\n",
		line[86];
	static total_weapons[MAX_PLAYERS];
	if(!cache_num_rows()) return SendWarning(playerid, "Jûs negalite uþsakyti jokiø ginklø.");
	if(limit <= 0 || limit >= MAX_WEAPONS_PER_ORDER) return SendWarning(playerid, "Jums neleidþiama uþsakyti jokiø ginklø.");
	if(update == -1)
	{
		// pirma kart rodom
		for(new i = 0; i < MAX_WEAPONS_PER_ORDER; i++) tmpArray[playerid][i] = 0;
		total_weapons[playerid] = 0;
	}
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "WeaponMaxAmount", maxorder);
		cache_get_value_name_int(i, "WeaponAmount", amount);
		cache_get_value_name_int(i, "WeaponPrice", price);
		cache_get_value_name_int(i, "WeaponId", weapon);
		if(update == i)
		{
			// sita reik didint ++
			if(tmpArray[playerid][i] >= maxorder)
			{
				total_weapons[playerid] -= tmpArray[playerid][i];
				tmpArray[playerid][i] = 0;
				// perkope limita, nuimam ir nuo viso total_weapons, kad nerasytu "jau pazymejote"
			}
			else if(tmpArray[playerid][i] >= amount)
			{
				// kiekio net nebera tiek
				SendWarning(playerid, "Ðio ginklo daugiau ðiuo metu nëra.");
			}
			else
			{
				if(total_weapons[playerid] < limit)
				{
					tmpArray[playerid][i]++;
					total_weapons[playerid]++;
				}
				else
				{
					SendError(playerid, "Jau paþymëjote %d ginklø.", limit);
				}
			}
		}
		total_price += tmpArray[playerid][i]*price;
		format(line, sizeof line, "%d. %s\t$%d\t%d\t%d/%d\n", i+1, GetInventoryItemName(weapon), price, amount, tmpArray[playerid][i], maxorder);
		strcat(string, line);
	}
	format(line, sizeof line, "{BABABA}> Iðvalyti\n{BABABA}> Uþsakyti ($%d)", total_price);
	strcat(string, line);
	ShowPlayerDialog(playerid, DIALOG_DM_GUNS_ORDER_LIST, DIALOG_STYLE_TABLIST_HEADERS, "Ginklø uþsakymas", string, "Tæsti", "Atðaukti");
	tmpTexture_MarkStart_CP[playerid] = rows;
	return 1;
}

forward DealersLoad(playerid);
public DealersLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealersLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	new rows = cache_num_rows(),
		string[1048] = "Nr.\tVardas (MySQL ID)\tTipas\n",
		id, type, line[100];
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "PlayerId", id);
		cache_get_value_name_int(i, "Type", type);
		tmpArray[playerid][i] = id;
		format(line, sizeof line, "%d.\t{%s}%s (%d)\t%s\n", i+1, (FindPlayerBySql(id) != INVALID_PLAYER_ID ? ("82D034") : ("DB4444")), GetNameBySql(id), id, type == 0 ? ("Guns") : (type == 1 ? ("Drugs") : ("Guns & drugs")));
		strcat(string, line);
	}
	tmpTexture_MarkStart_CP[playerid] = rows;
	strcat(string, "{5FBD36}Pridëti naujà");
	ShowPlayerDialog(playerid, DIALOG_AM_BM_DEALERS_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Ginklø ir narkotikø tiekëjai", string, "Tæsti", "Atðaukti");
	return 1;
}

forward DealerSalonVehiclesLoad(playerid);
public DealerSalonVehiclesLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] DealerSalonVehiclesLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	new rows = cache_num_rows(),
		price, model, type,
		string[512] = "{BABABA}Modelis\t{BABABA}Kaina\t{BABABA}Tiekëjo tipas\n";
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "id", tmpArray[playerid][i]);
		cache_get_value_name_int(i, "Price", price);
		cache_get_value_name_int(i, "Model", model);
		cache_get_value_name_int(i, "DealerType", type);
		format(string, sizeof string, "%s\n%s\t$%d\t%s\n", string, GetModelName(model), price, type == 0 ? ("Guns") : ("Drugs"));
	}
	strcat(string, "\nPridëti");
	tmpTexture_MarkStart_CP[playerid] = rows;
	ShowPlayerDialog(playerid, DIALOG_AM_BM_VEHICLES_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Transporto priemonës", string, "Tæsti", "Atðaukti");
	return 1;
}

forward FactionSalonVehiclesLoad(playerid);
public FactionSalonVehiclesLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] FactionSalonVehiclesLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	new rows = cache_num_rows(),
		price, model,
		string[512] = "Modelis\tKaina\n";
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "id", tmpArray[playerid][i]);
		cache_get_value_name_int(i, "Price", price);
		cache_get_value_name_int(i, "Model", model);
		format(string, sizeof string, "%s\n%s\t$%d\n", string, GetModelName(model), price);
	}
	strcat(string, "\nPridëti");
	ShowPlayerDialog(playerid, DIALOG_AM_FACTION_SALONS_LIST, DIALOG_STYLE_TABLIST_HEADERS, "Parduodamos tr. priemonës frakcijoms", string, "Redaguoti", "Atðaukti");
	tmpTexture_MarkStart_CP[playerid] = rows;
	return 1;
}

forward FactionSellListLoaded(playerid);
public FactionSellListLoaded(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] FactionSellListLoaded(%s)", GetPlayerNameEx(playerid));
	#endif
	new rows = cache_num_rows(),
		price, id, model,
		string[2024] = "Modelis\tKaina\n";
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "Price", price);
		cache_get_value_name_int(i, "Model", model);
		tmpArray[playerid][i] = id;
		format(string, sizeof string, "%s{FFFFFF}%s\t{449947}$%d\n", string, GetModelName(model), price);
	}
	ShowPlayerDialog(playerid, DIALOG_FM_VEHICLES_SHOP, DIALOG_STYLE_TABLIST_HEADERS, "Frakcijos tr. priemoniø pirkimas", string, "Pirkti", "Atðaukti");
	return 1;
}

forward FactionUsersLoaded(playerid);
public FactionUsersLoaded(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] FactionUsersLoaded(%s)", GetPlayerNameEx(playerid));
	#endif
	new workerid,
		workerlevel,
		workername[24],
		line[86],
		string[2024] = "{BABABA}Vardas\t{BABABA}Rangas\t{BABABA}Statusas{FFFFFF}\n",
		status[24],
		workerrank[24],
		bool:warned,
		rows = cache_num_rows(),
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "id", workerid);
		cache_get_value_name_int(i, "JobLevel", workerlevel);
		tmpArray[playerid][i] = workerid;
		if((workerid = FindPlayerBySql(workerid)) != INVALID_PLAYER_ID)
		{
			format(status, sizeof status, "{6ACC4F}prisijungæs");
			GetPlayerName(workerid, workername, sizeof workername);
			workerid = 1;
		}
		else
		{
			format(status, sizeof status, "{CC4F4F}atsijungæs");
			cache_get_value_name(i, "Name", workername);
			workerid = 2;
		}
		if(workerlevel > 0 && workerlevel <= MAX_FACTION_RANKS)
		{
			format(workerrank, sizeof workerrank, (strlen(FactionRankNames[factionid][workerlevel-1]) ? (FactionRankNames[factionid][workerlevel-1]) : ("ranko nëra")));
		}
		else
		{
			format(workerrank, sizeof workerrank, "{ERROR}");
			if(!warned)
			{
				MsgError(playerid, "FRAKCIJA", "Klaida jûsø frakcijos nariø rankuose. Praðome ðiems nariams nustatyti rankus ið naujo arba juos iðmesti.");
			}
			warned = true;
		}
		format(line, sizeof line, "\r%s%s\t%s(%d)\t%s\n\r", (workerid == 1 ? ("{F7F7F7}") : ("{D7D7D7}")), workername, workerrank, workerlevel, status);
		strcat(string, line);
	}
	strcat(string, "Priimti naujà nará");
	tmpArray[playerid][rows] = INVALID_PLAYER_ID;
	ShowPlayerDialog(playerid, DIALOG_FM_USERS_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "Frakcijos nariai", string, "Tæsti", "Atðaukti");
	return 1;
}

forward FurniturePreviewTimer(playerid, i);
public FurniturePreviewTimer(playerid, i)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] FurniturePreviewTimer(%s, %d)", GetPlayerNameEx(playerid), i);
	#endif
	PlayerInfo[playerid][pViewStatus] = PLAYER_VIEW_STATUS_FURNITURE;
	tmpSelected[playerid] = i;
	new
		Float:vector_x = 0.0,
		Float:vector_y = 0.0,
		Float:player_z = 1300.0;

	GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	SetPlayerPos(playerid, vector_x, vector_y, player_z);
	SetPlayerWeather(playerid, 0);
	SetPlayerTime(playerid, 12, 0);

	GetXYInFrontOfPlayer(playerid, vector_x, vector_y, 1.0);
	tmpPage_Object[playerid] = CreateDynamicObject(FurnitureList[i][furnitureListModel], vector_x, vector_y, player_z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), .called = "furniture", .extra = "preview");
	TogglePlayerControllable(playerid, false);
	GetXYInFrontOfPlayer(playerid, vector_x, vector_y, 13.0);

	new
		Float:object_x,
		Float:object_y,
		Float:object_z,
		string[126];

	GetDynamicObjectPos(tmpPage_Object[playerid], object_x, object_y, object_z);
	SetPlayerCameraPos(playerid, vector_x, vector_y, player_z);
	SetPlayerCameraLookAt(playerid, object_x, object_y, object_z);

	SetPlayerPos(playerid, vector_x, vector_y, player_z);
	format(string, sizeof string, "KATEGORIJA:_%s~n~PAVADINIMAS:_%s~n~KAINA:_~g~$%d", strtoupper(formatlt(FurnitureListNames[FurnitureList[i][furnitureListCategory]])), strtoupper(formatlt(FurnitureList[i][furnitureListName])), FurnitureList[i][furnitureListPrice]);
	ShowPlayerFurnitureBuy(playerid, string);
	SelectTextDraw(playerid, 0xE6E6E6FF);
	return 1;
}

thread(FurnitureColorSave);
thread(FurnitureTextureSave);
thread(GroupDeleted);
thread(GroupAdded);
thread(GroupSaved);
/*

oooooooooooo ooooo     ooo ooooo      ooo   .oooooo.   ooooooooooooo ooooo   .oooooo.   ooooo      ooo  .oooooo..o
`888'     `8 `888'     `8' `888b.     `8'  d8P'  `Y8b  8'   888   `8 `888'  d8P'  `Y8b  `888b.     `8' d8P'    `Y8
 888          888       8   8 `88b.    8  888               888       888  888      888  8 `88b.    8  Y88bo.
 888oooo8     888       8   8   `88b.  8  888               888       888  888      888  8   `88b.  8   `"Y8888o.
 888    "     888       8   8     `88b.8  888               888       888  888      888  8     `88b.8       `"Y88b
 888          `88.    .8'   8       `888  `88b    ooo       888       888  `88b    d88'  8       `888  oo     .d8P
o888o           `YbodP'    o8o        `8   `Y8bood8P'      o888o     o888o  `Y8bood8P'  o8o        `8  8""88888P'
FUNCTIONS

*/

stock IsVehicleServer(vehicleid)
{
	if(VehicleInfo[vehicleid][vJob] > 0 || VehicleInfo[vehicleid][vFaction] != 0 || VehicleInfo[vehicleid][vOwner] == 0) return true;
	return false;
}

stock IsPlayerInRangeOfVehicle(playerid, Float:range, vehicleid)
{
	new
		Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(GetVehicleDistanceFromPoint(vehicleid, x, y, z) <= range) return true;
	return false;
}

stock PutFactionWeaponsInVehicle(vehicleid)
{
	new
		factionid = GetFactionArrayIndexById(VehicleInfo[vehicleid][vFaction]),
		vehiclemodel = GetVehicleModel(vehicleid),
		type;
	if(factionid != -1)
	{
		type = FactionInfo[factionid][fType];
		for(new list = 0; list < sizeof FactionWeaponsInTrunk; list++)
		{
			if(type == FactionWeaponsInTrunk[list][ftwListFactionType])
			{
				for(new model = 0; model < 10; model++)
				{
					if(FactionWeaponsInTrunk[list][ftwListModels][model] < 400)
					{
						break;
					}
					if(FactionWeaponsInTrunk[list][ftwListModels][model] == vehiclemodel)
					{
						for(new slot = 0; slot < MAX_VEHICLE_WEAPON_SLOTS; slot++)
						{
							if(VehicleWeaponsInventory[vehicleid][slot][ftwWeaponId] == 0)
							{
								// tuscias slot, cia dedam
								VehicleWeaponsInventory[vehicleid][slot][ftwWeaponId] = FactionWeaponsInTrunk[list][ftwListWeaponId];
								VehicleWeaponsInventory[vehicleid][slot][ftwAmmo] = FactionWeaponsInTrunk[list][ftwListWeaponAmmo];
								VehicleWeaponsInventory[vehicleid][slot][ftwAllowedInVehicle] = FactionWeaponsInTrunk[list][ftwListAllowedInVehicle];
								for(new perm = 0; perm < 3; perm++)
								{
									VehicleWeaponsInventory[vehicleid][slot][ftwPermission][perm] = FactionWeaponsInTrunk[list][ftwListPermission][perm];
								}
								break;
							}
						}
						break;
					}
				}
			}
		}
	}
	return 1;
}

stock GetXYJudgedByAngle( Float:distance, Float:x, Float:y, Float:angle, &Float:rx, &Float:ry )
{
	rx = x + distance * floatsin( -angle, degrees );
	ry = y + distance * floatcos( -angle, degrees );
	return 1;
}

stock ShowPlayerBank(playerid, bool:show_nr = false)
{
	new string[256];
	if(PlayerInfo[playerid][pBankCard] <= 0)
	{
		format(string, sizeof string, "Susikurti sàskaità ("#DEFAULT_BANK_CARD_PRICE"$)");
	}
	else
	{
		show_nr && SendFormat(playerid, 0xEEFFB2FF, "Jûsø sàskaitos numeris: {DCFF64}"#DEFAULT_IBAN_PREFIX"%d", GetPlayerIBAN(PlayerInfo[playerid][pId]));
		format(string, sizeof string, "\
			Sàskaitos likutis\t{%s}$%d\n\
			{DCDCDC}  -  Áneðti\n\
			{DCDCDC}  -  Paimti\n\
			{FFFFFF}Indëlis\t{1BAA35}$%d\n\
			{DCDCDC}  -  %s\n\
			{FFFFFF}Sàskaitos iðklotinë\n\
			Vietiniai pervedimai", PlayerInfo[playerid][pBank] >= 0 ? ("1BAA35") : ("A82626"), PlayerInfo[playerid][pBank], PlayerInfo[playerid][pSavings], PlayerInfo[playerid][pSavings] > 0 ? ("Nutraukti") : ("Áneðti"));
	}
	ShowPlayerDialog(playerid, DIALOG_BANK_MAIN, DIALOG_STYLE_TABLIST, "Bankas", string, "Tæsti", "Atðaukti");
	return 1;
}

stock GetPlayerMobileAreaStrenght(playerid)
{
	new Float:x, Float:z;
	GetPlayerPos(playerid, x, x, z);
	for(new i = 0; i < sizeof GoodMobileAreas; i++)
	{
		if(IsPlayerInDynamicArea(playerid, GoodMobileAreas[i]))
		{
			return 2;
		}
	}
	if(z < 0.99) return 0;
	for(new i = 0; i < sizeof BadMobileAreas; i++)
	{
		if(IsPlayerInDynamicArea(playerid, BadMobileAreas[i]))
		{
			return 0;
		}
	}
	return 1;
}

stock GetTextWithMobileArea(strenght, text[], probability = 20)
{
	new txt[126];
	format(txt, sizeof txt, text);
	if(strenght == 1)
	{
		if(Probability(probability))
		{
			format(txt, sizeof txt, "%0.1s*ryðys trûkinëja*%0.2s*..*%s", text, text[strlen(text)/2], text[strlen(text)-1]);
		}
	}
	return txt;
}

stock PayPhoneTD_Prepare(playerid)
{
	format(tmpPassword[playerid], 1, "");
	PlayerTextDrawSetString(playerid, PayPhoneTD_Input[playerid], "_");
	return 1;
}

stock PayPhoneTD_Show(playerid)
{
	TextDrawShowForPlayer(playerid, PayPhoneTD_Border);
	TextDrawShowForPlayer(playerid, PayPhoneTD_Background);
	TextDrawShowForPlayer(playerid, PayPhoneTD_Exit);
	for(new i = 0; i < 10; i++) TextDrawShowForPlayer(playerid, PayPhoneTD_Number[i]);
	for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, PayPhoneTD_Small[i]);
	PlayerTextDrawShow(playerid, PayPhoneTD_Input[playerid]);
	for(new i = 0; i < 2; i++) PlayerTextDrawShow(playerid, PayPhoneTD_Action[playerid][i]);
	GetESCType(playerid) = ESC_TYPE_PAYPHONE;
	return 1;
}

stock PayPhoneTD_Hide(playerid, bool:hang = true)
{
	TextDrawHideForPlayer(playerid, PayPhoneTD_Border);
	TextDrawHideForPlayer(playerid, PayPhoneTD_Background);
	TextDrawHideForPlayer(playerid, PayPhoneTD_Exit);
	for(new i = 0; i < 10; i++) TextDrawHideForPlayer(playerid, PayPhoneTD_Number[i]);
	for(new i = 0; i < 3; i++) TextDrawHideForPlayer(playerid, PayPhoneTD_Small[i]);
	PlayerTextDrawHide(playerid, PayPhoneTD_Input[playerid]);
	for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, PayPhoneTD_Action[playerid][i]);
	GetESCType(playerid) = ESC_TYPE_NONE;
	if(PhoneInfo[playerid][phoneRingType] != 0 && PhoneInfo[playerid][phoneTalkingTo] != INVALID_PLAYER_ID && hang)
	{
		// kalbejo jau
		PlayerPhoneHangup(playerid);
	}
	return 1;
}

stock GetPayPhoneNumber(payphone)
{
	return PAYPHONE_DEFAULT_NUMBER + PayPhoneInfo[payphone][payPhoneId] + 22;
}

stock SendRadioChat(channel, color, string[])
{
	foreach(new playerid : Player)
	{
		if(PlayerInfo[playerid][pRadioChannel] == channel)
		{
			SendChatMessage(playerid, color, string);
		}
	}
	return 1;
}

stock memsetex(variable[], cells, value)
{
	new address;

	#emit LOAD.S.pri  variable
	#emit STOR.S.pri  address

	raw_memset(address, cells, value);
}

stock raw_memset(address, cells, value)
{
	new param_adr;

	#emit LCTRL       6
	#emit MOVE.alt
	#emit LCTRL       0
	#emit ADD
	#emit MOVE.alt
	#emit LCTRL       1
	#emit SUB.alt
	#emit ADD.C       92
	#emit STOR.S.pri  param_adr
	#emit LOAD.S.pri  cells
	#emit SHL.C.pri   2
	#emit SREF.S.pri  param_adr

	#emit LOAD.S.alt  address
	#emit LOAD.S.pri  value
	#emit FILL        0
}

stock IsModelLowrider(model)
{
    new Cars[] = { 536, 575, 567};
    for(new i = 0; i < sizeof(Cars); i++)
    {
        if(model == Cars[i]) return true;
    }
    return false;
}

stock GetFreeClothesSlot(playerid)
{
	new slot = -1;
	for(new i = 0; i < MAX_CLOTHES_INVENTORY_SLOTS; i++)
	{
		if(ClothesInventory[playerid][i] <= 0)
		{
			slot = i;
			break;
		}
	}
	return slot;
}

stock extract_inventory(source[], token[], separate, sscanf_specifiers[], parent, array[][][E_INVENTORY_DATA], max = -1)
{
	new last_strfind_pos = -1,
		strdel_start_pos = 0,
		current_strfind_pos = -1,
		current_separate_found = 0,
		loopindex = 0,
		copy_string[256],
		sscanf_string[24];
	format(sscanf_string, sizeof sscanf_string, "p<%s>%s", token, sscanf_specifiers);
	while((current_strfind_pos = strfind(source,"|",false,last_strfind_pos == -1 ? 0 : last_strfind_pos)) != -1)
	{
		last_strfind_pos = current_strfind_pos + 1;
		current_separate_found++;
		if(current_separate_found >= separate)
		{
			sd_extract_strmid(copy_string, source, strdel_start_pos, last_strfind_pos);
			sscanf(copy_string, sscanf_string, array[parent][loopindex][invId], array[parent][loopindex][invAmount], array[parent][loopindex][invExtraId]);
			sd_extract_loopend(loopindex, current_separate_found);
			if(loopindex >= max && max != -1)
			{
				break;
			}
		}
	}
	return 1;
}

stock extract_wares(source[], token[], separate, sscanf_specifiers[], parent, array[][][E_BUSINESS_WARES_DATA], max = -1)
{
	new last_strfind_pos = -1,
		strdel_start_pos = 0,
		current_strfind_pos = -1,
		current_separate_found = 0,
		loopindex = 0,
		copy_string[256],
		sscanf_string[24];
	format(sscanf_string, sizeof sscanf_string, "p<%s>%s", token, sscanf_specifiers);
	while((current_strfind_pos = strfind(source,"|",false,last_strfind_pos == -1 ? 0 : last_strfind_pos)) != -1)
	{
		last_strfind_pos = current_strfind_pos + 1;
		current_separate_found++;
		if(current_separate_found >= separate)
		{
			sd_extract_strmid(copy_string, source, strdel_start_pos, last_strfind_pos);
			sscanf(copy_string, sscanf_string, array[parent][loopindex][bWareId], array[parent][loopindex][bWareAmount], array[parent][loopindex][bWarePrice]);
			sd_extract_loopend(loopindex, current_separate_found);
			if(loopindex >= max && max != -1)
			{
				break;
			}
		}
	}
	return 1;
}

stock sd_extract_strmid(target[], source[], &start, &end)
{
	strmid(target, source, start, end, 256);
	start = end;
	return 1;
}

stock sd_extract_loopend(&index,&sep)
{
	sep = 0, index++;
	return 1;
}


stock SendWeaponsOrderTo(playerid, invtype, selected)
{
	new string[126],
		weapons[MAX_WEAPONS_PER_ORDER],
		count,
		id;
	mysql_format(chandler, string, sizeof string, "SELECT Packed,id FROM `dealers_guns_orders` WHERE Valid = '1' AND PlayerId = '%d'", PlayerInfo[playerid][pId]);
	new Cache:result = mysql_query(chandler, string, true);
	if(cache_num_rows())
	{
		cache_get_value_name(0, "Packed", string);
		cache_get_value_name_int(0, "id", id);

		//packed_unpack("|", 2, weapons, sizeof weapons);

		new var[15];
		format(var, sizeof var, "p<|>a<d>[%d]", MAX_WEAPONS_PER_ORDER);
		sscanf(string, var, weapons);
		for(new i = 0; i < MAX_WEAPONS_PER_ORDER; i++)
		{
			if(weapons[i] > 0)
			{
				count++;
			}
			else { break; }
		}
		switch(invtype)
		{
			case INVENTORY_TYPE_DEALER_HOUSE:
			{
				if(GetDealerHouseFreeSlotsCount(selected) >= count)
				{
					for(new i = 0; i < count; i++)
					{
						new unique_wep_id = CreateUniqueWeaponId(playerid, weapons[i], GetAmmoAmountForOrder(weapons[i]), WEAPON_GIVE_TYPE_NORMAL);
						if(unique_wep_id != -1)
						{
							GiveDealerHouseInventoryItem(selected, weapons[i], GetAmmoAmountForOrder(weapons[i]), unique_wep_id);
						}
					}
					mysql_format(chandler, string, sizeof string, "UPDATE `dealers_guns_orders` SET Valid = '0' WHERE Valid = '1' AND PlayerId = '%d'", PlayerInfo[playerid][pId]);
					mysql_fquery(chandler, string, "DealerSaved");
					return true;
				}
			}
			case INVENTORY_TYPE_VEHICLE:
			{
				if(GetVehicleFreeSlotsCounts(selected) >= count)
				{
					for(new i = 0; i < count; i++)
					{
						new unique_wep_id = CreateUniqueWeaponId(playerid, weapons[i], GetAmmoAmountForOrder(weapons[i]), WEAPON_GIVE_TYPE_NORMAL);
						if(unique_wep_id != -1)
						{
							GiveVehicleInventoryItem(selected, weapons[i], GetAmmoAmountForOrder(weapons[i]), unique_wep_id);
						}
					}
					mysql_format(chandler, string, sizeof string, "UPDATE `dealers_guns_orders` SET Valid = '0' WHERE Valid = '1' AND PlayerId = '%d'", PlayerInfo[playerid][pId]);
					mysql_fquery(chandler, string, "DealerSaved");
					return true;
				}
			}
		}
	}
	cache_delete(result);
	return false;
}

stock SendDrugsOrderTo(playerid, invtype, selected)
{
	new string[126],
		drugid[MAX_DRUGS_PER_ORDER],
		drugamount[MAX_DRUGS_PER_ORDER],
		count,
		id;
	mysql_format(chandler, string, sizeof string, "SELECT Packed,id FROM `dealers_drugs_orders` WHERE Valid = '1' AND PlayerId = '%d'", PlayerInfo[playerid][pId]);
	new Cache:result = mysql_query(chandler, string, true);
	if(cache_num_rows())
	{
		cache_get_value_name(0, "Packed", string);
		cache_get_value_name_int(0, "id", id);

		//packed_unpack("|", 2, weapons, sizeof weapons);

		new var[15];
		format(var, sizeof var, "p<|>a<dd>[%d]", MAX_DRUGS_PER_ORDER);
		sscanf(string, var, drugid, drugamount);
		for(new i = 0; i < MAX_DRUGS_PER_ORDER; i++)
		{
			if(drugid[i] > 0)
			{
				count++;
			}
			else { break; }
		}
		switch(invtype)
		{
			case INVENTORY_TYPE_DEALER_HOUSE:
			{
				if(GetDealerHouseFreeSlotsCount(selected) >= count)
				{
					for(new i = 0; i < count; i++)
					{
						GiveDealerHouseInventoryItem(selected, drugid[i], drugamount[i]);
					}
					mysql_format(chandler, string, sizeof string, "UPDATE `dealers_drugs_orders` SET Valid = '0' WHERE Valid = '1' AND PlayerId = '%d'", PlayerInfo[playerid][pId]);
					mysql_fquery(chandler, string, "DealerSaved");
					return true;
				}
			}
			case INVENTORY_TYPE_VEHICLE:
			{
				if(GetVehicleFreeSlotsCounts(selected) >= count)
				{
					for(new i = 0; i < count; i++)
					{
						GiveVehicleInventoryItem(selected, drugid[i], drugamount[i]);
					}
					mysql_format(chandler, string, sizeof string, "UPDATE `dealers_drugs_orders` SET Valid = '0' WHERE Valid = '1' AND PlayerId = '%d'", PlayerInfo[playerid][pId]);
					mysql_fquery(chandler, string, "DealerSaved");
					return true;
				}
			}
		}
	}
	cache_delete(result);
	return false;
}

stock GetAmmoAmountForOrder(weaponid)
{
	new ammo;
	switch(weaponid)
	{
		case 1..15: ammo = 1;
		case 16..18: ammo = 1;
		case 22..23: ammo = 70;
		case 24: ammo = 70;
		case 25: ammo = 50;
		case 26: ammo = 30;
		case 27: ammo = 30;
		case 28: ammo = 200;
		case 29: ammo = 250;
		case 30..31: ammo = 400;
		case 32: ammo = 200;
		case 33: ammo = 30;
		case 34: ammo = 15;
		case 35: ammo = 1;
		case 37: ammo = 400;
		case 38: ammo = 200;
		case 39: ammo = 1;
		case 40: ammo = 1;
		case 41: ammo = 5000;
		case 42: ammo = 5000;
		case 43: ammo = 100;

	}
	return ammo;
}

stock WeaponUniqueIdByOrder(weaponid, orderid, i = -1)
{
	return 10000 + (i == -1 ? random(weaponid) : i) + orderid;
}

stock GetBusinessFuelOrder(businessid)
{
	new Cache:sys_mem = cache_save(),
		Cache:result,
		hours = -1,
		string[89];
	mysql_format(chandler, string, sizeof string, "SELECT HoursLeft FROM `business_orders_fuel` WHERE BusinessId = '%d' AND Valid = '1'", BusinessInfo[businessid][bId]);
	result = mysql_query(chandler, string, true);
	cache_set_active(result);
	cache_get_value_name_int(0, "HoursLeft", hours);
	cache_delete(result);
	cache_set_active(sys_mem);
	return hours;
}

stock GetDealerGunOrder(playerid)
{
	new Cache:sys_mem = cache_save(),
		Cache:result,
		hours = -1,
		string[89];
	mysql_format(chandler, string, sizeof string, "SELECT HoursLeft FROM `dealers_guns_orders` WHERE PlayerId = '%d' AND Valid = '1'", PlayerInfo[playerid][pId]);
	result = mysql_query(chandler, string, true);
	cache_set_active(result);
	cache_get_value_name_int(0, "HoursLeft", hours);
	cache_delete(result);
	cache_set_active(sys_mem);
	return hours;
}

stock GetDealerDrugOrder(playerid)
{
	new Cache:sys_mem = cache_save(),
		Cache:result,
		hours = -1,
		string[89];
	mysql_format(chandler, string, sizeof string, "SELECT HoursLeft FROM `dealers_drugs_orders` WHERE PlayerId = '%d' AND Valid = '1'", PlayerInfo[playerid][pId]);
	result = mysql_query(chandler, string, true);
	cache_set_active(result);
	cache_get_value_name_int(0, "HoursLeft", hours);
	cache_delete(result);
	cache_set_active(sys_mem);
	return hours;
}

stock ShowPlayerStats(playerid, receiverid)
{
	new xp_to_next_lvl,
		year, month, day,
		hour, minute, second;

	getdate(year, xp_to_next_lvl, xp_to_next_lvl);
	xp_to_next_lvl = (PlayerInfo[playerid][pLevel] + 1)*4;

	getdate(year, month, day);
	gettime(hour, minute, second);

	SendFormat(receiverid, 0x93DD5EFF, "[______%s(%d) informacija %d-%02d-%02d, %02d:%02d:%02d______]",
		GetPlayerNameEx(playerid),
		PlayerInfo[playerid][pId],

		year, month, day,
		hour, minute, second
	);
	SendFormat(receiverid, 0xFCFCFCFF, "[Amþius: %d], [Tautybë: %s], [Grynieji pinigai: $%d], [Banke: $%d], [Indëlis: $%d]",
		year-PlayerInfo[playerid][pBirthDate],
		PlayerInfo[playerid][pOrigin],
		GetPlayerMoney(playerid), 
		PlayerInfo[playerid][pBank], 
		PlayerInfo[playerid][pSavings]
	);
	SendFormat(receiverid, 0xFCFCFCFF, "[Lygis: %d (%d/%d)], [Tel. numeris: %d], [Praþaista: %dval] [Spawn vieta: %s]",
		PlayerInfo[playerid][pLevel],
		PlayerInfo[playerid][pXP],
		xp_to_next_lvl,

		PlayerInfo[playerid][pPhoneNumber],
		PlayerInfo[playerid][pHoursPlayed],
		GetSpawnTitle(PlayerInfo[playerid][pSpawnType], PlayerInfo[playerid][pSpawnId])
	);

	if(PlayerInfo[playerid][pFaction] > 0)
	{
		SendFormat(receiverid, 0xFCFCFCFF, "[Frakcija: \"%s\" (%d)], [Rangas: %d. \"%s\"]",
			GetFactionName(PlayerInfo[playerid][pFaction]),
			PlayerInfo[playerid][pFaction],
			PlayerInfo[playerid][pJobLevel],
			GetPlayerFactionRankName(playerid)
		);
	}
	if(PlayerInfo[playerid][pJob] > 0)
	{
		SendFormat(receiverid, 0xFCFCFCFF, "[Darbas: \"%s\" > {DADADA}/jobstats{FCFCFC}]", 
			GetJobName(PlayerInfo[playerid][pJob])
		);
	}
	else SendFormat(receiverid, 0xFCFCFCFF, "[Darbas: joks]");

	SendFormat(receiverid, 0xfcfcfcff, "[Graffiti leidimai: %d] [Vartotojas: %s (%d)]",
		PlayerInfo[playerid][pGraffitiAllowed],
		GetUserNameById(PlayerInfo[playerid][pUserId]),
		PlayerInfo[playerid][pUserId]
	);

	SendFormat(receiverid, 0xFCFCFCFF, "[Remëjas: %dlvl (%s)] [Vardo keitimai: %d] [Tel nr. keitimai: %d] [Tr. nr. keitimai: %d]", 
		PlayerInfo[playerid][pDonator],
		PlayerInfo[playerid][pDonator] > 0 ? (UnixDiffToDays(gettime(), PlayerInfo[playerid][pDonatorTime] + TIME_TO_RESET_DONATOR)) : ("-"),
		PlayerInfo[playerid][pNameChanges],
		PlayerInfo[playerid][pNumberChanges],
		PlayerInfo[playerid][pPlateChanges]);

 	if(playerid == receiverid)
	{
		SendFormat(receiverid, 0xFCFCFCFF, "[Tiekëjas: %s], [Admin. grupës (%s), (%s), (%s)]",
			GetDealerTypeTitle(PlayerInfo[playerid][pDealer]),
			GetGroupName(PlayerGroups[playerid][0]),
			GetGroupName(PlayerGroups[playerid][1]),
			GetGroupName(PlayerGroups[playerid][2])
		);
	}
	return 1;
}

stock GetDealerTypeTitle(type)
{
	new title[32];
	switch(type)
	{
		case -1: format(title, 12, "joks");
		case 0: format(title, 12, "guns");
		case 1: format(title, 12, "drugs");
		default: format(title, 12, "drugs&guns");
	}
	return title;
}

stock GetSpawnTitle(type, id)
{
	new title[32];
	switch(type)
	{
		case SPAWN_TYPE_DEFAULT:
		{
			switch(id)
			{
				case SPAWN_TYPE_DEFAULT_ID_EAST_LS: 	format(title, sizeof title, "East LS");
				case SPAWN_TYPE_DEFAULT_ID_WEST_LS: 	format(title, sizeof title, "West LS");
				case SPAWN_TYPE_DEFAULT_ID_JEFFERSON:	format(title, sizeof title, "Jefferson");
				default:								format(title, sizeof title, "Áprasta");
			}
		}
		case SPAWN_TYPE_HOUSE:
		{
			format(title, sizeof title, "Namas (ID: %d)", id);
		}
		case SPAWN_TYPE_BUSINESS:
		{
			format(title, sizeof title, "Verslas (ID: %d)", id);
		}
		case SPAWN_TYPE_FACTION:
		{
			format(title, sizeof title, "Frakcija");
		}
	}
	return title;
}

stock UnixDiffToDays(from, to)
{
	new 
		string[35],
		diff = to - from,
		days, hours, minutes, seconds;

	if(from > to)
	{
		format(string, sizeof string, "negalioja!");
	}
	else
	{
		// 86400 - day
		// 3600 - hr 
		// 60 - minute

		if(diff >= 86400)
		{
			while(diff >= 86400)
			{
				diff -= 86400;
				days ++ ;
			}
		}

		if(diff >= 3600)
		{
			while(diff >= 3600)
			{
				diff -= 3600;
				hours ++;
			}
		}

		if(diff >= 60)
		{
			while(diff >= 60)
			{
				diff -= 60;
				minutes ++;
			}
		}
		seconds = diff;
		format(string, sizeof string, "%dd. %dval. %dmin. %ds.", days, hours, minutes, seconds);
	}

	return string;
}

stock GetPlayerFactionRankName(playerid)
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
		name[32];
	strcat(name, "joks");
	if(factionid != -1)
	{
		if(PlayerInfo[playerid][pJobLevel] > 0) format(name, sizeof name, FactionRankNames[factionid][PlayerInfo[playerid][pJobLevel]-1]);
	}
	return name;
}

stock GetJobName(job, bool:bysql = true)
{
	new name[32];
	strcat(name, "nëra");
	if(bysql)
	{
		new jobid = GetJobArrayIndexById(job);
		if(jobid != -1)
		{
			format(name, sizeof name, Jobs[jobid][jobName]);
		}
	}
	else
	{
		format(name, sizeof name, Jobs[job][jobName]);
	}
	return name;
}

stock GetFactionName(faction, bool:bysql = true)
{
	new name[24];
	strcat(name, "nëra");
	if(bysql)
	{
		new factionid = GetFactionArrayIndexById(faction);
		if(factionid != -1)
		{
			format(name, sizeof name, FactionInfo[factionid][fName]);
		}
	}
	else
	{
		format(name, sizeof name, FactionInfo[faction][fName]);
	}
	return name;
}


stock GetOnlinePlayers() return Iter_Count(Player);

stock CountPlayerBusiness(playerid)
{
	new count;
	foreach(new businessid : Business) if(BusinessInfo[businessid][bOwner] == PlayerInfo[playerid][pId]) count ++ ;
	return count;
}

stock CountOnlineAdmins()
{
	new
		count = 0;
	foreach(new playerid : Player)
	{
		if(IsPlayerInAnyAdminGroup(playerid)) count++;
	}
	return count;
}

stock CountDutyAdmins()
{
	new
		count = 0;
	foreach(new playerid : Player)
	{
		if(PlayerInfo[playerid][pAdminDuty] > 0) count++;
	}
	return count;
}

stock CountOnlinePolice()
{
	new
		count = 0,
		fid = -1;
	foreach(new playerid : Player)
	{
		if((fid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction])) != -1)
		{
			if(FactionInfo[fid][fType] == FACTION_TYPE_POLICE) count++;
		}
	}
	return count;
}

stock CountDutyPolice()
{
	new
		count = 0,
		fid = -1;
	foreach(new playerid : Player)
	{
		if((fid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction])) != -1)
		{
			if(FactionInfo[fid][fType] == FACTION_TYPE_POLICE && PlayerInfo[playerid][pJobDuty] >= 1) count++;
		}
	}
	return count;
}

stock CountJailPlayers()
{
	new
		count = 0;
	foreach(new playerid : Player)
	{
		if(PlayerInfo[playerid][pJailType] == 2) count++;
	}
	return count;
}

stock CountArrestPlayers()
{
	new
		count = 0;
	foreach(new playerid : Player)
	{
		if(PlayerInfo[playerid][pJailType] == 1) count++;
	}
	return count;
}

stock GetVehicleEngine(vehicleid)
{
	new engine, ex;
	GetVehicleParamsEx(vehicleid, engine, ex, ex, ex, ex, ex, ex);
	return engine;
}

stock GetVehicleBonnet(vehicleid)
{
	new bonnet, ex;
	GetVehicleParamsEx(vehicleid, ex, ex, ex, ex, bonnet, ex, ex);
	return bonnet;
}

stock GetWeaponByArrayIndex(arrayindex)
{
	if(arrayindex <= 18) return arrayindex;
	else return arrayindex + 3;
}

stock ResetDrugStats(playerid, drug_type = -1)
{
	/*
	 * Funkcija, nuresetina efketa, paskutine doze ir pns.
	 * Jei drug_type = -1, visus resetina
	 */
	for(new i = (drug_type == -1 ? 0 : drug_type); i < (drug_type == -1 ? MAX_DRUG_TYPES : drug_type+1); i++)
	{
		PlayerDrugs[playerid][i][drugLastDoze] =
		PlayerDrugs[playerid][i][drugUsedLastTime] =
		PlayerDrugs[playerid][i][drugAddHP] =
		PlayerDrugs[playerid][i][drugOnDuty] = 0;
		for(new td = 0; td < 4; td++) TextDrawHideForPlayer(playerid, DrugEffect[td]);
	}
	return 1;
}

stock GetDrugTypeByItem(itemid)
{
	new type = -1;
	switch(itemid)
	{
		case ITEM_COCAINE: type = DRUG_COCAINE;
		case ITEM_HEROINE: type = DRUG_HEROINE;
		case ITEM_MARIJUANA: type = DRUG_MARIJUANA;
		case ITEM_MDMA: type = DRUG_MDMA;
		case ITEM_CRACK: type = DRUG_CRACK;
		case ITEM_METHAMPHETAMINE: type = DRUG_METHAMPHETAMINE;
		case ITEM_XANAX: type = DRUG_XANAX;
	}
	return type;
}

stock GetMonthNameForMobile(month)
{
	new name[12];
	switch(month)
	{
		case 1: name = "Sausio";
		case 2: name = "Vasario";
		case 3: name = "Kovo";
		case 4: name = "Balandþio";
		case 5: name = "Geguþës";
		case 6: name = "Birþelio";
		case 7: name = "Liepos";
		case 8: name = "Rugpjûèio";
		case 9: name = "Rugsëjo";
		case 10: name = "Spalio";
		case 11: name = "Lapkrièio";
		case 12: name = "Gruodþio";
	}
	return name;
}

stock SavePlayerHoldingWeapons(playerid)
{
	new
		packed[512],
		string[512],
		data[4];
	for(new i = 0; i < 13; i++)
	{
		GetPlayerWeaponData(playerid, i, data[0], data[1]);
		GetPlayerWeaponExtraData(playerid, i, data[2], data[3]);
		format(packed, sizeof packed, "%s%d|%d|%d|%d|", packed, data[0], data[1], data[2], data[3]);
	}
	mysql_format(chandler, string, sizeof string, "UPDATE `players_weapons` SET Packed = '%e' WHERE PlayerId = '%d'", packed, PlayerInfo[playerid][pId]);
	mysql_fquery(chandler, string, "WeaponsSaved");
	return 1;
}
thread(WeaponsSaved);

stock SaveContacts(playerid)
{
	// visus
	new string[1024];
	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
	{
		format(string, sizeof string, "%s%s|%d|", string, PlayerContacts[playerid][i][contactName], PlayerContacts[playerid][i][contactNumber]);
	}
	mysql_format(chandler, string, sizeof string, "UPDATE `players_contacts` SET Packed = '%e' WHERE PlayerId = '%d'", string, PlayerInfo[playerid][pId]);
	mysql_fquery(chandler, string, "ContactsSaved");
	return 1;
}
thread(ContactsSaved);

stock IsWindowOpened(vehicleid)
{
	new w[4];
	if(IsModelBike(GetVehicleModel(vehicleid))) return true;
	GetVehicleParamsCarWindows(vehicleid, w[0], w[1], w[2], w[3]);
	for(new i = 0; i < 4; i++) if(w[i] == 0) return true;
	return false;
}

stock GetNameRandomly(nameGiven[])
{
	// by f0cus
	new randomName[MAX_PLAYER_NAME],
		indexUsed[MAX_PLAYER_NAME],
		breakPoint = -1,
		randomIndex;
	for(new i = 0, len = strlen(nameGiven); i < len; i++)
	{
		if(nameGiven[i] == '_')
		{
			breakPoint = i;
			randomName[i] = '_';
			break;
		}
	}
	for(new i = 0, len = strlen(nameGiven); i < len; i++)
	{
		if(i != breakPoint)
		{
			randomIndex = randomEx((i > breakPoint ? (breakPoint+1) : (0)), (i > breakPoint ? (len) : (breakPoint)));
			while(indexUsed[randomIndex] > 0 || randomIndex == breakPoint)
			{
				randomIndex = randomEx((i > breakPoint ? (breakPoint+1) : (0)), (i > breakPoint ? (len) : (breakPoint)));
			}
			randomName[i] = nameGiven[randomIndex];
			if(i == 0 || i == breakPoint+1)	randomName[i] = toupper(randomName[i]);
			else randomName[i] = tolower(randomName[i]);
			indexUsed[randomIndex] = 1;
		}
	}
	return randomName;
}

stock randomEx(min, max)
{
    //Credits to y_less
    new rand = random(max-min)+min;
    return rand;
}

thread(SanNewsSMSAdd);


stock PlayerPhoneSMS(playerid, receiver_number, text[])
{
	new receiver = INVALID_PLAYER_ID;
	if((receiver = GetPlayerByNumber(receiver_number)) != INVALID_PLAYER_ID || receiver_number == DEFAULT_STUDIO_NUMBER)
	{
		if(receiver_number == DEFAULT_STUDIO_NUMBER)
		{	
			if(GetPlayerMoney(playerid) < 5) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, 5);
			
			new 
				string[512];

			format(string, sizeof string, "SMS iðsiøsta á San News studijà: %s", text);
			SendChatMessage(playerid, 0xE5EB49FF, string);
			
			mysql_format(chandler, string, sizeof string, "INSERT INTO `san_news_sms` (`PlayerNumber`,`Text`) VALUES ('%d','%e')", PlayerInfo[playerid][pPhoneNumber], text);
			mysql_tquery(chandler, string, "SanNewsSMSAdd");

			GivePlayerMoney(playerid, -5);

			new factionid = GetFactionArrayIndexByType(FACTION_TYPE_SAN_NEWS);
			if(factionid != -1)
			{
				FactionInfo[factionid][fBudget] += 5;
			}
		}	
		else
		{
			if(GetPlayerMoney(playerid) < 1) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, 1);
			new sender_number = PlayerInfo[playerid][pPhoneNumber],
				string[256];

			format(string, sizeof string, "SMS iðsiøsta %s: %s", GetNumberFromContacts(playerid, receiver_number), text);
			SendChatMessage(playerid, 0xD8DA92FF, string);

			if(PhoneInfo[receiver][phoneDisabled])
			{
				SendClientMessage(playerid, 0xD8DA92FF, "Telefonas yra iðjungtas, taèiau gavëjas jà perskaityti galës vëliau.");	
			}
			else
			{
				format(string, sizeof string, "SMS gauta nuo %s: %s", GetNumberFromContacts(receiver, sender_number), text);
				SendChatMessage(receiver, 0xE5EB49FF, string);
			}

			mysql_format(chandler, string, sizeof string, "INSERT INTO `players_sms` (`SenderNumber`,`ReceiverNumber`,`Text`,`Notification`) VALUES ('%d','%d','%e','%d')", sender_number, receiver_number, text, PhoneInfo[receiver][phoneDisabled] > 0 ? (1) : (0));
			mysql_fquery(chandler, string, "SMSAdded");

			GivePlayerMoney(playerid, -1);
		}
	}
	else
	{
		SendWarning(playerid, "Numeris neteisingas.");
	}
	return 1;
}
thread(SMSAdded);

stock PlayerPhoneHangup(playerid, bool:crashed = false)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	DetachPhone(playerid);
	if(PhoneInfo[playerid][phoneRinging] != INVALID_PLAYER_ID)
	{
		if(PhoneInfo[playerid][phoneCallOwner] == 0)
		{
			// jam skambina
			new callerid = PhoneInfo[playerid][phoneRinging];
			if(IsPlayerConnected(callerid))
			{
				// atnaujinam data telefone
				// skambintojui rodom, kad uzimta nes numete
				if(PhoneInfo[callerid][phoneRingType] == 0)
				{
					// skambina ne is taksofono
					PhoneTD_Hide(callerid, tmpPhone_InventoryPage[callerid]);
					PhoneTD_Show(callerid, PHONE_PAGE_CALLING);
					PlayerTextDrawSetString(callerid, Phone_Contact[callerid], GetNumberFromContacts(callerid, PlayerInfo[playerid][pPhoneNumber]));
					PlayerTextDrawSetString(callerid, Phone_CallStatus[callerid], "~r~BUSY");
				}
				else
				{
					PlayerTextDrawSetString(callerid, PayPhoneTD_Input[callerid], "BUSY");
				}

				// paciam zaidejui viska hidinam
				if(GetESCType(playerid) == ESC_TYPE_PHONE)
				{
					PhoneTD_Hide(playerid, PHONE_PAGE_CALLING);
					PhoneTD_Show(playerid, PHONE_PAGE_MAIN, GetESCType(playerid) == ESC_TYPE_PHONE ? true : false);
				}
				else
				{
					PhoneTD_Hide(playerid);
				}
				// rodom skambinotjui ir gavejui nauja info
				PhoneInfo[callerid][phoneRinging] = INVALID_PLAYER_ID;
				PhoneInfo[callerid][phoneRingingTime] = 3; // 3 sec rodom busy
				PhoneInfo[callerid][phoneCallOwner] =
				PhoneInfo[callerid][phoneRingType] = 0;
				DetachPhone(callerid);
			}
			PhoneInfo[playerid][phoneRingingTime] = 0;
			PhoneInfo[playerid][phoneRinging] = INVALID_PLAYER_ID;
		}
		else if(PhoneInfo[playerid][phoneCallOwner] == 1)
		{
			// jis skambina kazkam
			new receiverid = PhoneInfo[playerid][phoneRinging];
			if(IsPlayerConnected(receiverid))
			{
				PhoneInfo[receiverid][phoneRinging] = INVALID_PLAYER_ID;
				PhoneInfo[receiverid][phoneRingingTime] = 0;
				// updatinam gavejui
				if(GetESCType(receiverid) == ESC_TYPE_PHONE)
				{
					// sedi ragelyje
					PhoneTD_Hide(receiverid, PHONE_PAGE_CALLING);
					PhoneTD_Show(receiverid, PHONE_PAGE_MAIN, GetESCType(receiverid) == ESC_TYPE_PHONE ? true : false);
				}
				else
				{
					PhoneTD_Hide(receiverid);
				}
			}
			// updatinam skambinotjui
			if(PhoneInfo[playerid][phoneRingType] == 0)
			{
				// skambina ne is taksofono
				if(GetESCType(playerid) == ESC_TYPE_PHONE)
				{
					// sedi ragelyje
					PhoneTD_Hide(playerid, PHONE_PAGE_CALLING);
					PhoneTD_Show(playerid, PHONE_PAGE_MAIN, GetESCType(playerid) == ESC_TYPE_PHONE ? true : false);
				}
				else
				{
					PhoneTD_Hide(playerid);
				}
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DetachPhone(playerid);
			}
			else
			{
				PayPhoneTD_Hide(playerid);
			}
			PhoneInfo[playerid][phoneRinging] = INVALID_PLAYER_ID;
			PhoneInfo[playerid][phoneRingingTime] =
			PhoneInfo[playerid][phoneRingType] =
			PhoneInfo[playerid][phoneCallOwner] = 0;	
		}
	}
	else if(PhoneInfo[playerid][phoneTalkingTo] != INVALID_PLAYER_ID)
	{
		// kalbasi su kazkuo
		new receiverid = PhoneInfo[playerid][phoneTalkingTo];

		SetPlayerSpecialAction(receiverid, SPECIAL_ACTION_NONE);
		DetachPhone(receiverid);

		SendFormat(playerid, 0x80DFABFF, "Padëjote ragelá.");
		if(PhoneInfo[playerid][phoneCallOwner] > 0)
		{
			// jisai skambino, bet kitas zmogus padejo. Aisku skambintojui negali but rodomas nezinomas numeris. Bet gavejui gali but rodomas
			if(IsPlayerConnected(receiverid)) SendFormat(receiverid, 0x80DFABFF, "%s %s.", PhoneInfo[playerid][phoneNumberHidden] > 0 ? ("Neþinomas numeris") : (GetNumberFromContacts(receiverid, PhoneInfo[playerid][phoneRingType] == 0 ? PlayerInfo[playerid][pPhoneNumber] : GetPayPhoneNumber(PhoneInfo[playerid][phoneRingType]-1))), crashed ? ("nutrûko ryðys") : ("padëjo ragelá"));
		}
		else
		{
			if(IsPlayerConnected(receiverid)) SendFormat(receiverid, 0x80DFABFF, "%s %s.", GetNumberFromContacts(receiverid, PhoneInfo[playerid][phoneRingType] == 0 ? PlayerInfo[playerid][pPhoneNumber] : GetPayPhoneNumber(PhoneInfo[playerid][phoneRingType]-1)), crashed ? ("nutrûko ryðys") : ("padëjo ragelá"));
		}


		PhoneInfo[playerid][phoneTalkingTo] = INVALID_PLAYER_ID;
		PhoneInfo[playerid][phoneEstimated] = 0;
		PhoneInfo[playerid][phoneCallOwner] = INVALID_PLAYER_ID;
		if(IsPlayerConnected(receiverid))
		{
			PhoneInfo[receiverid][phoneTalkingTo] = INVALID_PLAYER_ID;
			PhoneInfo[receiverid][phoneEstimated] = 0;
			PhoneInfo[receiverid][phoneRingType] = 0;
			PhoneInfo[receiverid][phoneCallOwner] = INVALID_PLAYER_ID;
		}

		if(PhoneInfo[playerid][phoneRingType] == 0)
		{
			if(GetESCType(playerid) == ESC_TYPE_PHONE)
			{
				PhoneTD_Hide(playerid, PHONE_PAGE_CALL);
				PhoneTD_Show(playerid, PHONE_PAGE_MAIN, true);
			}
			else
			{
				PhoneTD_Hide(playerid);
			}
		}
		else
		{
			PayPhoneTD_Hide(playerid);
		}
		if(IsPlayerConnected(receiverid))
		{
			if(GetESCType(receiverid) == ESC_TYPE_PHONE)
			{
				PhoneTD_Hide(receiverid, PHONE_PAGE_CALL);
				PhoneTD_Show(receiverid, PHONE_PAGE_MAIN, true);
			}
			else
			{
				PhoneTD_Hide(receiverid);
			}
		}
	}
	return true;
}

stock PlayerPhonePickup(playerid)
{
	if(PhoneInfo[playerid][phoneRinging] != INVALID_PLAYER_ID && PhoneInfo[playerid][phoneCallOwner] == 0 && PhoneInfo[playerid][phoneTalkingTo] == INVALID_PLAYER_ID)
	{
		// jam skambina, su niekuo nekalba
		new callerid = PhoneInfo[playerid][phoneRinging];
		if(IsPlayerConnected(callerid))
		{
			// atsiliepe
			// rodom skambinotjui ir gavejui nauja info
			// atnaujinam data telefone
			PhoneInfo[playerid][phoneRingingTime] =
			PhoneInfo[callerid][phoneRingingTime] =
			PhoneInfo[playerid][phoneEstimated] =
			PhoneInfo[callerid][phoneEstimated] = 0;
			PhoneInfo[playerid][phoneTalkingTo] = callerid,
			PhoneInfo[callerid][phoneTalkingTo] = playerid;
			PhoneInfo[playerid][phoneRinging] =
			PhoneInfo[callerid][phoneRinging] = INVALID_PLAYER_ID;
			SendFormat(playerid, 0x80DFABFF, "Buvote sujungtas su %s.", PhoneInfo[callerid][phoneNumberHidden] > 0 ? ("neþinomu numeriu") : (GetNumberFromContacts(playerid, PhoneInfo[callerid][phoneRingType] == 0 ? PlayerInfo[callerid][pPhoneNumber] : GetPayPhoneNumber(PhoneInfo[callerid][phoneRingType]-1)))); // tas kur atsiliepia
			SendFormat(callerid, 0x80DFABFF, "Buvote sujungtas su %s.", GetNumberFromContacts(callerid, PlayerInfo[playerid][pPhoneNumber])); // tas kur skambina, jis negali skambint i nezinoma numeri
			// gavejui
			PhoneTD_Hide(playerid, PHONE_PAGE_CALLING);
			PlayerTextDrawSetString(playerid, Phone_Contact[playerid], PhoneInfo[callerid][phoneNumberHidden] > 0 ? ("Unknown number") : (GetNumberFromContacts(playerid, PhoneInfo[callerid][phoneRingType] == 0 ? PlayerInfo[callerid][pPhoneNumber] : GetPayPhoneNumber(PhoneInfo[callerid][phoneRingType]-1))));
			PlayerTextDrawSetString(playerid, Phone_Estimated[playerid], "00:00");
			PhoneTD_Show(playerid, PHONE_PAGE_CALL, GetESCType(playerid) != ESC_TYPE_PHONE ? false : true);
			PhoneInfo[playerid][phoneRingType] = 0;
			// skambintojui
			if(PhoneInfo[callerid][phoneRingType] == 0)
			{
				PhoneTD_Hide(callerid, PHONE_PAGE_CALLING);
				PlayerTextDrawSetString(callerid, Phone_Contact[callerid], GetNumberFromContacts(callerid, PlayerInfo[playerid][pPhoneNumber]));
				PlayerTextDrawSetString(callerid, Phone_Estimated[callerid], "00:00");
				PhoneTD_Show(callerid, PHONE_PAGE_CALL, GetESCType(callerid) != ESC_TYPE_PHONE ? false : true);
			}
			else
			{
				new string[56];
				format(string, sizeof string, "%d TALK", PlayerInfo[playerid][pPhoneNumber]);
				PlayerTextDrawSetString(callerid, PayPhoneTD_Input[callerid], string);
			}
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			AttachPhone(playerid);
			log_init(true);
			log_set_table("logs_phones");
			log_set_keys("`OwnerId`,`OwnerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
			log_set_values("'%d','%e','%d','%e','Atsiliepe'", LogPlayerId(callerid), LogPlayerName(callerid), LogPlayerId(playerid), LogPlayerName(playerid));
			log_commit();
			return true;
		}
	}
	return false;
}
stock PlayerPayPhoneCall(playerid, payphone, number)
{
	if(InArray(number, 911))
	{
		// kazkuriam service paskambino
		switch(number)
		{
			case 911:
			{
				// policija / fd
				SendFormat(playerid, 0xEEEEEEFF, "Dispeèerinë: su kuo norite bûti sujungtas? Policija, medikais ar abu?");
				PlayerTextDrawSetString(playerid, PayPhoneTD_Input[playerid], "911 TALK");
			}
		}
		PhoneInfo[playerid][phoneEstimated] = 0;
		PhoneInfo[playerid][phoneTalkingTo] = number;
		PhoneInfo[playerid][phoneRinging] = INVALID_PLAYER_ID;
		PhoneInfo[playerid][phoneCallOwner] = 1;
		PhoneInfo[playerid][phoneRingType] = payphone;
	}
	else
	{
		new receiverid = INVALID_PLAYER_ID;
		if((receiverid = PhoneInfo[playerid][phoneRinging] = GetPlayerByNumber(number)) != INVALID_PLAYER_ID && receiverid != playerid && PhoneInfo[receiverid][phoneDisabled] <= 0 && IsItemInPlayerInventory(receiverid, ITEM_PHONE))
		{
			if(	(PhoneInfo[receiverid][phoneRinging] != INVALID_PLAYER_ID || PhoneInfo[receiverid][phoneTalkingTo] != INVALID_PLAYER_ID) ||
				(GetESCType(receiverid) != ESC_TYPE_PHONE && GetESCType(receiverid) != ESC_TYPE_NONE) ||
				(tmpEditing_Component_DMV[playerid] == EDITING_TYPE_DYNAMIC_FURNITURE || tmpEditing_Component_DMV[playerid] == EDITING_TYPE_DYNAMIC_ATM || tmpEditing_Component_DMV[playerid] == EDITING_TYPE_DYNAMIC_PAYPHONE))
			{
				// zaidejas jau kalba su kazkuo arba naudojas kazkokia sistema textdraw
				receiverid = PhoneInfo[playerid][phoneRinging] = INVALID_PLAYER_ID;
			}
			else
			{
				PhoneInfo[playerid][phoneTalkingTo] =
				PhoneInfo[receiverid][phoneTalkingTo] = INVALID_PLAYER_ID;
				PhoneInfo[receiverid][phoneRinging] = playerid;
				PhoneInfo[receiverid][phoneCallOwner] = 0;
				PhoneInfo[playerid][phoneRingType] = payphone;
				PhoneInfo[playerid][phoneCallOwner] = 1;
				SendFormat(receiverid, 0x8FB7C1FF, "Norëdami atsiliepti /p(ickup) arba numesti ragelá /h(angup), naudokite /phone [ið taksofono]");
				if(PhoneInfo[playerid][phoneMuted] <= 0)
				{
					PlayerPlaySound(receiverid, 3600, 0, 0, 0);
					rp_ame(receiverid, "telefonas skamba", 8000);
				}
				PhoneTD_Hide(receiverid, tmpPhone_InventoryPage[receiverid]);
				PhoneTD_Show(receiverid, PHONE_PAGE_CALLING);
				PlayerTextDrawSetString(receiverid, Phone_Contact[receiverid], (PhoneInfo[playerid][phoneNumberHidden] > 0 ? ("Unknown number") : (GetNumberFromContacts(receiverid, PlayerInfo[playerid][pPhoneNumber]))));
				PlayerTextDrawSetString(receiverid, Phone_CallStatus[receiverid], "IS CALLING");
			}
		}
		PhoneInfo[playerid][phoneRingingTime] = receiverid == INVALID_PLAYER_ID ? 3 : 8; // jei skambino blogam, 3 sek rodysim BUSY, jei normaliam numeriui, ji 8 sekundes bandom pasiekt.
		// gali judet
		PlayerTextDrawSetString(playerid, PayPhoneTD_Input[playerid], (receiverid == INVALID_PLAYER_ID ? ("BUSY") : ("CALLING...")));
	}
	return true;
}

stock PlayerPhoneCall(playerid, number)
{
	/*
	 * Funkcija, kai zaidejas pradeda skambinti i kazkoki numeri.
	 * playerid - zaidejas, kuris skambina
	 * number - numeris, i kuri zaidejas skambina
	 */
	// keiciam ekrano data
	if(InArray(number, 911, DEFAULT_MECHANIC_NUMBER, DEFAULT_TAXI_NUMBER))
	{
		// kazkuriam service paskambino
		switch(number)
		{
			case 911:
			{
				// policija
				SendFormat(playerid, 0xEEEEEEFF, "Dispeèerinë: su kuo norite bûti sujungtas? Policija, medikais ar abu?");
			}
			case DEFAULT_MECHANIC_NUMBER:
			{
				SendFormat(playerid, 0xEEEEEEFF, "Dispeèerinë: buvote sujungtas su mechanikø servizu:");
			}
			case DEFAULT_TAXI_NUMBER:
			{
				SendFormat(playerid, 0xEEEEEEFF, "Dispeèerinë: buvote sujungtas su taksi:");
			}
		}
		PlayerTextDrawSetString(playerid, Phone_Contact[playerid], GetNumberFromContacts(playerid, number));
		PlayerTextDrawSetString(playerid, Phone_CallStatus[playerid], "CONNECTED");
		PhoneInfo[playerid][phoneTalkingTo] = number;
		PhoneInfo[playerid][phoneRinging] = INVALID_PLAYER_ID;
		PhoneInfo[playerid][phoneCallOwner] = 1;
		PhoneInfo[playerid][phoneRingType] =
		PhoneInfo[playerid][phoneEstimated] =
		PhoneInfo[playerid][phoneRingingTime] = 0;
		PhoneTD_Hide(playerid, tmpPhone_InventoryPage[playerid]);
		PhoneTD_Show(playerid, PHONE_PAGE_CALLING);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		AttachPhone(playerid);
	}
	else
	{
		new receiverid = INVALID_PLAYER_ID;
		if(((receiverid = PhoneInfo[playerid][phoneRinging] = GetPlayerByNumber(number)) != INVALID_PLAYER_ID) && number > 0 && receiverid != playerid && PhoneInfo[receiverid][phoneDisabled] <= 0 && IsItemInPlayerInventory(receiverid, ITEM_PHONE))
		{
			if(	(PlayerExtra[playerid][peDeath] > 0) ||
				(PhoneInfo[receiverid][phoneRinging] != INVALID_PLAYER_ID || PhoneInfo[receiverid][phoneTalkingTo] != INVALID_PLAYER_ID) ||
				(GetESCType(receiverid) != ESC_TYPE_PHONE && GetESCType(receiverid) != ESC_TYPE_NONE) ||
				(tmpEditing_Component_DMV[playerid] == EDITING_TYPE_DYNAMIC_FURNITURE || tmpEditing_Component_DMV[playerid] == EDITING_TYPE_DYNAMIC_ATM || tmpEditing_Component_DMV[playerid] == EDITING_TYPE_DYNAMIC_PAYPHONE))
			{
				// zaidejas jau kalba su kazkuo arba naudojas kazkokia sistema textdraw
				receiverid = PhoneInfo[playerid][phoneRinging] = INVALID_PLAYER_ID;
			}
			else
			{
				PhoneInfo[playerid][phoneTalkingTo] =
				PhoneInfo[receiverid][phoneTalkingTo] = INVALID_PLAYER_ID;
				PhoneInfo[receiverid][phoneRinging] = playerid;
				PhoneInfo[receiverid][phoneCallOwner] = 0;
				PhoneInfo[playerid][phoneRingType] = 0;
				PhoneInfo[playerid][phoneCallOwner] = 1;
				SendFormat(receiverid, 0x8FB7C1FF, "Norëdami atsiliepti /p(ickup) arba numesti ragelá /h(angup), naudokite /phone [numeris: %s]", (PhoneInfo[playerid][phoneNumberHidden] > 0 ? ("Unknown number") : (GetNumberFromContacts(receiverid, PlayerInfo[playerid][pPhoneNumber]))));
				if(PhoneInfo[playerid][phoneMuted] <= 0)
				{
					PlayerPlaySound(receiverid, 3600, 0, 0, 0);
					rp_ame(receiverid, "telefonas skamba", 8000);
				}
				PhoneTD_Hide(receiverid, tmpPhone_InventoryPage[receiverid]);
				PhoneTD_Show(receiverid, PHONE_PAGE_CALLING);
				PlayerTextDrawSetString(receiverid, Phone_Contact[receiverid], (PhoneInfo[playerid][phoneNumberHidden] > 0 ? ("Unknown number") : (GetNumberFromContacts(receiverid, PlayerInfo[playerid][pPhoneNumber]))));
				PlayerTextDrawSetString(receiverid, Phone_CallStatus[receiverid], "IS CALLING");
			}
		}
		PhoneInfo[playerid][phoneRingingTime] = receiverid == INVALID_PLAYER_ID ? 3 : 8; // jei skambino blogam, 3 sek rodysim BUSY, jei normaliam numeriui, ji 8 sekundes bandom pasiekt.
		PlayerTextDrawSetString(playerid, Phone_Contact[playerid], GetNumberFromContacts(playerid, number));
		PlayerTextDrawSetString(playerid, Phone_CallStatus[playerid], (receiverid == INVALID_PLAYER_ID ? ("~r~BUSY") : ("CALLING...")));
		PhoneTD_Hide(playerid, tmpPhone_InventoryPage[playerid]);
		PhoneTD_Show(playerid, PHONE_PAGE_CALLING);
		if(receiverid != INVALID_PLAYER_ID)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			AttachPhone(playerid);
		}
	}
	// gali judet
	HideESCTextdraw(playerid);
	CancelSelectTextDraw(playerid);
	return true;
}

stock GetPlayerByUserId(userid, skip = -1)
{
	foreach(new playerid : Player)
	{
		if(skip != -1 && playerid != skip)
		{
			if(PlayerInfo[playerid][pUserId] == userid) return playerid;
		}
	}
	return INVALID_PLAYER_ID;
}

stock GetPlayerByNumber(number)
{
	foreach(new playerid : Player)
	{
		if(PlayerInfo[playerid][pPhoneNumber] == number)
		{
			return playerid;
		}
	}
	return INVALID_PLAYER_ID;
}

stock IsValidPhoneNumber(number)
{
	foreach(new playerid : Player)
	{
		if(PlayerInfo[playerid][pPhoneNumber] == number)
		{
			return true;
		}
	}
	return false;
}

stock IsNumberInContacts(playerid, number)
{
	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
	{
		if(PlayerContacts[playerid][contactNumber][i] == number)
		{
			return true;
		}
	}
	return false;
}

stock GetNumberFromContacts(playerid, number)
{
	/*
	 * Funkcija, istraukianti kontakto pavadinima is adresu knygos pagal numeri. Jei kontakto nera - rodomas numeris.
	 * playerid - is kurio zaidejo kontaktu traukti
	 * number - numeris kurio ieskoma kontaktuose
	 */
	new contact[24];
	format(contact, sizeof contact, "%d", number);
	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
	{
		if(PlayerContacts[playerid][i][contactNumber] == number)
		{
			format(contact, sizeof contact, PlayerContacts[playerid][i][contactName]);
			break;
		}
	}
	return contact;
}

stock PhoneTD_Show(playerid, menu = 0, bool:forceesc = true)
{
	switch(menu)
	{
		case PHONE_PAGE_MAIN:
		{
			TextDrawShowForPlayer(playerid, Phone_TopBorder);
			TextDrawShowForPlayer(playerid, Phone_BottomBorder);
			TextDrawShowForPlayer(playerid, Phone_BackgroundFill);
			TextDrawShowForPlayer(playerid, Phone_MainBackground);
			TextDrawShowForPlayer(playerid, Phone_TopBackground);
			TextDrawShowForPlayer(playerid, Phone_BottomBackground);
			TextDrawShowForPlayer(playerid, Phone_Speaker);
			TextDrawShowForPlayer(playerid, Phone_TopBarBackground);
			PlayerTextDrawShow(playerid, Phone_Service[playerid]);
			PlayerTextDrawShow(playerid, Phone_Time[playerid]);
			PlayerTextDrawShow(playerid, Phone_Battery[playerid]);
			for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, Phone_Signal[i]);
			TextDrawShowForPlayer(playerid, Phone_BottomDividers);
			for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, Phone_BottomMenu[i]);
			TextDrawShowForPlayer(playerid, Phone_Accept1);
			TextDrawShowForPlayer(playerid, Phone_Accept2);
			TextDrawShowForPlayer(playerid, Phone_Decline1);
			TextDrawShowForPlayer(playerid, Phone_Decline2);
			TextDrawShowForPlayer(playerid, Phone_Button);
			for(new i = 0; i < 4; i++) TextDrawShowForPlayer(playerid, Phone_Menu[i]);
			for(new i = 0; i < 4; i++) TextDrawShowForPlayer(playerid, Phone_MenuText[i]);
			SelectTextDraw(playerid, 0xBBBBBBFF);
		}
		case PHONE_PAGE_DIAL:
		{
			TextDrawShowForPlayer(playerid, Phone_TopBorder);
			TextDrawShowForPlayer(playerid, Phone_BottomBorder);
			TextDrawShowForPlayer(playerid, Phone_BackgroundFill);
			TextDrawShowForPlayer(playerid, Phone_TopBackground);
			TextDrawShowForPlayer(playerid, Phone_BottomBackground);
			TextDrawShowForPlayer(playerid, Phone_Speaker);
			TextDrawShowForPlayer(playerid, Phone_TopBarBackground);
			PlayerTextDrawShow(playerid, Phone_Service[playerid]);
			PlayerTextDrawShow(playerid, Phone_Time[playerid]);
			PlayerTextDrawShow(playerid, Phone_Battery[playerid]);
			for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, Phone_Signal[i]);
			TextDrawShowForPlayer(playerid, Phone_BottomDividers);
			for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, Phone_BottomMenu[i]);
			TextDrawShowForPlayer(playerid, Phone_Accept1);
			TextDrawShowForPlayer(playerid, Phone_Accept2);
			TextDrawShowForPlayer(playerid, Phone_Decline1);
			TextDrawShowForPlayer(playerid, Phone_Decline2);
			TextDrawShowForPlayer(playerid, Phone_Button);
			TextDrawShowForPlayer(playerid, Phone_DialTopBackground);
			TextDrawShowForPlayer(playerid, Phone_DialBottomBackground);
			for(new i = 0; i < 12; i++) TextDrawShowForPlayer(playerid, Phone_Numbers[i]);
			PlayerTextDrawShow(playerid, Phone_NumberLine[playerid]);
			for(new i = 0; i < 4; i++) TextDrawShowForPlayer(playerid, Phone_NumbersRow[i]);
			SelectTextDraw(playerid, 0x7E8A95FF);
		}
		case PHONE_PAGE_CALLING:
		{
			TextDrawShowForPlayer(playerid, Phone_TopBorder);
			TextDrawShowForPlayer(playerid, Phone_BottomBorder);
			TextDrawShowForPlayer(playerid, Phone_BackgroundFill);
			TextDrawShowForPlayer(playerid, Phone_MainBackground);
			TextDrawShowForPlayer(playerid, Phone_TopBackground);
			TextDrawShowForPlayer(playerid, Phone_BottomBackground);
			TextDrawShowForPlayer(playerid, Phone_Speaker);
			TextDrawShowForPlayer(playerid, Phone_TopBarBackground);
			PlayerTextDrawShow(playerid, Phone_Service[playerid]);
			PlayerTextDrawShow(playerid, Phone_Time[playerid]);
			PlayerTextDrawShow(playerid, Phone_Battery[playerid]);
			for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, Phone_Signal[i]);
			TextDrawShowForPlayer(playerid, Phone_BottomDividers);
			for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, Phone_BottomMenu[i]);
			TextDrawShowForPlayer(playerid, Phone_Accept1);
			TextDrawShowForPlayer(playerid, Phone_Accept2);
			TextDrawShowForPlayer(playerid, Phone_Decline1);
			TextDrawShowForPlayer(playerid, Phone_Decline2);
			TextDrawShowForPlayer(playerid, Phone_DialTopBackground);
			TextDrawShowForPlayer(playerid, Phone_DialBottomBackground);
			TextDrawShowForPlayer(playerid, Phone_Button);
			TextDrawShowForPlayer(playerid, Phone_ContactPicBackground);
			TextDrawShowForPlayer(playerid, Phone_ContactPic);
			PlayerTextDrawShow(playerid, Phone_Contact[playerid]);
			PlayerTextDrawShow(playerid, Phone_CallStatus[playerid]);
		}
		case PHONE_PAGE_CALL:
		{
			TextDrawShowForPlayer(playerid, Phone_TopBorder);
			TextDrawShowForPlayer(playerid, Phone_BottomBorder);
			TextDrawShowForPlayer(playerid, Phone_BackgroundFill);
			TextDrawShowForPlayer(playerid, Phone_MainBackground);
			TextDrawShowForPlayer(playerid, Phone_TopBackground);
			TextDrawShowForPlayer(playerid, Phone_BottomBackground);
			TextDrawShowForPlayer(playerid, Phone_Speaker);
			TextDrawShowForPlayer(playerid, Phone_TopBarBackground);
			PlayerTextDrawShow(playerid, Phone_Service[playerid]);
			PlayerTextDrawShow(playerid, Phone_Time[playerid]);
			PlayerTextDrawShow(playerid, Phone_Battery[playerid]);
			for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, Phone_Signal[i]);
			TextDrawShowForPlayer(playerid, Phone_BottomDividers);
			for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, Phone_BottomMenu[i]);
			TextDrawShowForPlayer(playerid, Phone_Accept1);
			TextDrawShowForPlayer(playerid, Phone_Accept2);
			TextDrawShowForPlayer(playerid, Phone_Decline1);
			TextDrawShowForPlayer(playerid, Phone_Decline2);
			TextDrawShowForPlayer(playerid, Phone_Button);
			TextDrawShowForPlayer(playerid, Phone_DialTopBackground);
			TextDrawShowForPlayer(playerid, Phone_DialBottomBackground);
			PlayerTextDrawShow(playerid, Phone_Estimated[playerid]);
			TextDrawShowForPlayer(playerid, Phone_ContactPicBackground);
			TextDrawShowForPlayer(playerid, Phone_ContactPic);
			PlayerTextDrawShow(playerid, Phone_Contact[playerid]);
			TextDrawShowForPlayer(playerid, Phone_SpeakerText);
			TextDrawShowForPlayer(playerid, Phone_SpeakerTog);
		}
		default:
		{
			// viska
			TextDrawShowForPlayer(playerid, Phone_TopBorder);
			TextDrawShowForPlayer(playerid, Phone_BottomBorder);
			TextDrawShowForPlayer(playerid, Phone_BackgroundFill);
			TextDrawShowForPlayer(playerid, Phone_MainBackground);
			TextDrawShowForPlayer(playerid, Phone_TopBackground);
			TextDrawShowForPlayer(playerid, Phone_BottomBackground);
			TextDrawShowForPlayer(playerid, Phone_Speaker);
			TextDrawShowForPlayer(playerid, Phone_TopBarBackground);
			PlayerTextDrawShow(playerid, Phone_Service[playerid]);
			PlayerTextDrawShow(playerid, Phone_Time[playerid]);
			PlayerTextDrawShow(playerid, Phone_Battery[playerid]);
			for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, Phone_Signal[i]);
			TextDrawShowForPlayer(playerid, Phone_BottomDividers);
			for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, Phone_BottomMenu[i]);
			TextDrawShowForPlayer(playerid, Phone_Accept1);
			TextDrawShowForPlayer(playerid, Phone_Accept2);
			TextDrawShowForPlayer(playerid, Phone_Decline1);
			TextDrawShowForPlayer(playerid, Phone_Decline2);
			TextDrawShowForPlayer(playerid, Phone_Button);
			for(new i = 0; i < 4; i++) TextDrawShowForPlayer(playerid, Phone_Menu[i]);
			for(new i = 0; i < 4; i++) TextDrawShowForPlayer(playerid, Phone_MenuText[i]);
			TextDrawShowForPlayer(playerid, Phone_DialTopBackground);
			TextDrawShowForPlayer(playerid, Phone_DialBottomBackground);
			for(new i = 0; i < 12; i++) TextDrawShowForPlayer(playerid, Phone_Numbers[i]);
			PlayerTextDrawShow(playerid, Phone_NumberLine[playerid]);
			for(new i = 0; i < 4; i++) TextDrawShowForPlayer(playerid, Phone_NumbersRow[i]);
			PlayerTextDrawShow(playerid, Phone_Estimated[playerid]);
			TextDrawShowForPlayer(playerid, Phone_ContactPicBackground);
			TextDrawShowForPlayer(playerid, Phone_ContactPic);
			PlayerTextDrawShow(playerid, Phone_Contact[playerid]);
			TextDrawShowForPlayer(playerid, Phone_SpeakerText);
			TextDrawShowForPlayer(playerid, Phone_Speaker);
			PlayerTextDrawShow(playerid, Phone_CallStatus[playerid]);
			SelectTextDraw(playerid, 0xBBBBBBFF);
		}
	}
	Speedo_Hide(playerid, .destroy = false);
	tmpPhone_InventoryPage[playerid] = menu;
	if(forceesc) ShowESCTextdraw(playerid, ESC_TYPE_PHONE);
	return 1;
}

stock PhoneTD_Hide(playerid, menu = 0)
{
	switch(menu)
	{
		case PHONE_PAGE_MAIN:
		{
			TextDrawHideForPlayer(playerid, Phone_MainBackground);
			for(new i = 0; i < 4; i++) TextDrawHideForPlayer(playerid, Phone_Menu[i]);
			for(new i = 0; i < 4; i++) TextDrawHideForPlayer(playerid, Phone_MenuText[i]);
		}
		case PHONE_PAGE_DIAL:
		{
			TextDrawHideForPlayer(playerid, Phone_DialTopBackground);
			TextDrawHideForPlayer(playerid, Phone_DialBottomBackground);
			for(new i = 0; i < 12; i++) TextDrawHideForPlayer(playerid, Phone_Numbers[i]);
			PlayerTextDrawHide(playerid, Phone_NumberLine[playerid]);
			for(new i = 0; i < 4; i++) TextDrawHideForPlayer(playerid, Phone_NumbersRow[i]);
		}
		case PHONE_PAGE_CALL:
		{
			PlayerTextDrawHide(playerid, Phone_Estimated[playerid]);
			TextDrawHideForPlayer(playerid, Phone_ContactPicBackground);
			TextDrawHideForPlayer(playerid, Phone_ContactPic);
			PlayerTextDrawHide(playerid, Phone_Contact[playerid]);
			TextDrawHideForPlayer(playerid, Phone_SpeakerText);
			TextDrawHideForPlayer(playerid, Phone_SpeakerTog);
			TextDrawHideForPlayer(playerid, Phone_DialTopBackground);
			TextDrawHideForPlayer(playerid, Phone_DialBottomBackground);
		}
		case PHONE_PAGE_CALLING:
		{
			TextDrawHideForPlayer(playerid, Phone_ContactPicBackground);
			TextDrawHideForPlayer(playerid, Phone_ContactPic);
			PlayerTextDrawHide(playerid, Phone_Contact[playerid]);
			PlayerTextDrawHide(playerid, Phone_CallStatus[playerid]);
			TextDrawHideForPlayer(playerid, Phone_DialTopBackground);
			TextDrawHideForPlayer(playerid, Phone_DialBottomBackground);
			format(tmpPassword[playerid], 1, "");
		}
		default:
		{
			// viska
			TextDrawHideForPlayer(playerid, Phone_TopBorder);
			TextDrawHideForPlayer(playerid, Phone_BottomBorder);
			TextDrawHideForPlayer(playerid, Phone_BackgroundFill);
			TextDrawHideForPlayer(playerid, Phone_MainBackground);
			TextDrawHideForPlayer(playerid, Phone_TopBackground);
			TextDrawHideForPlayer(playerid, Phone_BottomBackground);
			TextDrawHideForPlayer(playerid, Phone_Speaker);
			TextDrawHideForPlayer(playerid, Phone_TopBarBackground);
			PlayerTextDrawHide(playerid, Phone_Service[playerid]);
			PlayerTextDrawHide(playerid, Phone_Time[playerid]);
			PlayerTextDrawHide(playerid, Phone_Battery[playerid]);
			for(new i = 0; i < 3; i++) TextDrawHideForPlayer(playerid, Phone_Signal[i]);
			TextDrawHideForPlayer(playerid, Phone_BottomDividers);
			for(new i = 0; i < 3; i++) TextDrawHideForPlayer(playerid, Phone_BottomMenu[i]);
			TextDrawHideForPlayer(playerid, Phone_Accept1);
			TextDrawHideForPlayer(playerid, Phone_Accept2);
			TextDrawHideForPlayer(playerid, Phone_Decline1);
			TextDrawHideForPlayer(playerid, Phone_Decline2);
			TextDrawHideForPlayer(playerid, Phone_Button);
			for(new i = 0; i < 4; i++) TextDrawHideForPlayer(playerid, Phone_Menu[i]);
			for(new i = 0; i < 4; i++) TextDrawHideForPlayer(playerid, Phone_MenuText[i]);
			TextDrawHideForPlayer(playerid, Phone_DialTopBackground);
			TextDrawHideForPlayer(playerid, Phone_DialBottomBackground);
			for(new i = 0; i < 12; i++) TextDrawHideForPlayer(playerid, Phone_Numbers[i]);
			PlayerTextDrawHide(playerid, Phone_NumberLine[playerid]);
			for(new i = 0; i < 4; i++) TextDrawHideForPlayer(playerid, Phone_NumbersRow[i]);
			PlayerTextDrawHide(playerid, Phone_Estimated[playerid]);
			TextDrawHideForPlayer(playerid, Phone_ContactPicBackground);
			TextDrawHideForPlayer(playerid, Phone_ContactPic);
			PlayerTextDrawHide(playerid, Phone_Contact[playerid]);
			TextDrawHideForPlayer(playerid, Phone_SpeakerText);
			TextDrawHideForPlayer(playerid, Phone_SpeakerTog);
			PlayerTextDrawHide(playerid, Phone_CallStatus[playerid]);
			tmpPhone_InventoryPage[playerid] = 0;

			(GetPlayerVehicleSeat(playerid) == 0) && Speedo_Show(playerid);
			CancelSelectTextDraw(playerid);
		}
	}
	return 1;
}

stock halt(seconds)
{
	new _newTime[4], _oldTime[4];
	gettime(_oldTime[0], _oldTime[1], _oldTime[2]);
	_oldTime[3] = _oldTime[2] + (_oldTime[1] * 60) + (_oldTime[0] * 600);
	while(_newTime[3] != (_oldTime[3] + seconds))
	{
		gettime(_newTime[0], _newTime[1], _newTime[2]);
		_newTime[3] = _newTime[2] + (_newTime[1] * 60) + (_newTime[0] * 600);
	}
}

stock UpdateWaresOrderStatus(business, status)
{
	new string[126];
	mysql_format(chandler, string, sizeof string, "UPDATE `business_orders` SET Status = '%d' WHERE BusinessId = '%d'", status, business);
	mysql_fquery(chandler, string, "BusinessUpdated");
	return 1;
}

stock Float:floatrand(Float:min, Float:max)
{
	new imin = floatround(min);
	return floatdiv(float(random((floatround(max)-imin)*100)+(imin*100)),100.0);
}

stock DMV_Show(playerid, model, type[], txd[])
{
	new string[86];
	format(string, sizeof string, "%s~n~~n~~n~~n~~n~~n~~n~~n~%s", strtoupper(GetModelName(model)), type);
	PlayerTextDrawSetPreviewModel(playerid, DMV_CarModel[playerid], model);
	PlayerTextDrawSetString(playerid, DMV_InfoLeft[playerid], string);
	PlayerTextDrawSetString(playerid, DMV_LicenseModel[playerid], txd);
	TextDrawShowForPlayer(playerid, DMV_BgMain);
	TextDrawShowForPlayer(playerid, DMV_BgLeft);
	TextDrawShowForPlayer(playerid, DMV_BgRight);
	TextDrawShowForPlayer(playerid, DMV_NamesLeft);
	PlayerTextDrawShow(playerid, DMV_CarModel[playerid]);
	PlayerTextDrawShow(playerid, DMV_LicenseModel[playerid]);
	PlayerTextDrawShow(playerid, DMV_InfoLeft[playerid]);
	TextDrawShowForPlayer(playerid, DMV_Logo);
	TextDrawShowForPlayer(playerid, DMV_LogoEffect);
	TextDrawShowForPlayer(playerid, DMV_NamesRight);
	TextDrawShowForPlayer(playerid, DMV_InfoRight);
	TextDrawShowForPlayer(playerid, DMV_StartBg);
	TextDrawShowForPlayer(playerid, DMV_Start);
	ShowESCTextdraw(playerid, ESC_TYPE_DMV);
	SelectTextDraw(playerid, 0xFFFFFFFF);
	return 1;
}

stock DMV_Hide(playerid)
{
	TextDrawHideForPlayer(playerid, DMV_BgMain);
	TextDrawHideForPlayer(playerid, DMV_BgLeft);
	TextDrawHideForPlayer(playerid, DMV_BgRight);
	PlayerTextDrawHide(playerid, DMV_CarModel[playerid]);
	PlayerTextDrawHide(playerid, DMV_LicenseModel[playerid]);
	PlayerTextDrawHide(playerid, DMV_InfoLeft[playerid]);
	TextDrawHideForPlayer(playerid, DMV_NamesLeft);
	TextDrawHideForPlayer(playerid, DMV_Logo);
	TextDrawHideForPlayer(playerid, DMV_LogoEffect);
	TextDrawHideForPlayer(playerid, DMV_NamesRight);
	TextDrawHideForPlayer(playerid, DMV_InfoRight);
	TextDrawHideForPlayer(playerid, DMV_StartBg);
	TextDrawHideForPlayer(playerid, DMV_Start);
	return 1;
}

stock InArray(value, ...)
{
	for(new i = 1, j = numargs(); i < j; i++) if(value == getarg(i)) return true;
	return false;
}

stock IsBusinessWaresInOrder(businessid)
{
	new bool:return_value = false,
		string[86];
	mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `business_orders` WHERE BusinessId = '%d' AND Status >= '1'", BusinessInfo[businessid][bId]);
	new Cache:result = mysql_query(chandler, string, true);
	cache_set_active(result);
	if(cache_num_rows()) return_value = true;
	cache_delete(result);
	return return_value;
}

stock GetAvailableWareMinPrice(itemid)
{
	for(new i = 0; i < MAX_AVAILABLE_WARES; i++)
	{
		if(AvailableWares[i][awItem] == itemid) return AvailableWares[i][awMinPrice];
	}
	return 0;
}

stock IntegerSwitch(&value_1, &value_2)
{
    #emit LREF.S.PRI value_1
    #emit LREF.S.ALT value_2

    #emit SREF.S.PRI value_2
    #emit SREF.S.ALT value_1
}

stock GetPlayerIBAN(id) return 1000000000+id;

stock GetFreeWareSlotInBusiness(businessid)
{
	for(new i = 0; i < MAX_BUSINESS_WARES; i++)
	{
		if(BusinessWares[businessid][i][bWareId] == 0)
		{
			return i;
		}
	}
	return -1;
}

stock IsWareInBusinessUsage(businessid, itemid)
{
	for(new i = 0; i < MAX_BUSINESS_WARES; i++)
	{
		if(BusinessWares[businessid][i][bWareId] == itemid) return true;
	}
	return false;
}

stock GetPlayerMaxHealth(playerid)
{
	#pragma unused playerid
	return 100;
}

stock IsModelInSalon(salonitter, model)
{
	foreach(new sell : SellVehicle) if(SellVehicleData[sell][sellvehicleModel] == model && SellVehicleData[sell][sellvehicleSalon] == SalonData[salonitter][salonId]) return true;
	return false;
}

stock GetPlayerMaskNumber(playerid)
{
	return PlayerInfo[playerid][pId] + DEFAULT_MASK_NUMBER;
}

stock sscanf_mask(source[], &playerid)
{
	if(IsNumeric(source))
	{
		new number = strval(source);
		if(number >= DEFAULT_MASK_NUMBER)
		{
			foreach(new receiverid : Player)
			{
				if(number == GetPlayerMaskNumber(receiverid))
				{
					playerid = receiverid;
					return true;
				}
			}
		}
	}
	new sscanf_value;
	sscanf(source, "u", sscanf_value);
	playerid = sscanf_value;
	return true;
}

stock IsNumeric(const string[]) // Mike
{
	for(new i = 0, j = strlen(string); i < j; i++) if(string[i] > '9' || string[i] < '0') return false;
	return true;
}

stock CountHouseFurniture(id)
{
	new count;
	foreach(new i : HFurniture) if(hFurnitureInfo[i][hfOwner] == id) count++;
	return count;
}

stock CountBusinessFurniture(id)
{
	new count;
	foreach(new i : BFurniture) if(bFurnitureInfo[i][bfOwner] == id) count++;
	return count;
}

stock CountGarageFurniture(id)
{
	new count;
	foreach(new i : GFurniture) if(gFurnitureInfo[i][gfOwner] == id) count++;
	return count;
}

stock ShowPlayerATM(playerid, atmid)
{
	for(new i = 0; i < 8; i++)
	{
		if(i < 4)
		{
			if((ATMs[atmid][atmCanDeposit] == 1 && i == 2) || (i != 2))
			{
				TextDrawShowForPlayer(playerid, ATM_Action[i]);
				TextDrawShowForPlayer(playerid, ATM_ActionName[i]);
				TextDrawShowForPlayer(playerid, ATM_Effect1[i]);
				TextDrawShowForPlayer(playerid, ATM_Effect2[i]);
			}
		}
		if(i < 2)
		{
			TextDrawShowForPlayer(playerid, ATM_Camera[i]);
		}
		TextDrawShowForPlayer(playerid, ATM_Button[i]);
	}
	TextDrawShowForPlayer(playerid, ATM_Background);
	TextDrawShowForPlayer(playerid, ATM_Screen);
	TextDrawShowForPlayer(playerid, ATM_Name);
	TextDrawShowForPlayer(playerid, ATM_Line);
	TextDrawShowForPlayer(playerid, ATM_CurrentAction);
	return 1;
}

stock HidePlayerATM(playerid)
{
	for(new i = 0; i < 8; i++)
	{
		if(i < 4)
		{
			TextDrawHideForPlayer(playerid, ATM_Action[i]);
			TextDrawHideForPlayer(playerid, ATM_ActionName[i]);
			TextDrawHideForPlayer(playerid, ATM_Effect1[i]);
			TextDrawHideForPlayer(playerid, ATM_Effect2[i]);
		}
		if(i < 2)
		{
			TextDrawHideForPlayer(playerid, ATM_Camera[i]);
		}
		TextDrawHideForPlayer(playerid, ATM_Button[i]);
	}
	TextDrawHideForPlayer(playerid, ATM_Background);
	TextDrawHideForPlayer(playerid, ATM_Screen);
	TextDrawHideForPlayer(playerid, ATM_Name);
	TextDrawHideForPlayer(playerid, ATM_Line);
	TextDrawHideForPlayer(playerid, ATM_CurrentAction);
	return 1;
}

stock ShowPlayerPhoneContacts(playerid)
{
	ShowPlayerDialog(playerid, DIALOG_PHONE_CONTACTS_MAIN, DIALOG_STYLE_LIST, "Kontaktai", "Perþiûrëti visus\nPridëti naujà", "Tæsti", "Atðaukti");
	return 1;
}

stock ShowPlayerPhoneSMSText(playerid)
{
	ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_NEW_TEXT, DIALOG_STYLE_INPUT, "Nauja þinutë", "{FFFFFF}Áveskite þinutës tekstà.", "Tæsti", "Atðaukti");
	return 1;
}

stock ShowPlayerPhoneSMS(playerid)
{
	ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_MAIN, DIALOG_STYLE_LIST, "SMS", "Gautos\nIðsiøstos\nKurti naujà", "Tæsti", "Atðaukti");
	return 1;
}

stock ShowPlayerPhoneOptions(playerid)
{
	new string[56];
	format(string, sizeof string, "%sjungti garsà\n%sjungti telefonà", PhoneInfo[playerid][phoneMuted] > 0 ? ("Á") : ("Ið"), PhoneInfo[playerid][phoneDisabled] > 0 ? ("Á") : ("Ið"));
	ShowPlayerDialog(playerid, DIALOG_PHONE_OPTIONS_MAIN, DIALOG_STYLE_LIST, "Nustatymai", string, "Tæsti", "Atðaukti");
	return 1;
}

stock GetClotheName(modelid)
{
	new name[36];
	for(new i = 0; i < sizeof ClothesList; i++)
	{
		if(modelid == ClothesList[i][clothesListModel])
		{
			format(name, sizeof name, ClothesList[i][clothesListName]);
			return name;
		}
	}
	format(name, sizeof name, "obj%d", modelid);
	return name;
}

stock AddServerVehicle(model, factionid, jobid, addedby, Float:x, Float:y, Float:z, Float:a, color1 = -1, color2 = -1, price, addsiren = 0, respawntime = -1, bool:added_by_admin = true, bool:add_to_mysql = true)
{
	if(factionid != -1)
	{
		if(FactionInfo[factionid][fType] == FACTION_TYPE_POLICE) addsiren = 1;
	}
	new vehicleid = CreateVehicle(model, x, y, z, a, color1, color2, respawntime, addsiren);

	if(factionid != -1) VehicleInfo[vehicleid][vFaction] = FactionInfo[factionid][fId];
	if(jobid != -1) VehicleInfo[vehicleid][vJob] = Jobs[jobid][jobId];
	VehicleInfo[vehicleid][vFuel] = float(VehicleFuelCapacityList[model-400]);
	VehicleInfo[vehicleid][vBatteryStatus] =
	VehicleInfo[vehicleid][vEngineStatus] = 100.0;
	VehicleInfo[vehicleid][vExtraId] = _:added_by_admin;
	VehicleInfo[vehicleid][vPrice] = price;
	PutFactionWeaponsInVehicle(vehicleid);
	if(add_to_mysql)
	{
		inline insertCar()
		{
			#if SERVER_DEBUG_LEVEL >= 3
				printf("[debug] FactionVehicleAdd(%d)", cache_insert_id());
			#endif
			
			VehicleInfo[vehicleid][vId] = cache_insert_id();
			Vehicle_SetServerNumberPlate(vehicleid);
		}

		mysql_tquery_inline(chandler, using inline insertCar, "\
			INSERT INTO `vehicles_server` \
			(`FactionId`, `JobId`, `Added`, `AddedType`, `Model`, `Price`, `X`, `Y`, `Z`, `A`, `Color1`, `Color2`, `AddSiren`) \
			VALUES \
			('%d','%d','%d','%d','%d','%d','%f','%f','%f','%f','%d','%d','%d')",
			factionid == -1 ? 0 : FactionInfo[factionid][fId], jobid == -1 ? 0 : Jobs[jobid][jobId],
			PlayerInfo[addedby][pId],
			_:added_by_admin,
			model,
			price,
			x, y, z, a,
			color1, color2,
			addsiren
		);
	}
	return vehicleid;
}

stock ShowPlayerMechTune(playerid)
{

	TextDrawShowForPlayer(playerid, MechTune_Base);
	TextDrawShowForPlayer(playerid, MechTune_TextTop);
	for(new i = 0; i < 18; i++)
	{
		PlayerTextDrawShow(playerid, MechTune_BasePart[playerid][i]);
	}
	TextDrawShowForPlayer(playerid, MechTune_BuyBase);
	TextDrawShowForPlayer(playerid, MechTune_CancelBase);
	TextDrawShowForPlayer(playerid, MechTune_BuyText);
	TextDrawShowForPlayer(playerid, MechTune_Shadow);
	TextDrawShowForPlayer(playerid, MechTune_Mega);
	TextDrawShowForPlayer(playerid, MechTune_Rimshine);
	TextDrawShowForPlayer(playerid, MechTune_Wires);
	TextDrawShowForPlayer(playerid, MechTune_Classic);
	TextDrawShowForPlayer(playerid, MechTune_Twist);
	TextDrawShowForPlayer(playerid, MechTune_Cutter);
	TextDrawShowForPlayer(playerid, MechTune_Switch);
	TextDrawShowForPlayer(playerid, MechTune_Grove);
	TextDrawShowForPlayer(playerid, MechTune_Import);
	TextDrawShowForPlayer(playerid, MechTune_Dollar);
	TextDrawShowForPlayer(playerid, MechTune_Trance);
	TextDrawShowForPlayer(playerid, MechTune_Atomic);
	TextDrawShowForPlayer(playerid, MechTune_Ahab);
	TextDrawShowForPlayer(playerid, MechTune_Virtual);
	TextDrawShowForPlayer(playerid, MechTune_Access);
	TextDrawShowForPlayer(playerid, MechTune_Offroad);
	TextDrawShowForPlayer(playerid, MechTune_Hidraulics);
	TextDrawShowForPlayer(playerid, MechTune_TextShadow);
	TextDrawShowForPlayer(playerid, MechTune_TextMega);
	TextDrawShowForPlayer(playerid, MechTune_TextRimshine);
	TextDrawShowForPlayer(playerid, MechTune_TextWires);
	TextDrawShowForPlayer(playerid, MechTune_TextClassic);
	TextDrawShowForPlayer(playerid, MechTune_TextTwist);
	TextDrawShowForPlayer(playerid, MechTune_TextCutter);
	TextDrawShowForPlayer(playerid, MechTune_TextSwitch);
	TextDrawShowForPlayer(playerid, MechTune_TextGrove);
	TextDrawShowForPlayer(playerid, MechTune_TextImport);
	TextDrawShowForPlayer(playerid, MechTune_TextDollar);
	TextDrawShowForPlayer(playerid, MechTune_TextTrance);
	TextDrawShowForPlayer(playerid, MechTune_TextAtomic);
	TextDrawShowForPlayer(playerid, MechTune_TextAhab);
	TextDrawShowForPlayer(playerid, MechTune_TextVirtual);
	TextDrawShowForPlayer(playerid, MechTune_TextAccess);
	TextDrawShowForPlayer(playerid, MechTune_TextOffroad);
	TextDrawShowForPlayer(playerid, MechTune_TextHidraulics);
	return 1;
}



stock HidePlayerMechTune(playerid)
{

	TextDrawHideForPlayer(playerid, MechTune_Base);
	TextDrawHideForPlayer(playerid, MechTune_TextTop);
	for(new i = 0; i < 18; i++)
	{
		PlayerTextDrawHide(playerid, MechTune_BasePart[playerid][i]);
	}
	TextDrawHideForPlayer(playerid, MechTune_BuyBase);
	TextDrawHideForPlayer(playerid, MechTune_CancelBase);
	TextDrawHideForPlayer(playerid, MechTune_BuyText);
	TextDrawHideForPlayer(playerid, MechTune_Shadow);
	TextDrawHideForPlayer(playerid, MechTune_Mega);
	TextDrawHideForPlayer(playerid, MechTune_Rimshine);
	TextDrawHideForPlayer(playerid, MechTune_Wires);
	TextDrawHideForPlayer(playerid, MechTune_Classic);
	TextDrawHideForPlayer(playerid, MechTune_Twist);
	TextDrawHideForPlayer(playerid, MechTune_Cutter);
	TextDrawHideForPlayer(playerid, MechTune_Switch);
	TextDrawHideForPlayer(playerid, MechTune_Grove);
	TextDrawHideForPlayer(playerid, MechTune_Import);
	TextDrawHideForPlayer(playerid, MechTune_Dollar);
	TextDrawHideForPlayer(playerid, MechTune_Trance);
	TextDrawHideForPlayer(playerid, MechTune_Atomic);
	TextDrawHideForPlayer(playerid, MechTune_Ahab);
	TextDrawHideForPlayer(playerid, MechTune_Virtual);
	TextDrawHideForPlayer(playerid, MechTune_Access);
	TextDrawHideForPlayer(playerid, MechTune_Offroad);
	TextDrawHideForPlayer(playerid, MechTune_Hidraulics);
	TextDrawHideForPlayer(playerid, MechTune_TextShadow);
	TextDrawHideForPlayer(playerid, MechTune_TextMega);
	TextDrawHideForPlayer(playerid, MechTune_TextRimshine);
	TextDrawHideForPlayer(playerid, MechTune_TextWires);
	TextDrawHideForPlayer(playerid, MechTune_TextClassic);
	TextDrawHideForPlayer(playerid, MechTune_TextTwist);
	TextDrawHideForPlayer(playerid, MechTune_TextCutter);
	TextDrawHideForPlayer(playerid, MechTune_TextSwitch);
	TextDrawHideForPlayer(playerid, MechTune_TextGrove);
	TextDrawHideForPlayer(playerid, MechTune_TextImport);
	TextDrawHideForPlayer(playerid, MechTune_TextDollar);
	TextDrawHideForPlayer(playerid, MechTune_TextTrance);
	TextDrawHideForPlayer(playerid, MechTune_TextAtomic);
	TextDrawHideForPlayer(playerid, MechTune_TextAhab);
	TextDrawHideForPlayer(playerid, MechTune_TextVirtual);
	TextDrawHideForPlayer(playerid, MechTune_TextAccess);
	TextDrawHideForPlayer(playerid, MechTune_TextOffroad);
	TextDrawHideForPlayer(playerid, MechTune_TextHidraulics);
	CancelSelectTextDraw(playerid);
	return 1;
}


stock CheckAccountLock(playerid, name[])
{
	new string[126];

	mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_locks` WHERE PlayerName = '%e' AND Valid = '1'", name);
	new Cache:result = mysql_query(chandler, string, true);

	if(cache_num_rows())
	{
		new lockdate[20],
			lockedby[24],
			reason[128];
		cache_get_value_name(0, "Reason", reason, 128);
		cache_get_value_name(0, "Date", lockdate, 20);
		cache_get_value_name(0, "AdminName", lockedby, 24);
		cache_delete(result);
		
		dialog_Clear();
		dialog_AddLine("{E12525}JÛSØ VEIKËJAS UÞRAKINTAS");
		dialog_SkipLine();
		dialog_AddLine("{EEEEEE}Uþrakino: {FF672B}%s", lockedby);
		dialog_AddLine("{EEEEEE}Prieþastis: {FF672B}%s", reason);
		dialog_AddLine("{EEEEEE}Uþrakinimo data: {FF672B}%s", lockdate);
		
		inline locked(response, listitem)
		{
			player_charList_GUIShown[playerid] = false;
			return 1;
		}

		player_charList_GUIShown[playerid] = true;
		dialog_Show(playerid, using inline locked, DIALOG_STYLE_MSGBOX, "Veikëjas uþrakintas", "Uþdaryti", "");
		return true;
	}
	cache_delete(result);
	return false;
}

stock CheckBan(playerid)
{
	new name[MAX_PLAYER_NAME+1],
		ip[22];
		
	GetPlayerName(playerid, name, sizeof name);
	GetPlayerIp(playerid, ip, sizeof ip);

	new string[126];
	mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_bans` WHERE PlayerName = '%e' AND Valid = '1' OR PlayerIP = '%e' AND Valid = '1'", name, ip);
	new Cache:result = mysql_query(chandler, string, true);

	if(cache_num_rows())
	{
		new unbandate[28],
			unbantime,
			bandate[20],
			bannedby[24],
			reason[128];

		cache_get_value_name(0, "Reason", reason, 128);
		cache_get_value_name(0, "AdminName", bannedby, 24);
		cache_get_value_name(0, "Date", bandate, 20);
		cache_get_value_name_int(0, "UnbanTime", unbantime);
		if(unbantime == -1) format(unbandate, 13, "visam laikui");
		else
		{
			if(unbantime > 60)
			{
				if(unbantime > 1440)
				{
					// daugiau nei diena
					format(unbandate, sizeof unbandate, "uþ %dd", unbantime/60/24);
				}
			}
			else format(unbandate, sizeof unbandate, "uþ %d minuèiø.", unbantime);
		}

		dialog_Clear();
		dialog_AddLine("{E12525}JÛS ESATE BLOKUOJAMAS");
		dialog_AddLine("{EEEEEE}Uþblokavo: {FF672B}%s", bannedby);
		dialog_AddLine("{EEEEEE}Prieþastis: {FF672B}%s", reason);
		dialog_AddLine("{EEEEEE}Uþblokavimo data: {FF672B}%s", bandate);
		dialog_AddLine("{EEEEEE}Galioja: {FF672B}%s", unbandate);

		inline banned(response, listitem)
		{
			return 1;
		}
		dialog_Show(playerid, using inline banned, DIALOG_STYLE_MSGBOX, "Esate uþblokuotas", "Uþdaryti", "");

		cache_delete(result);
		KickEx(playerid);
		return true;
	}
	cache_delete(result);
	return false;
}
/*
forward OnPlayerUseInventoryItem(playerid, slotid);
forward OnPlayerDropInventoryItem(playerid, type, itter, slotid);
forward OnPlayerPutInventoryItem(playerid, slotid, to_type, to_itter);
forward OnPlayerTakeInventoryItem(playerid, from_type, from_itter, from_slot);
forward OnPlayerGiveInventoryItem(playerid, slotid);
*/

public OnPlayerPutInventoryItem(playerid, slotid, to_type, to_itter)
{
	new 
		itemid = InventoryInfo[playerid][slotid][invId],
		amount = InventoryInfo[playerid][slotid][invAmount],
		extra = InventoryInfo[playerid][slotid][invExtraId],
		to_slot = -1,
		result;

	if(itemid <= 0) return SendWarning(playerid, "Pasirinkta inventoriaus vieta yra tuðèia.");
	if(InArray(itemid, ITEM_PHONE)) return SendWarning(playerid, "Ðio daikto padëti negalite.");

	if(!IsVehicleInRangeOfPlayer(to_itter, playerid, 5.0) && to_type == INVENTORY_TYPE_VEHICLE)
	{
		InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
		return 1;
	}
	switch(to_type)
	{
		case INVENTORY_TYPE_VEHICLE: to_slot = GetVehicleFreeInventorySlot(to_itter);
		case INVENTORY_TYPE_DEALER_HOUSE: to_slot = GetDealerHouseFreeInventorySlot(to_itter);
		case INVENTORY_TYPE_HOUSE: to_slot = GetHouseFreeInventorySlot(to_itter);
		case INVENTORY_TYPE_BUSINESS: to_slot = GetBusinessFreeInventorySlot(to_itter);
	}
	if(to_slot < 0) return SendWarning(playerid, "Bagaþinëje arba spintelëje nëra vietos.");


	switch(to_type)
	{
		case INVENTORY_TYPE_VEHICLE:
		{
			if(IsModelPedal(GetVehicleModel(to_itter))) return SendWarning(playerid, "Tr. priemonë bagaþinës neturi.");
			result = GiveVehicleInventoryItem(to_itter, itemid, amount, extra, to_slot);
			rp_me(playerid, _, "padeda daiktà á bagaþinæ, kuris atrodo kaip %s.", GetInventoryItemName(itemid, .lower_case = true));
			SaveVehicleInventory(to_itter);
		}
		case INVENTORY_TYPE_DEALER_HOUSE:
		{
			result = GiveDealerHouseInventoryItem(to_itter, itemid, amount, extra, to_slot);
			rp_me(playerid, _, "padeda daiktà á spintelæ, kuris atrodo kaip %s.", GetInventoryItemName(itemid, .lower_case = true));
			SaveDealerHouseInventory(to_itter);
		}
		case INVENTORY_TYPE_HOUSE:
		{
			result = GiveHouseInventoryItem(to_itter, itemid, amount, extra, to_slot);
			rp_me(playerid, _, "padeda daiktà á spintelæ, kuris atrodo kaip %s.", GetInventoryItemName(itemid, .lower_case = true));
			SaveHouseInventory(to_itter);
		}
		case INVENTORY_TYPE_BUSINESS:
		{
			result = GiveBusinessInventoryItem(to_itter, itemid, amount, extra, to_slot);
			rp_me(playerid, _, "padeda daiktà á spintelæ, kuris atrodo kaip %s.", GetInventoryItemName(itemid, .lower_case = true));	
			SaveBusinessInventory(to_itter);
		}
	}
	if(result)
	{
		ClearPlayerInventorySlot(playerid, slotid);
		SendFormat(playerid, 0x77D55BFF, "> Sëkmingai padëjote daiktà %s (kiekis: %d)", GetInventoryItemName(itemid, .lower_case = true), amount);
	}
	else
	{
		SendWarning(playerid, "Daikto perkelti nepavyko.");
	}
	return 1;
}

public OnPlayerDropInventoryItem(playerid, type, itter, slotid)
{
	// galima ismest tik zaidejui arba tik is masinos
	if(!IsVehicleInRangeOfPlayer(itter, playerid, 5.0) && type == INVENTORY_TYPE_VEHICLE)
	{
		InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
		return 1;
	}
	switch(type)
	{
		case INVENTORY_TYPE_PLAYER:
		{
			
			if(IsInventorySlotClear(playerid, slotid)) return SendWarning(playerid, "Pasirinkta inventoriaus vieta yra tuðèia.");

			new 
				itemid = InventoryInfo[playerid][slotid][invId];
			rp_me(playerid, _, "iðmeta daiktà, atrodantá kaip %s.", GetInventoryItemName(itemid, .lower_case = true));
			
			if(itemid == ITEM_RADIO)
			{
				HideInfoBar(playerid);
				PlayerInfo[playerid][pRadioChannel] = 0;
			}

			if (itemid == ITEM_PHONE)
			{
				PlayerInfo[playerid][pPhoneNumber] = 0;
			}

			Player_DropItem(playerid, slotid, itemid == ITEM_SHELLS ? false : true);
		}
		case INVENTORY_TYPE_VEHICLE:
		{
			if(IsVehicleInventorySlotClear(itter, slotid)) return SendWarning(playerid, "Pasirinkta inventoriaus vieta yra tuðèia.");

			new 
				itemid = VehicleInventory[itter][slotid][invId];
			rp_me(playerid, _, "iðmeta daiktà ið bagaþinës, atrodantá kaip %s.", GetInventoryItemName(itemid, .lower_case = true));
			if(itemid == ITEM_MASK)
			{
				if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peMaskLabel])) DestroyDynamic3DTextLabel(PlayerExtra[playerid][peMaskLabel]);
				PlayerExtra[playerid][peMaskLabel] = INVALID_3DTEXT_ID;
				rp_me(playerid, _, "nusiima kaukæ.");
				foreach(new receiverid : Player)
				{
					ShowPlayerNameTagForPlayer(receiverid, playerid, true);
				}
			}
			Vehicle_DropItem(playerid, itter, slotid, itemid == ITEM_SHELLS ? false : true);
		}
	}
	return 1;
}

public OnPlayerGiveInventoryItem(playerid, slotid)
{
	new
		itemid = InventoryInfo[playerid][slotid][invId],
		amount = InventoryInfo[playerid][slotid][invAmount],
		extra = InventoryInfo[playerid][slotid][invExtraId],
		receiverid = INVALID_PLAYER_ID;



	if((receiverid = GetClosestPlayer(playerid, 3.0, false)) == INVALID_PLAYER_ID)
	{
		InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
		return 1;
	}

	new receiver_slot = -1;
	if(InArray(itemid, ITEM_PHONE)) return SendWarning(playerid, "Ðio daikto perduoti negalima.");
	if((receiver_slot = GetPlayerFreeInventorySlot(receiverid)) != -1)
	{
		#if SERVER_DEBUG_LEVEL >= 2
			printf("[debug] OnPlayerGiveInventoryItem(%s, %d, %d, %s)", GetPlayerNameEx(playerid), itemid, amount, GetPlayerNameEx(receiverid));
		#endif


		GivePlayerInventoryItem(receiverid, itemid, amount, extra, receiver_slot);
		ClearPlayerInventorySlot(playerid, slotid);
		
		SendFormat(playerid, 0x77D55BFF, "> Perdavëte daiktà þaidëjui %s: %s, kiekis: %d.",
			GetPlayerNameEx(receiverid, true),
			GetInventoryItemName(itemid),
			amount);

		SendFormat(receiverid, 0x77D55BFF, "> Gavote daiktà %s ið %s, kurio kiekis: %d.",
			GetInventoryItemName(itemid, .lower_case = true),
			GetPlayerNameEx(playerid, true),
			amount);
		
		rp_me(playerid, _, "perduoda daiktà %s, kuris atrodo kaip %s.", GetPlayerNameEx(receiverid, true), GetInventoryItemName(itemid, .lower_case = true));

		log_init(true);
		log_set_table("logs_inventory");
		log_set_keys("`OwnerId`,`OwnerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ItemId`,`ItemAmount`,`ItemExtra`");
		log_set_values("'%d','%e','%d','%e','Perdave daikta','%d','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), itemid, amount, extra);
		log_commit();
	}
	else SendWarning(playerid, "Nëra vietos þaidëjo inventoriuje.");
	return 1;
}

public OnPlayerTakeInventoryItem(playerid, from_type, from_itter, from_slot)
{
	new 
		to_slot = GetPlayerFreeInventorySlot(playerid),
		itemid,
		amount,
		extra;
	if(to_slot < 0) return SendWarning(playerid, "Nepakanka vietos inventoriuje.");

	switch(from_type)
	{
		case INVENTORY_TYPE_VEHICLE:
		{
			itemid = VehicleInventory[from_itter][from_slot][invId];
			amount = VehicleInventory[from_itter][from_slot][invAmount];
			extra = VehicleInventory[from_itter][from_slot][invExtraId];
			rp_me(playerid, _, "paima daiktà ið bagaþinës, kuris atrodo kaip %s.", GetInventoryItemName(itemid, .lower_case = true));
			ClearVehicleInventorySlot(from_itter, from_slot);
			SaveVehicleInventory(from_itter);
		}
		case INVENTORY_TYPE_DEALER_HOUSE:
		{
			itemid = DealerHouseInventory[from_itter][from_slot][invId];
			amount = DealerHouseInventory[from_itter][from_slot][invAmount];
			extra = DealerHouseInventory[from_itter][from_slot][invExtraId];
			rp_me(playerid, _, "paima daiktà ið spintelës, kuris atrodo kaip %s.", GetInventoryItemName(itemid, .lower_case = true));
			ClearDealerHouseInventorySlot(from_itter, from_slot);
			SaveDealerHouseInventory(from_itter);
		}
		case INVENTORY_TYPE_HOUSE:
		{
			itemid = HouseInventory[from_itter][from_slot][invId];
			amount = HouseInventory[from_itter][from_slot][invAmount];
			extra = HouseInventory[from_itter][from_slot][invExtraId];
			rp_me(playerid, _, "paima daiktà ið spintelës, kuris atrodo kaip %s.", GetInventoryItemName(itemid, .lower_case = true));
			ClearHouseInventorySlot(from_itter, from_slot);
			SaveHouseInventory(from_itter);
		}
		case INVENTORY_TYPE_BUSINESS:
		{
			itemid = BusinessInventory[from_itter][from_slot][invId];
			amount = BusinessInventory[from_itter][from_slot][invAmount];
			extra = BusinessInventory[from_itter][from_slot][invExtraId];
			rp_me(playerid, _, "paima daiktà ið spintelës, kuris atrodo kaip %s.", GetInventoryItemName(itemid, .lower_case = true));	
			ClearBusinessInventorySlot(from_itter, from_slot);
			SaveBusinessInventory(from_itter);
		}
	}
	SendFormat(playerid, 0x77D55BFF, "> Sëkmingai paëmete daiktà %s (kiekis: %d)", GetInventoryItemName(itemid, .lower_case = true), amount);
	GivePlayerInventoryItem(playerid, itemid, amount, extra, to_slot);
	return 1;
}

public OnPlayerUseInventoryItem(playerid, slotid)
{
	if(IsInventorySlotClear(playerid, slotid))
	{
		Inventory_ShowItems(playerid, INVENTORY_TYPE_PLAYER, 0);
		SendWarning(playerid, "Pasirinkta inventoriaus vieta yra tuðèia.");
		return 1;
	}

	new 
		itemid = InventoryInfo[playerid][slotid][invId],
		amount = InventoryInfo[playerid][slotid][invAmount],
		extra = InventoryInfo[playerid][slotid][invExtraId];

	if(1 <= itemid <= 46)
	{
		GivePlayerWeapon(playerid, itemid, amount, WEAPON_GIVE_TYPE_NORMAL, extra);
		SendFormat(playerid, 0xBABABAFF, "Iðsitraukëte ginklà: %s (%d kulkø)", GetInventoryItemName(itemid), amount);
		ClearPlayerInventorySlot(playerid, slotid);

		log_init(true);
		log_set_table("logs_inventory");
		log_set_keys("`OwnerId`,`OwnerName`,`ActionText`,`ItemId`,`ItemAmount`,`ItemExtra`");
		log_set_values("'%d','%e','Issitrauke ginkla','%d','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), itemid, amount, extra);
		log_commit();
	}
	else
	{
		if(IsItemDrug(itemid))
		{
			new
				item_syringe_slot,
				item_wool_slot,
				item_lighter_slot;

			if(itemid == ITEM_HEROINE)
			{
				if(((item_syringe_slot = GetItemSlotInPlayerInventory(playerid, ITEM_SYRINGE)) == -1 ||
					(item_wool_slot = GetItemSlotInPlayerInventory(playerid, ITEM_WOOL)) == -1 ||
					(item_lighter_slot = GetItemSlotInPlayerInventory(playerid, ITEM_LIGHTER)) == -1))
				{
					return SendWarning(playerid, "Norint vartoti ðá narkotikà, turite turëti: ðvirkðtà, þiebtuvëlá ir vatos inventoriuje.");
				}
				else
				{
					SetPlayerInventoryItemAmount(playerid, item_syringe_slot, InventoryInfo[playerid][item_syringe_slot][invAmount]-1);
					SetPlayerInventoryItemAmount(playerid, item_wool_slot, InventoryInfo[playerid][item_wool_slot][invAmount]-1);
					SetPlayerInventoryItemAmount(playerid, item_lighter_slot, InventoryInfo[playerid][item_lighter_slot][invAmount]-1);
				}
			}

			new drug_type = GetDrugTypeByItem(itemid);
			// jei negalima maisyti su jau uzsimestu narkotiku, killinam
			for(new i = 0; i < MAX_DRUG_TYPES; i++)
			{
				if(i != drug_type)
				{
					if(PlayerDrugs[playerid][i][drugOnDuty] > 0)
					{
						if(DrugsCanBeMixed[i][drug_type] == false || DrugsCanBeMixed[drug_type][i] == false)
						{
							// negalima maisyt
							SetPlayerHealth(playerid, 0.0);
							SendFormat(playerid, 0xCD0000FF, "Sumaiðëte netinkamus narkotikus.");
							ClearPlayerInventorySlot(playerid, slotid);
							return 1;
						}
					}
				}
			}

			// perdozavimas
			new level = PlayerDrugs[playerid][drug_type][drugLevel],
				used = PlayerDrugs[playerid][drug_type][drugUsedTimes];

			//SendFormat(playerid, -1, "dt%d am%d id%d overdose%d prob%d ", DrugType);
			// SendFormat(playerid, -1, "Naudota %d kartu, reik %d iki lygio kito. Db lygis %d", used, DrugsLevelUp[drug_type][level], level);
			if( (Probability(DrugOverdoseProbability[drug_type][1]) && amount >= DrugOverdoseProbability[drug_type][0] && DrugOverdoseProbability[drug_type][0] > 0 && DrugOverdoseProbability[drug_type][1] > 0) ||
				(amount >= DrugOverdoseList[drug_type] && DrugOverdoseList[drug_type] > 0))
			{
				// perdozavo
				SetPlayerHealth(playerid, 0.0);
				SendFormat(playerid, 0xCD0000FF, "Perdozavote narkotikø.");
			}
			else
			{
				if(0 <= level < 3)
				{
					if(used > DrugsLevelUp[drug_type][level])
					{
						PlayerDrugs[playerid][drug_type][drugLevel]++,
						level++;
						PlayerDrugs[playerid][drug_type][drugUsedTimes] = 0;
						//SendFormat(playerid, -1, "Pakilo lygis i %d, nes vartojot jau %d karta", level, used);
						SendFormat(playerid, 0x92E9CCFF, "Darotës vis labiau priklausomas nuo narkotikø.");
					}
				}


				PlayerDrugs[playerid][drug_type][drugUsedTimes]++;
				PlayerDrugs[playerid][drug_type][drugUnused] = DrugLevelDrop[drug_type][level] == -1 ? level == 0 ? 1 : DrugLevelDrop[drug_type][level-1] : DrugLevelDrop[drug_type][level];
				PlayerDrugs[playerid][drug_type][drugLastDoze] += amount;
				PlayerDrugs[playerid][drug_type][drugUsedLastTime] = gettime();
				//SendFormat(playerid, -1, "Doze pakankama: %s -- %d reikalinga, %d vartojate.", PlayerDrugs[playerid][drug_type][drugLastDoze] >= DrugsDozeToEffect[drug_type][level] ? ("taip") : ("ne"), DrugsDozeToEffect[drug_type][level], PlayerDrugs[playerid][drug_type][drugLastDoze]);
				SendFormat(playerid, 0x92E9CCFF, "%s: suvartojote %d gramø%s.", GetInventoryItemName(itemid), amount, PlayerDrugs[playerid][drug_type][drugLastDoze] >= DrugsDozeToEffect[drug_type][level] ? ("") : (", taèiau dozë nepakankama"));
				switch(drug_type)
				{
					case DRUG_HEROINE:
					{
						rp_me(playerid, _, "uþèiuopia aiðkiai matomà rankos venà, ásmeigia á jà ðvirkðtà ir lëtai suleidþia heroinà.");
						rp_do(playerid, "apima lengvas galvos svaigimas, po kurio seka stiprus euforijos jausmas.");
					}
					case DRUG_COCAINE:
					{
						rp_me(playerid, _, "áðniurkðèia kokainà keliais átraukimais, kuris greitai patenka á kraujà.");
						rp_do(playerid, "ið karto pajauèia padidëjusià kûno temperatûrà ir energijos pliûpsná");
					}
					case DRUG_MDMA, DRUG_XANAX:
					{
						rp_me(playerid, _, "ámeta á burnà tabletæ ir jà praryja.");
					}
					case DRUG_MARIJUANA:
					{
						rp_me(playerid, _, "susuka þolæ á suktiná su popierëliu, uþlenkia vienà galà, uþdega já þiebtuvëliu ir giliai átraukia dûmà.");
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
					}
				}

				if(PlayerDrugs[playerid][drug_type][drugLastDoze] >= DrugsDozeToEffect[drug_type][level])
				{
					// jei kiekis pakankamas dabartiniam priklausomybes lygiui
					PlayerDrugs[playerid][drug_type][drugOnDuty] = 1;
					PlayerDrugs[playerid][drug_type][drugAddHP] = DrugsHP[drug_type];
				}
			}
			SaveDrugStats(playerid, drug_type);
			ClearPlayerInventorySlot(playerid, slotid);

			log_init(true);
			log_set_table("logs_inventory");
			log_set_keys("`OwnerId`,`OwnerName`,`ActionText`,`ItemId`,`ItemAmount`,`ItemExtra`");
			log_set_values("'%d','%e','Panaudojo narkotika','%d','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), itemid, amount, extra);
			log_commit();
		}
		else
		{
			log_init(true);
			log_set_table("logs_inventory");
			log_set_keys("`OwnerId`,`OwnerName`,`ActionText`,`ItemId`,`ItemAmount`,`ItemExtra`");
			log_set_values("'%d','%e','Panaudojo daikta','%d','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), itemid, amount, extra);
			log_commit();
			switch(itemid)
			{
				case ITEM_PHONE:
				{
					pc_cmd_help(playerid, "phone");
				}
				case ITEM_GUM:
				{
					// guma
					if(PlayerExtra[playerid][peChewingGum] >= 5)
					{
						SendWarning(playerid, "Jûs jau kramtote gumà.");
						return 1;
					}
					rp_me(playerid, _, "ásideda gumos á burnà.");
					PlayerExtra[playerid][peChewingGum] = 5;
					SetPlayerInventoryItemAmount(playerid, slotid, amount-1);
				}
				case ITEM_CIGARETTE:
				{
					new item_lighter_slot;
					if((item_lighter_slot = GetItemSlotInPlayerInventory(playerid, ITEM_LIGHTER)) != -1)
					{
						SetPlayerInventoryItemAmount(playerid, item_lighter_slot, InventoryInfo[playerid][item_lighter_slot][invAmount]-1);
						SetPlayerInventoryItemAmount(playerid, slotid, amount-1);
						rp_me(playerid, _, "prisidega cigaretæ.");
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
					}
					else SendWarning(playerid, "Neturite þiebtuvëlio.");
				}
				case ITEM_RADIO:
				{
					pc_cmd_help(playerid, "radio");
				}
				case ITEM_SHELLS:
				{
					// Tyrimas
					new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
					if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
					if(IsPlayerInPD(playerid))
					{
						SendFormat(playerid, 0xC5EDD5FF, "Ðie ðoviniai buvo iððauti ið ginklo numeriu %s", GetUniqueNumber(1, InventoryInfo[playerid][slotid][invExtraId], 0));
					}
					else return SendWarning(playerid, "Nesate policijos departamente.");
				}
				case ITEM_SPRUNK, ITEM_WINE, ITEM_BEER:
				{
					SetPlayerSpecialAction(playerid, itemid == ITEM_SPRUNK ? SPECIAL_ACTION_DRINK_SPRUNK : (itemid == ITEM_WINE ? SPECIAL_ACTION_DRINK_WINE : SPECIAL_ACTION_DRINK_BEER));
					SetPlayerInventoryItemAmount(playerid, slotid, amount-1);
				}
				case ITEM_DICE:
				{
					new rand = 1+random(6),
						string[86];
					format(string, sizeof string, "** %s iðridena kauliukà ir jis iðkrenta ant %d.", GetPlayerNameEx(playerid, true), rand);
					ProxDetector(11.0, playerid, string, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA);
				}
				case ITEM_MASK:
				{
					// uzsideti mask
					pc_cmd_mask(playerid, "");
				}
				case ITEM_CAR_AUDIO:
				{
					MsgInfo(playerid, "MAGNETOLA", "Magnetola turi bûti bagaþinëje. Tr. priemonëje naudokite /vradio");
				}
				case ITEM_HOUSE_AUDIO:
				{
					call OnPlayerBoomboxUse(playerid);
				}
				case ITEM_FUEL:
				{
					new 
						vehicleid = GetClosestVehicle(playerid, 5.0);
					if(vehicleid == INVALID_VEHICLE_ID) return InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
					SendFormat(playerid, 0xBABABAFF, "Pripildëte tr. priemonæ 20L degalø!");
					rp_me(playerid, _, "supila degalus á tr. priemonës bakà.");
					if(VehicleInfo[vehicleid][vFuel] < 0.0) VehicleInfo[vehicleid][vFuel] = 20.0;
					else VehicleInfo[vehicleid][vFuel] += 20.0;
					SetPlayerInventoryItemAmount(playerid, slotid, amount - 1);
				}
				default: SendWarning(playerid, "Ðis daiktas neturi paskirties.");
			}
		}
	}
	return 1;
}

stock Inventory_ShowItems(playerid, type, iter = 0)
{
	new 
		line[126],
		count,
		slot_item[MAX_INVENTORY_SLOTS_AT_ALL],
		slot_amount[MAX_INVENTORY_SLOTS_AT_ALL],
		slot_extra[MAX_INVENTORY_SLOTS_AT_ALL];

	dialog_Clear();
	dialog_AddLine("{bababa}Pavadinimas\t \t{bababa}Kiekis");

	switch(type)
	{
		case INVENTORY_TYPE_PLAYER:
		{
			for(new i = 0; i < MAX_INVENTORY_SLOTS; i++)
			{
				slot_item[i] 	= InventoryInfo[playerid][i][invId],
				slot_amount[i] 	= InventoryInfo[playerid][i][invAmount],
				slot_extra[i] 	= InventoryInfo[playerid][i][invExtraId];
			}
			count = MAX_INVENTORY_SLOTS;
		}
		case INVENTORY_TYPE_HOUSE:
		{
			for(new i = 0; i < MAX_HOUSE_INVENTORY_SLOTS; i++)
			{
				slot_item[i] 	= HouseInventory[iter][i][invId],
				slot_amount[i] 	= HouseInventory[iter][i][invAmount],
				slot_extra[i] 	= HouseInventory[iter][i][invExtraId];
			}
			count = MAX_HOUSE_INVENTORY_SLOTS;
		}
		case INVENTORY_TYPE_DEALER_HOUSE:
		{
			for(new i = 0; i < MAX_DEALER_HOUSE_INVENTORY_SLOTS; i++)
			{
				slot_item[i] 	= DealerHouseInventory[iter][i][invId],
				slot_amount[i] 	= DealerHouseInventory[iter][i][invAmount],
				slot_extra[i] 	= DealerHouseInventory[iter][i][invExtraId];
			}
			count = MAX_DEALER_HOUSE_INVENTORY_SLOTS;
		}
		case INVENTORY_TYPE_VEHICLE:
		{
			for(new i = 0; i < MAX_VEHICLE_INVENTORY_SLOTS; i++)
			{
				slot_item[i] 	= VehicleInventory[iter][i][invId],
				slot_amount[i] 	= VehicleInventory[iter][i][invAmount],
				slot_extra[i] 	= VehicleInventory[iter][i][invExtraId];
			}
			count = MAX_VEHICLE_INVENTORY_SLOTS;
		}
		case INVENTORY_TYPE_BUSINESS:
		{
			for(new i = 0; i < MAX_BUSINESS_INVENTORY_SLOTS; i++)
			{
				slot_item[i] 	= BusinessInventory[iter][i][invId],
				slot_amount[i] 	= BusinessInventory[iter][i][invAmount],
				slot_extra[i] 	= BusinessInventory[iter][i][invExtraId];
			}
			count = MAX_BUSINESS_INVENTORY_SLOTS;
		}
	}

	for(new slot = 0; slot < count; slot++)
	{
		if(slot_item[slot] > 0)
		{
			/* Isgauname EXTRA id */
			if(slot_item[slot] == ITEM_PHONE)
			{
				slot_extra[slot] = PlayerInfo[playerid][pPhoneNumber];
			}

			if(1 <= slot_item[slot] < 50)
			{
				if(slot_extra[slot] > 0)
				{
					format(line, sizeof line, "{f9f9f9}%d. %s\t{dedede}"#DEFAULT_WEAPON_UNIQUE_ID_PREFIX"%d\t{ace113}[%d]\n", slot + 1, GetInventoryItemName(slot_item[slot]), slot_extra[slot], slot_amount[slot]);
				}
				else 
				{
					format(line, sizeof line, "{f9f9f9}%d. %s\tneregistruotas\t{ace113}[%d]\n", slot + 1, GetInventoryItemName(slot_item[slot]), slot_amount[slot]);
				}
			}
			else
			{
				if(slot_extra[slot] > 0)
				{
					format(line, sizeof line, "{f9f9f9}%d. %s\t{dedede}%d\t{ace113}[%d]\n", slot + 1, GetInventoryItemName(slot_item[slot]), slot_extra[slot], slot_amount[slot]);
				}
				else 
				{
					format(line, sizeof line, "{f9f9f9}%d. %s\t \t{ace113}[%d]\n", slot + 1, GetInventoryItemName(slot_item[slot]), slot_amount[slot]);
				}
			}
		}
		else format(line, sizeof line, "{6a6a6a}%d. Tuðèia\n", slot + 1);
		
		dialog_AddLine(line);
	}


	inline inventoryMain(response, listitem)
	{
		if(!response) return 1;

		new 
			slot = listitem,
			itemid;

		switch(type)
		{
			case INVENTORY_TYPE_PLAYER: 
			{
				if(IsInventorySlotClear(playerid, slot))
				{
					SendWarning(playerid, "Pasirinkta inventoriaus vieta yra tuðèia.");
					return Inventory_ShowItems(playerid, type, iter);
				}
				itemid = InventoryInfo[playerid][slot][invId];
			}
			case INVENTORY_TYPE_HOUSE: 
			{
				if(IsHouseInventorySlotClear(iter, slot))
				{
					SendWarning(playerid, "Pasirinkta inventoriaus vieta yra tuðèia.");
					return Inventory_ShowItems(playerid, type, iter);
				}
				itemid = HouseInventory[iter][slot][invId];
			}
			case INVENTORY_TYPE_DEALER_HOUSE: 
			{
				if(IsDealerHouseInventorySlotClear(iter, slot))
				{
					SendWarning(playerid, "Pasirinkta inventoriaus vieta yra tuðèia.");
					return Inventory_ShowItems(playerid, type, iter);
				}
				itemid = DealerHouseInventory[iter][slot][invId];
			}
			case INVENTORY_TYPE_VEHICLE: 
			{
				if(IsVehicleInventorySlotClear(iter, slot))
				{
					SendWarning(playerid, "Pasirinkta inventoriaus vieta yra tuðèia.");
					return Inventory_ShowItems(playerid, type, iter);
				}
				itemid = VehicleInventory[iter][slot][invId];
			}
			case INVENTORY_TYPE_BUSINESS: 
			{
				if(IsBusinessInventorySlotClear(iter, slot))
				{
					SendWarning(playerid, "Pasirinkta inventoriaus vieta yra tuðèia.");
					return Inventory_ShowItems(playerid, type, iter);
				}
				itemid = BusinessInventory[iter][slot][invId];
			}
		}

		Inventory_ShowActionSelect(playerid, 
			.type = type,
			.iter = iter,
			.slot = slot,
			.itemid = itemid
		);
	}
	dialog_Show(playerid, using inline inventoryMain, DIALOG_STYLE_TABLIST_HEADERS, "{ededed}Inventorius", "Tæsti", "Atðaukti");
	return 1;
}

stock Inventory_ShowActionSelect(playerid, type, iter, slot, itemid)
{	
	dialog_Clear();
	if(type == INVENTORY_TYPE_PLAYER)
	{
		dialog_AddLine("Naudoti daiktà");
		dialog_AddLine("Perduoti daiktà kitam");
		dialog_AddLine("Padëti daiktà á namà/verslà");
		dialog_AddLine("Padëti daiktà á bagaþinæ");
		dialog_AddLine("{cf4e4e}Iðmesti");
	}
	else if(type == INVENTORY_TYPE_VEHICLE)
	{
		dialog_AddLine("Paimti");
		dialog_AddLine("{cf4e4e}Iðmesti");
	}
	else 
	{
		dialog_AddLine("Paimti");
	}

	inline selectAction(response, listitem)
	{	
		if(!response) return Inventory_ShowItems(playerid, type, iter);

		dialog_Row("Paimti") return OnPlayerTakeInventoryItem(playerid, type, iter, slot);
		dialog_Row("Naudoti daiktà") return OnPlayerUseInventoryItem(playerid, slot);
		dialog_Row("Perduoti daiktà kitam") return OnPlayerGiveInventoryItem(playerid, slot);
		dialog_Row("Iðmesti") return OnPlayerDropInventoryItem(playerid, type, iter, slot);
		dialog_Row("Padëti daiktà á namà/verslà")
		{
			new 
				put_to_type = -1, put_to_iter = -1;
			if((put_to_iter = GetClosestHouse(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_HOUSE_ID) 
				put_to_type = INVENTORY_TYPE_HOUSE;

			else if((put_to_iter = GetClosestDealerHouse(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_HOUSE_ID) 
				put_to_type = INVENTORY_TYPE_DEALER_HOUSE;

			else if((put_to_iter = GetClosestBusiness(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID)
				put_to_type = INVENTORY_TYPE_BUSINESS;
			
			if(put_to_type != -1 && put_to_iter != -1)
			{
				switch(put_to_type)
				{
					case INVENTORY_TYPE_HOUSE: 
					{
						if(!HaveHouseKey(playerid, put_to_iter, .check_only_owner = true))
							return SendWarning(playerid, "Ðis namas nepriklauso Jums.");
					}
					case INVENTORY_TYPE_DEALER_HOUSE:
					{
						if(!HaveDealerHouseKey(playerid, put_to_iter))
							return SendWarning(playerid, "Ðis konsp. namas nepriklauso Jums.");
					}
					case INVENTORY_TYPE_BUSINESS:
					{
						if(!HaveBusinessKey(playerid, put_to_iter, .check_only_owner = true))
							return SendWarning(playerid, "Ðis verslas nepriklauso Jums.");
					}
				}
				if(!IsInventorySlotClear(playerid, slot))
				{
					OnPlayerPutInventoryItem(playerid, slot, put_to_type, put_to_iter);
				}
				else SendWarning(playerid, "Pasirinkta inventoriaus vieta yra tuðèia.");
			}
			else SendWarning(playerid, "Jûs nesate name arba versle.");

			return 1;
		}
		dialog_Row("Padëti daiktà á bagaþinæ")
		{
			new 	
				vehicleid = INVALID_VEHICLE_ID;
			if((vehicleid = GetClosestVehicle(playerid, 5.0)) != INVALID_VEHICLE_ID)
			{
				if(!IsInventorySlotClear(playerid, slot))
				{
					OnPlayerPutInventoryItem(playerid, slot, INVENTORY_TYPE_VEHICLE, vehicleid);
				}
				else SendWarning(playerid, "Pasirinkta inventoriaus vieta yra tuðèia.");
			}
			return 1;
		}
	}
	dialog_Show(playerid, using inline selectAction, DIALOG_STYLE_LIST, 
		va_return("{dbdbdb}Inventorius {5ea4e2}> {ededed}%s", GetInventoryItemName(itemid)),
		"Tæsti", "Gráþti");
	return 1;
}


stock IsItemDrug(itemid)
{
	switch(itemid) {
		case ITEM_MARIJUANA, ITEM_MDMA, ITEM_CRACK, ITEM_HEROINE, ITEM_METHAMPHETAMINE, ITEM_COCAINE, ITEM_XANAX: return true;
	}
	return false;
}


stock HidePlayerVehicleShop(playerid)
{
	TextDrawHideForPlayer(playerid, vShop_Base);
	TextDrawHideForPlayer(playerid, vShop_Name);
	for(new i = 0; i < 3; i++)
	{
		PlayerTextDrawHide(playerid, vShop_ModelBase[playerid][i]);
		PlayerTextDrawHide(playerid, vShop_CarName[playerid][i]);
		PlayerTextDrawHide(playerid, vShop_CarStats[playerid][i]);
		PlayerTextDrawHide(playerid, vShop_CarPrice[playerid][i]);
		PlayerTextDrawHide(playerid, vShop_Model[playerid][i]);
	}
	PlayerTextDrawHide(playerid, vShop_BuyBase[playerid]);
	PlayerTextDrawHide(playerid, vShop_BuyText[playerid]);
	TextDrawHideForPlayer(playerid, vShop_NextBase);
	TextDrawHideForPlayer(playerid, vShop_Next);
	TextDrawHideForPlayer(playerid, vShop_PrevBase);
	TextDrawHideForPlayer(playerid, vShop_Prev);
	PlayerTextDrawColor(playerid, vShop_BuyBase[playerid], 3815326);
	if(tmpSelected[playerid] != -1)
	{
		PlayerTextDrawColor(playerid, vShop_ModelBase[playerid][tmpSelected[playerid]], 4473343);
		memsetex(tmpArray[playerid], VEHICLE_ARRAY_LIMIT, 0); //for(new i = 0; i < VEHICLE_ARRAY_LIMIT; i++) tmpArray[playerid][i] = 0;
	}
	return 1;
}
stock ShowVehicleShop(playerid, bool:show_body, ...)
{
	new
		string[150];

	tmpSelected[playerid] = -1;

	if(show_body)
	{
		TextDrawShowForPlayer(playerid, vShop_Base);
		TextDrawShowForPlayer(playerid, vShop_Name);
		PlayerTextDrawShow(playerid, vShop_BuyBase[playerid]);
		PlayerTextDrawShow(playerid, vShop_BuyText[playerid]);
		TextDrawShowForPlayer(playerid, vShop_NextBase);
		TextDrawShowForPlayer(playerid, vShop_Next);
		TextDrawShowForPlayer(playerid, vShop_PrevBase);
		TextDrawShowForPlayer(playerid, vShop_Prev);
	}
	for(new arg = 2; arg <= (numargs() >= 4 ? 4 : numargs()); arg++)
	{
		new 
			model  = getarg(arg),
			idx = arg - 2;

		if(model == 0)
		{
			PlayerTextDrawHide(playerid, vShop_ModelBase[playerid][idx]);
			PlayerTextDrawHide(playerid, vShop_CarName[playerid][idx]);
			PlayerTextDrawHide(playerid, vShop_CarStats[playerid][idx]);
			PlayerTextDrawHide(playerid, vShop_CarPrice[playerid][idx]);
			PlayerTextDrawHide(playerid, vShop_Model[playerid][idx]);
		}
		else
		{
			format(string, sizeof string, "KATEGORIJA: %s~n~", GetModelCategory(model));
			if(!IsModelPedal(model))
			{
				format(string, sizeof string, "%sVARIKLIO LITRAZAS: %0.1f~n~KURO TIPAS: %s~n~", 
					string, 
					VehicleEngineUsage[model-400],
					GetVehicleModelEngineType(model));

			}
			if(!IsModelPedal(model) && !IsModelBoat(model))
			{
				format(string, sizeof string, "%sVAROMIEJI: %s~n~", 
					string, 
					GetVehicleModelDriveType(model));
			}

			PlayerTextDrawSetString(playerid, vShop_CarStats[playerid][idx], string);
			PlayerTextDrawSetPreviewModel(playerid, vShop_Model[playerid][idx], model);
			format(string, sizeof string, GetModelName(model));
			PlayerTextDrawSetString(playerid, vShop_CarName[playerid][idx], string);
			PlayerTextDrawShow(playerid, vShop_ModelBase[playerid][idx]);
			PlayerTextDrawShow(playerid, vShop_CarName[playerid][idx]);
			PlayerTextDrawShow(playerid, vShop_CarStats[playerid][idx]);
			format(string, sizeof string, "$%d", 
				SellVehicleData[
					tmpArray[playerid][ tmpPage_Object[playerid]*3 - (3-idx) ] ][sellvehiclePrice]
			);
			PlayerTextDrawSetString(playerid, vShop_CarPrice[playerid][idx], string);
			PlayerTextDrawShow(playerid, vShop_CarPrice[playerid][idx]);
			PlayerTextDrawShow(playerid, vShop_Model[playerid][idx]);
		}
	}
	SelectTextDraw(playerid, 0x269EC3FF);
	GetESCType(playerid) = ESC_TYPE_VSHOP;
}

stock GetVehicleModelDriveType(model)
{
	new 	
		string[24],
		driveType = GetVehicleModelInfoAsInt(model, "TransmissionData_nDriveType");

	if(driveType == 'F') {
		format(string, sizeof string, "PRIEKINIAI");
	} else if(driveType == 'R') {
		format(string, sizeof string, "GALINIAI");
	} else {
		format(string, sizeof string, "VISI");
	}
	return string;
}
stock GetVehicleModelEngineType(model)
{
	new 	
		string[24],
		engineType = GetVehicleModelInfoAsInt(model, "TransmissionData_nEngineType");
	
	if(engineType == 'D') {
		format(string, sizeof string, "Dyzelis");
	} else if(engineType == 'E') {
		format(string, sizeof string, "Elektra");
	} else {
		format(string, sizeof string, "Benzinas");
	}
	return string;
}

stock ShowVehicleList(playerid, ...)
{
	new
		string[222],
		sql_id,
		td_idx;
	TextDrawShowForPlayer(playerid, VL_Base);
	for(new arg = 1; arg <= (numargs() >= 4 ? 4 : numargs()); arg++)
	{
		sql_id = getarg(arg);
		td_idx = arg-1;
		if(sql_id <= 0)
		{
			PlayerTextDrawHide(playerid, VL_SpawnText[playerid][td_idx]);
			PlayerTextDrawHide(playerid, VL_SpawnBox[playerid][td_idx]);
			PlayerTextDrawHide(playerid, VL_FindText[playerid][td_idx]);
			PlayerTextDrawHide(playerid, VL_FindBox[playerid][td_idx]);
			PlayerTextDrawHide(playerid, VL_ModelBase[playerid][td_idx]);
			PlayerTextDrawHide(playerid, VL_ModelName[playerid][td_idx]);
			PlayerTextDrawHide(playerid, VL_RowText[playerid][td_idx]);
			TextDrawHideForPlayer(playerid, VL_RowBase[td_idx]);
		}
		else
		{
			mysql_format(chandler, string, sizeof string, "SELECT * FROM `vehicles_data` WHERE id = '%d'", sql_id);
			new Cache:all_data = mysql_query(chandler, string, true),
				model, numbers[24];
			cache_set_active(all_data);
			if(cache_num_rows())
			{
				TextDrawShowForPlayer(playerid, VL_RowBase[td_idx]);

				cache_get_value_name_int(0, "Model", model);
				PlayerTextDrawSetString(playerid, VL_ModelName[playerid][td_idx], GetModelName(model));

				new Float:km,
					lock,
					insurance,
					c1, c2,
					spawned,
					dealer;

				cache_get_value_name_float(0, "KM", km),
				cache_get_value_name_int(0, "Insurance", insurance),
				cache_get_value_name_int(0, "Lock", lock),
				cache_get_value_name_int(0, "Color1", c1),
				cache_get_value_name_int(0, "Color1", c2);
				cache_get_value_name_int(0, "SpawnedId", spawned);
				cache_get_value_name_int(0, "Dealer", dealer);

				cache_get_value_name(0, "Numbers", numbers, 31);
				format(string, sizeof string, "\
					ID: %d %s~n~NUMERIAI: %s ~n~RIDA: %0.1fKM~n~DRAUDIMAS: %d~n~UZRAKTO LYGIS: %d", 
					sql_id,
					spawned > 0 ? (va_return("(SRV ID: %d)", spawned)) : (""),
					numbers,
					km,
					insurance,
					lock
				);
				//														   CALCULATION OF CURRENT INDEX
				new working_with = (tmpPage_Object[playerid] == 1 ? td_idx : (tmpPage_Object[playerid]*4-(4-td_idx)));
				if(dealer > 0)
				{
					strcat(string, "~n~TIEKEJO TR. PRIEMONE");
				}
				if(tmpDubStart_Price[playerid] <= working_with)
				{
					strcat(string, "~n~DUBKEY TR. PRIEMONE");
				}
				PlayerTextDrawSetString(playerid, VL_RowText[playerid][td_idx], string);
				PlayerTextDrawSetPreviewModel(playerid, VL_ModelBase[playerid][td_idx], model);
				PlayerTextDrawSetPreviewVehCol(playerid, VL_ModelBase[playerid][td_idx], c1, c2);

				// Padarome kad negaletu arba galetu FINDINT
				PlayerTextDrawHide(playerid, VL_FindBox[playerid][td_idx]);
				if(lock >= DEFAULT_LOCK_NEEDED_TO_FIND && spawned > 0)
				{
					PlayerTextDrawSetSelectable(playerid, VL_FindBox[playerid][td_idx], 1);
					PlayerTextDrawColor(playerid, VL_FindBox[playerid][td_idx], VL_SUCCESS_COLOR);
				}
				else
				{
					PlayerTextDrawSetSelectable(playerid, VL_FindBox[playerid][td_idx], 0);
					PlayerTextDrawColor(playerid, VL_FindBox[playerid][td_idx], VL_DENIED_COLOR);
				}
				// Gali arba negali spawnint
				PlayerTextDrawHide(playerid, VL_SpawnBox[playerid][td_idx]);
				if(spawned <= 0)
				{
					PlayerTextDrawSetSelectable(playerid, VL_SpawnBox[playerid][td_idx], 1);
					PlayerTextDrawColor(playerid, VL_SpawnBox[playerid][td_idx], VL_SUCCESS_COLOR);
					PlayerTextDrawSetString(playerid, VL_SpawnText[playerid][td_idx], "ISSPAWNINTI");
				}
				else
				{
					PlayerTextDrawSetSelectable(playerid, VL_SpawnBox[playerid][td_idx], 0);
					PlayerTextDrawColor(playerid, VL_SpawnBox[playerid][td_idx], VL_DENIED_COLOR);
					PlayerTextDrawSetString(playerid, VL_SpawnText[playerid][td_idx], "ISSPAWNINTA");
				}

				cache_delete(all_data);
				PlayerTextDrawShow(playerid, VL_SpawnText[playerid][td_idx]);
				PlayerTextDrawShow(playerid, VL_SpawnBox[playerid][td_idx]);
				PlayerTextDrawShow(playerid, VL_FindText[playerid][td_idx]);
				PlayerTextDrawShow(playerid, VL_FindBox[playerid][td_idx]);
				PlayerTextDrawShow(playerid, VL_ModelBase[playerid][td_idx]);
				PlayerTextDrawShow(playerid, VL_ModelName[playerid][td_idx]);
				PlayerTextDrawShow(playerid, VL_RowText[playerid][td_idx]);
			}
			else
			{
				cache_delete(all_data);
				continue;
			}
		}
	}
	PlayerTextDrawShow(playerid, VL_NextBase[playerid]);
	PlayerTextDrawShow(playerid, VL_PrevBase[playerid]);
	TextDrawShowForPlayer(playerid, VL_PageText);
	// Jei nepaskutinis puslapis - leidziam toliau eit.
	if(tmpArray[playerid][((tmpPage_Object[playerid]+1)*4)-4] != 0) PlayerTextDrawSetSelectable(playerid, VL_NextBase[playerid], 1);
	else PlayerTextDrawSetSelectable(playerid, VL_NextBase[playerid], 0);

	if(tmpPage_Object[playerid] > 1) PlayerTextDrawSetSelectable(playerid, VL_PrevBase[playerid], 1);
	else PlayerTextDrawSetSelectable(playerid, VL_PrevBase[playerid], 0);

	PlayerTextDrawShow(playerid, VL_NextBase[playerid]);
	PlayerTextDrawShow(playerid, VL_PrevBase[playerid]);
	SelectTextDraw(playerid, 0xDBDBDBFF);
}

stock IsAdminGroupExisting(sqlid)
{
	foreach(new groupid : AdminGroup)
	{
		if(GroupsInfo[groupid][groupId] == sqlid)
		{
			return true;
		}
	}
	return false;
}

stock GetGroupName(sqlid, bool:bysql = true)
{
	new name[30];
	if(!bysql)
	{
		format(name, sizeof name, GroupsInfo[sqlid][groupName]);
		return name;
	}
	else
	{
		foreach(new groupid : AdminGroup)
		{
			if(GroupsInfo[groupid][groupId] == sqlid)
			{
				format(name, sizeof name, GroupsInfo[groupid][groupName]);
				return name;
			}
		}
	}
	strcat(name, "nëra");
	return name;
}

stock GetVehicleWheelPos(vehicleid, wheel, &Float:x, &Float:y, &Float:z) // by Threshold
{
	/*
	    Credit to Mauzen for some of his code in GetVehicleRelativePos.
	*/
	new Float:rot, Float:x2, Float:y2, Float:z2, Float:div;
	GetVehiclePos(vehicleid, x2, y2, z2);
	GetVehicleZAngle(vehicleid, rot);
	rot = 360 - rot;
	switch(wheel)
	{
		case WHEELSFRONT_LEFT .. WHEELSFRONT_RIGHT: //Front Tyres
		{
		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_WHEELSFRONT, x, y, z);
		    div = (wheel == WHEELSFRONT_LEFT) ? (-x) : (x);
		}
		case WHEELSMID_LEFT .. WHEELSMID_RIGHT: //Middle Tyres
		{
		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_WHEELSMID, x, y, z);
		    div = (wheel == WHEELSMID_LEFT) ? (-x) : (x);
		}
		case WHEELSREAR_LEFT .. WHEELSREAR_RIGHT: //Rear Tyres
		{
		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_WHEELSREAR, x, y, z);
		    div = (wheel == WHEELSREAR_LEFT) ? (-x) : (x);
		}
	}
	x = floatsin(rot, degrees) * y + floatcos(rot, degrees) * div + x2;
	y = floatcos(rot, degrees) * y - floatsin(rot, degrees) * div + y2;
	z = z + z2;
	return 1;
}

stock SetPlayerFaceVehicle(playerid, vehicleid)
{
	/*new Float:Px, Float:Py, Float: Pa;
	GetPlayerPos(playerid, Px, Py, Pa);
	new Float:fpX, Float:fpY, Float: fpZ;
	GetVehiclePos(vehicleid, fpX, fpY, fpZ);
	Pa = floatabs(atan((fpY-Py)/(fpX-Px)));
	if(fpX <= Px && fpY >= Py) Pa = floatsub(180, Pa);
	else if(fpX < Px && fpY < Py) Pa = floatadd(Pa, 180);
	else if(fpX >= Px && fpY <= Py) Pa = floatsub(360.0, Pa);
	Pa = floatsub(Pa, 90.0);
	if(Pa >= 360.0) Pa = floatsub(Pa, 360.0);
	if(!IsPlayerInAnyVehicle(playerid)) SetPlayerFacingAngle(playerid, Pa);*/
	new Float:vehicleangle;
	GetVehicleZAngle(vehicleid, vehicleangle);
	SetPlayerFacingAngle(playerid, vehicleangle+180);
	return 1;
}

stock SetPlayerFacePlayer(playerid, faceplayerid)
{
	new Float:Px, Float:Py, Float: Pa;
	GetPlayerPos(playerid, Px, Py, Pa);
	new Float:fpX, Float:fpY, Float: fpZ;
	GetPlayerPos(faceplayerid, fpX, fpY, fpZ);
	Pa = floatabs(atan((fpY-Py)/(fpX-Px)));
	if(fpX <= Px && fpY >= Py) Pa = floatsub(180, Pa);
	else if(fpX < Px && fpY < Py) Pa = floatadd(Pa, 180);
	else if(fpX >= Px && fpY <= Py) Pa = floatsub(360.0, Pa);
	Pa = floatsub(Pa, 90.0);
	if(Pa >= 360.0) Pa = floatsub(Pa, 360.0);
	if(!IsPlayerInAnyVehicle(playerid)) SetPlayerFacingAngle(playerid, Pa);
	else SetVehicleZAngle(GetPlayerVehicleID(playerid), Pa);
}

stock ResetPlayerJobTask(playerid, bool:resetvehiclevar = true)
{
	if(PlayerInfo[playerid][pJobVehicle] != INVALID_VEHICLE_ID)
	{
		for(new i = 0; i < 4; i++)
		{
			if(IsValidDynamicObject(VehicleInfo[PlayerInfo[playerid][pJobVehicle]][vObjects][i]) && VehicleInfo[PlayerInfo[playerid][pJobVehicle]][vJob] == PlayerInfo[playerid][pJob])
			{
				DestroyDynamicObject(VehicleInfo[PlayerInfo[playerid][pJobVehicle]][vObjects][i], "job", "reset_task");
			}
			VehicleInfo[PlayerInfo[playerid][pJobVehicle]][vObjects][i] = INVALID_OBJECT_ID;
		}
	}
	if(PlayerInfo[playerid][pJob] == JOB_MECHANIC)
	{
		if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_REPAINT_VEHICLE)
		{
			RemovePlayerWeaponInSlot(playerid, 9);
		}
		if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_TUNE_VEHICLE || PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_TAKE_WHEELS)
		{
			tmpSelected[playerid] = 0;
		}
	}

	DisablePlayerCheckpointEx(playerid);
	RemovePlayerAttachedObject(playerid, 9);
	if(resetvehiclevar) PlayerInfo[playerid][pJobVehicle] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pJobCurrentAction] =
	PlayerInfo[playerid][pJobDestination] =
	PlayerInfo[playerid][pJobCurrentType] =
	PlayerInfo[playerid][pJobActionTime] =
	PlayerInfo[playerid][pJobActionIndex] = 0;
	JobGUI_Hide(playerid);
	return 1;
}

stock GetPlayerJobPay(playerid, job, level, type)
{
	#pragma unused playerid
	new paycheck;
	switch(job)
	{
		case JOB_TRUCKER:
		{
			switch(level)
			{
				case 1:
				{
					if(type == JOB_CARGO_TYPE_LEGAL)
					{
						paycheck = 180+random(100); // 250
					}
					else if(type == JOB_CARGO_TYPE_ILLEGAL)
					{
						paycheck = 350+random(100);
					}
				}
				case 2:
				{
					if(type == JOB_CARGO_TYPE_LEGAL)
					{
						paycheck = 300+random(200);
					}
					else if(type == JOB_CARGO_TYPE_ILLEGAL)
					{
						paycheck = 400+random(200);
					}
				}
				case 3:
				{
					if(type == JOB_CARGO_TYPE_LEGAL)
					{
						paycheck = 500+random(100);
					}
					else if(type == JOB_CARGO_TYPE_ILLEGAL)
					{
						paycheck = 600+random(100);
					}
				}
				case 4:
				{
					if(type == JOB_CARGO_TYPE_LEGAL)
					{
						paycheck = 600+random(50);
					}
					else if(type == JOB_CARGO_TYPE_ILLEGAL)
					{
						paycheck = 700+random(200);
					}
				}
			}
		}
	}
	return paycheck;
}

stock AddPlayerJobXP(playerid, job, xp)
{
	PlayerInfo[playerid][pJobXP] += xp;
	switch(job)
	{
		case JOB_TRUCKER:
		{
			if((PlayerInfo[playerid][pJobXP] >= DEFAULT_JOB_TRUCKER_XP_TO_LVL2 && PlayerInfo[playerid][pJobLevel] == 1) ||
				(PlayerInfo[playerid][pJobXP] >= DEFAULT_JOB_TRUCKER_XP_TO_LVL3 && PlayerInfo[playerid][pJobLevel] == 2))
			{
				PlayerInfo[playerid][pJobXP] = 0;
				PlayerInfo[playerid][pJobLevel]++;
				SendFormat(playerid, 0xFFDE88FF, "Sveikiname, jûsø darbo lygis pakilo (%d)!", PlayerInfo[playerid][pJobLevel]);
			}
		}
	}
	SaveAccountIntEx(playerid, "JobXP", PlayerInfo[playerid][pJobXP]);
	SaveAccountIntEx(playerid, "JobLevel", PlayerInfo[playerid][pJobLevel]);
	return 1;
}

stock GetPosFrontVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:offset=1.0)
{
	new Float:vehicleSize[3], Float:vehiclePos[3];
	GetVehiclePos(vehicleid, vehiclePos[0], vehiclePos[1], vehiclePos[2]);
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, vehicleSize[0], vehicleSize[1], vehicleSize[2]);
	GetXYFrontVehicle(vehicleid, vehiclePos[0], vehiclePos[1], (vehicleSize[1]/2)+offset);
	x = vehiclePos[0];
	y = vehiclePos[1];
	z = vehiclePos[2];
	return 1;
}

stock GetPosBehindVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:offset=1.0)
{
	new Float:vehicleSize[3], Float:vehiclePos[3];
	GetVehiclePos(vehicleid, vehiclePos[0], vehiclePos[1], vehiclePos[2]);
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, vehicleSize[0], vehicleSize[1], vehicleSize[2]);
	GetXYBehindVehicle(vehicleid, vehiclePos[0], vehiclePos[1], (vehicleSize[1]/2)+offset);
	x = vehiclePos[0];
	y = vehiclePos[1];
	z = vehiclePos[2];
	return 1;
}


GetXYBehindVehicle(vehicleid, &Float:q, &Float:w, Float:distance)
{
	new Float:a;
	GetVehiclePos(vehicleid, q, w, a);
	GetVehicleZAngle(vehicleid, a);
	q += (distance * -floatsin(-a, degrees));
	w += (distance * -floatcos(-a, degrees));
}

GetXYFrontVehicle(vehicleid, &Float:q, &Float:w, Float:distance)
{
	new Float:a;
	GetVehiclePos(vehicleid, q, w, a);
	GetVehicleZAngle(vehicleid, a);
	q += (distance * floatsin(-a, degrees));
	w += (distance * floatcos(-a, degrees));
}

stock GetJobTaskNameById(job, task)
{
	new name[26];
	switch(job)
	{
		case JOB_TRUCKER:
		{
			switch(task)
			{
				case JOB_ACTION_LOAD_CARGO: name = "Paimkite krovini";
				case JOB_ACTION_UNLOAD_CARGO: name = "Nuvezkite krovini";
				case JOB_ACTION_CARGO_CRATES_TAKE, JOB_ACTION_CARGO_CRATES_PUT: name = "Iskraukite dezes";
				case JOB_ACTION_CARGO_LEAVE_CAR: name = "Islipkite";
			}
		}
		case JOB_FARMER:
		{
			switch(task)
			{
				case JOB_ACTION_TAKE_COMBAIN: name = "Iseskite i kombaina";
				case JOB_ACTION_COLLECT_COMBAIN: name = "Surinkite derliu";
				case JOB_ACTION_PUT_BAG: name = "Nuneskite maisa";
				case JOB_ACTION_TAKE_BAG: name = "Paimkite maisa";
			}
		}
		case JOB_MECHANIC:
		{
			switch(task)
			{
				case JOB_ACTION_TAKE_REPAINT: name = "Paimkite dazus";
				case JOB_ACTION_REPAINT_VEHICLE: name = "Perdazykite tr. priemone";
				case JOB_ACTION_TAKE_REPAIR, JOB_ACTION_TAKE_ENGINE, JOB_ACTION_TAKE_ENGINE_REPAIR, JOB_ACTION_TAKE_BATTERY, JOB_ACTION_TAKE_BATTERY_REPAIR: name = "Paimkite dalis sandeliuke";
				case JOB_ACTION_PUT_PARTS_VEHICLE, JOB_ACTION_PUT_BATTERY, JOB_ACTION_PUT_BATTERY_REPAIR, JOB_ACTION_PUT_ENGINE, JOB_ACTION_PUT_ENGINE_REPAIR: name = "Nuneskite dalis";
				case JOB_ACTION_REPAIR_VEHICLE: name = "Tvarkykite tr. priemone";
				case JOB_ACTION_TAKE_WHEELS: name = "Paimkite dalis sandeliuke";
				case JOB_ACTION_PUT_WHEELS_VEHICLE: name = "Nuneskite dalis";
				case JOB_ACTION_TUNE_VEHICLE: name = "Tuninguokite tr. priemone";
			}
		}
	}
	return name;
}

stock divmod( const number, const divider, &div, &mod )
{
	div = floatround( number / divider, floatround_floor );
	mod = number - div * divider;
}

stock ConvertFuelToString(Float:fuellevel, Float:fuelcapacity)
{
	new fuel = floatround(((fuellevel*10) / fuelcapacity), floatround_round),
		string[16];
	if(fuel <= 0) string = " ";
	else for(new i = 0; i < fuel; i++) strcat(string, "I");

	if(fuel <= 3) strins(string, "~r~~h~", 0);
	else if(fuel <= 6) strins(string, "~y~", 0);
	else strins(string, "~g~~h~", 0);

	return string;
}



stock GetVehicleSpeed(vehicleid)
{
	new Float:x,
	    Float:y,
	    Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return floatround(floatsqroot(x*x + y*y + z*z) * 210);//200);
}

stock SetVehicleSpeed(vehicleid, mph)
{
	new 
		Float:Vx,
		Float:Vy,
		Float:Vz,
		Float:DV,
		Float:multiple;

	GetVehicleVelocity(vehicleid, Vx, Vy, Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0)
	{
		multiple = (mph / (DV * 200));
		return SetVehicleVelocity(vehicleid, Vx*multiple, Vy*multiple, Vz*multiple);
	}
	return 0;
}



stock PayDay(playerid)
{
	if(PlayerInfo[playerid][pJobContract] > 0) PlayerInfo[playerid][pJobContract]--;
	new playerjob = NONE,
		payday = PlayerInfo[playerid][pPayCheck],
		payday_business = 0,
		job_level = PlayerInfo[playerid][pJobLevel];
	
	/** Zaidejas yra darbe */
	if(PlayerInfo[playerid][pJob] > 0)
	{
		playerjob = GetJobArrayIndexById(PlayerInfo[playerid][pJob]);
		if(playerjob != -1)
		{
			payday += Jobs[playerjob][jobPayDay];

			new Float:multiply = 1 + job_level / 10.0;
			if(multiply < 1.0) 		multiply = 1.0;
			else if(multiply > 2.0) multiply = 2.0;

			payday = floatround(payday * multiply);
		}
	}

	/** Zaidejas yra frakcijoje */
	else if(PlayerInfo[playerid][pFaction] > 0)
	{
		playerjob = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
		if(playerjob != -1 && PlayerInfo[playerid][pJobLevel] >= 1)
		{
			payday += FactionRankSalaries[playerjob][PlayerInfo[playerid][pJobLevel]-1];
			if(FactionInfo[playerjob][fType] == FACTION_TYPE_POLICE && PlayerInfo[playerid][pPoliceBadge] <= 0 && PlayerInfo[playerid][pJobLevel] >= 1)
			{
				payday = floatround(payday*0.5);
			}
		}
	}

	if(payday == 0 && PlayerInfo[playerid][pJob] == 0) payday = BASE_PAYDAY_NO_JOB;


	new	taxes_vehicle,
		taxes_houses,
		taxes_business,
		taxes_rent,
		string[1012];

	// procentai i biudzeta savivaldybes
	new taxes = GetGVarInt("TaxesToCity");
	new pay_to_city = payday*taxes/100;

	// ================================================================
	// MOKESCIAI UZ TRANSPORTO PRIEMONES
	mysql_format(chandler, string, sizeof string, "SELECT Model FROM `vehicles_data` WHERE Owner = '%d'", PlayerInfo[playerid][pId]);
	new Cache:result = mysql_query(chandler, string, true);
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_int(0, "Model", taxes_business);
		taxes_vehicle += ((GetGVarInt("VehicleTaxes")/2)*VehicleClassLevel[taxes_business-400]);
	}
	cache_delete(result);
	// ================================================================

	// ================================================================
	// MOKESCIAI UZ VERSLUS
	mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `business_data` WHERE Owner = '%d'", PlayerInfo[playerid][pId]);
	result = mysql_query(chandler, string, true);
	taxes_business = GetGVarInt("BusinessTaxes")*cache_num_rows();
	if(PlayerInfo[playerid][pDonator] >= DONATOR_GOLD) taxes_business = floatround(taxes_business * 0.8);
	cache_delete(result);
	// ================================================================

	// MOKESCIAI UZ NAMUS
	// ================================================================
	mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `houses_data` WHERE Owner = '%d'", PlayerInfo[playerid][pId]);
	result = mysql_query(chandler, string, true);
	taxes_houses = GetGVarInt("HouseTaxes")*cache_num_rows();
	cache_delete(result);
	// ================================================================

	// NUOMA
	// ================================================================
	mysql_format(chandler, string, sizeof string, "SELECT HouseId FROM `houses_dubkeys` WHERE PlayerId = '%d' AND Valid = '1' AND Type = '1'", PlayerInfo[playerid][pId]);
	result = mysql_query(chandler, string, true);
	new houseid;
	cache_get_value_name_int(0, "HouseId", houseid);
	if((houseid = FindHouseBySql(houseid)) != INVALID_HOUSE_ID)
	{
		taxes_rent = HouseInfo[houseid][hRentPrice];
		if(HouseInfo[houseid][hUpdateSafe] > 0)
		{
			HouseInfo[houseid][hSafe] += taxes_rent;
		}
	}
	cache_delete(result);
	// ================================================================

	// VERSLU ALGA
	// ================================================================
	mysql_format(chandler, string, sizeof string, "SELECT business_data.id bdata_id, business_data.Name bdata_name, business_dubkeys.Salary bdub_salary FROM `business_data` INNER JOIN `business_dubkeys` ON business_data.id = business_dubkeys.BusinessId WHERE business_dubkeys.PlayerId = '%d' AND business_dubkeys.Salary > '0'", PlayerInfo[playerid][pId]);
	result = mysql_query(chandler, string, true);

	new	business_id,
		business_name[32],
		business_salary;
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name(i, "bdata_name", business_name);
		cache_get_value_name_int(i, "bdata_id", business_id);
		cache_get_value_name_int(i, "bdub_salary", business_salary);
		new businessid = FindBusinessBySql(business_id);
		if(businessid != INVALID_BUSINESS_ID)
		{
			if(business_salary > BusinessInfo[businessid][bBudget])
			{
				SendFormat(playerid, 0xF6F275FF, "Verslas {F6F04D}\"%s\"{F6F275} turëjo sumokëti Jums {F6F04D}$%d{F6F275} algà, taèiau biudþete nebëra pinigø.", business_name, business_salary);
				continue;
			}
			BusinessInfo[businessid][bBudget] -= business_salary;
			SaveBusinessIntEx(businessid, "Budget", BusinessInfo[businessid][bBudget]);
			payday_business += business_salary;	
		}
	}
	cache_delete(result);
	// ================================================================

	// SAVINGS
	// ================================================================
	new savings = floatround(PlayerInfo[playerid][pSavings] * 0.0025);
	PlayerInfo[playerid][pSavings] += savings;

	/* Savings Ceiling: */
	if(PlayerInfo[playerid][pSavings] >= MAX_SAVINGS_COLLECTED)
	{
		new savingsTemp = PlayerInfo[playerid][pSavings];
		PlayerInfo[playerid][pSavings] = 0;
		PlayerInfo[playerid][pBank] += savingsTemp;
		SendWarning(playerid, "Jûs pasiekëte palûkanø maksimumà "#MAX_SAVINGS_COLLECTED"$. Palûkanos iðimtos automatiðkai.");
	}
	// ================================================================
	


	// ================================================================
	// ZINUTE
	SendFormat(playerid, 0x55E451ff, "[Bank of Los Santos]");
	SendFormat(playerid, 0xF7F7F7ff, "[Gauta %s: $%d] [Mokeðèiai valstybei: $%d]", 
		(playerjob != NONE ? ("alga") : ("paðalpa")),
		payday, 
		pay_to_city
	);

	(taxes_vehicle > 0) && SendFormat(playerid, 0xF7F7F7ff, "[Transporto mokestis: $%d]", taxes_vehicle);
	(taxes_houses > 0) && SendFormat(playerid, 0xF7F7F7ff, "[Nek. turto mokestis: $%d]", taxes_houses);
	(taxes_business > 0) && SendFormat(playerid, 0xF7F7F7ff, "[Verslø mokestis: $%d]", taxes_business);
	(taxes_rent > 0) && SendFormat(playerid, 0xF7F7F7ff, "[Nuoma: $%d]", taxes_rent);
	(payday_business > 0) && SendFormat(playerid, 0xF7F7F7ff, "[Alga ið verslø: $%d]", payday_business);
	(savings > 0) && SendFormat(playerid, 0xF7F7F7ff, "[Gautos palûkanos: $%d]", savings);

	if(PlayerInfo[playerid][pJob] != 0)
	{
		playerjob = GetJobArrayIndexById(PlayerInfo[playerid][pJob]);
		if(playerjob != -1)
		{
			if(payday > Jobs[playerjob][jobMaxPayout]) payday = Jobs[playerjob][jobMaxPayout];
		}
	}

	payday += payday_business;
	payday -= (taxes_vehicle + taxes_houses + taxes_business + pay_to_city + taxes_rent); // galutines sumos skaiciavimas
	PlayerInfo[playerid][pBank] += payday;

	SendFormat(playerid, 0xFFFFFFff, "[Galutinë suma: $%d] [Balansas: $%d]", payday, PlayerInfo[playerid][pBank]);
	// ================================================================


	PlayerInfo[playerid][pPayCheck] = 0;

	// PRIDEDAM SAVIVALDYBEI PINIGU IR POLICIJAI
	new pd_taxes = GetGVarInt("TaxesToPolice");
	new pay_to_police = pay_to_city*pd_taxes/100;
	pay_to_city -= pay_to_police;

	foreach(new factionid : Faction)
	{
		if(FactionInfo[factionid][fType] == FACTION_TYPE_GOVERNMENT)
		{
			FactionInfo[factionid][fBudget] += pay_to_city;
		}
		if(FactionInfo[factionid][fType] == FACTION_TYPE_POLICE)
		{
			FactionInfo[factionid][fBudget] += pay_to_police;
		}
		if(FactionInfo[factionid][fType] == FACTION_TYPE_FIRE)
		{
			FactionInfo[factionid][fBudget] += 25;
		}
	}
	// ------------------------------------------
	PlayerInfo[playerid][pPayDayCollected] ++ ;
	if(PlayerInfo[playerid][pPayDayCollected] >= 2)
	{
		PlayerInfo[playerid][pPayDayCollected] = 0;
		AddPlayerJobXP(playerid, PlayerInfo[playerid][pJob], 1);
		PlayerInfo[playerid][pXP]++;
		PlayerInfo[playerid][pHoursPlayed]++;
		if(PlayerInfo[playerid][pXP] >= (PlayerInfo[playerid][pLevel] + 1)*4)
		{
			PlayerInfo[playerid][pLevel]++;
			PlayerInfo[playerid][pXP] = 0;
			SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
			SendFormat(playerid, 0x88D4FFFF, "Sveikiname, pakilo jûsø veikëjo lygis (%d)!", PlayerInfo[playerid][pLevel]);
		}
		// narkotikai
		for(new i = 0; i < MAX_DRUG_TYPES; i++)
		{
			// jei nenaudojo reikalinga laika, viska resetinam
			if(PlayerDrugs[playerid][i][drugUnused] > 0)
			{
				PlayerDrugs[playerid][i][drugUnused]--;
				if(PlayerDrugs[playerid][i][drugUnused] <= 0)
				{
					if(PlayerDrugs[playerid][i][drugLevel] > 0) PlayerDrugs[playerid][i][drugLevel]--;
					if(PlayerDrugs[playerid][i][drugLevel] > 0)
					{
						PlayerDrugs[playerid][i][drugUnused] = DrugLevelDrop[i][PlayerDrugs[playerid][i][drugLevel]];
					}
				}
			}
		}
	}
	PlayerInfo[playerid][pPayDayTime] = 0;
	log_init(true);
	log_set_table("logs_money");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Amount`");
	log_set_values("'%d','%e','Gavo alga','%d'", LogPlayerId(playerid), LogPlayerName(playerid), payday);
	log_commit();
	SaveAccount(playerid);
	return 1;
}

stock PlayerEnteredBuilding(playerid)
{
	return FreezePlayer(playerid, 3);
}

stock FreezePlayer(playerid, seconds)
{
	PlayerFreeze[playerid] = seconds;
	return TogglePlayerControllable(playerid, 0);
}

stock ProxDetector(Float:radi, playerid, string[], color1, color2, color3, color4, color5)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	foreach(new receiver : Player)
	{
	    if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(receiver))
  	    {
            if(IsPlayerInRangeOfPoint(receiver, radi / 16, x, y, z)) SendChatMessage(receiver, color1, string);
            else if(IsPlayerInRangeOfPoint(receiver, radi / 8, x, y, z)) SendChatMessage(receiver, color2, string);
            else if(IsPlayerInRangeOfPoint(receiver, radi / 4, x, y, z)) SendChatMessage(receiver, color3, string);
	        else if(IsPlayerInRangeOfPoint(receiver, radi / 2, x, y, z)) SendChatMessage(receiver, color4, string);
	        else if(IsPlayerInRangeOfPoint(receiver, radi, x, y, z)) SendChatMessage(receiver, color5, string);
        }
	}
	return 1;
}

stock ProxDetectorCoords(Float:radi, Float:x, Float:y, Float:z, string[], color1, color2, color3, color4, color5, vw = 0)
{
	foreach(new receiver : Player)
	{
	    if(GetPlayerVirtualWorld(receiver) == vw)
  	    {
            if(IsPlayerInRangeOfPoint(receiver, radi / 16, x, y, z)) SendChatMessage(receiver, color1, string);
            else if(IsPlayerInRangeOfPoint(receiver, radi / 8, x, y, z)) SendChatMessage(receiver, color2, string);
            else if(IsPlayerInRangeOfPoint(receiver, radi / 4, x, y, z)) SendChatMessage(receiver, color3, string);
	        else if(IsPlayerInRangeOfPoint(receiver, radi / 2, x, y, z)) SendChatMessage(receiver, color4, string);
	        else if(IsPlayerInRangeOfPoint(receiver, radi, x, y, z)) SendChatMessage(receiver, color5, string);
        }
	}
	return 1;
}

stock FurnitureFromIteratorToArray(array[], &index, type, furnitureowneritter)
{
	/*
		Funkcija praeis pro visa HFurniture itterator ir jei furniture savininkas = reikiamam, ji itrauks i array.
		Todel visi array index is eiles bus uzpildyti ir visi priklausys vienam savininkui pasirinktam.
	*/
	if(type == 1)
	{
		foreach(new furnitureid : HFurniture)
		{
			if(hFurnitureInfo[furnitureid][hfOwner] == HouseInfo[furnitureowneritter][hId])
			{
				array[index] = furnitureid;
			}
		}
	}
	else if(type == 2)
	{
		foreach(new furnitureid : BFurniture)
		{
			if(bFurnitureInfo[furnitureid][bfOwner] == BusinessInfo[furnitureowneritter][bId])
			{
				array[index] = furnitureid;
			}
		}
	}
	else if(type == 3)
	{
		foreach(new furnitureid : GFurniture)
		{
			if(gFurnitureInfo[furnitureid][gfOwner] == GarageInfo[furnitureowneritter][gId])
			{
				array[index] = furnitureid;
			}
		}
	}
	return 1;
}

stock NullFurnitureItem(type, itter)
{
	/*
		Funkcija nu'null'ins furniture array pasirinkta index.
	*/
	switch(type)
	{
		case 1:
		{
			new __reset_HFurniture[E_HOUSE_FURNITURE_DATA];
			format(hFurnitureInfo[itter][hfName], 1, "");
			if(IsValidDynamicObject(hFurnitureInfo[itter][hfObject])) DestroyDynamicObject(hFurnitureInfo[itter][hfObject], "furniture", "null");
			hFurnitureInfo[itter] = __reset_HFurniture;
			hFurnitureInfo[itter][hfObject] = INVALID_OBJECT_ID;
		}
		case 2:
		{
			new __reset_BFurniture[E_BUSINESS_FURNITURE_DATA];
			format(bFurnitureInfo[itter][bfName], 1, "");
			if(IsValidDynamicObject(bFurnitureInfo[itter][bfObject])) DestroyDynamicObject(bFurnitureInfo[itter][bfObject], "furniture", "null");
			bFurnitureInfo[itter] = __reset_BFurniture;
			bFurnitureInfo[itter][bfObject] = INVALID_OBJECT_ID;
		}
		case 3:
		{
			new __reset_GFurniture[E_GARAGE_FURNITURE_DATA];
			format(gFurnitureInfo[itter][gfName], 1, "");
			if(IsValidDynamicObject(gFurnitureInfo[itter][gfObject])) DestroyDynamicObject(gFurnitureInfo[itter][gfObject], "furniture", "null");
			gFurnitureInfo[itter] = __reset_GFurniture;
			gFurnitureInfo[itter][gfObject] = INVALID_OBJECT_ID;
		}
	}
	return 1;
}

stock DestroyFurniturePreview(playerid, bool:show = true)
{
	/*
		Funkcija, kuri isjungs ir uzbaigs zaidejui furniture objekto perziura.
	*/
	SetPlayerWeather(playerid, GetWorldWeather());
	SetPlayerTime(playerid, GetWorldTime(), 0);

	SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
	HidePlayerFurnitureBuy(playerid);
	GetESCType(playerid) = ESC_TYPE_NONE;
	if(PlayerInfo[playerid][pViewStatus] == PLAYER_VIEW_STATUS_FURNITURE)
	{
		if(IsValidDynamicObject(tmpPage_Object[playerid])) DestroyDynamicObject(tmpPage_Object[playerid], "furniture", "preview");
	}
	tmpPage_Object[playerid] = INVALID_OBJECT_ID;
	CancelSelectTextDraw(playerid);
	PlayerInfo[playerid][pViewStatus] = PLAYER_VIEW_STATUS_NONE;
	show && OnDialogResponse(playerid, DIALOG_FURNITURE_MAIN, 1, 1, "");
	return 1;
}

forward DestroyBlood(objectid);
public DestroyBlood(objectid)
{
	if(IsValidDynamicObject(objectid)) DestroyDynamicObject(objectid, "effects", "blood");
}

stock SetPlayerFaceObject(playerid, objectid, bool:dynamic = false)
{
	/*
		Funkcija, atsuka zaidejo kameros kampa i objekta.
	*/
	new
		Float:pX, Float:pY, Float:pZ,
		Float:gX, Float:gY, Float:gZ
	;
	if( GetPlayerPos(playerid, pX, pY, pZ) &&
		!dynamic ? GetObjectPos(objectid, gX, gY, gZ) : GetDynamicObjectPos(objectid, gX, gY, gZ)) {
			return SetPlayerFacingAngle(playerid, (pX = -atan2((gX - pX), (gY - pY))));
	}
	return false;
}
stock GetObjectFrontVector(objectid, bool:dynamic, Float:distance, &Float:x, &Float:y)
{
	/*
		Funkcija, grazinanti zaidejo priekio vektorines pozicijas
	*/
	new Float:object_z,
		Float:object_a;
	if((dynamic && GetDynamicObjectPos(objectid, x, y, object_z) && GetDynamicObjectRot(objectid, object_a, object_a, object_a))
		|| (!dynamic && GetObjectPos(objectid, x, y, object_z) && GetObjectRot(objectid, object_a, object_a, object_a)))
	{
		x -= (distance * floatsin(-object_a, degrees));
		y -= (distance * floatcos(-object_a, degrees));
		return true;
	}
	return false;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	/*
		Funkcija, kuri isgaus X Y koordinates zaidejo priekyje uz tam tikro atstumo.
	*/
	new Float:a;

	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);

	if (GetPlayerVehicleID(playerid)) {
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}

	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

stock AM_ShowAllHouses(playerid, page)
{
	tmpAmenuCurPage[playerid] = page;
	tmpAmenuIter[playerid] = 0;
	tmpAmenuNextPage[playerid] = false;

	new string[7000] = "{BABABA}Nr.\t{BABABA}MySQL ID (numeris)\t{BABABA}Savininkas\n{FFFFFF}",
		real_iter = 0,
		count_on_this_page = 0,
		name[24],
		line[86];
	foreach(new house : House)
	{
		if(HouseInfo[house][hId] != 0)
		{
			if(real_iter >= MAX_HOUSES_PER_PAGE * tmpAmenuCurPage[playerid])
			{
				if(count_on_this_page >= MAX_HOUSES_PER_PAGE)
				{
					if(Iter_Last(House) != house)
					{
						tmpAmenuNextPage[playerid] = true;
						strcat(string, "Kitas >>\n");
						break;
					}
				}
				else
				{
					if(HouseInfo[house][hOwner] == 0) format(name, 10, "-");
					else format(name, sizeof name, GetNameBySql(HouseInfo[house][hOwner]));

					format(line, sizeof line, "%d.\t%d\t%s\n", real_iter + 1, HouseInfo[house][hId], name);
					strcat(string, line);
				}
				count_on_this_page++;
			}
			real_iter++;
		}
	}
	tmpAmenuIter[playerid] = count_on_this_page;
	if(real_iter == 0) return ShowPlayerAdminMenu(playerid) , SendWarning(playerid, "Nëra namø.");
	if(tmpAmenuCurPage[playerid] > 0) strcat(string, "<< Atgal");
	ShowPlayerDialog(playerid, DIALOG_AM_HOUSES_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Namai", string, "Tæsti", "Atðaukti");
	return 1;
}

stock AM_ShowAllBusiness(playerid, page)
{
	tmpAmenuCurPage[playerid] = page;
	tmpAmenuIter[playerid] = 0;
	tmpAmenuNextPage[playerid] = false;

	new string[7000] = "{BABABA}Nr.\t{BABABA}Pavadinimas\t{BABABA}MySQL ID (numeris)\t{BABABA}Savininkas{FFFFFF}\n",
		owner[24],
		real_iter,
		count_on_this_page,
		line[66];
	
	foreach(new businessid : Business)
	{
		if(BusinessInfo[businessid][bId] != 0)
		{
			if(real_iter >= MAX_BUSINESS_PER_PAGE * tmpAmenuCurPage[playerid])
			{
				if(count_on_this_page >= MAX_BUSINESS_PER_PAGE)
				{
					if(Iter_Last(Business) != businessid)
					{
						tmpAmenuNextPage[playerid] = true;
						strcat(string, "Kitas >>\n");
						break;
					}
				}
				else
				{
					if(BusinessInfo[businessid][bOwner] == 0) format(owner, 10, "-");
					else format(owner, sizeof owner, GetNameBySql(BusinessInfo[businessid][bOwner]));

					format(line, sizeof line, "%d.\t%.10s%s\t%d\t%s\n", real_iter+1, BusinessInfo[businessid][bName], strlen(BusinessInfo[businessid][bName]) > 10 ? ("..") : (" "), BusinessInfo[businessid][bId], owner);
					strcat(string, line);
				}
				count_on_this_page++;
			}
			real_iter++;
		}
	}
	tmpAmenuIter[playerid] = count_on_this_page;
	if(real_iter == 0) return ShowPlayerAdminMenu(playerid) , SendWarning(playerid, "Nëra verslø.");
	if(tmpPage_Object[playerid] > 0) strcat(string, "<< Atgal");
	ShowPlayerDialog(playerid, DIALOG_AM_BUSINESS_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Verslai", string, "Tæsti", "Atðaukti");
	return 1;
}

stock ShowOwnedFurniture(playerid, page, type, iter)
{
	new 
		mainstr[4048],
		lowstr[86],
		id;

	tmpFurniturePage[playerid] = page;
	tmpType_Salon[playerid] = type;
	tmpIter[playerid] = iter;
	tmpFurnitureNextPage[playerid] = false;

	switch(tmpType_Salon[playerid])
	{
		case 1:
		{
			foreach(new furnitureid : HFurniture)
			{
				if(hFurnitureInfo[furnitureid][hfOwner] == HouseInfo[iter][hId])
				{
					if(id >= page*MAX_FURNITURE_PER_PAGE)
					{
						if(id >= MAX_FURNITURE_PER_PAGE*(page+1)) 
						{
							tmpFurnitureNextPage[playerid] = true;
							strcat(mainstr, ">> Kitas");
							break;
						}
						else
						{
							format(lowstr, sizeof lowstr, "%s%d. %.20s%s\n", (FurnitureMultiSelectionEnabled{playerid} == true ? ((tmpArray[playerid][id] == 1 ? ("[{48BE2D}+{FFFFFF}] ") : ("[{FF0000}-{FFFFFF}] "))) : ("")), id+1, hFurnitureInfo[furnitureid][hfName], strlen(hFurnitureInfo[furnitureid][hfName]) > 14 ? ("..") : (""));
							strcat(mainstr, lowstr);
						}
					}
					id++;
				}
			}
			tmpTexture_MarkStart_CP[playerid] = id;
		}
		case 2:
		{
			foreach(new furnitureid : BFurniture)
			{
				if(bFurnitureInfo[furnitureid][bfOwner] == BusinessInfo[iter][bId])
				{
					if(id >= page*MAX_FURNITURE_PER_PAGE)
					{
						if(id >= MAX_FURNITURE_PER_PAGE*(page+1)) 
						{
							strcat(mainstr, ">> Kitas");
							tmpFurnitureNextPage[playerid] = true;
							break;
						}
						else
						{
							format(lowstr, sizeof lowstr, "%s%d. %.14s%s\n", (FurnitureMultiSelectionEnabled{playerid} == true ? ((tmpArray[playerid][id] == 1 ? ("[{48BE2D}+{FFFFFF}] ") : ("[{FF0000}-{FFFFFF}] "))) : ("")), id+1, bFurnitureInfo[furnitureid][bfName], strlen(bFurnitureInfo[furnitureid][bfName]) > 14 ? ("..") : (""));
							strcat(mainstr, lowstr);
						}
					}
					id++;
				}
			}
			tmpTexture_MarkStart_CP[playerid] = id;
		}
		case 3:
		{
			foreach(new furnitureid : GFurniture)
			{
				if(gFurnitureInfo[furnitureid][gfOwner] == GarageInfo[iter][gId])
				{
					if(id >= page*MAX_FURNITURE_PER_PAGE)
					{
						if(id >= MAX_FURNITURE_PER_PAGE*(page+1)) 
						{
							strcat(mainstr, ">> Kitas");
							tmpFurnitureNextPage[playerid] = true;
							break;
						}
						else
						{
							format(lowstr, sizeof lowstr, "%s%d. %.14s%s\n", (FurnitureMultiSelectionEnabled{playerid} == true ? ((tmpArray[playerid][id] == 1 ? ("[{48BE2D}+{FFFFFF}] ") : ("[{FF0000}-{FFFFFF}] "))) : ("")), id+1, gFurnitureInfo[furnitureid][gfName], strlen(gFurnitureInfo[furnitureid][gfName]) > 14 ? ("..") : (""));
							strcat(mainstr, lowstr);
						}
					}
					id++;
				}
			}
			tmpTexture_MarkStart_CP[playerid] = id;
		}
	}
	if(strlen(mainstr))
	{
		/*if(GetGVarInt("EnabledFurnitureMultiSelect"))
		{
			if(FurnitureMultiSelectionEnabled{playerid} == true) strcat(mainstr, "{E67D32}Iðjungti þymëjimà\nPaþymëti visus\nAtþymëti visus\nRedaguoti paþymëtus");
			else strcat(mainstr, "{E6A732}Ájungti þymëjimà");
		}*/
		//if(tmpFurniturePage[playerid] > 0) strcat(mainstr, "<< Atgal");
		ShowPlayerDialog(playerid, DIALOG_FURNITURE_OWNED, DIALOG_STYLE_LIST, "Turimi baldai", mainstr, "Tæsti", "Atðaukti");
	}
	else pc_cmd_furniture(playerid, ""), InfoBox(playerid, "NERA", "BALDU");
}

stock ShowPlayerFurnitureBuy(playerid, string[])
{
	/*
		Funkcija, rodanti zaidejui furniture objekto pirkima textdrawuose.
	*/
	FurniturePreview_RX[playerid] = 0.0,
	FurniturePreview_RY[playerid] = 0.0,
	FurniturePreview_RZ[playerid] = 0.0;
	TextDrawShowForPlayer(playerid, Furniture_LeftBorder);
	TextDrawShowForPlayer(playerid, Furniture_LeftBase);
	TextDrawShowForPlayer(playerid, Furniture_Left);
	TextDrawShowForPlayer(playerid, Furniture_RightBorder);
	TextDrawShowForPlayer(playerid, Furniture_RightBase);
	TextDrawShowForPlayer(playerid, Furniture_Right);
	TextDrawShowForPlayer(playerid, Furniture_UpBorder);
	TextDrawShowForPlayer(playerid, Furniture_UpBase);
	TextDrawShowForPlayer(playerid, Furniture_Up);
	TextDrawShowForPlayer(playerid, Furniture_DownBorder);
	TextDrawShowForPlayer(playerid, Furniture_DownBase);
	TextDrawShowForPlayer(playerid, Furniture_Down);
	TextDrawShowForPlayer(playerid, Furniture_BuyBorder);
	TextDrawShowForPlayer(playerid, Furniture_BuyBase);
	TextDrawShowForPlayer(playerid, Furniture_Buy);
	TextDrawShowForPlayer(playerid, Furniture_CloseBorder);
	TextDrawShowForPlayer(playerid, Furniture_CloseBase);
	TextDrawShowForPlayer(playerid, Furniture_Close);
	TextDrawShowForPlayer(playerid, Furniture_DataBase);
	PlayerTextDrawSetString(playerid, Furniture_Data[playerid], string);
	PlayerTextDrawShow(playerid, Furniture_Data[playerid]);
	ShowESCTextdraw(playerid, ESC_TYPE_FURNITURE);
	return 1;
}

stock HidePlayerFurnitureBuy(playerid)
{
	/*
		Funkcija, isjungianti zaidejo furniture pirkimo langa.
	*/
	TextDrawHideForPlayer(playerid, Furniture_LeftBorder);
	TextDrawHideForPlayer(playerid, Furniture_LeftBase);
	TextDrawHideForPlayer(playerid, Furniture_Left);
	TextDrawHideForPlayer(playerid, Furniture_RightBorder);
	TextDrawHideForPlayer(playerid, Furniture_RightBase);
	TextDrawHideForPlayer(playerid, Furniture_Right);
	TextDrawHideForPlayer(playerid, Furniture_UpBorder);
	TextDrawHideForPlayer(playerid, Furniture_UpBase);
	TextDrawHideForPlayer(playerid, Furniture_Up);
	TextDrawHideForPlayer(playerid, Furniture_DownBorder);
	TextDrawHideForPlayer(playerid, Furniture_DownBase);
	TextDrawHideForPlayer(playerid, Furniture_Down);
	TextDrawHideForPlayer(playerid, Furniture_BuyBorder);
	TextDrawHideForPlayer(playerid, Furniture_BuyBase);
	TextDrawHideForPlayer(playerid, Furniture_Buy);
	TextDrawHideForPlayer(playerid, Furniture_CloseBorder);
	TextDrawHideForPlayer(playerid, Furniture_CloseBase);
	TextDrawHideForPlayer(playerid, Furniture_Close);
	TextDrawHideForPlayer(playerid, Furniture_DataBase);
	PlayerTextDrawHide(playerid, Furniture_Data[playerid]);
	return 1;
}

stock formatlt(string[])
{
	/*
		Funkcija, pavercianti eilute su lietuviskomis raidemis i angliskas
	*/
	new strlenght = strlen(string),
		str[126];
	format(str, sizeof str, string);
	for(new i = 0; i < strlenght; i++)
	{
		if(str[i] == 'À') str[i] = 'A';
		if(str[i] == 'à') str[i] = 'a';
		if(str[i] == 'È') str[i] = 'C';
		if(str[i] == 'è') str[i] = 'c';
		if(str[i] == 'Æ') str[i] = 'E';
		if(str[i] == 'æ') str[i] = 'e';
		if(str[i] == 'Ë') str[i] = 'E';
		if(str[i] == 'ë') str[i] = 'e';
		if(str[i] == 'Á') str[i] = 'I';
		if(str[i] == 'á') str[i] = 'i';
		if(str[i] == 'Ð') str[i] = 'S';
		if(str[i] == 'ð') str[i] = 's';
		if(str[i] == 'Ø') str[i] = 'U';
		if(str[i] == 'ø') str[i] = 'u';
		if(str[i] == 'Û') str[i] = 'U';
		if(str[i] == 'û') str[i] = 'u';
		if(str[i] == 'Þ') str[i] = 'Z';
		if(str[i] == 'þ') str[i] = 'z';
	}
	return str;
}



stock IsVehicleDrivingBackwards(vehicleid)
{
	/*
		Funkcija, grazinanti reiksme ar masina vaziuoja atgal.
	*/
    new Float:Float[3];
    if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
    {
        GetVehicleZAngle(vehicleid, Float[0]);
        if(Float[0] < 90)
        {
            if(Float[1] > 0 && Float[2] < 0) return true;
        }
        else if(Float[0] < 180)
        {
            if(Float[1] > 0 && Float[2] > 0) return true;
        }
        else if(Float[0] < 270)
        {
            if(Float[1] < 0 && Float[2] > 0) return true;
        }
        else if(Float[1] < 0 && Float[2] < 0) return true;
    }
    return false;
}

stock DisconnectPlayer(playerid)
{
	/*
		Funkcija, naudojant atjungiant zaideja. Ji pasalina zaidejui priklausancius intro NPC ir pns.
	*/
	if(PlayerInfo[playerid][pJobDuty] > 0)
	{
		if(	PlayerInfo[playerid][pJob] == JOB_TRUCKER && 
			PlayerInfo[playerid][pJobDestination] > 0 &&
			PlayerInfo[playerid][pJobCurrentType] == 1) 
		{
			OnTruckerCancelWares(playerid, PlayerInfo[playerid][pJobDestination]);
		}
	}
	ResetPlayerJobTask(playerid);
	DestroyFurniturePreview(playerid, false);
	return 1;
}

stock SetVehicleLocalXYVelocity(vehicleid, Float:VelocityX, Float:VelocityY)
{
	// FUNCTION: Set the local XY velocity of the specified vehicle (velocity relative to its Z rotation angle).
	new Float:VSpeed[3], Float:VRotZ;
	GetVehicleVelocity(vehicleid, VSpeed[0], VSpeed[1], VSpeed[2]);
	GetVehicleZAngle(vehicleid, VRotZ);
	// Optimized, thanks to Nero_3D.
	SetVehicleVelocity(vehicleid, floatcos(VRotZ, degrees) * VelocityX - floatsin(VRotZ, degrees) * VelocityY, floatsin(VRotZ, degrees) * VelocityX + floatcos(VRotZ, degrees) * VelocityY, VSpeed[2]);
	return 1;
}

stock GetVehicleLocalXYVelocity(vehicleid, &Float:VelocityX, &Float:VelocityY)
{
	// FUNCTION: Get the local XY velocity of the specified vehicle (velocity relative to its Z rotation angle).
	new Float:VSpeed[3], Float:VRotZ;
	GetVehicleVelocity(vehicleid, VSpeed[0], VSpeed[1], VSpeed[2]);
	GetVehicleZAngle(vehicleid, VRotZ);
	// Optimized, thanks to Nero_3D.
	VelocityX = floatsin(VRotZ, degrees) * VSpeed[1] + floatcos(VRotZ, degrees) * VSpeed[0];
	VelocityY = floatcos(VRotZ, degrees) * VSpeed[1] - floatsin(VRotZ, degrees) * VSpeed[0];
	return 1;
}

stock Vehicle_ResetTrunkWeapons(vehicleid)
{
	new __reset_Trunk[E_FACTION_TRUNK_WEAPONS_DATA];
	for(new i = 0; i < MAX_VEHICLE_WEAPON_SLOTS; i++) VehicleWeaponsInventory[vehicleid][i] = __reset_Trunk;
}

stock VehicleSpeedboost(vehicleid, Float:BoostSpeed)
{
	// Boost the vehicle forward (local Y velocity) while cancelling it's side speed (local X velocity).
	// This also maintains the vehicle's original forward speed, which means the vehicle will go faster every time it is used.
	// Using a negative BoostSpeed will boost the vehicle backward.
	new Float:VLocalSpeed[2];
	GetVehicleLocalXYVelocity(vehicleid, VLocalSpeed[0], VLocalSpeed[1]);
	SetVehicleLocalXYVelocity(vehicleid, 0.0, VLocalSpeed[1] + BoostSpeed);
	return 1;
}

stock EngineTurning(playerid)
{
	if(UI_LoadBar_IsActive(playerid)) return 0;

	new vehicleid;
	if((vehicleid = GetPlayerVehicleID(playerid)) && IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
	{
		new 
			have_permission = HaveVehicleKey(playerid, vehicleid, .canbejob = true);
		call OnPlayerEngineTurning(playerid, vehicleid, have_permission);
		if(have_permission)
		{
			if(VehicleInfo[vehicleid][vEngined] == 1)
			{
				// jau uzvestas, tiesiog uzgesinam.
				rp_ame(playerid, "uþgesina tr. priemonës variklá.");
				ChangeVehicleEngineStatus(playerid, vehicleid);
			}
			else
			{
				new turn_time = 1200 +
								floatround((VehicleInfo[vehicleid][vBatteryStatus] > 90.0 ? 0.0 : (100-VehicleInfo[vehicleid][vBatteryStatus])*28)) +
								floatround((VehicleInfo[vehicleid][vEngineStatus] > 50.0 ? 0.0 : (100-VehicleInfo[vehicleid][vEngineStatus])*20));
				
				if(UI_LoadBar_Start(playerid, "TurnEngine", "Variklio uzvedimas", turn_time))
				{
					rp_ame(playerid, "bando uþvesti tr. priemonës variklá.");
				}
			}
		}
	}
	return 1;
}

stock ChangeVehicleEngineStatus(playerid, vehicleid)
{
	// Rpcmd
	VehicleInfo[vehicleid][vEngined] = !VehicleInfo[vehicleid][vEngined];
	if(VehicleInfo[vehicleid][vEngined] == 0)
	{
		UI_LeftBox_Show(playerid, "Variklis ~r~uzgesintas");
		if(VehicleHaveEngine(GetVehicleModel(vehicleid)))
		{
			Speedo_Update(playerid, .fuel_level = "DEGALAI:");
		}
	}
	else
	{
		UI_LeftBox_Show(playerid, "Variklis ~g~uzvestas");
	}
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngined], lights, alarm, doors, bonnet, boot, objective);
}

stock SetEngineParams(vehicleid, params)
{
	new lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, lights, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, params, lights, alarm, doors, bonnet, boot, objective);
}

forward UpdateSpamBar(playerid, type);
public UpdateSpamBar(playerid, type)
{
	switch(type)
	{
		case JOB_ACTION_REPAIR_VEHICLE, JOB_ACTION_TUNE_VEHICLE, JOB_ACTION_BATTERY_CHANGE, JOB_ACTION_ENGINE_CHANGE, JOB_ACTION_BATTERY_REPAIR, JOB_ACTION_ENGINE_REPAIR:
		{
			if(PlayerInfo[playerid][pJobDestination] > 0)
			{
				LastSpamBarPressed[playerid]++;
				new currentpercent = PlayerInfo[playerid][pJobDestination];
				if(LastSpamBarPressed[playerid] >= 4) PlayerInfo[playerid][pJobDestination] -= (currentpercent >= 10 ? 10 : currentpercent); // senai paspaude SPACE, del to nuimam daxuja.
				else PlayerInfo[playerid][pJobDestination]--;
				SpamBarTD_Update(playerid, PlayerInfo[playerid][pJobDestination]);
			}
		}
	}
	return 1;
}


stock ParkVehicle(vehicleid, Float:health = -1.0, bool:use_sync = true)
{
	new
		panels, doors, lights, tires,
		Float:x, Float:y, Float:z, Float:a,
		col1, col2,
		damage[50],
		string[312];

	if(health == -1.0)
	{
		GetVehicleHealth(vehicleid, health);
	}
	if(use_sync)
	{
		x = VehicleInfo[vehicleid][vSyncX],
		y = VehicleInfo[vehicleid][vSyncY],
		z = VehicleInfo[vehicleid][vSyncZ],
		a = VehicleInfo[vehicleid][vSyncA];
	}
	else
	{
		GetVehiclePos(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, a);
	}
	GetVehicleColor(vehicleid, col1, col2);
	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
	format(damage, sizeof damage, "%d/%d/%d/%d/%d/", panels, doors, lights, tires, floatround(health));

	mysql_format(chandler, string, sizeof string, "\
		UPDATE `vehicles_data` SET Color1 = '%d', Color2 = '%d', X = '%f', Y = '%f', Z = '%f', A = '%f', \
		Damage = '%e', SpawnedId = '0', Fuel = '%f', KM = '%f', VW = '%d', Interior = '%d' WHERE id = '%d'",
		col1, col2, x, y, z, a, damage, VehicleInfo[vehicleid][vFuel], VehicleInfo[vehicleid][vKM], GetVehicleVirtualWorld(vehicleid), VehicleInfo[vehicleid][vInt], VehicleInfo[vehicleid][vId]);
	mysql_fquery(chandler, string, "VehicleParked");

	if(IsValidDynamicObject(vehicle_Taxi_Object[vehicleid]))
	{
		DestroyDynamicObject(vehicle_Taxi_Object[vehicleid]);
		vehicle_Taxi_Object[vehicleid] = -1;
	}
	vehicle_Taxi_Duty[vehicleid] = false;
	vehicle_Taxi_Price[vehicleid] = 0;
	vehicle_Taxi_IsFree[vehicleid] = true;

	foreach(new playerid : Player)
	{
		if(player_Taxi_Duty[playerid] == vehicleid)
		{
			player_Taxi_Duty[playerid] = INVALID_VEHICLE_ID;
		}
	}

	SaveVehicleInventory(vehicleid);

	NullVehicle(vehicleid);
	DestroyVehicle(vehicleid);
	return 1;
}

thread(WorkerDeleted);

stock strsymbols(string[], to_search[], bool:ignorecase = true)
{
	new last_pos = 0,
		curr_pos,
		count;
	while((curr_pos = strfind(string, to_search, ignorecase, last_pos)) != -1)
	{
		last_pos = curr_pos + 1;
		count++;
	}
	return count;
}

stock HideJailTimer(playerid)
{
	PlayerTextDrawHide(playerid, JailTimeTD_Time[playerid]);
	TextDrawHideForPlayer(playerid, JailTimeTD_Timer);
	TextDrawHideForPlayer(playerid, JailTimeTD_Bg);
	ShowingJailTimer{playerid} = false;
	return 1;
}

stock UpdateJailTimer(playerid)
{
	if(!TextdrawDisabled_JailTimer{playerid})
	{
		new minute, second, string[36];
		divmod(PlayerInfo[playerid][pJailTime], 60, minute, second);
		format(string, sizeof string, "KALEJIMO LAIKAS: %02d:%02d", minute, second);
		PlayerTextDrawSetString(playerid, JailTimeTD_Time[playerid], string);
		if(!ShowingJailTimer{playerid})
		{
			PlayerTextDrawShow(playerid, JailTimeTD_Time[playerid]);
			TextDrawShowForPlayer(playerid, JailTimeTD_Timer);
			TextDrawShowForPlayer(playerid, JailTimeTD_Bg);
			ShowingJailTimer{playerid} = true;
		}
	}
	return 1;
}

stock UpdateInfoBar(playerid, string[])
{
	if(!TextdrawDisabled_InfoBar{playerid})
	{
		strcat(string, "~n~", 128);
		PlayerTextDrawSetString(playerid, InfoBar[playerid], string);
		if(!ShowingInfoBar{playerid})
		{
			PlayerTextDrawShow(playerid, InfoBar[playerid]);
			ShowingInfoBar{playerid} = true;
		}
	}
	return 1;
}

stock HideInfoBar(playerid)
{
	ShowingInfoBar{playerid} = false;
	PlayerTextDrawHide(playerid, InfoBar[playerid]);
	return 1;
}

stock GetUserNameById(sqlid)
{
	new string[64],
		name[24],
		Cache:memory = cache_save();
	mysql_format(chandler, string, sizeof string, "SELECT Name FROM `users_data` WHERE id = '%d'", sqlid);
	new Cache:result = mysql_query(chandler, string, true);
	cache_set_active(result);
	if(cache_num_rows()) cache_get_value_name(0, "Name", name, 23);
	else format(name, sizeof name, "None_%d", sqlid);
	cache_delete(result);
	cache_set_active(memory);
	return name;
}
stock GetNewCharNameBySql(sqlid) {
	new name[MAX_PLAYER_NAME+1];
	format(name, MAX_PLAYER_NAME+1, GetStringBySqlId(sqlid, "Name", "players_new"));
	return name;
}
stock GetNameBySql(sqlid) {
	new name[MAX_PLAYER_NAME+1];
	format(name, MAX_PLAYER_NAME+1, GetStringBySqlId(sqlid, "Name", "players_data"));
	return name;
}
stock GetStringBySqlId(sqlid, row[], table[])
{
	new string[64],
		return_str[56],
		Cache:memory = cache_save();
	mysql_format(chandler, string, sizeof string, "SELECT `%e` FROM `%e` WHERE id = '%d'", row, table, sqlid);
	new Cache:result = mysql_query(chandler, string, true);
	if(cache_num_rows()) cache_get_value_name(0, row, return_str, 23);
	else format(return_str, sizeof return_str, "None");
	cache_delete(result);
	cache_set_active(memory);
	return return_str;
}

stock FindPlayerBySql(sqlid)
{
	/*
		Funkcija, grazinanti zaidejo serverio id pagal mysql id
	*/
	foreach(new playerid : Player) if(PlayerInfo[playerid][pId] == sqlid) return playerid;
	return INVALID_PLAYER_ID;
}

stock FindHouseBySql(sqlid)
{
	foreach(new houseid : House) if(HouseInfo[houseid][hId] == sqlid) return houseid;
	return INVALID_HOUSE_ID;
}

stock FindBusinessBySql(sqlid)
{
	foreach(new businessid : Business) if(BusinessInfo[businessid][bId] == sqlid) return businessid;
	return INVALID_BUSINESS_ID;
}

stock FindPlayerByName(name[])
{
	/*
	 	Funkcija, grazinanti zaidejo id pagal varda
	 */
	foreach(new playerid : Player) if(!strcmp(GetPlayerNameEx(playerid), name, true)) return playerid;
	return INVALID_PLAYER_ID;
}

stock ClearBFurniture(itter)
{
	/*
	 * Iðvalo array verslo furniture objekto.
	 */
	new __reset_BFurniture[E_BUSINESS_FURNITURE_DATA];
	bFurnitureInfo[itter] = __reset_BFurniture;
	bFurnitureInfo[itter][bfObject] = INVALID_OBJECT_ID;
	return 1;
}
stock ClearHFurniture(itter)
{
	/*
	 * Iðvalo array namo furniture objekto.
	 */
	new __reset_HFurniture[E_HOUSE_FURNITURE_DATA];
	hFurnitureInfo[itter] = __reset_HFurniture;
	hFurnitureInfo[itter][hfObject] = INVALID_OBJECT_ID;
	return 1;
}
stock ClearGFurniture(itter)
{
	/*
	 * Iðvalo array namo furniture objekto.
	 */
	new __reset_GFurniture[E_GARAGE_FURNITURE_DATA];
	gFurnitureInfo[itter] = __reset_GFurniture;
	gFurnitureInfo[itter][gfObject] = INVALID_OBJECT_ID;
	return 1;
}
stock GetPlayerNameEx(playerid, bool:roleplay = false, bool:ignoremask = false)
{
	/*
	 * Funkcija zaidejo vardo isgavimui. Jei 'roleplay' = 'true', '_' zenklu varde nebus.
	 */
	new string[MAX_PLAYER_NAME+1];
	if(playerid == INVALID_PLAYER_ID) return string;
	format(string, sizeof string, PlayerInfo[playerid][pName]);
	if(roleplay)
	{
		if(!ignoremask && PlayerExtra[playerid][peMask] > 0)
		{
			format(string, sizeof string, "Kaukëtasis [%d]", GetPlayerMaskNumber(playerid));
		}
		else
		{
			for(new i = 0; i < sizeof string; i++)
			{
				if(string[i] == EOS) { break; }
				if(string[i] == '_') string[i] = ' ';
			}
		}
	}
	return string;
}


stock LoadMapIcons()
{
	mysql_tquery(chandler, "SELECT * FROM `map_icons` WHERE Active = '1'", "MapIconsLoad");
	return 1;
}


forward MapIconsLoad();
public MapIconsLoad()
{
	new rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "id", MapIconInfo[i][mapIconId]);
		cache_get_value_name(i, "Name", MapIconInfo[i][mapIconName], 24);
		cache_get_value_name_float(i, "X", MapIconInfo[i][mapIconX]);
		cache_get_value_name_float(i, "Y", MapIconInfo[i][mapIconY]);
		cache_get_value_name_float(i, "Z", MapIconInfo[i][mapIconZ]);
		cache_get_value_name_int(i, "Color", MapIconInfo[i][mapIconColor]);
		cache_get_value_name_int(i, "Type", MapIconInfo[i][mapIconType]);
		cache_get_value_name_int(i, "VW", MapIconInfo[i][mapIconVW]);
		cache_get_value_name_int(i, "Interior", MapIconInfo[i][mapIconInterior]);
		cache_get_value_name_float(i, "StreamDistance", MapIconInfo[i][mapIconStreamDistance]);
		MapIconInfo[i][mapIconIcon] = CreateDynamicMapIcon(MapIconInfo[i][mapIconX], MapIconInfo[i][mapIconY], MapIconInfo[i][mapIconZ], MapIconInfo[i][mapIconType], MapIconInfo[i][mapIconColor], MapIconInfo[i][mapIconVW], MapIconInfo[i][mapIconInterior], -1, MapIconInfo[i][mapIconStreamDistance], .style = MAPICON_GLOBAL);
	}
	printf("[load] %d map ikonu.", rows);
	return 1;
}

stock LoadAvailableWares()
{
	mysql_tquery(chandler, "SELECT * FROM `wares_available`", "AvailableWaresLoad");
	return 1;
}
forward AvailableWaresLoad();
public AvailableWaresLoad()
{
	new rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "ItemId", AvailableWares[i][awItem]);
		cache_get_value_name_int(i, "Amount", AvailableWares[i][awAmount]);
		cache_get_value_name_int(i, "MinPrice", AvailableWares[i][awMinPrice]);
		cache_get_value_name_int(i, "MaxPrice", AvailableWares[i][awMaxPrice]);
		if(AvailableWares[i][awMinPrice] > AvailableWares[i][awMaxPrice])
		{
			IntegerSwitch(AvailableWares[i][awMinPrice], AvailableWares[i][awMaxPrice]);
		}
	}
	printf("[load] %d galimu prekiu sarase.", rows);
	return 1;
}


stock LoadBusiness(bool:restart = false)
{
	/*
	 * Funkcija, uzkraunanti verslus. Jei 'restart' = 'true', visi verslai yra perkraunami.
	 */
	if(restart)
	{
		// Viska trinam senus.
		foreach(new businessid : Business)
		{
			sd_DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
			if(IsValidDynamic3DTextLabel(BusinessInfo[businessid][bLabel])) DestroyDynamic3DTextLabel(BusinessInfo[businessid][bLabel]);
			BusinessInfo[businessid][bLabel] = INVALID_3DTEXT_ID;
		}
		Iter_Clear(Business);
	}
	mysql_tquery(chandler, "SELECT * FROM `business_data`", "BusinessLoad");
	return 1;
}
forward BusinessLoad();
public BusinessLoad()
{
	Iter_Clear(Business);
	new rows = cache_num_rows(),
		enabled_labels = GetGVarInt("EnabledBusinessLabels"),
		string[86];
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "id", BusinessInfo[i][bId]);
		cache_get_value_name_int(i, "Owner", BusinessInfo[i][bOwner]);
		cache_get_value_name_int(i, "Fuel", BusinessInfo[i][bFuel]);
		cache_get_value_name_int(i, "FuelPrice", BusinessInfo[i][bFuelPrice]);
		cache_get_value_name_float(i, "EnterX", BusinessInfo[i][bEnterX]);
		cache_get_value_name_float(i, "EnterY", BusinessInfo[i][bEnterY]);
		cache_get_value_name_float(i, "EnterZ", BusinessInfo[i][bEnterZ]);
		cache_get_value_name_float(i, "ExitX", BusinessInfo[i][bExitX]);
		cache_get_value_name_float(i, "ExitY", BusinessInfo[i][bExitY]);
		cache_get_value_name_float(i, "ExitZ", BusinessInfo[i][bExitZ]);
		cache_get_value_name_float(i, "ExtraX", BusinessInfo[i][bExtraX]);
		cache_get_value_name_float(i, "ExtraY", BusinessInfo[i][bExtraY]);
		cache_get_value_name_float(i, "ExtraZ", BusinessInfo[i][bExtraZ]);
		cache_get_value_name_float(i, "WaresX", BusinessInfo[i][bWaresX]);
		cache_get_value_name_float(i, "WaresY", BusinessInfo[i][bWaresY]);
		cache_get_value_name_float(i, "WaresZ", BusinessInfo[i][bWaresZ]);
		cache_get_value_name_float(i, "CratesX", BusinessInfo[i][bCratesX]);
		cache_get_value_name_float(i, "CratesY", BusinessInfo[i][bCratesY]);
		cache_get_value_name_float(i, "CratesZ", BusinessInfo[i][bCratesZ]);
		cache_get_value_name_int(i, "Interior", BusinessInfo[i][bInterior]);
		cache_get_value_name_int(i, "Type", BusinessInfo[i][bType]);
		cache_get_value_name_int(i, "Level", BusinessInfo[i][bLevel]);
		cache_get_value_name_int(i, "Exterior", BusinessInfo[i][bExterior]);
		cache_get_value_name_int(i, "Price", BusinessInfo[i][bPrice]);
		cache_get_value_name_int(i, "Locked", BusinessInfo[i][bLocked]);
		cache_get_value_name_int(i, "Budget", BusinessInfo[i][bBudget]);
		cache_get_value_name_int(i, "Safe", BusinessInfo[i][bSafe]);
		cache_get_value_name_int(i, "EnterPrice", BusinessInfo[i][bEnterPrice]);
		mysql_format(chandler, string, sizeof string, "SELECT `Packed` FROM `business_wares` WHERE BusinessId = '%d'", BusinessInfo[i][bId]);
		mysql_tquery(chandler, string, "BusinessWaresLoad", "d", i);
		BusinessInfo[i][bVW] = BusinessInfo[i][bId] + BUSINESS_VIRTUAL_WORLD;
		cache_get_value_name_int(i, "OutVW", BusinessInfo[i][bOutVW]);
		cache_get_value_name(i, "Name", BusinessInfo[i][bName], 24);
		cache_get_value_name(i, "Slogan", BusinessInfo[i][bSlogan], 128);

		Business_CreatePickup(i);
		Business_FixLabels(i, enabled_labels);

		Iter_Add(Business, i);
		LoadBusinessInventory(i);
	}
	printf("[load] %d verslu", rows);
	return 1;
}

forward BusinessWaresLoad(businessid);
public BusinessWaresLoad(businessid)
{
	if(!cache_num_rows())
	{
		new string[126];
		mysql_format(chandler, string, sizeof string, "INSERT INTO `business_wares` (`BusinessId`) VALUES ('%d')", BusinessInfo[businessid][bId]);
		mysql_fquery(chandler, string, "BusinessWaresSaved");
	}
	else
	{
		new wares[456];
		cache_get_value_name(0, "Packed", wares);

		extract_wares(wares, "|", 3, "ddd", businessid, BusinessWares, MAX_BUSINESS_WARES);
		//sscanf(wares, "p<|>a<iii>["#MAX_BUSINESS_WARES"]", BusinessInfo[businessid]);

		/*sscanf(wares, "p<|>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
			BusinessInfo[i][bWareId][0], BusinessInfo[i][bWareAmount][0], BusinessInfo[i][bWarePrice][0],
			BusinessInfo[i][bWareId][1], BusinessInfo[i][bWareAmount][1], BusinessInfo[i][bWarePrice][1],
			BusinessInfo[i][bWareId][2], BusinessInfo[i][bWareAmount][2], BusinessInfo[i][bWarePrice][2],
			BusinessInfo[i][bWareId][3], BusinessInfo[i][bWareAmount][3], BusinessInfo[i][bWarePrice][3],
			BusinessInfo[i][bWareId][4], BusinessInfo[i][bWareAmount][4], BusinessInfo[i][bWarePrice][4],
			BusinessInfo[i][bWareId][5], BusinessInfo[i][bWareAmount][5], BusinessInfo[i][bWarePrice][5],
			BusinessInfo[i][bWareId][6], BusinessInfo[i][bWareAmount][6], BusinessInfo[i][bWarePrice][6],
			BusinessInfo[i][bWareId][7], BusinessInfo[i][bWareAmount][7], BusinessInfo[i][bWarePrice][7],
			BusinessInfo[i][bWareId][8], BusinessInfo[i][bWareAmount][8], BusinessInfo[i][bWarePrice][8],
			BusinessInfo[i][bWareId][9], BusinessInfo[i][bWareAmount][9], BusinessInfo[i][bWarePrice][9],
			BusinessInfo[i][bWareId][10], BusinessInfo[i][bWareAmount][10], BusinessInfo[i][bWarePrice][10],
			BusinessInfo[i][bWareId][11], BusinessInfo[i][bWareAmount][11], BusinessInfo[i][bWarePrice][11],
			BusinessInfo[i][bWareId][12], BusinessInfo[i][bWareAmount][12], BusinessInfo[i][bWarePrice][12],
			BusinessInfo[i][bWareId][13], BusinessInfo[i][bWareAmount][13], BusinessInfo[i][bWarePrice][13],
			BusinessInfo[i][bWareId][14], BusinessInfo[i][bWareAmount][14], BusinessInfo[i][bWarePrice][14],
			BusinessInfo[i][bWareId][15], BusinessInfo[i][bWareAmount][15], BusinessInfo[i][bWarePrice][15],
			BusinessInfo[i][bWareId][16], BusinessInfo[i][bWareAmount][16], BusinessInfo[i][bWarePrice][16],
			BusinessInfo[i][bWareId][17], BusinessInfo[i][bWareAmount][17], BusinessInfo[i][bWarePrice][17],
			BusinessInfo[i][bWareId][18], BusinessInfo[i][bWareAmount][18], BusinessInfo[i][bWarePrice][18],
			BusinessInfo[i][bWareId][19], BusinessInfo[i][bWareAmount][19], BusinessInfo[i][bWarePrice][19]);*/
	}
}

stock Business_CreatePickup(businessid)
{
	sd_DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
	BusinessInfo[businessid][bPickup] = sd_CreateDynamicPickup(
		PICKUP_TYPE_BUSINESS,
		businessid,
		DEFAULT_BUSINESS_PICKUP, 1, 
		BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ], 
		BusinessInfo[businessid][bOutVW], BusinessInfo[businessid][bExterior]
	);
}



stock Business_FixLabels(i, enabled_labels)
{
	if(IsValidDynamic3DTextLabel(BusinessInfo[i][bLabel]))
	{
		DestroyDynamic3DTextLabel(BusinessInfo[i][bLabel]);
	}
	BusinessInfo[i][bLabel] = INVALID_3DTEXT_ID;
	if(enabled_labels >= 1)
	{
		new string[256],
			pay[24];
		if(BusinessInfo[i][bOwner] == 0) format(string, sizeof string, "{FFFFFF}Verslas parduodamas!\nKaina: $%d (/buybusiness){DADADA}\n\n", BusinessInfo[i][bPrice]);
		else if(BusinessInfo[i][bSale] > 0) format(string, sizeof string, "{FFFFFF}Verslas parduodamas!\nKaina: $%d (/buybusiness){DADADA}\n\n", BusinessInfo[i][bSale]);
		else format(string, sizeof string, "");
		if(BusinessInfo[i][bOwner] > 0 && BusinessInfo[i][bSale] <= 0) format(pay, sizeof pay, "Áëjimo kaina: $%d\n", BusinessInfo[i][bEnterPrice]);
		format(string, sizeof string, "%s%.76s\nID: %d\n%sRaðykite /enter", string, BusinessInfo[i][bName], BusinessInfo[i][bId], pay);
		BusinessInfo[i][bLabel] = CreateDynamic3DTextLabel(string, 0xDADADAFF, BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ] + 0.15, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BusinessInfo[i][bOutVW], BusinessInfo[i][bExterior]);
	}
	return 1;
}

stock SaveAvailableWares(index = -1, itemid = -1)
{
	new string[512];

	if(itemid != -1 && index != -1)
	{
		mysql_format(chandler, string, sizeof string, "UPDATE `wares_available` SET ItemId = '%d', Amount = '%d', MinPrice = '%d', MaxPrice = '%d' WHERE ItemId = '%d'", AvailableWares[index][awItem], AvailableWares[index][awAmount], AvailableWares[index][awMinPrice], AvailableWares[index][awMaxPrice], itemid);
		mysql_fquery(chandler, string, "BusinessWaresSaved");
	}
	else
	{
		mysql_query(chandler, "DELETE FROM `wares_available`", false); // negalim thread sito
		for(new i = 0; i < sizeof AvailableWares; i++)
		{
			// neturim pagal ka WHERE atskirt, reik viska istrint ir is naujo insertint
			if(AvailableWares[i][awItem] != 0)
			{
				mysql_format(chandler, string, sizeof string, "INSERT INTO `wares_available` (`ItemId`,`Amount`,`MinPrice`,`MaxPrice`) VALUES ('%d','%d','%d','%d')", AvailableWares[i][awItem], AvailableWares[i][awAmount], AvailableWares[i][awMinPrice], AvailableWares[i][awMaxPrice]);
				mysql_fquery(chandler, string, "BusinessWaresSaved");
			}
		}
	}
	return 1;
}

stock SaveBusiness(businessid, bool:save_inventory, bool:save_wares = false)
{
	new string[1024];
	mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET EnterX = '%f', EnterY = '%f', EnterZ = '%f', ExitX = '%f', ExitY = '%f', ExitZ = '%f', ", BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ], BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ]);
	mysql_format(chandler, string, sizeof string, "%sInterior = '%d', Exterior = '%d', OutVW = '%d', Owner = '%d', UpdateEat = '%d', UpdateClothes = '%d', Fuel = '%d', FuelPrice = '%d',", string, BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bExterior], BusinessInfo[businessid][bOutVW], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bUpdateEat], BusinessInfo[businessid][bUpdateClothes], BusinessInfo[businessid][bFuel], BusinessInfo[businessid][bFuelPrice]);
	mysql_format(chandler, string, sizeof string, "%sBudget = '%d', EnterPrice = '%d' WHERE id = '%d'", string, BusinessInfo[businessid][bBudget], BusinessInfo[businessid][bEnterPrice], BusinessInfo[businessid][bId]);
	mysql_fquery(chandler, string, "BusinessSaved");
	save_inventory && SaveBusinessInventory(businessid);
	save_wares && SaveBusinessWares(businessid);
	return 1;
}

stock SaveBusinessWares(businessid)
{
	new string[512];
	mysql_format(chandler, string, sizeof string, "INSERT IGNORE INTO `business_wares` (`BusinessId`) VALUES ('%d')", BusinessInfo[businessid][bId]);
	mysql_fquery(chandler, string, "BusinessSaved");
	format(string, sizeof string, "");
	for(new i = 0; i < MAX_BUSINESS_WARES; i++)
	{
		format(string, sizeof string, "%s%d|%d|%d|", string, BusinessWares[businessid][i][bWareId], BusinessWares[businessid][i][bWareAmount], BusinessWares[businessid][i][bWarePrice]);
	}
	mysql_format(chandler, string, sizeof string, "UPDATE `business_wares` SET Packed = '%e' WHERE BusinessId = '%d'", string, BusinessInfo[businessid][bId]);
	mysql_fquery(chandler, string, "BusinessWaresSaved");
	return 1;
}
thread(BusinessWaresSaved);

stock SaveBusinessInventory(businessid)
{
	new joined[24],
		string[512],
		query[512];
	for(new slot = 0; slot < MAX_BUSINESS_INVENTORY_SLOTS; slot++)
	{
		format(joined, sizeof joined, "%d|%d|%d|", BusinessInventory[businessid][slot][invId], BusinessInventory[businessid][slot][invAmount], BusinessInventory[businessid][slot][invExtraId]);
		strcat(string, joined);
	}
	mysql_format(chandler, query, sizeof query, "UPDATE `business_inventory` SET Packed = '%e' WHERE BusinessId = '%d'", string, BusinessInfo[businessid][bId]);
	mysql_fquery(chandler, query, "BusinessInventorySaved");
	return 1;
}

stock LoadBusinessInventory(businessid)
{
	new string[126];
	mysql_format(chandler, string, sizeof string, "SELECT * FROM `business_inventory` WHERE BusinessId = '%d'", BusinessInfo[businessid][bId]);
	mysql_tquery(chandler, string, "BusinessInventoryLoad", "d", businessid);
	return 1;
}

thread(BusinessSaved);
thread(BusinessInventoryCreate);
thread(BusinessInventorySaved);

forward BusinessInventoryLoad(businessid);
public BusinessInventoryLoad(businessid)
{
	new string[126];
	if(!cache_num_rows())
	{
		mysql_format(chandler, string, sizeof string, "INSERT INTO `business_inventory` (`BusinessId`) VALUES ('%d')", BusinessInfo[businessid][bId]);
		mysql_tquery(chandler, string, "BusinessInventoryCreate");
	}
	else
	{
		new packed[512];
		cache_get_value_name(0, "Packed", packed);

		extract_inventory(packed, "|", 3, "ddd", businessid, BusinessInventory, MAX_BUSINESS_INVENTORY_SLOTS);
	}
	return 1;
}



stock SaveHouse(houseid, bool:save_inventory)
{
	new string[1024];
	mysql_format(chandler, string, sizeof string, "UPDATE `houses_data` SET EnterX = '%f', EnterY = '%f', EnterZ = '%f', ExitX = '%f', ExitY = '%f', ExitZ = '%f', ", HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ], HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]);
	mysql_format(chandler, string, sizeof string, "%sInterior = '%d', Exterior = '%d', OutVW = '%d', Owner = '%d', UpdateEat = '%d', UpdateClothes = '%d', UpdateSafe = '%d', ", string, HouseInfo[houseid][hInterior], HouseInfo[houseid][hExterior], HouseInfo[houseid][hOutVW], HouseInfo[houseid][hOwner], HouseInfo[houseid][hUpdateEat], HouseInfo[houseid][hUpdateClothes], HouseInfo[houseid][hUpdateSafe]);
	mysql_format(chandler, string, sizeof string, "%sRentPrice = '%d', Rent = '%d', RentLimit = '%d', Safe = '%d'", string, HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hRent], HouseInfo[houseid][hRentLimit], HouseInfo[houseid][hSafe]);
	mysql_format(chandler, string, sizeof string, "%s WHERE id = '%d'", string, HouseInfo[houseid][hId]);
	mysql_fquery(chandler, string, "HouseSaved");
	save_inventory && SaveHouseInventory(houseid);
	return 1;
}

stock SaveHouseInventory(houseid)
{
	new joined[24],
		string[512],
		query[512];
	for(new slot = 0; slot < MAX_HOUSE_INVENTORY_SLOTS; slot++)
	{
		format(joined, sizeof joined, "%d|%d|%d|", HouseInventory[houseid][slot][invId], HouseInventory[houseid][slot][invAmount], HouseInventory[houseid][slot][invExtraId]);
		strcat(string, joined);
	}
	mysql_format(chandler, query, sizeof query, "UPDATE `houses_inventory` SET Packed = '%e' WHERE HouseId = '%d'", string, HouseInfo[houseid][hId]);
	mysql_fquery(chandler, query, "HouseInventorySaved");
	return 1;
}

stock SaveDealerHouse(houseid, bool:save_inventory)
{
	new string[512];
	mysql_format(chandler, string, sizeof string, "UPDATE `dealers_houses_data` SET EnterX = '%f', EnterY = '%f', EnterZ = '%f', ExitX = '%f', ExitY = '%f', ExitZ = '%f', ", DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY], DealerHouseInfo[houseid][dealerHouseEnterZ], DealerHouseInfo[houseid][dealerHouseExitX], DealerHouseInfo[houseid][dealerHouseExitY], DealerHouseInfo[houseid][dealerHouseExitZ]);
	mysql_format(chandler, string, sizeof string, "%sInterior = '%d', Exterior = '%d', OutVW = '%d', Owner = '%d'", string, DealerHouseInfo[houseid][dealerHouseInterior], DealerHouseInfo[houseid][dealerHouseExterior], DealerHouseInfo[houseid][dealerHouseOutVW], DealerHouseInfo[houseid][dealerHouseOwner]);
	mysql_format(chandler, string, sizeof string, "%s WHERE id = '%d'", string, DealerHouseInfo[houseid][dealerHouseId]);
	mysql_fquery(chandler, string, "HouseSaved");
	save_inventory && SaveDealerHouseInventory(houseid);
	return 1;
}

stock SaveDealerHouseInventory(houseid)
{
	new joined[36],
		string[512],
		query[512];
	for(new slot = 0; slot < MAX_DEALER_HOUSE_INVENTORY_SLOTS; slot++)
	{
		format(joined, sizeof joined, "%d|%d|%d|", DealerHouseInventory[houseid][slot][invId], DealerHouseInventory[houseid][slot][invAmount], DealerHouseInventory[houseid][slot][invExtraId]);
		strcat(string, joined);
	}
	mysql_format(chandler, query, sizeof query, "UPDATE `dealers_houses_inventory` SET Packed = '%e' WHERE HouseId = '%d'", string, DealerHouseInfo[houseid][dealerHouseId]);
	mysql_fquery(chandler, query, "HouseInventorySaved");
	return 1;
}

stock LoadHouseInventory(houseid)
{
	new string[126];
	mysql_format(chandler, string, sizeof string, "SELECT * FROM `houses_inventory` WHERE HouseId = '%d'", HouseInfo[houseid][hId]);
	mysql_tquery(chandler, string, "HouseInventoryLoad", "d", houseid);
	return 1;
}

stock LoadDealerHouseInventory(houseid)
{
	new string[126];
	mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_houses_inventory` WHERE HouseId = '%d'", DealerHouseInfo[houseid][dealerHouseId]);
	mysql_tquery(chandler, string, "DealerHouseInventoryLoad", "d", houseid);
	return 1;
}

thread(HouseInventorySaved);
thread(HouseSaved);
thread(HouseInventoryCreate);

forward HouseInventoryLoad(houseid);
public HouseInventoryLoad(houseid)
{
	new string[126];
	if(!cache_num_rows())
	{
		mysql_format(chandler, string, sizeof string, "INSERT INTO `houses_inventory` (`HouseId`) VALUES ('%d')", HouseInfo[houseid][hId]);
		mysql_tquery(chandler, string, "HouseInventoryCreate");
	}
	else
	{
		new packed[512];
		cache_get_value_name(0, "Packed", packed);

		extract_inventory(packed, "|", 3, "ddd", houseid, HouseInventory, MAX_HOUSE_INVENTORY_SLOTS);
	}
	return 1;
}


forward DealerHouseInventoryLoad(houseid);
public DealerHouseInventoryLoad(houseid)
{
	new string[126];
	if(!cache_num_rows())
	{
		mysql_format(chandler, string, sizeof string, "INSERT INTO `dealers_houses_inventory` (`HouseId`) VALUES ('%d')", DealerHouseInfo[houseid][dealerHouseId]);
		mysql_tquery(chandler, string, "HouseInventoryCreate");
	}
	else
	{
		new packed[512];
		cache_get_value_name(0, "Packed", packed);

		extract_inventory(packed, "|", 3, "ddd", houseid, DealerHouseInventory, MAX_DEALER_HOUSE_INVENTORY_SLOTS);
	}
	return 1;
}

stock LoadEntersExits(bool:restart = false)
{
	if(restart)
	{
		foreach(new i : EnterExit)
		{
			IsValidDynamic3DTextLabel(EntersExits[i][eeEnterLabel]) && DestroyDynamic3DTextLabel(EntersExits[i][eeEnterLabel]);
			IsValidDynamic3DTextLabel(EntersExits[i][eeExitLabel]) && DestroyDynamic3DTextLabel(EntersExits[i][eeExitLabel]);
			
			EntersExits[i][eeEnterLabel] = 
			EntersExits[i][eeExitLabel] = INVALID_3DTEXT_ID;
		}
		Iter_Clear(EnterExit);
	}
	mysql_tquery(chandler, "SELECT * FROM `enters_exits`", "EntersExitsLoad");
}

stock EnterExit_CreateLabel(iter)
{
	IsValidDynamic3DTextLabel(EntersExits[iter][eeEnterLabel]) && DestroyDynamic3DTextLabel(EntersExits[iter][eeEnterLabel]);
	IsValidDynamic3DTextLabel(EntersExits[iter][eeExitLabel]) && DestroyDynamic3DTextLabel(EntersExits[iter][eeExitLabel]);
	IsValidDynamicPickup(EntersExits[iter][eeEnterPickup]) && sd_DestroyDynamicPickup(EntersExits[iter][eeEnterPickup]);

	new string[256];
	format(string, sizeof string, "%s\n{DBDBDB}Raðykite /enter", EntersExits[iter][eeName]);
	EntersExits[iter][eeEnterLabel] = CreateDynamic3DTextLabel(string, 0xFFAB00FF, 
		EntersExits[iter][eeEnterX],
		EntersExits[iter][eeEnterY],
		EntersExits[iter][eeEnterZ], 
		13.0, 
		INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 
		EntersExits[iter][eeEnterVW], EntersExits[iter][eeEnterInt]
	);

	if(EntersExits[iter][eeEnterPickupType] != 0)
	{
		EntersExits[iter][eeEnterPickup] = sd_CreateDynamicPickup(
			PICKUP_TYPE_NONE,
			iter,
			EntersExits[iter][eeEnterPickupType],
			1,
			EntersExits[iter][eeEnterX],
			EntersExits[iter][eeEnterY],
			EntersExits[iter][eeEnterZ],
			EntersExits[iter][eeEnterVW], EntersExits[iter][eeEnterInt]
		);
	}

	if(EntersExits[iter][eeExitX] != 0.0 && EntersExits[iter][eeExitY] != 0.0 && EntersExits[iter][eeExitZ] != 0.0)
	{
		EntersExits[iter][eeExitLabel] = CreateDynamic3DTextLabel("Iðëjimas\nRaðykite /exit",
			0x618B4CFF,
			EntersExits[iter][eeExitX],
			EntersExits[iter][eeExitY],
			EntersExits[iter][eeExitZ],
			10.0,
			INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EntersExits[iter][eeExitVW], EntersExits[iter][eeExitInt]
		);
	}
	else EntersExits[iter][eeExitLabel] = INVALID_3DTEXT_ID;

	return 1;
}


forward EntersExitsLoad();
public EntersExitsLoad()
{
	Iter_Clear(EnterExit);
	new rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		printf("i: %d", i);

		cache_get_value_name_int(i, "id", EntersExits[i][eeId]);
		cache_get_value_name_int(i, "PickupType", EntersExits[i][eeEnterPickupType]);
		cache_get_value_name_int(i, "EnterInt", EntersExits[i][eeEnterInt]);
		cache_get_value_name_int(i, "ExitInt", EntersExits[i][eeExitInt]);
		cache_get_value_name_int(i, "EnterVW", EntersExits[i][eeEnterVW]);
		cache_get_value_name_int(i, "ExitVW", EntersExits[i][eeExitVW]);
		cache_get_value_name(i, "Name", EntersExits[i][eeName], 32);
		cache_get_value_name_float(i, "EnterX", EntersExits[i][eeEnterX]);
		cache_get_value_name_float(i, "EnterY", EntersExits[i][eeEnterY]);
		cache_get_value_name_float(i, "EnterZ", EntersExits[i][eeEnterZ]);
		cache_get_value_name_float(i, "ExitX", EntersExits[i][eeExitX]);
		cache_get_value_name_float(i, "ExitY", EntersExits[i][eeExitY]);
		cache_get_value_name_float(i, "ExitZ", EntersExits[i][eeExitZ]);
		
		EnterExit_CreateLabel(i);
		Iter_Add(EnterExit, i);
	}
	printf("[load] %d iejimu/isejimu", rows);
	return 1;
}

stock LoadHouses(bool:restart = false)
{
	/*
	 * Funkcija, uzkraunanti namus. Jei 'restart' = 'true', visi namai yra perkraunami.
	 */
	if(restart)
	{
		// Viska trinam senus.
		foreach(new houseid : House)
		{
			sd_DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hLabel]);
			HouseInfo[houseid][hLabel] = INVALID_3DTEXT_ID;
		}
		Iter_Clear(House);
	}
	mysql_tquery(chandler, "SELECT * FROM `houses_data`", "HousesLoad");
	return 1;
}

forward HousesLoad();
public HousesLoad()
{
	Iter_Clear(House);
	new rows = cache_num_rows(),
		enabled_labels = GetGVarInt("EnabledHouseLabels");
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "id", HouseInfo[i][hId]);
		cache_get_value_name_int(i, "Owner", HouseInfo[i][hOwner]);
		cache_get_value_name_float(i, "EnterX", HouseInfo[i][hEnterX]);
		cache_get_value_name_float(i, "EnterY", HouseInfo[i][hEnterY]);
		cache_get_value_name_float(i, "EnterZ", HouseInfo[i][hEnterZ]);
		cache_get_value_name_float(i, "ExitX", HouseInfo[i][hExitX]);
		cache_get_value_name_float(i, "ExitY", HouseInfo[i][hExitY]);
		cache_get_value_name_float(i, "ExitZ", HouseInfo[i][hExitZ]);
		cache_get_value_name_int(i, "Interior", HouseInfo[i][hInterior]);
		cache_get_value_name_int(i, "Exterior", HouseInfo[i][hExterior]);
		cache_get_value_name_int(i, "Price", HouseInfo[i][hPrice]);
		cache_get_value_name_int(i, "Sale", HouseInfo[i][hSale]);
		cache_get_value_name_int(i, "Locked", HouseInfo[i][hLocked]);
		
		cache_get_value_name_int(i, "Rent", HouseInfo[i][hRent]);
		cache_get_value_name_int(i, "RentLimit", HouseInfo[i][hRentLimit]);
		cache_get_value_name_int(i, "RentPrice", HouseInfo[i][hRentPrice]);

		cache_get_value_name_int(i, "UpdateEat", HouseInfo[i][hUpdateEat]);
		cache_get_value_name_int(i, "UpdateClothes", HouseInfo[i][hUpdateClothes]);
		cache_get_value_name_int(i, "UpdateSafe", HouseInfo[i][hUpdateSafe]);
		cache_get_value_name_int(i, "Safe", HouseInfo[i][hSafe]);

		HouseInfo[i][hVW] = HouseInfo[i][hId] + HOUSE_VIRTUAL_WORLD;
		cache_get_value_name_int(i, "OutVW", HouseInfo[i][hOutVW]);
		
		House_CreatePickup(i);

		House_FixLabels(i, enabled_labels);
		Iter_Add(House, i);
		LoadHouseInventory(i);
	}
	printf("[load] %d namu", rows);
	return 1;
}

stock House_CreatePickup(house)
{
	IsValidDynamicPickup(HouseInfo[house][hPickup]) && sd_DestroyDynamicPickup(HouseInfo[house][hPickup]);
	HouseInfo[house][hPickup] = sd_CreateDynamicPickup(
		PICKUP_TYPE_HOUSE,
		house,
		HouseInfo[house][hOwner] > 0 ? (1272) : (1273), // DEFAULT_HOUSE_PICKUP
		1,
		HouseInfo[house][hEnterX], HouseInfo[house][hEnterY], HouseInfo[house][hEnterZ],
		HouseInfo[house][hOutVW], HouseInfo[house][hExterior]
	);
	return 1;
}

stock House_FixLabels(i, enabled_labels)
{
	new string[156];
	if(IsValidDynamic3DTextLabel(HouseInfo[i][hLabel]))
	{
		DestroyDynamic3DTextLabel(HouseInfo[i][hLabel]);
	}
	HouseInfo[i][hLabel] = INVALID_3DTEXT_ID;
	if(enabled_labels >= 1)
	{
		if(HouseInfo[i][hOwner] == 0) format(string, sizeof string, "{FFFFFF}Namas parduodamas!\nKaina: $%d (/buyhouse){DADADA}\n\n", HouseInfo[i][hPrice]);
		else if(HouseInfo[i][hSale] > 0) format(string, sizeof string, "{FFFFFF}Namas parduodamas!\nKaina: $%d (/buyhouse){DADADA}\n\n", HouseInfo[i][hSale]);
		else format(string, sizeof string, "");
		if(HouseInfo[i][hRent] > 0) format(string, sizeof string, "{FFFFFF}Namo nuoma: /renthouse ($%d)\n", HouseInfo[i][hRentPrice]);
		format(string, sizeof string, "%sNamo numeris: %d\nRaðykite /enter", string, HouseInfo[i][hId]);
		HouseInfo[i][hLabel] = CreateDynamic3DTextLabel(string, 0xDADADAFF, HouseInfo[i][hEnterX], HouseInfo[i][hEnterY], HouseInfo[i][hEnterZ], 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, HouseInfo[i][hOutVW], HouseInfo[i][hExterior]);
	}
}


stock LoadDealerHouses(bool:restart = false)
{
	/*
	 * Funkcija, uzkraunanti konspiracinius namus. Jei 'restart' = 'true', visi namai yra perkraunami.
	 */
	if(restart)
	{
		// Viska trinam senus.
		Iter_Clear(House);
	}
	mysql_tquery(chandler, "SELECT * FROM `dealers_houses_data`", "DealerHousesLoad");
	return 1;
}

forward DealerHousesLoad();
public DealerHousesLoad()
{
	Iter_Clear(DealerHouse);
	new rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "id", DealerHouseInfo[i][dealerHouseId]);
		cache_get_value_name_int(i, "Owner", DealerHouseInfo[i][dealerHouseOwner]);
		cache_get_value_name_int(i, "Type", DealerHouseInfo[i][dealerHouseType]);
		cache_get_value_name_float(i, "EnterX", DealerHouseInfo[i][dealerHouseEnterX]);
		cache_get_value_name_float(i, "EnterY", DealerHouseInfo[i][dealerHouseEnterY]);
		cache_get_value_name_float(i, "EnterZ", DealerHouseInfo[i][dealerHouseEnterZ]);
		cache_get_value_name_float(i, "ExitX", DealerHouseInfo[i][dealerHouseExitX]);
		cache_get_value_name_float(i, "ExitY", DealerHouseInfo[i][dealerHouseExitY]);
		cache_get_value_name_float(i, "ExitZ", DealerHouseInfo[i][dealerHouseExitZ]);
		cache_get_value_name_int(i, "Interior", DealerHouseInfo[i][dealerHouseInterior]);
		cache_get_value_name_int(i, "Exterior", DealerHouseInfo[i][dealerHouseExterior]);
		cache_get_value_name_int(i, "Price", DealerHouseInfo[i][dealerHousePrice]);
		cache_get_value_name_int(i, "Locked", DealerHouseInfo[i][dealerHouseLocked]);
		DealerHouseInfo[i][dealerHouseVW] = DealerHouseInfo[i][dealerHouseId] + DEALER_HOUSE_VIRTUAL_WORLD;
		cache_get_value_name_int(i, "OutVW", DealerHouseInfo[i][dealerHouseOutVW]);
		Iter_Add(DealerHouse, i);
		LoadDealerHouseInventory(i);
	}
	printf("[load] %d konspiraciniu namu", rows);
	return 1;
}



stock FixPayPhoneLabel(i)
{
	new string[86];
	if(IsValidDynamic3DTextLabel(PayPhoneInfo[i][payPhoneLabel]))
	{
		DestroyDynamic3DTextLabel(PayPhoneInfo[i][payPhoneLabel]);
	}
	format(string, sizeof string, "Taksofono numeris:\n{915BEE}%d", GetPayPhoneNumber(i));
	PayPhoneInfo[i][payPhoneLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, PayPhoneInfo[i][payPhoneX], PayPhoneInfo[i][payPhoneY], PayPhoneInfo[i][payPhoneZ]+1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	return 1;
}

stock LoadATMs(bool:restart = false)
{
	/*
	 * Funkcija, uzkraunanti bankomatus /bank
	 */
	if(restart)
	{
		new __reset_ATM[E_ATM_DATA];
		foreach(new atm : ATM)
		{
			DestroyDynamicObject(ATMs[atm][atmObject], "atm", "restart");
			ATMs[atm] = __reset_ATM;
			ATMs[atm][atmObject] = INVALID_OBJECT_ID;
		}
		Iter_Clear(ATM);
	}
	mysql_tquery(chandler, "SELECT * FROM `atms`", "ATMsLoad");
	return 1;
}
forward ATMsLoad();
public ATMsLoad()
{
	new rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_float(i, "X", ATMs[i][atmX]);
		cache_get_value_name_float(i, "Y", ATMs[i][atmY]);
		cache_get_value_name_float(i, "Z", ATMs[i][atmZ]);
		cache_get_value_name_float(i, "RX", ATMs[i][atmRX]);
		cache_get_value_name_float(i, "RY", ATMs[i][atmRY]);
		cache_get_value_name_float(i, "RZ", ATMs[i][atmRZ]);
		cache_get_value_name_int(i, "id", ATMs[i][atmId]);
		cache_get_value_name_int(i, "CanDeposit", ATMs[i][atmCanDeposit]);
		cache_get_value_name_int(i, "WithdrawLimit", ATMs[i][atmWithdrawLimit]);
		ATMs[i][atmObject] = CreateDynamicObject(2942, ATMs[i][atmX], ATMs[i][atmY], ATMs[i][atmZ], ATMs[i][atmRX], ATMs[i][atmRY], ATMs[i][atmRZ], .called = "atm", .extra = "load");
		Iter_Add(ATM, i);
	}
	printf("[load] %d bankomatu", rows);
	return 1;
}

stock LoadPayPhones(bool:restart = false)
{
	/*
	 * Funkcija, uzkraunanti taksofonus /ucall
	 */
	if(restart)
	{
		new __reset_PayPhone[E_PAYPHONE_DATA];
		foreach(new pp : PayPhone)
		{
			if(IsValidDynamicObject(PayPhoneInfo[pp][payPhoneObject])) DestroyDynamicObject(PayPhoneInfo[pp][payPhoneObject], "payphone", "restart");
			PayPhoneInfo[pp] = __reset_PayPhone;
			PayPhoneInfo[pp][payPhoneObject] = INVALID_OBJECT_ID;
		}
		Iter_Clear(PayPhone);
	}
	mysql_tquery(chandler, "SELECT * FROM `payphones_data`", "PayPhonesLoad");
	return 1;
}
forward PayPhonesLoad();
public PayPhonesLoad()
{
	new rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_float(i, "X", PayPhoneInfo[i][payPhoneX]);
		cache_get_value_name_float(i, "Y", PayPhoneInfo[i][payPhoneY]);
		cache_get_value_name_float(i, "Z", PayPhoneInfo[i][payPhoneZ]);
		cache_get_value_name_float(i, "RX", PayPhoneInfo[i][payPhoneRX]);
		cache_get_value_name_float(i, "RY", PayPhoneInfo[i][payPhoneRY]);
		cache_get_value_name_float(i, "RZ", PayPhoneInfo[i][payPhoneRZ]);
		cache_get_value_name_int(i, "id", PayPhoneInfo[i][payPhoneId]);
		PayPhoneInfo[i][payPhoneObject] = CreateDynamicObject(1216, PayPhoneInfo[i][payPhoneX], PayPhoneInfo[i][payPhoneY], PayPhoneInfo[i][payPhoneZ], PayPhoneInfo[i][payPhoneRX], PayPhoneInfo[i][payPhoneRY], PayPhoneInfo[i][payPhoneRZ], .called = "payphone", .extra = "load");
		FixPayPhoneLabel(i);
		Iter_Add(PayPhone, i);
	}
	printf("[load] %d taksofonu", rows);
	return 1;
}

stock LoadHouseFurniture(bool:restart = false)
{
	/*
	 * Funkcija, kuria uzkraunami visu namu objektai.
	 */
	if(restart)
	{
		foreach(new fur : HFurniture)
		{
			if(IsValidDynamicObject(hFurnitureInfo[fur][hfObject])) DestroyDynamicObject(hFurnitureInfo[fur][hfObject], "furniture", "RestartHouses");
			ClearHFurniture(fur);
		}
		Iter_Clear(HFurniture);
	}
	mysql_tquery(chandler, "SELECT * FROM `houses_furniture`", "HouseFurnitureLoad");
	return 1;
}

forward HouseFurnitureLoad();
public HouseFurnitureLoad()
{
	Iter_Clear(HFurniture);
	new rows = cache_num_rows(),
		colorstr[18],
		texturestr[18];
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name(i, "Name", hFurnitureInfo[i][hfName], 34);
		cache_get_value_name_int(i, "id", hFurnitureInfo[i][hfId]);
		cache_get_value_name_int(i, "Model", hFurnitureInfo[i][hfModel]);
		cache_get_value_name_int(i, "HouseId", hFurnitureInfo[i][hfOwner]);
		cache_get_value_name_int(i, "Type", hFurnitureInfo[i][hfType]);
		cache_get_value_name_int(i, "VW", hFurnitureInfo[i][hfVW]);
		cache_get_value_name_int(i, "Interior", hFurnitureInfo[i][hfInterior]);
		cache_get_value_name_int(i, "Price", hFurnitureInfo[i][hfPrice]);
		cache_get_value_name_float(i, "X", hFurnitureInfo[i][hfPos][0]);
		cache_get_value_name_float(i, "Y", hFurnitureInfo[i][hfPos][1]);
		cache_get_value_name_float(i, "Z", hFurnitureInfo[i][hfPos][2]);
		cache_get_value_name_float(i, "RX", hFurnitureInfo[i][hfRot][0]);
		cache_get_value_name_float(i, "RY", hFurnitureInfo[i][hfRot][1]);
		cache_get_value_name_float(i, "RZ", hFurnitureInfo[i][hfRot][2]);
		hFurnitureInfo[i][hfObject] = CreateDynamicObject(hFurnitureInfo[i][hfModel], hFurnitureInfo[i][hfPos][0], hFurnitureInfo[i][hfPos][1], hFurnitureInfo[i][hfPos][2], hFurnitureInfo[i][hfRot][0], hFurnitureInfo[i][hfRot][1], hFurnitureInfo[i][hfRot][2], hFurnitureInfo[i][hfVW], hFurnitureInfo[i][hfInterior], .called = "furniture", .extra = "HouseFurnitureLoad");
		for(new texture = 0; texture < MAX_TEXTURE_SLOTS; texture++)
		{
			new 
				texture_file[24],
				texture_name[24],
				texture_model,
				color_code;

			format(texturestr, sizeof texturestr, "Texture%d", texture);
			cache_get_value_name_int(i, texturestr, hFurnitureInfo[i][hfTexture][texture]);

			format(colorstr, sizeof colorstr, "Color%d", texture);
			cache_get_value_name_int(i, colorstr, hFurnitureInfo[i][hfColor][texture]);

			format(texture_file, 5, "none");
			format(texture_name, 5, "none");
			texture_model = hFurnitureInfo[i][hfModel];

			if(hFurnitureInfo[i][hfColor][texture] != 0)
			{
				if(hFurnitureInfo[i][hfColor][texture] > sizeof FurnitureColors)
				{
					new string[86];
					mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET `%e` = '0' WHERE id = '%d'", colorstr, hFurnitureInfo[i][hfId]);
					mysql_query(chandler, string, false);
				}
				else
				{
					color_code = FurnitureColors[hFurnitureInfo[i][hfColor][texture]][colorCode];
				}
			}
			if(hFurnitureInfo[i][hfTexture][texture] != 0)
			{
				if(hFurnitureInfo[i][hfTexture][texture] > sizeof FurnitureTextures)
				{
					new string[86];
					mysql_format(chandler, string, sizeof string, "UPDATE `houses_furniture` SET `%e` = '0' WHERE id = '%d'", texturestr, hFurnitureInfo[i][hfId]);
					mysql_query(chandler, string, false);
				}
				else
				{
					format(texture_file, sizeof texture_file, FurnitureTextures[hFurnitureInfo[i][hfTexture][texture]][textureFile]);
					format(texture_name, sizeof texture_name, FurnitureTextures[hFurnitureInfo[i][hfTexture][texture]][textureName]);
					texture_model = FurnitureTextures[hFurnitureInfo[i][hfTexture][texture]][textureModel];
				}
			}
			SetDynamicObjectMaterial(hFurnitureInfo[i][hfObject], texture, texture_model, texture_file, texture_name, color_code);
		}
		Iter_Add(HFurniture, i);
	}
	printf("[load] %d namu baldu", rows);
	return 1;
}

stock LoadGarageFurniture(bool:restart = false)
{
	/*
	 * Funkcija, kuria uzkraunami visu garazu objektai.
	 */
	if(restart)
	{
		foreach(new fur : GFurniture)
		{
			if(IsValidDynamicObject(gFurnitureInfo[fur][gfObject])) DestroyDynamicObject(gFurnitureInfo[fur][gfObject], "furniture", "GarageRestart");
			ClearHFurniture(fur);
		}
		Iter_Clear(GFurniture);
	}
	mysql_tquery(chandler, "SELECT * FROM `garages_furniture`", "GarageFurnitureLoad");
	return 1;
}

forward GarageFurnitureLoad();
public GarageFurnitureLoad()
{
	Iter_Clear(GFurniture);
	new rows = cache_num_rows(),
		colorstr[18],
		texturestr[18];
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name(i, "Name", gFurnitureInfo[i][gfName], 34);
		cache_get_value_name_int(i, "id", gFurnitureInfo[i][gfId]);
		cache_get_value_name_int(i, "Model", gFurnitureInfo[i][gfModel]);
		cache_get_value_name_int(i, "GarageId", gFurnitureInfo[i][gfOwner]);
		cache_get_value_name_int(i, "Type", gFurnitureInfo[i][gfType]);
		cache_get_value_name_int(i, "VW", gFurnitureInfo[i][gfVW]);
		cache_get_value_name_int(i, "Interior", gFurnitureInfo[i][gfInterior]);
		cache_get_value_name_int(i, "Price", gFurnitureInfo[i][gfPrice]);
		cache_get_value_name_float(i, "X", gFurnitureInfo[i][gfPos][0]);
		cache_get_value_name_float(i, "Y", gFurnitureInfo[i][gfPos][1]);
		cache_get_value_name_float(i, "Z", gFurnitureInfo[i][gfPos][2]);
		cache_get_value_name_float(i, "RX", gFurnitureInfo[i][gfRot][0]);
		cache_get_value_name_float(i, "RY", gFurnitureInfo[i][gfRot][1]);
		cache_get_value_name_float(i, "RZ", gFurnitureInfo[i][gfRot][2]);
		gFurnitureInfo[i][gfObject] = CreateDynamicObject(gFurnitureInfo[i][gfModel], gFurnitureInfo[i][gfPos][0], gFurnitureInfo[i][gfPos][1], gFurnitureInfo[i][gfPos][2], gFurnitureInfo[i][gfRot][0], gFurnitureInfo[i][gfRot][1], gFurnitureInfo[i][gfRot][2], gFurnitureInfo[i][gfVW], gFurnitureInfo[i][gfInterior], .called = "furniture", .extra = "GarageFurniturelo");
		for(new texture = 0; texture < MAX_TEXTURE_SLOTS; texture++)
		{
			new 
				texture_file[24],
				texture_name[24],
				texture_model,
				color_code;

			format(texturestr, sizeof texturestr, "Texture%d", texture);
			cache_get_value_name_int(i, texturestr, gFurnitureInfo[i][gfTexture][texture]);

			format(colorstr, sizeof colorstr, "Color%d", texture);
			cache_get_value_name_int(i, colorstr, gFurnitureInfo[i][gfColor][texture]);

			format(texture_file, 5, "none");
			format(texture_name, 5, "none");
			texture_model = gFurnitureInfo[i][gfModel];

			if(gFurnitureInfo[i][gfColor][texture] != 0)
			{
				if(gFurnitureInfo[i][gfColor][texture] > sizeof FurnitureColors)
				{
					new string[86];
					mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET `%e` = '0' WHERE id = '%d'", colorstr, gFurnitureInfo[i][gfId]);
					mysql_query(chandler, string, false);
				}
				else
				{
					color_code = FurnitureColors[gFurnitureInfo[i][gfColor][texture]][colorCode];
				}
			}
			if(gFurnitureInfo[i][gfTexture][texture] != 0)
			{
				if(gFurnitureInfo[i][gfTexture][texture] > sizeof FurnitureTextures)
				{
					new string[86];
					mysql_format(chandler, string, sizeof string, "UPDATE `garages_furniture` SET `%e` = '0' WHERE id = '%d'", texturestr, gFurnitureInfo[i][gfId]);
					mysql_query(chandler, string, false);
				}
				else
				{
					format(texture_file, sizeof texture_file, FurnitureTextures[gFurnitureInfo[i][gfTexture][texture]][textureFile]);
					format(texture_name, sizeof texture_name, FurnitureTextures[gFurnitureInfo[i][gfTexture][texture]][textureName]);
					texture_model = FurnitureTextures[gFurnitureInfo[i][gfTexture][texture]][textureModel];
				}
			}
			SetDynamicObjectMaterial(gFurnitureInfo[i][gfObject], texture, texture_model, texture_file, texture_name, color_code);
		}
		Iter_Add(GFurniture, i);
	}
	printf("[load] %d garazu baldu", rows);
	return 1;
}


stock LoadBusinessFurniture(bool:restart = false)
{
	/*
	 * Funkcija, kuria uzkraunami visu namu objektai.
	 */
	if(restart)
	{
		foreach(new fur: BFurniture)
		{
			if(IsValidDynamicObject(bFurnitureInfo[fur][bfObject])) DestroyDynamicObject(bFurnitureInfo[fur][bfObject], "furniture", "BusinessRestart");
			ClearBFurniture(fur);
		}
		Iter_Clear(BFurniture);
	}
	mysql_tquery(chandler, "SELECT * FROM `business_furniture`", "BusinessFurnitureLoad");
	return 1;
}

forward BusinessFurnitureLoad();
public BusinessFurnitureLoad()
{
	Iter_Clear(BFurniture);
	new rows = cache_num_rows(),
		texturestr[18],
		colorstr[18];
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name(i, "Name", bFurnitureInfo[i][bfName], 34);
		cache_get_value_name_int(i, "id", bFurnitureInfo[i][bfId]);
		cache_get_value_name_int(i, "Model", bFurnitureInfo[i][bfModel]);
		cache_get_value_name_int(i, "BusinessId", bFurnitureInfo[i][bfOwner]);
		cache_get_value_name_int(i, "Type", bFurnitureInfo[i][bfType]);
		cache_get_value_name_int(i, "VW", bFurnitureInfo[i][bfVW]);
		cache_get_value_name_int(i, "Interior", bFurnitureInfo[i][bfInterior]);
		cache_get_value_name_int(i, "Price", bFurnitureInfo[i][bfPrice]);
		cache_get_value_name_float(i, "X", bFurnitureInfo[i][bfPos][0]);
		cache_get_value_name_float(i, "Y", bFurnitureInfo[i][bfPos][1]);
		cache_get_value_name_float(i, "Z", bFurnitureInfo[i][bfPos][2]);
		cache_get_value_name_float(i, "RX", bFurnitureInfo[i][bfRot][0]);
		cache_get_value_name_float(i, "RY", bFurnitureInfo[i][bfRot][1]);
		cache_get_value_name_float(i, "RZ", bFurnitureInfo[i][bfRot][2]);
		bFurnitureInfo[i][bfObject] = CreateDynamicObject(bFurnitureInfo[i][bfModel], bFurnitureInfo[i][bfPos][0], bFurnitureInfo[i][bfPos][1], bFurnitureInfo[i][bfPos][2], bFurnitureInfo[i][bfRot][0], bFurnitureInfo[i][bfRot][1], bFurnitureInfo[i][bfRot][2], bFurnitureInfo[i][bfVW], bFurnitureInfo[i][bfInterior], .called = "furniture", .extra = "BusinessFurnitureLoad");
		for(new texture = 0; texture < MAX_TEXTURE_SLOTS; texture++)
		{
			new 
				texture_file[24],
				texture_name[24],
				texture_model,
				color_code;

			format(texturestr, sizeof texturestr, "Texture%d", texture);
			cache_get_value_name_int(i, texturestr, bFurnitureInfo[i][bfTexture][texture]);

			format(colorstr, sizeof colorstr, "Color%d", texture);
			cache_get_value_name_int(i, colorstr, bFurnitureInfo[i][bfColor][texture]);

			format(texture_file, 5, "none");
			format(texture_name, 5, "none");
			texture_model = bFurnitureInfo[i][bfModel];

			if(bFurnitureInfo[i][bfColor][texture] != 0)
			{
				if(bFurnitureInfo[i][bfColor][texture] > sizeof FurnitureColors)
				{
					new string[86];
					mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET `%e` = '0' WHERE id = '%d'", colorstr, bFurnitureInfo[i][bfId]);
					mysql_query(chandler, string, false);
				}
				else
				{
					color_code = FurnitureColors[bFurnitureInfo[i][bfColor][texture]][colorCode];
				}
			}
			if(bFurnitureInfo[i][bfTexture][texture] != 0)
			{
				if(bFurnitureInfo[i][bfTexture][texture] > sizeof FurnitureTextures)
				{
					new string[86];
					mysql_format(chandler, string, sizeof string, "UPDATE `business_furniture` SET `%e` = '0' WHERE id = '%d'", texturestr, bFurnitureInfo[i][bfId]);
					mysql_query(chandler, string, false);
				}
				else
				{
					format(texture_file, sizeof texture_file, FurnitureTextures[bFurnitureInfo[i][bfTexture][texture]][textureFile]);
					format(texture_name, sizeof texture_name, FurnitureTextures[bFurnitureInfo[i][bfTexture][texture]][textureName]);
					texture_model = FurnitureTextures[bFurnitureInfo[i][bfTexture][texture]][textureModel];
				}
			}
			SetDynamicObjectMaterial(bFurnitureInfo[i][bfObject], texture, texture_model, texture_file, texture_name, color_code);

		}
		Iter_Add(BFurniture, i);
	}
	printf("[load] %d verslu baldu", rows);
	return 1;
}

stock PreparePlayerVehicles(playerid)
{
	PlayerInfo[playerid][pCarsSpawned] = 0;
	foreach(new vehicleid : Vehicle)
	{
		if(	VehicleInfo[vehicleid][vOwner] == PlayerInfo[playerid][pId] &&
			VehicleInfo[vehicleid][vSpawnedBy] == PlayerInfo[playerid][pId])
		{
				PlayerInfo[playerid][pCarsSpawned]++;
		}
	}
	new string[136];
	mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `vehicles_data` WHERE Owner = '%d'", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "OnCountPlayerVehicles", "d", playerid);
	return 1;
}

forward OnCountPlayerVehicles(playerid);
public OnCountPlayerVehicles(playerid)
{
	PlayerInfo[playerid][pHaveCars] = cache_num_rows();
	return 1;
}

stock LoadPlayerLoginNotes(playerid)
{
	new string[126];
	mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_login_notes` WHERE PlayerId = '%d' AND DidRead = '0'", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "PlayerLoginNotesLoad", "d", playerid);
	return 1;
}

forward PlayerLoginNotesLoad(playerid);
public PlayerLoginNotesLoad(playerid)
{
	new rows = cache_num_rows();
	if(rows)
	{
		for(new i = 0; i < rows; i++)
		{
			new string[256],
				date[20],
				id,
				added;
			cache_get_value_name_int(i, "id", id);
			cache_get_value_name_int(i, "Added", added);
			cache_get_value_name(i, "Date", date, 20);
			cache_get_value_name(i, "String", string, 256);
			SendFormat(playerid, 0xDAEFF5FF, "| Praneðimas (ID: %d, Data: %s) nuo {66CDEC}%s{DAEFF5}:", id, date, (added == -1 ? ("SISTEMA") : (GetNameBySql(added))));
			SendFormat(playerid, 0x66CDECFF, "| %s", string);
		}
		new string[126];
		mysql_format(chandler, string, sizeof string, "UPDATE `players_login_notes` SET DidRead = '1', ReadDate = now() WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
		mysql_fquery(chandler, string, "NotesRead");
	}
	return 1;
}

thread(NotesRead);

stock PreparePlayerData(playerid)
{
	/*
	 * Funkcija issaugo zaidejo IP, nustato viska iskart prisijungus.
	 */
	PlayerInfo[playerid][pConnection] = CONNECTION_STATE_CONNECTED;
	GetPlayerIp(playerid, PlayerInfo[playerid][pIp], MAX_PLAYER_IP);
	GetPlayerName(playerid, PlayerInfo[playerid][pName], MAX_PLAYER_NAME+1);
	return 1;
}


stock LoadSalons(bool:restart = false)
{
	if(restart)
	{
		for(new i = 0; i < MAX_SALONS; i++)
		{
			SalonData[i][salonId] = 0;
			sd_DestroyDynamicPickup(SalonData[i][salonPickup]);
		}
		Iter_Clear(Salon);
	}
	mysql_tquery(chandler, "SELECT * FROM `sell_salons`", "SalonsLoad");
	return 1;
}


forward SalonsLoad();
public SalonsLoad()
{
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_int(i, "id", SalonData[i][salonId]);
		cache_get_value_name_float(i, "X", SalonData[i][salonX]);
		cache_get_value_name_float(i, "Y", SalonData[i][salonY]);
		cache_get_value_name_float(i, "Z", SalonData[i][salonZ]);
		cache_get_value_name_int(i, "Interior", SalonData[i][salonInterior]);
		cache_get_value_name_int(i, "VW", SalonData[i][salonVW]);
		cache_get_value_name_int(i, "Garbage", SalonData[i][salonGarbage]);
		cache_get_value_name(i, "Name", SalonData[i][salonName], 255);
		SalonData[i][salonPickup] = sd_CreateDynamicPickup(PICKUP_TYPE_SALON, i, 1274, 1, SalonData[i][salonX], SalonData[i][salonY], SalonData[i][salonZ], SalonData[i][salonVW], SalonData[i][salonInterior]);
		Iter_Add(Salon, i);
	}
	return 1;
}

stock LoadParkings(bool:restart = false)
{
	if(restart)
	{
		new __reset_Parking[E_PARKING_DATA];
		foreach(new parking : Parking)
		{
			if(IsValidDynamic3DTextLabel(ParkingInfo[parking][parkingLabel])) DestroyDynamic3DTextLabel(ParkingInfo[parking][parkingLabel]);
			ParkingInfo[parking] = __reset_Parking;
			ParkingInfo[parking][parkingLabel] = INVALID_3DTEXT_ID;
		}
		Iter_Clear(Parking);
	}
	mysql_tquery(chandler, "SELECT * FROM `parkings_data`", "ParkingsLoad");
	return 1;
}

forward ParkingsLoad();
public ParkingsLoad()
{
	new rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "id", ParkingInfo[i][parkingId]);
		cache_get_value_name_float(i, "EnterX", ParkingInfo[i][parkingEnterX]);
		cache_get_value_name_float(i, "EnterY", ParkingInfo[i][parkingEnterY]);
		cache_get_value_name_float(i, "EnterZ", ParkingInfo[i][parkingEnterZ]);
		cache_get_value_name_float(i, "ExitX", ParkingInfo[i][parkingExitX]);
		cache_get_value_name_float(i, "ExitY", ParkingInfo[i][parkingExitY]);
		cache_get_value_name_float(i, "ExitZ", ParkingInfo[i][parkingExitZ]);
		cache_get_value_name_int(i, "VW", ParkingInfo[i][parkingVW]);
		cache_get_value_name_int(i, "Interior", ParkingInfo[i][parkingInterior]);
		cache_get_value_name_int(i, "OutVW", ParkingInfo[i][parkingOutVW]);
		cache_get_value_name_int(i, "Exterior", ParkingInfo[i][parkingExterior]);
		cache_get_value_name(i, "Name", ParkingInfo[i][parkingName], 24);
		FixParkingLabels(i);
		Iter_Add(Parking, i);
	}
	return 1;
}

stock FixParkingLabels(i)
{
	if(IsValidDynamic3DTextLabel(ParkingInfo[i][parkingLabel]))
	{
		DestroyDynamic3DTextLabel(ParkingInfo[i][parkingLabel]);
		ParkingInfo[i][parkingLabel] = INVALID_3DTEXT_ID;
	}
	new string[256];
	format(string, sizeof string, "%s\n{FFFFFF}Norëdami áeiti raðykite /enter", ParkingInfo[i][parkingName]);
	ParkingInfo[i][parkingLabel] = CreateDynamic3DTextLabel(string, 0xDF710BFF, ParkingInfo[i][parkingEnterX], ParkingInfo[i][parkingEnterY], ParkingInfo[i][parkingEnterZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ParkingInfo[i][parkingOutVW], ParkingInfo[i][parkingExterior]);
	return 1;
}


stock LoadGarages(bool:restart = false)
{
	if(restart)
	{
		new __reset_Garage[E_GARAGE_DATA];
		foreach(new garage : Garage)
		{
			if(IsValidDynamic3DTextLabel(GarageInfo[garage][gLabel])) DestroyDynamic3DTextLabel(GarageInfo[garage][gLabel]);
			GarageInfo[garage] = __reset_Garage;
			GarageInfo[garage][gLabel] = INVALID_3DTEXT_ID;
		}
		Iter_Clear(Garage);
	}
	mysql_tquery(chandler, "SELECT * FROM `garages_data`", "GaragesLoad");
	return 1;
}

forward GaragesLoad();
public GaragesLoad()
{
	new rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "id", GarageInfo[i][gId]);
		cache_get_value_name_int(i, "Owner", GarageInfo[i][gOwner]);
		cache_get_value_name_int(i, "Price", GarageInfo[i][gPrice]);
		cache_get_value_name_int(i, "Interior", GarageInfo[i][gInterior]);
		cache_get_value_name_int(i, "Exterior", GarageInfo[i][gExterior]);
		cache_get_value_name_int(i, "OutVW", GarageInfo[i][gOutVW]);
		cache_get_value_name_int(i, "Locked", GarageInfo[i][gLocked]);
		GarageInfo[i][gVW] = GarageInfo[i][gId] + GARAGE_VIRTUAL_WORLD;
		cache_get_value_name_float(i, "EnterX", GarageInfo[i][gEnterX]);
		cache_get_value_name_float(i, "EnterY", GarageInfo[i][gEnterY]);
		cache_get_value_name_float(i, "EnterZ", GarageInfo[i][gEnterZ]);
		cache_get_value_name_float(i, "CarEnterX", GarageInfo[i][gCarEnterX]);
		cache_get_value_name_float(i, "CarEnterY", GarageInfo[i][gCarEnterY]);
		cache_get_value_name_float(i, "CarEnterZ", GarageInfo[i][gCarEnterZ]);
		cache_get_value_name_float(i, "CarEnterA", GarageInfo[i][gCarEnterA]);
		cache_get_value_name_float(i, "ExitX", GarageInfo[i][gExitX]);
		cache_get_value_name_float(i, "ExitY", GarageInfo[i][gExitY]);
		cache_get_value_name_float(i, "ExitZ", GarageInfo[i][gExitZ]);
		cache_get_value_name_float(i, "CarExitX", GarageInfo[i][gCarExitX]);
		cache_get_value_name_float(i, "CarExitY", GarageInfo[i][gCarExitY]);
		cache_get_value_name_float(i, "CarExitZ", GarageInfo[i][gCarExitZ]);
		cache_get_value_name_float(i, "CarExitA", GarageInfo[i][gCarExitA]);
		FixGarageLabels(i);
		Iter_Add(Garage, i);
	}
	printf("[load] %d garazu", rows);
	return 1;
}

stock FixGarageLabels(i)
{
	if(IsValidDynamic3DTextLabel(GarageInfo[i][gLabel]))
	{
		DestroyDynamic3DTextLabel(GarageInfo[i][gLabel]);
	}
	GarageInfo[i][gLabel] = INVALID_3DTEXT_ID;
	new string[256];
	if(GarageInfo[i][gOwner] == 0) format(string, sizeof string, "{FFFFFF}Garaþas parduodamas!\nKaina: $%d (/buygarage){DADADA}\n\n", GarageInfo[i][gPrice]);
	else format(string, sizeof string, "");
	format(string, sizeof string, "%sGaraþo numeris: %d\nRaðykite /enter", string, GarageInfo[i][gId]);
	GarageInfo[i][gLabel] = CreateDynamic3DTextLabel(string, 0xDADADAFF, GarageInfo[i][gEnterX], GarageInfo[i][gEnterY], GarageInfo[i][gEnterZ], 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GarageInfo[i][gOutVW], GarageInfo[i][gExterior]);
	return 1;
}

stock LoadFactions(bool:restart = false)
{
	if(restart)
	{
		foreach(new factionid : Faction)
		{
			for(new i = 0; i < MAX_FACTION_RANKS; i++)
			{
				FactionRankSalaries[factionid][i] =
				FactionRankIds[factionid][i] = 0;
				format(FactionRankNames[factionid][i], 1, "");
			}
		}
		Iter_Clear(Faction);
	}
	mysql_tquery(chandler, "SELECT * FROM `factions_data`", "FactionsLoad");
	return 1;
}

forward FactionsLoad();
public FactionsLoad()
{
	new rows = cache_num_rows(),
		string[126];
	for(new i = 0; i < rows; i++)
	{
		if(i >= MAX_FACTIONS) { break; }
		cache_get_value_name_int(i, "id", FactionInfo[i][fId]);
		cache_get_value_name_int(i, "HasChat", FactionInfo[i][fHasChat]);
		cache_get_value_name_int(i, "ChatEnabled", FactionInfo[i][fChatEnabled]);
		cache_get_value_name_int(i, "Type", FactionInfo[i][fType]);
		cache_get_value_name_int(i, "Budget", FactionInfo[i][fBudget]);
		cache_get_value_name_int(i, "Wares1", FactionInfo[i][fWares][0]);
		cache_get_value_name_int(i, "Wares2", FactionInfo[i][fWares][1]);
		cache_get_value_name_int(i, "Wares3", FactionInfo[i][fWares][2]);
		cache_get_value_name(i, "Name", FactionInfo[i][fName], 48);
		Iter_Add(Faction, i);
		mysql_format(chandler, string, sizeof string, "SELECT `Name`,`Salary`,`id` FROM `factions_ranks` WHERE FactionId = '%d' ORDER BY Rank ASC", FactionInfo[i][fId]);
		mysql_tquery(chandler, string, "FactionRanksLoad", "d", i);
	}
	printf("[load] %d frakciju", rows);
	return 1;
}

forward FactionRanksLoad(factionid);
public FactionRanksLoad(factionid)
{
	new rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		if(i >= MAX_FACTION_RANKS) { break; }
		cache_get_value_name_int(i, "Salary", FactionRankSalaries[factionid][i]);
		cache_get_value_name_int(i, "id", FactionRankIds[factionid][i]);
		cache_get_value_name(i, "Name", FactionRankNames[factionid][i], 84);
	}
	printf("[load] %d ranku frakcijai \"%s\"", rows, FactionInfo[factionid][fName]);
	return 1;
}


stock LoadDroppedItems()
{
	new string[126];
	mysql_format(chandler, string, sizeof string, "UPDATE `drops_data` SET Valid = '0' WHERE Unix + "#TIME_TO_DELETE_DROPS" > %d AND Valid = '1'", gettime());
	mysql_query(chandler, string, false);
	mysql_tquery(chandler, "SELECT * FROM `drops_data` WHERE Valid = '1'", "DropsLoad");
	return 1;
}

forward DropsLoad();
public DropsLoad()
{
	new rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		if(i >= MAX_DROPPED_ITEMS) { break; }
		new vw, int;
		cache_get_value_name_float(i, "X", DroppedItems[i][droppedItemX]);
		cache_get_value_name_float(i, "Y", DroppedItems[i][droppedItemY]);
		cache_get_value_name_float(i, "Z", DroppedItems[i][droppedItemZ]);
		cache_get_value_name_int(i, "ItemId", DroppedItems[i][droppedItemId]);
		cache_get_value_name_int(i, "ItemAmount", DroppedItems[i][droppedItemAmount]);
		cache_get_value_name_int(i, "ItemExtraId", DroppedItems[i][droppedItemExtraId]);
		cache_get_value_name_int(i, "PlayerId", DroppedItems[i][droppedItemPlayerId]);
		cache_get_value_name_int(i, "Unix", DroppedItems[i][droppedItemTime]);
		cache_get_value_name_int(i, "VW", vw);
		cache_get_value_name_int(i, "Interior", int);
		DroppedItems[i][droppedItemObject] = CreateDynamicObject(GetInventoryItemObject(DroppedItems[i][droppedItemId]), DroppedItems[i][droppedItemX], DroppedItems[i][droppedItemY], DroppedItems[i][droppedItemZ], (DroppedItems[i][droppedItemId] <= 46 ? 90.0 : 0.0), 0.0, 0.0, vw, int, -1, 30.0, 30.0, .called = "drops", .extra = "load");
		Iter_Add(DroppedItem, i);
	}
	printf("[load] %d ismestu daiktu.", rows);
	return 1;
}

stock Jobs_LoadPickups()
{
	new string[136],
		enabled_labels = GetGVarInt("EnabledJobLabels");

	for(new i = 0; i < sizeof Jobs; i++)
	{
		if(enabled_labels)
		{
			format(string, sizeof string, "%s\n{F1F1F1}Kontrakto laikas: {66C729}%d{F1F1F1}val\nNorëdami ásidarbinti, raðykite {81C558}/takejob", Jobs[i][jobName], Jobs[i][jobContract]);
			Jobs[i][jobLabel] = CreateDynamic3DTextLabel(string, 0x66C729FF, Jobs[i][jobX], Jobs[i][jobY], Jobs[i][jobZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
		}
		else 
		{
			IsValidDynamic3DTextLabel(Jobs[i][jobLabel]) && DestroyDynamic3DTextLabel(Jobs[i][jobLabel]);
			Jobs[i][jobLabel] = INVALID_3DTEXT_ID;
		}
		IsValidDynamicPickup(Jobs[i][jobPickup]) && sd_DestroyDynamicPickup(Jobs[i][jobPickup]);
		Jobs[i][jobPickup] = sd_CreateDynamicPickup(PICKUP_TYPE_JOB, i, 1275, 1, Jobs[i][jobX], Jobs[i][jobY], Jobs[i][jobZ]);
	}
	printf("[load] %d darbu", sizeof Jobs);
	return 1;
}

stock SendCriticalError(playerid, string[], errordata[])
{
	SendFormat(playerid, 0xFFB03FFF, "%s [%s]", string, errordata);
	SendClientMessage(playerid, 0xFF9E15FF, "Praðome apie klaidà informuoti administracijà.");
	return 1;
}

stock GetJobArrayIndexById(jobid)
{
	if(jobid > 0 && Jobs[jobid-1][jobId] == jobid) return jobid-1;
	else
	{
		for(new i = 0; i < sizeof Jobs; i++) if(Jobs[i][jobId] == jobid) return i;
	}
	return -1;
}

stock GetFactionArrayIndexById(factionid)
{
	foreach(new i : Faction)	if(FactionInfo[i][fId] == factionid) return i;
	return -1;
}

stock GetFactionArrayIndexByType(type)
{
	foreach(new i : Faction) if(FactionInfo[i][fType] == type) return i;
	return -1;
}

stock LoadServerVehicles(bool:restart = false)
{
	if(restart)
	{
		for(new vehicleid = 0; vehicleid < MAX_VEHICLES; vehicleid++)
		{
			if(VehicleInfo[vehicleid][vJob] != 0 || VehicleInfo[vehicleid][vFaction] != 0)
			{
				VehicleInfo[vehicleid][vJob] = 0;
				VehicleInfo[vehicleid][vFaction] = 0;
				VehicleInfo[vehicleid][vRequiredLevel] = 0;
			}
			DestroyVehicle(vehicleid);
		}
	}
	mysql_tquery(chandler, "SELECT * FROM `vehicles_server`", "ServerVehiclesLoad");
	return 1;
}

forward ServerVehiclesLoad();
public ServerVehiclesLoad()
{
	new rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		new model, Float:x, Float:y, Float:z, Float:a, color1, color2, addsiren, factionid;
		cache_get_value_name_int(i, "Model", model);
		cache_get_value_name_float(i, "X", x);
		cache_get_value_name_float(i, "Y", y);
		cache_get_value_name_float(i, "Z", z);
		cache_get_value_name_float(i, "A", a);
		cache_get_value_name_int(i, "Color1", color1);
		cache_get_value_name_int(i, "Color2", color2);
		cache_get_value_name_int(i, "AddSiren", addsiren);
		cache_get_value_name_int(i, "FactionId", factionid);
		if(factionid > 0 && FactionInfo[GetFactionArrayIndexById(factionid)][fType] == FACTION_TYPE_POLICE) addsiren = 1;
		new vehicleid = CreateVehicle(model, x, y, z, a, color1, color2, 0, addsiren);
		if(vehicleid == INVALID_VEHICLE_ID) { continue; }
		VehicleInfo[vehicleid][vFaction] = factionid;
		cache_get_value_name_int(i, "JobId", VehicleInfo[vehicleid][vJob]);
		cache_get_value_name_int(i, "id", VehicleInfo[vehicleid][vId]);
		cache_get_value_name_int(i, "RequiredLevel", VehicleInfo[vehicleid][vRequiredLevel]);
		cache_get_value_name_int(i, "Price", VehicleInfo[vehicleid][vPrice]);
		cache_get_value_name_int(i, "AddedType", VehicleInfo[vehicleid][vExtraId]);
		cache_get_value_name(i, "Unit", VehicleInfo[vehicleid][vUnitText], 15);
		cache_get_value_name_float(i, "KM", VehicleInfo[vehicleid][vKM]);
		PutFactionWeaponsInVehicle(vehicleid);
		if(strlen(VehicleInfo[vehicleid][vUnitText]))
		{
			new Float:mx, Float:mz, Float:my;
			GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, mx, my, mz);
			VehicleInfo[vehicleid][vUnitLabel] = CreateDynamic3DTextLabel(VehicleInfo[vehicleid][vUnitText], 0xFFFFFFFF, 0.425*mx, (-0.45*my), (-0.1*mz), 15.0, INVALID_PLAYER_ID, vehicleid, 1);
		}
		VehicleInfo[vehicleid][vFuel] = float(VehicleFuelCapacityList[model-400]);
		VehicleInfo[vehicleid][vSyncX] = x;
		VehicleInfo[vehicleid][vSyncY] = y;
		VehicleInfo[vehicleid][vSyncZ] = z;
		VehicleInfo[vehicleid][vSyncA] = a;
		VehicleInfo[vehicleid][vEngineStatus] =
		VehicleInfo[vehicleid][vBatteryStatus] = 100.0;
		
		Vehicle_SetServerNumberPlate(vehicleid);
	}
	printf("[load] %d serverio tr. priemoniu", rows);
	return 1;
}

stock Vehicle_SetServerNumberPlate(vehicleid)
{
	new numbers[10];
	if(VehicleInfo[vehicleid][vJob] != 0)
	{
		format(numbers, sizeof numbers, ""#DEFAULT_JOB_VEHICLE_NUMBER_PREFIX"%d%d", VehicleInfo[vehicleid][vJob], VehicleInfo[vehicleid][vId]);
	}
	else if(VehicleInfo[vehicleid][vFaction] != 0)
	{
		if(VehicleInfo[vehicleid][vFaction] == -2) format(numbers, sizeof numbers, "RENT");
		else if(VehicleInfo[vehicleid][vFaction] == -1) format(numbers, sizeof numbers, "DMV");

		else format(numbers, sizeof numbers, ""#DEFAULT_FACTION_VEHICLE_NUMBER_PREFIX"%d%d", VehicleInfo[vehicleid][vFaction], VehicleInfo[vehicleid][vId]);
	}
	format(VehicleInfo[vehicleid][vNumbers], 10, numbers);		
	SetVehicleNumberPlate(vehicleid, numbers);
	return 1;
}

stock LoadSellVehicles(bool:restart = false)
{
	if(restart)
	{
		for(new i = 0; i < MAX_SALON_MODELS; i++)
		{
			SellVehicleData[i][sellvehicleId] = 0;
			SellVehicleData[i][sellvehicleModel] = 0;
			SellVehicleData[i][sellvehiclePrice] = 0;
			SellVehicleData[i][sellvehicleSalon] = 0;
			SellVehicleData[i][sellvehicleDonator] = 0;
		}
		Iter_Clear(SellVehicle);
	}
	mysql_tquery(chandler, "SELECT * FROM `sell_vehicles`", "SellVehiclesLoad");
	return 1;
}

forward SellVehiclesLoad();
public SellVehiclesLoad()
{
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_int(i, "id", SellVehicleData[i][sellvehicleId]);
		cache_get_value_name_int(i, "Model", SellVehicleData[i][sellvehicleModel]);
		cache_get_value_name_int(i, "Price", SellVehicleData[i][sellvehiclePrice]);
		cache_get_value_name_int(i, "SalonId", SellVehicleData[i][sellvehicleSalon]);
		cache_get_value_name_int(i, "Donator", SellVehicleData[i][sellvehicleDonator]);
		Iter_Add(SellVehicle, i);
	}
	return 1;
}

stock InfoBox(playerid, name[], text[], va_args<>)
{
	new 
		final[126];

	va_format(final, 126, text, va_start<3>);
	PlayerTextDrawSetString(playerid, tdWarning_Name[playerid], name);
	PlayerTextDrawSetString(playerid, tdWarning_Info[playerid], final);
	PlayerTextDrawShow(playerid, tdWarning_Name[playerid]);
	PlayerTextDrawShow(playerid, tdWarning_Info[playerid]);
	if(ShowingInfoBar{playerid})
	{
		PlayerTextDrawHide(playerid, InfoBar[playerid]);
	}
	SetTimerEx("WarningHide", 2000, false, "d", playerid);
	return 1;
}

stock SaveFaction(factionid)
{
	new string[512];
	mysql_format(chandler, string, sizeof string, "UPDATE `factions_data` SET Name = '%e', Wares1 = '%d', Wares2 = '%d', Wares3 = '%d', ChatEnabled = '%d', HasChat = '%d',", FactionInfo[factionid][fName], FactionInfo[factionid][fWares][0], FactionInfo[factionid][fWares][1], FactionInfo[factionid][fWares][2], FactionInfo[factionid][fChatEnabled], FactionInfo[factionid][fHasChat]);
	mysql_format(chandler, string, sizeof string, "%sBudget = '%d', Type = '%d' WHERE id = '%d'", string, FactionInfo[factionid][fBudget], FactionInfo[factionid][fType], FactionInfo[factionid][fId]);
	mysql_fquery(chandler, string, "FactionSaved");
	return 1;
}
thread(FactionSaved);

stock SaveAccount(playerid, bool:save_inventory = false, bool:save_groups = true, bool:save_clothes = true, bool:save_drug_stats = true, bool:save_user = true)
{
	if(PlayerInfo[playerid][pConnection] != CONNECTION_STATE_LOGGED) return 0;
	/*
	 *
	 */
	new string[1024],
		Float:x, Float:y, Float:z, Float:a;
	if(PlayerInfo[playerid][pViewStatus] == PLAYER_VIEW_STATUS_NONE)
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
	}
	else
	{
		x = PlayerInfo[playerid][pPosX];
		y = PlayerInfo[playerid][pPosY];
		z = PlayerInfo[playerid][pPosZ];
	}
	GetPlayerFacingAngle(playerid, a);
	mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET X = '%f', Y = '%f', Z = '%f', A = '%f', Skin = '%d', XP = '%d', Level = '%d', SideJob = '%d',", x, y, z, a, PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pXP], PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pSideJob]);
	mysql_format(chandler, string, sizeof string, "%sJob = '%d', JobContract = '%d', JobXP = '%d', JobLevel = '%d', PayCheck = '%d', HaveCars = '%d', PayDayCollected = '%d',", string, PlayerInfo[playerid][pJob], PlayerInfo[playerid][pJobContract], PlayerInfo[playerid][pJobXP], PlayerInfo[playerid][pJobLevel], PlayerInfo[playerid][pPayCheck], PlayerInfo[playerid][pHaveCars], PlayerInfo[playerid][pPayDayCollected]);
	mysql_format(chandler, string, sizeof string, "%sMoney = '%d', Faction = '%d', PayDayTime = '%d', Savings = '%d', Bank = '%d', VW = '%d', Interior = '%d', FactionLeader = '%d',", string, GetPlayerMoney(playerid), PlayerInfo[playerid][pFaction], PlayerInfo[playerid][pPayDayTime], PlayerInfo[playerid][pSavings], PlayerInfo[playerid][pBank], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), PlayerInfo[playerid][pFactionLeader]);
	mysql_format(chandler, string, sizeof string, "%sHoursPlayed = '%d', BankCard = '%d', PoliceBadge = '%d', FactionPermission1 = '%d', FactionPermission2 = '%d', FactionPermission3 = '%d',", string, PlayerInfo[playerid][pHoursPlayed], PlayerInfo[playerid][pBankCard], PlayerInfo[playerid][pPoliceBadge], PlayerInfo[playerid][pFactionPermissions][0], PlayerInfo[playerid][pFactionPermissions][1], PlayerInfo[playerid][pFactionPermissions][2]);
	mysql_format(chandler, string, sizeof string, "%sPhoneNumber = '%d', JailTime = '%d', JailType = '%d', Fishes = '%d', FishedLimit = '%d'", string, PlayerInfo[playerid][pPhoneNumber], PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pJailType], PlayerInfo[playerid][pFishes], PlayerInfo[playerid][pFishedLimit]);
	mysql_format(chandler, string, sizeof string, "%s WHERE id = '%d'", string, PlayerInfo[playerid][pId]);
	mysql_fquery(chandler, string, "AccountSave");
	mysql_format(chandler, string, sizeof string, "UPDATE `dealers_data` SET Type = '%d' WHERE PlayerId = '%d' AND Active = '1'", PlayerInfo[playerid][pDealer], PlayerInfo[playerid][pId]);
	mysql_fquery(chandler, string, "AccountSave");

	if(save_user)
	{
		new 
			userid = PlayerInfo[playerid][pUserId];
		SaveUserIntEx(userid, "NameChanges", PlayerInfo[playerid][pNameChanges]);
		SaveUserIntEx(userid, "NumberChanges", PlayerInfo[playerid][pNumberChanges]);
		SaveUserIntEx(userid, "PlateChanges", PlayerInfo[playerid][pPlateChanges]);
		SaveUserIntEx(userid, "Donator", PlayerInfo[playerid][pDonator]);
		SaveUserIntEx(userid, "DonatorTime", PlayerInfo[playerid][pDonatorTime]);
	}

	save_groups && SaveUserGroups(playerid);
	save_inventory && SaveInventory(playerid);
	save_clothes && SaveClothes(playerid);
	save_drug_stats && SaveDrugStats(playerid);
	return 1;
}
thread(AccountSave);

stock SaveDrugStats(playerid, drug_type = -1)
{
	new string[512];
	for(new i = (drug_type == -1 ? 0 : drug_type); i < (drug_type == -1 ? MAX_DRUG_TYPES : drug_type+1); i++)
	{
		mysql_format(chandler, string, sizeof string, "UPDATE `players_drugs` SET UsedTimes = '%d', Unused = '%d', Level = '%d' WHERE PlayerId = '%d' AND Type = '%d'", PlayerDrugs[playerid][i][drugUsedTimes], PlayerDrugs[playerid][i][drugUnused], PlayerDrugs[playerid][i][drugLevel], PlayerInfo[playerid][pId], i);
		mysql_fquery(chandler, string, "DrugsSaved");
	}
	return 1;
}

stock SaveUserGroups(playerid)
{
	new line[24],
		string[186];
	mysql_format(chandler, string, sizeof string, "UPDATE `users_data` SET ");
	for(new i = 0; i < MAX_PLAYER_GROUPS; i++)
	{
		format(line, sizeof line, "Group%d = '%d'", i+1, PlayerGroups[playerid][i]);
		if(i != MAX_PLAYER_GROUPS-1) strcat(line, ", ");
		strcat(string, line);
	}
	mysql_format(chandler, string, sizeof string, "%s WHERE id = '%d'", string, PlayerInfo[playerid][pUserId]);
	mysql_fquery(chandler, string, "AccountGroupsSave");
	return 1;
}
thread(AccountGroupsSave);

stock SpawnUnconfirmedChar(playerid)
{
	#pragma unused playerid
	/*PlayerInfo[playerid][pIsApproved] = false;
	PlayerInfo[playerid][pAfterLogin] = 1;

	new string[38];
	format(string, 38, "SVEIKI, %s", strtoupper(GetPlayerNameEx(playerid, true)));
	InfoBox(playerid, "~g~PRISIJUNGETE", string);
	
	TogglePlayerSpectating(playerid, false);
	SetCameraBehindPlayer(playerid);
	SpawnPlayerEx(playerid, 1, .set = true);*/
	return 1;
}

stock LoadAccount(playerid)
{
	/*
	 * Funkcija, uzkraunanti visus duomenis is mysql zaidejui
	 */
	new string[68];
	mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_data` WHERE id = '%d'", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "AccountLoad", "d", playerid);

	mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_settings` WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "PlOptionsLoad", "d", playerid);

	mysql_format(chandler, string, sizeof string, "SELECT Type FROM `dealers_data` WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "DealerLoad", "d", playerid);
	return 1;
}

forward DealerLoad(playerid);
public DealerLoad(playerid)
{
	if(cache_num_rows()) cache_get_value_name_int(0, "Type", PlayerInfo[playerid][pDealer]);
	else PlayerInfo[playerid][pDealer] = -1;
	return 1;
}

forward PlOptionsLoad(playerid);
public PlOptionsLoad(playerid)
{
	new 
		option[46],
		value;
	if(cache_num_rows())
	{
		for(new i = 0, rows = cache_num_rows(); i < rows; i++)
		{
			cache_get_value_name(i, "Option", option);
			cache_get_value_name_int(i, "Value", value);
			if(isequal(option, "TextdrawDisabled_JailTimer"))
			{
				TextdrawDisabled_JailTimer{playerid} = !!value;
			}
			if(isequal(option, "TextdrawDisabled_Speedo"))
			{
				TextdrawDisabled_Speedo{playerid} = !!value;
			}
			if(isequal(option, "TextdrawDisabled_InfoBar"))
			{
				TextdrawDisabled_InfoBar{playerid} = !!value;
			}
		}
	}
	return 1;
}

forward AccountLoad(playerid);
public AccountLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] AccountLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	if(cache_num_rows())
	{
		new last_version;
		cache_get_value_name_int(0, "PoliceBadge", PlayerInfo[playerid][pPoliceBadge]);
		cache_get_value_name_int(0, "HaveCars", PlayerInfo[playerid][pHaveCars]);
		cache_get_value_name_int(0, "SideJob", PlayerInfo[playerid][pSideJob]);
		cache_get_value_name_int(0, "Job", PlayerInfo[playerid][pJob]);
		cache_get_value_name_int(0, "JobContract", PlayerInfo[playerid][pJobContract]);
		cache_get_value_name_int(0, "Gender", PlayerInfo[playerid][pGender]);
		cache_get_value_name_int(0, "JobXP", PlayerInfo[playerid][pJobXP]);
		cache_get_value_name_int(0, "JobLevel", PlayerInfo[playerid][pJobLevel]);
		cache_get_value_name_int(0, "PayCheck", PlayerInfo[playerid][pPayCheck]);
		cache_get_value_name_int(0, "Faction", PlayerInfo[playerid][pFaction]);
		cache_get_value_name_int(0, "Bank", PlayerInfo[playerid][pBank]);
		cache_get_value_name_int(0, "Savings", PlayerInfo[playerid][pSavings]);
		cache_get_value_name_int(0, "XP", PlayerInfo[playerid][pXP]);
		cache_get_value_name_int(0, "Level", PlayerInfo[playerid][pLevel]);
		cache_get_value_name_int(0, "FactionLeader", PlayerInfo[playerid][pFactionLeader]);
		cache_get_value_name_int(0, "BirthDate", PlayerInfo[playerid][pBirthDate]);
		cache_get_value_name_int(0, "PayDayTime", PlayerInfo[playerid][pPayDayTime]);
		#if ENABLE_BANK_CARD_CREATION
			cache_get_value_name_int(0, "BankCard", PlayerInfo[playerid][pBankCard]);
		#else 
			PlayerInfo[playerid][pBankCard] = 1;
		#endif
		cache_get_value_name_int(0, "HoursPlayed", PlayerInfo[playerid][pHoursPlayed]);
		cache_get_value_name_int(0, "FactionPermission1", PlayerInfo[playerid][pFactionPermissions][0]);
		cache_get_value_name_int(0, "FactionPermission2", PlayerInfo[playerid][pFactionPermissions][1]);
		cache_get_value_name_int(0, "FactionPermission3", PlayerInfo[playerid][pFactionPermissions][2]);
		cache_get_value_name_int(0, "CarLic", PlayerInfo[playerid][pCarLic]);
		cache_get_value_name_int(0, "MotoLic", PlayerInfo[playerid][pMotoLic]);
		cache_get_value_name_int(0, "Warns", PlayerInfo[playerid][pWarns]);
		cache_get_value_name_int(0, "JailType", PlayerInfo[playerid][pJailType]);
		cache_get_value_name_int(0, "JailTime", PlayerInfo[playerid][pJailTime]);
		cache_get_value_name_int(0, "FlyLic", PlayerInfo[playerid][pFlyLic]);
		cache_get_value_name_int(0, "BoatLic", PlayerInfo[playerid][pBoatLic]);
		cache_get_value_name_int(0, "Fishes", PlayerInfo[playerid][pFishes]);
		cache_get_value_name_int(0, "FishedLimit", PlayerInfo[playerid][pFishedLimit]);
		cache_get_value_name_int(0, "TaxiLic", PlayerInfo[playerid][pTaxiLic]);
		cache_get_value_name_int(0, "PhoneNumber", PlayerInfo[playerid][pPhoneNumber]);
		cache_get_value_name_int(0, "StolenCars", PlayerInfo[playerid][pStolenCars]);
		cache_get_value_name_int(0, "LastVersion_Server", last_version);
		cache_get_value_name_int(0, "PayDayCollected", PlayerInfo[playerid][pPayDayCollected]);
		cache_get_value_name_int(0, "GraffitiAllowed", PlayerInfo[playerid][pGraffitiAllowed]);
		cache_get_value_name(0, "Origin", PlayerInfo[playerid][pOrigin], 30);

		cache_get_value_name(0, "ForumName", PlayerInfo[playerid][pForumName], 24);
		SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);

		if(PlayerInfo[playerid][pFaction] != 0 && GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]) == -1)
		{
			SendFormat(playerid, 0xFFA03FFF, "JÛSØ FRAKCIJA, KURIAI PRIKLAUSËTE BUVO IÐTRINTA ARBA KITAIP PAKEISTA.");
			PlayerInfo[playerid][pFaction] = 0;
			SaveAccountIntEx(playerid, "Faction", 0);
		}
		new tmpint;
		cache_get_value_name_int(0, "Money", tmpint);
		GivePlayerMoney(playerid, tmpint);
		cache_get_value_name_int(0, "Skin", PlayerInfo[playerid][pSkin]);
		//if(!(0 <= PlayerInfo[playerid][pSkin] <= 311)) PlayerInfo[playerid][pSkin] = 1;
		cache_get_value_name_int(0, "Interior", PlayerInfo[playerid][pInterior]);
		cache_get_value_name_int(0, "VW", PlayerInfo[playerid][pVW]);
		cache_get_value_name_int(0, "RadioChannel", tmpint);
		PlayerInfo[playerid][pRadioChannel] = tmpint;
		if(tmpint > 0)
		{
			new string[45];
			format(string, sizeof string, "RACIJOS KANALAS: %d", tmpint);
			UpdateInfoBar(playerid, string);
		}
		cache_get_value_name_int(0, "SpawnType", PlayerInfo[playerid][pSpawnType]);
		cache_get_value_name_int(0, "SpawnId", PlayerInfo[playerid][pSpawnId]);
		cache_get_value_name_float(0, "X", PlayerInfo[playerid][pPosX]);
		cache_get_value_name_float(0, "Y", PlayerInfo[playerid][pPosY]);
		cache_get_value_name_float(0, "Z", PlayerInfo[playerid][pPosZ]);
		
		new string[38];
		format(string, 38, "SVEIKI, %s", strtoupper(GetPlayerNameEx(playerid, true)));
		InfoBox(playerid, "~g~PRISIJUNGETE", string);
		
		PlayerInfo[playerid][pAfterLogin] = 1;
		PlayerInfo[playerid][pIsApproved] = true;

		if(last_version != CODE_VERSION_P)
		{
			SendFormat(playerid, 0xF06C38FF, "Serveris buvo atnaujintas nuo to laiko, kai Jûs paskutiná kartà prisijungëte!");
			SendFormat(playerid, 0xF06C38FF, "Atnaujinimus rasite www.southland.lt forume. Dabartinë versija: "#CODE_VERSION"");
			SaveAccountIntEx(playerid, "LastVersion_Server", CODE_VERSION_P);
		}

		log_init(true);
		log_set_table("logs_connections");
		log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`IP`");
		log_set_values("'%d','%e','Uzkrautas veikejas','%s'", LogPlayerId(playerid), LogPlayerName(playerid), GetPlayerIpEx(playerid));
		log_commit();

		SpawnPlayerEx(playerid, 1, .set = true);
		TogglePlayerSpectating(playerid, false);
		SetCameraBehindPlayer(playerid);
	}
	else
	{
		#if SERVER_DEBUG_LEVEL >= 1
			printf("[debug] Error::AccountLoad(%s) no rows.\n", GetPlayerNameEx(playerid));
		#endif
		KickEx(playerid);
	}
	return 1;
}

forward PlayerClothesLoad(playerid);
public PlayerClothesLoad(playerid)
{
	if(!cache_num_rows())
	{
		new string[125];
		mysql_format(chandler, string, sizeof string, "INSERT INTO `players_clothes` (`PlayerId`) VALUES ('%d')", PlayerInfo[playerid][pId]);
		mysql_query(chandler, string, false);
	}
	else
	{
		new packed[256];
		cache_get_value_name(0, "Packed", packed);
		//extract_clothes(packed,"|","d",1,playerid,ClothesInventory)
		sscanf(packed,"p<|>a<i>["#MAX_CLOTHES_INVENTORY_SLOTS"]", ClothesInventory[playerid]);
		/*sscanf(packed,"p<|>ddddddddddddddd",
			ClothesInventory[playerid][0],
			ClothesInventory[playerid][1],
			ClothesInventory[playerid][2],
			ClothesInventory[playerid][3],
			ClothesInventory[playerid][4],
			ClothesInventory[playerid][5],
			ClothesInventory[playerid][6],
			ClothesInventory[playerid][7],
			ClothesInventory[playerid][8],
			ClothesInventory[playerid][9],
			ClothesInventory[playerid][10],
			ClothesInventory[playerid][11],
			ClothesInventory[playerid][12],
			ClothesInventory[playerid][13],
			ClothesInventory[playerid][14]);*/
		mysql_format(chandler, packed, sizeof packed, "SELECT * FROM `players_clothes_attached` WHERE PlayerId = '%d' ORDER BY `Index` ASC", PlayerInfo[playerid][pId]);
		mysql_tquery(chandler, packed, "PlayerClothesAttachedLoad", "d", playerid);
	}
	return 1;
}

forward PlayerClothesAttachedLoad(playerid);
public PlayerClothesAttachedLoad(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] PlayerClothesAttachedLoad(%s)", GetPlayerNameEx(playerid));
	#endif
	for(new i = 0; i < 9; i++)
	{
		new id,
			string[126];
		cache_get_value_name_int(i, "id", id);
		if(id <= 0)
		{
			// Sito Index nera mysqle, idedam kaip tuscia
			AttachedClothes[playerid][i][attachedInventorySlot] = -1;
			mysql_format(chandler, string, sizeof string, "INSERT INTO `players_clothes_attached` (`Index`,`PlayerId`,`InventorySlot`) VALUES ('%d','%d','-1')", i, PlayerInfo[playerid][pId]);
			mysql_fquery(chandler, string, "AttachedClotheAddEmpty");
			continue;
		}
		else
		{
			cache_get_value_name_int(i, "InventorySlot", AttachedClothes[playerid][i][attachedInventorySlot]);
			cache_get_value_name_int(i, "Bone", AttachedClothes[playerid][i][attachedBone]);
			cache_get_value_name_float(i, "OffsetX", AttachedClothes[playerid][i][attachedOffsetX]);
			cache_get_value_name_float(i, "OffsetY", AttachedClothes[playerid][i][attachedOffsetY]);
			cache_get_value_name_float(i, "OffsetZ", AttachedClothes[playerid][i][attachedOffsetZ]);
			cache_get_value_name_float(i, "RotX", AttachedClothes[playerid][i][attachedRotX]);
			cache_get_value_name_float(i, "RotY", AttachedClothes[playerid][i][attachedRotY]);
			cache_get_value_name_float(i, "RotZ", AttachedClothes[playerid][i][attachedRotZ]);
			cache_get_value_name_float(i, "ScaleX", AttachedClothes[playerid][i][attachedScaleX]);
			cache_get_value_name_float(i, "ScaleY", AttachedClothes[playerid][i][attachedScaleY]);
			cache_get_value_name_float(i, "ScaleZ", AttachedClothes[playerid][i][attachedScaleZ]);
			if(AttachedClothes[playerid][i][attachedInventorySlot] != -1)
			{
				if(ClothesInventory[playerid][AttachedClothes[playerid][i][attachedInventorySlot]] != 0)
				{
					SetPlayerAttachedObject(playerid, i,
						ClothesInventory[playerid][AttachedClothes[playerid][i][attachedInventorySlot]], // model
						AttachedClothes[playerid][i][attachedBone],	// bone
						AttachedClothes[playerid][i][attachedOffsetX], // offsetx
						AttachedClothes[playerid][i][attachedOffsetY], // offsety
						AttachedClothes[playerid][i][attachedOffsetZ], // offsetz
						AttachedClothes[playerid][i][attachedRotX],
						AttachedClothes[playerid][i][attachedRotY],
						AttachedClothes[playerid][i][attachedRotZ],
						AttachedClothes[playerid][i][attachedScaleX],
						AttachedClothes[playerid][i][attachedScaleY],
						AttachedClothes[playerid][i][attachedScaleZ]);
				}
			}
		}
	}
	return 1;
}
thread(AttachedClotheAddEmpty);

stock SaveVehicleInventory(vehicleid)
{
	new joined[24],
		string[512],
		query[512];
	for(new slot = 0; slot < MAX_VEHICLE_INVENTORY_SLOTS; slot++)
	{
		format(joined, sizeof joined, "%d|%d|%d|", VehicleInventory[vehicleid][slot][invId], VehicleInventory[vehicleid][slot][invAmount], VehicleInventory[vehicleid][slot][invExtraId]);
		strcat(string, joined);
	}
	mysql_format(chandler, query, sizeof query, "UPDATE `vehicles_inventory` SET Packed = '%e' WHERE VehicleId = '%d'", string, VehicleInfo[vehicleid][vId]);
	mysql_fquery(chandler, query, "VehicleInventorySave");
	return 1;
}

stock SaveClothes(playerid, bool:save_attached = true)
{
	new string[512];
	format(string, sizeof string, "UPDATE `players_clothes` SET Packed = '");
	for(new i = 0; i < MAX_CLOTHES_INVENTORY_SLOTS; i++)
	{
		format(string, sizeof string, "%s%d|", string, ClothesInventory[playerid][i]);
	}
	mysql_format(chandler, string, sizeof string, "%s' WHERE PlayerId = '%d'", string, PlayerInfo[playerid][pId]);
	mysql_fquery(chandler, string, "ClothesSaved");
	save_attached && SaveAttachedClothes(playerid);
	return 1;
}
thread(ClothesSaved);
stock SaveAttachedClothes(playerid, slot = -1)
{
	new string[512];
	if(slot == -1)
	{
		for(new i = 0; i < 9; i++)
		{
			mysql_format(chandler, string, sizeof string, "UPDATE `players_clothes_attached` SET InventorySlot = '%d', Bone = '%d', OffsetX = '%f', OffsetY = '%f', OffsetZ = '%f',", AttachedClothes[playerid][i][attachedInventorySlot], AttachedClothes[playerid][i][attachedBone], AttachedClothes[playerid][i][attachedOffsetX], AttachedClothes[playerid][i][attachedOffsetY], AttachedClothes[playerid][i][attachedOffsetZ]);
			mysql_format(chandler, string, sizeof string, "%sRotX = '%f', RotY = '%f', RotZ = '%f', ScaleX = '%f', ScaleY = '%f', ScaleZ = '%f'  WHERE PlayerId = '%d' AND `Index` = '%d'", string, AttachedClothes[playerid][i][attachedRotX], AttachedClothes[playerid][i][attachedRotY], AttachedClothes[playerid][i][attachedRotZ], AttachedClothes[playerid][i][attachedScaleX], AttachedClothes[playerid][i][attachedScaleY], AttachedClothes[playerid][i][attachedScaleZ], PlayerInfo[playerid][pId], i);
			mysql_fquery(chandler, string, "AttachedClotheSave");
		}
	}
	else
	{
		new i = slot;
		mysql_format(chandler, string, sizeof string, "UPDATE `players_clothes_attached` SET InventorySlot = '%d', Bone = '%d', OffsetX = '%f', OffsetY = '%f', OffsetZ = '%f',", AttachedClothes[playerid][i][attachedInventorySlot], AttachedClothes[playerid][i][attachedBone], AttachedClothes[playerid][i][attachedOffsetX], AttachedClothes[playerid][i][attachedOffsetY], AttachedClothes[playerid][i][attachedOffsetZ]);
		mysql_format(chandler, string, sizeof string, "%sRotX = '%f', RotY = '%f', RotZ = '%f', ScaleX = '%f', ScaleY = '%f', ScaleZ = '%f'  WHERE PlayerId = '%d' AND `Index` = '%d'", string, AttachedClothes[playerid][i][attachedRotX], AttachedClothes[playerid][i][attachedRotY], AttachedClothes[playerid][i][attachedRotZ], AttachedClothes[playerid][i][attachedScaleX], AttachedClothes[playerid][i][attachedScaleY], AttachedClothes[playerid][i][attachedScaleZ], PlayerInfo[playerid][pId], i);
		mysql_fquery(chandler, string, "AttachedClotheSave");
	}
	return 1;
}
thread(AttachedClotheSave);
stock SaveInventory(playerid)
{
	new joined[24],
		string[512],
		query[512];
	for(new slot = 0; slot < MAX_INVENTORY_SLOTS; slot++)
	{
		format(joined, sizeof joined, "%d|%d|%d|", InventoryInfo[playerid][slot][invId], InventoryInfo[playerid][slot][invAmount], InventoryInfo[playerid][slot][invExtraId]);
		strcat(string, joined);
	}
	mysql_format(chandler, query, sizeof query, "UPDATE `players_inventory` SET Packed = '%e' WHERE PlayerId = '%d'", string,  PlayerInfo[playerid][pId]);
	mysql_fquery(chandler, query, "InventorySave");
	return 1;
}
thread(InventorySave);
thread(VehicleInventorySave);

stock LoadServer()
{
	/*
	 * Funkcija, uzkraunanti visus serverio nustatymus
	 */
	new hour, minute, second;
	gettime(hour, minute, second);

	serverHour = hour;

	SetWorldTime(hour);
	SetWeather(18);

	mysql_tquery(chandler, "SELECT * FROM `options`", "OptionsLoad");
	return 1;
}
stock GetClosestATM(playerid, Float:distance = 5.0)
{
	new
		Float:last_distance = distance,
		last_atm = -1;
	foreach(new atm : ATM)
	{
		if(GetPlayerDistanceFromPoint(playerid, ATMs[atm][atmX], ATMs[atm][atmY], ATMs[atm][atmZ]) <= last_distance && GetPlayerInterior(playerid) == ATMs[atm][atmInt] && GetPlayerVirtualWorld(playerid) == ATMs[atm][atmVW])
		{
			last_distance = GetPlayerDistanceFromPoint(playerid, ATMs[atm][atmX], ATMs[atm][atmY], ATMs[atm][atmZ]);
			last_atm = atm;
		}
	}
	return last_atm;
}

stock GetClosestBusinessInCoords(Float:x, Float:y, Float:z, playerid, Float:distance = 5.0, type = CHECK_TYPE_INSIDE_AND_OUTSIDE)
{
	new
		Float:last_distance = distance,
		last_business = INVALID_BUSINESS_ID,
		last_was_inside = -1,
		player_virtual = GetPlayerVirtualWorld(playerid),
		player_interior = GetPlayerInterior(playerid);

	switch(type)
	{
		case CHECK_TYPE_INSIDE_AND_OUTSIDE:
		{
			foreach(new businessid : Business)
			{
				if( (GetDistanceBetweenPoints3D(x, y, z, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ]) <= last_distance && player_virtual == BusinessInfo[businessid][bOutVW] && player_interior == BusinessInfo[businessid][bExterior] && ((last_was_inside = 2) || last_was_inside == 2)) ||
					(GetDistanceBetweenPoints3D(x, y, z, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ]) <= last_distance && player_virtual == BusinessInfo[businessid][bVW] && player_interior == BusinessInfo[businessid][bInterior] && ((last_was_inside = 1) || last_was_inside == 1)))
				{
					last_distance = (last_was_inside == 1 ? (GetDistanceBetweenPoints3D(x, y, z, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ])) : (GetDistanceBetweenPoints3D(x, y, z, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ])));
					last_business = businessid;
				}
			}
		}
		case CHECK_TYPE_INSIDE:
		{
			foreach(new businessid : Business)
			{
				if(GetDistanceBetweenPoints3D(x, y, z, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ]) <= last_distance && player_virtual == BusinessInfo[businessid][bVW] && player_interior == BusinessInfo[businessid][bInterior])
				{
					last_distance = GetDistanceBetweenPoints3D(x, y, z, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ]);
					last_business = businessid;
				}
			}
		}
		case CHECK_TYPE_OUTSIDE:
		{
			foreach(new businessid : Business)
			{
				if(GetDistanceBetweenPoints3D(x, y, z, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ]) <= last_distance && player_virtual == BusinessInfo[businessid][bOutVW] && player_interior == BusinessInfo[businessid][bExterior])
				{
					last_distance = GetDistanceBetweenPoints3D(x, y, z, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ]);
					last_business = businessid;
				}
			}
		}
	}
	return last_business;
}

stock GetClosestGarageInCoords(Float:x, Float:y, Float:z, playerid, Float:distance = 5.0, type = CHECK_TYPE_INSIDE_AND_OUTSIDE)
{
	new
		Float:last_distance = distance,
		last_garage = INVALID_GARAGE_ID,
		last_was_inside = -1,
		player_virtual = GetPlayerVirtualWorld(playerid),
		player_interior = GetPlayerInterior(playerid);

	switch(type)
	{
		case CHECK_TYPE_INSIDE_AND_OUTSIDE:
		{
			foreach(new garageid : Garage)
			{
				if( (GetDistanceBetweenPoints3D(x, y, z, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ]) <= last_distance && player_virtual == GarageInfo[garageid][gOutVW] && player_interior == GarageInfo[garageid][gExterior] && ((last_was_inside = 2) || last_was_inside == 2)) ||
					(GetDistanceBetweenPoints3D(x, y, z, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]) <= last_distance && player_virtual == GarageInfo[garageid][gVW] && player_interior == GarageInfo[garageid][gInterior] && ((last_was_inside = 1) || last_was_inside == 1)))
				{
					last_distance = (last_was_inside == 1 ? (GetDistanceBetweenPoints3D(x, y, z, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ])) : (GetDistanceBetweenPoints3D(x, y, z, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ])));
					last_garage = garageid;
				}
			}
		}
		case CHECK_TYPE_INSIDE:
		{
			foreach(new garageid : Garage)
			{
				if(GetDistanceBetweenPoints3D(x, y, z, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]) <= last_distance && player_virtual == GarageInfo[garageid][gVW] && player_interior == GarageInfo[garageid][gInterior])
				{
					last_distance = GetDistanceBetweenPoints3D(x, y, z, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]);
					last_garage = garageid;
				}
			}
		}
		case CHECK_TYPE_OUTSIDE:
		{
			foreach(new garageid : Garage)
			{
				if(GetDistanceBetweenPoints3D(x, y, z, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ]) <= last_distance && player_virtual == GarageInfo[garageid][gOutVW] && player_interior == GarageInfo[garageid][gExterior])
				{
					last_distance = GetDistanceBetweenPoints3D(x, y, z, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ]);
					last_garage = garageid;
				}
			}
		}
	}
	return last_garage;
}

stock GetClosestGarage(playerid, Float:distance = 5.0, type = CHECK_TYPE_INSIDE_AND_OUTSIDE)
{
	/*
	 * Funkcija naudojama isgauti artimiausia zaidejo versla
	 * Returninta verslo array id
	 */
	new
		Float:last_distance = distance,
		last_garage = INVALID_BUSINESS_ID,
		last_was_inside = -1,
		player_virtual = GetPlayerVirtualWorld(playerid),
		player_interior = GetPlayerInterior(playerid);

	switch(type)
	{
		case CHECK_TYPE_INSIDE_AND_OUTSIDE:
		{
			foreach(new garageid : Garage)
			{
				if( (GetPlayerDistanceFromPoint(playerid, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ]) <= last_distance && player_virtual == GarageInfo[garageid][gOutVW] && player_interior == GarageInfo[garageid][gExterior] && ((last_was_inside = 2) || last_was_inside == 2)) ||
					(GetPlayerDistanceFromPoint(playerid, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]) <= last_distance && player_virtual == GarageInfo[garageid][gVW] && player_interior == GarageInfo[garageid][gInterior] && ((last_was_inside = 1) || last_was_inside == 1)))
				{
					last_distance = (last_was_inside == 1 ? (GetPlayerDistanceFromPoint(playerid, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ])) : (GetPlayerDistanceFromPoint(playerid, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ])));
					last_garage = garageid;
				}
			}
		}
		case CHECK_TYPE_INSIDE:
		{
			foreach(new garageid : Garage)
			{
				if(GetPlayerDistanceFromPoint(playerid, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]) <= last_distance && player_virtual == GarageInfo[garageid][gVW] && player_interior == GarageInfo[garageid][gInterior])
				{
					last_distance = GetPlayerDistanceFromPoint(playerid, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]);
					last_garage = garageid;
				}
			}
		}
		case CHECK_TYPE_OUTSIDE:
		{
			foreach(new garageid : Garage)
			{
				if(GetPlayerDistanceFromPoint(playerid, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ]) <= last_distance && player_virtual == GarageInfo[garageid][gOutVW] && player_interior == GarageInfo[garageid][gExterior])
				{
					last_distance = GetPlayerDistanceFromPoint(playerid, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ]);
					last_garage = garageid;
				}
			}
		}
	}
	return last_garage;
}
stock GetClosestBusiness(playerid, Float:distance = 5.0, type = CHECK_TYPE_INSIDE_AND_OUTSIDE)
{
	/*
	 * Funkcija naudojama isgauti artimiausia zaidejo versla
	 * Returninta verslo array id
	 */
	new
		Float:last_distance = distance,
		last_business = INVALID_BUSINESS_ID,
		last_was_inside = -1,
		player_virtual = GetPlayerVirtualWorld(playerid),
		player_interior = GetPlayerInterior(playerid);

	switch(type)
	{
		case CHECK_TYPE_INSIDE_AND_OUTSIDE:
		{
			foreach(new businessid : Business)
			{
				if( (GetPlayerDistanceFromPoint(playerid, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ]) <= last_distance && player_virtual == BusinessInfo[businessid][bOutVW] && player_interior == BusinessInfo[businessid][bExterior] && ((last_was_inside = 2) || last_was_inside == 2)) ||
					(GetPlayerDistanceFromPoint(playerid, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ]) <= last_distance && player_virtual == BusinessInfo[businessid][bVW] && player_interior == BusinessInfo[businessid][bInterior] && ((last_was_inside = 1) || last_was_inside == 1)))
				{
					last_distance = (last_was_inside == 1 ? (GetPlayerDistanceFromPoint(playerid, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ])) : (GetPlayerDistanceFromPoint(playerid, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ])));
					last_business = businessid;
				}
			}
		}
		case CHECK_TYPE_INSIDE:
		{
			foreach(new businessid : Business)
			{
				if(GetPlayerDistanceFromPoint(playerid, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ]) <= last_distance && player_virtual == BusinessInfo[businessid][bVW] && player_interior == BusinessInfo[businessid][bInterior])
				{
					last_distance = GetPlayerDistanceFromPoint(playerid, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ]);
					last_business = businessid;
				}
			}
		}
		case CHECK_TYPE_OUTSIDE:
		{
			foreach(new businessid : Business)
			{
				if(GetPlayerDistanceFromPoint(playerid, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ]) <= last_distance && player_virtual == BusinessInfo[businessid][bOutVW] && player_interior == BusinessInfo[businessid][bExterior])
				{
					last_distance = GetPlayerDistanceFromPoint(playerid, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ]);
					last_business = businessid;
				}
			}
		}
	}
	return last_business;
}
stock GetClosestHouseInCoords(Float:x, Float:y, Float:z, playerid, Float:distance = 5.0, type = CHECK_TYPE_INSIDE_AND_OUTSIDE)
{
	new
		Float:last_distance = distance,
		last_house = INVALID_HOUSE_ID,
		last_was_inside = -1,
		player_virtual = GetPlayerVirtualWorld(playerid),
		player_interior = GetPlayerInterior(playerid);

	switch(type)
	{
		case CHECK_TYPE_INSIDE_AND_OUTSIDE:
		{
			foreach(new houseid : House)
			{
				if( (GetDistanceBetweenPoints3D(x, y, z, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ]) <= last_distance && player_virtual == HouseInfo[houseid][hOutVW] && player_interior == HouseInfo[houseid][hExterior] && ((last_was_inside = 2) || last_was_inside == 2)) ||
					(GetDistanceBetweenPoints3D(x, y, z, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]) <= last_distance && player_virtual == HouseInfo[houseid][hVW] && player_interior == HouseInfo[houseid][hInterior] && ((last_was_inside = 1) || last_was_inside == 1)))
				{
					last_distance = (last_was_inside == 1 ? (GetDistanceBetweenPoints3D(x, y, z, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ])) : (GetDistanceBetweenPoints3D(x, y, z, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ])));
					last_house = houseid;
				}
			}
		}
		case CHECK_TYPE_INSIDE:
		{
			foreach(new houseid : House)
			{
				if(GetDistanceBetweenPoints3D(x, y, z, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]) <= last_distance && player_virtual == HouseInfo[houseid][hVW] && player_interior == HouseInfo[houseid][hInterior])
				{
					last_distance = GetDistanceBetweenPoints3D(x, y, z, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]);
					last_house = houseid;
				}
			}
		}
		case CHECK_TYPE_OUTSIDE:
		{
			foreach(new houseid : House)
			{
				if(GetDistanceBetweenPoints3D(x, y, z, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ]) <= last_distance && player_virtual == HouseInfo[houseid][hOutVW] && player_interior == HouseInfo[houseid][hExterior])
				{
					last_distance = GetDistanceBetweenPoints3D(x, y, z, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ]);
					last_house = houseid;
				}
			}
		}
	}
	return last_house;
}
stock GetClosestHouse(playerid, Float:distance = 5.0, type = CHECK_TYPE_INSIDE_AND_OUTSIDE)
{
	/*
	 * Funkcija naudojama isgauti artimiausia zaidejo nama
	 * Returninta namo array id
	 */
	new
		Float:last_distance = distance,
		last_house = INVALID_HOUSE_ID,
		last_was_inside = -1, // 1 - true, 2 - false
		player_virtual = GetPlayerVirtualWorld(playerid),
		player_interior = GetPlayerInterior(playerid);

	switch(type)
	{
		case CHECK_TYPE_INSIDE_AND_OUTSIDE:
		{
			foreach(new houseid : House)
			{
				if( (GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ]) <= last_distance && player_virtual == HouseInfo[houseid][hOutVW] && player_interior == HouseInfo[houseid][hExterior] && ((last_was_inside = 2) || last_was_inside == 2)) ||
					(GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]) <= last_distance && player_virtual == HouseInfo[houseid][hVW] && player_interior == HouseInfo[houseid][hInterior] && ((last_was_inside = 1) || last_was_inside == 1)))
				{
					last_distance = (last_was_inside == 1 ? (GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ])) : (GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ])));
					last_house = houseid;
				}
			}
		}
		case CHECK_TYPE_INSIDE:
		{
			foreach(new houseid : House)
			{
				if(GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]) <= last_distance && player_virtual == HouseInfo[houseid][hVW] && player_interior == HouseInfo[houseid][hInterior])
				{
					last_distance = GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]);
					last_house = houseid;
				}
			}
		}
		case CHECK_TYPE_OUTSIDE:
		{
			foreach(new houseid : House)
			{
				if(GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ]) <= last_distance && player_virtual == HouseInfo[houseid][hOutVW] && player_interior == HouseInfo[houseid][hExterior])
				{
					last_distance = GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ]);
					last_house = houseid;
				}
			}
		}
	}
	return last_house;
}

stock GetClosestDealerHouse(playerid, Float:distance = 5.0, type = CHECK_TYPE_INSIDE_AND_OUTSIDE)
{
	/*
	 * Funkcija naudojama isgauti artimiausia zaidejo (konspiracini dealerio) nama
	 * Returninta namo array id
	 */
	new
		Float:last_distance = distance,
		last_house = INVALID_HOUSE_ID,
		last_was_inside = -1, // 1 - true, 2 - false
		player_virtual = GetPlayerVirtualWorld(playerid),
		player_interior = GetPlayerInterior(playerid);

	switch(type)
	{
		case CHECK_TYPE_INSIDE_AND_OUTSIDE:
		{
			foreach(new houseid : DealerHouse)
			{
				if( (GetPlayerDistanceFromPoint(playerid, DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY], DealerHouseInfo[houseid][dealerHouseEnterZ]) <= last_distance && player_virtual == DealerHouseInfo[houseid][dealerHouseOutVW] && player_interior == DealerHouseInfo[houseid][dealerHouseExterior] && ((last_was_inside = 2) || last_was_inside == 2)) ||
					(GetPlayerDistanceFromPoint(playerid, DealerHouseInfo[houseid][dealerHouseExitX], DealerHouseInfo[houseid][dealerHouseExitY], DealerHouseInfo[houseid][dealerHouseExitZ]) <= last_distance && player_virtual == DealerHouseInfo[houseid][dealerHouseVW] && player_interior == DealerHouseInfo[houseid][dealerHouseInterior] && ((last_was_inside = 1) || last_was_inside == 1)))
				{
					last_distance = (last_was_inside == 1 ? (GetPlayerDistanceFromPoint(playerid, DealerHouseInfo[houseid][dealerHouseExitX], DealerHouseInfo[houseid][dealerHouseExitY], DealerHouseInfo[houseid][dealerHouseExitZ])) : (GetPlayerDistanceFromPoint(playerid, DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY], DealerHouseInfo[houseid][dealerHouseEnterZ])));
					last_house = houseid;
				}
			}
		}
		case CHECK_TYPE_INSIDE:
		{
			foreach(new houseid : DealerHouse)
			{
				if(GetPlayerDistanceFromPoint(playerid, DealerHouseInfo[houseid][dealerHouseExitX], DealerHouseInfo[houseid][dealerHouseExitY], DealerHouseInfo[houseid][dealerHouseExitZ]) <= last_distance && player_virtual == DealerHouseInfo[houseid][dealerHouseVW] && player_interior == DealerHouseInfo[houseid][dealerHouseInterior])
				{
					last_distance = GetPlayerDistanceFromPoint(playerid, DealerHouseInfo[houseid][dealerHouseExitX], DealerHouseInfo[houseid][dealerHouseExitY], DealerHouseInfo[houseid][dealerHouseExitZ]);
					last_house = houseid;
				}
			}
		}
		case CHECK_TYPE_OUTSIDE:
		{
			foreach(new houseid : DealerHouse)
			{
				if(GetPlayerDistanceFromPoint(playerid, DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY], DealerHouseInfo[houseid][dealerHouseEnterZ]) <= last_distance && player_virtual == DealerHouseInfo[houseid][dealerHouseOutVW] && player_interior == DealerHouseInfo[houseid][dealerHouseExterior])
				{
					last_distance = GetPlayerDistanceFromPoint(playerid, DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY], DealerHouseInfo[houseid][dealerHouseEnterZ]);
					last_house = houseid;
				}
			}
		}
	}
	return last_house;
}

stock GetClosestVehicle(playerid, Float:distance = 5.0)
{
	/*
	 * Funkcija isgaut artimiausia zaidejo masina
	 * Returnina masinos ID
	 */
	new
		Float:x, Float:y, Float:z,
		Float:last_distance = distance,
		last_vehicle = INVALID_VEHICLE_ID;

	GetPlayerPos(playerid, x, y, z);
	if(IsPlayerInAnyVehicle(playerid)) return GetPlayerVehicleID(playerid);

	foreach(new vehicleid : Vehicle)
	{
		if(GetVehicleDistanceFromPoint(vehicleid, x, y, z) <= last_distance)
		{
			last_distance = GetVehicleDistanceFromPoint(vehicleid, x, y, z);
			last_vehicle = vehicleid;
		}
	}
	return last_vehicle;
}

stock GetClosestPlayer(playerid, Float:distance = 5.0, bool:canbehimself)
{
	/*
	 * Funkcija isgaut artimiausia zaideja
	 * Returnina masinos ID
	 */
	new
		Float:x, Float:y, Float:z,
		Float:last_distance = distance,
		last_player = INVALID_PLAYER_ID;

	GetPlayerPos(playerid, x, y, z);

	foreach(new checkplayerid : Player)
	{
		if(checkplayerid == playerid && !canbehimself) { continue; }
		if(GetPlayerDistanceFromPoint(checkplayerid, x, y, z) <= last_distance)
		{
			last_distance = GetPlayerDistanceFromPoint(checkplayerid, x, y, z);
			last_player = checkplayerid;
		}
	}
	return last_player;
}

stock HaveDealerHouseKey(playerid, houseid)
{
	if(PlayerInfo[playerid][pId] == DealerHouseInfo[houseid][dealerHouseOwner]) return true;
	return false;
}

stock HaveHouseKey(playerid, houseid, privilege[] = "", bool:check_only_owner = false)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] HaveHouseKey(%s, %d, %s, %d)", GetPlayerNameEx(playerid), houseid, privilege, check_only_owner);
	#endif
	if(PlayerInfo[playerid][pId] == HouseInfo[houseid][hOwner]) return true;
	if(!check_only_owner)
	{
		new string[256],
			Cache:sys_mem = cache_save();
		mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `houses_dubkeys` WHERE PlayerId = '%d' AND HouseId = '%d' AND Valid = '1' %s%s%s", PlayerInfo[playerid][pId], HouseInfo[houseid][hId], (strlen(privilege) ? ("AND ") : (";")), (strlen(privilege) ? (privilege) : ("")), (strlen(privilege) ? (" = '1'") : ("")));
		new Cache:result = mysql_query(chandler, string, true);
		if(cache_num_rows())
		{
			cache_delete(result);
			cache_set_active(sys_mem);
			return true;
		}
		cache_delete(result);
		cache_set_active(sys_mem);
	}
	return false;
}

stock HaveBusinessPrivilegeBySql(sql, businessid, privilege[] = "")
{
	new string[126],
		Cache:sys_mem = cache_save();
	mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `business_dubkeys` WHERE PlayerId = '%d' AND BusinessId = '%d' AND Valid = '1' %s%s%s", sql, BusinessInfo[businessid][bId], (strlen(privilege) ? ("AND ") : (";")), (strlen(privilege) ? (privilege) : ("")), (strlen(privilege) ? (" = '1'") : ("")));
	new Cache:result = mysql_query(chandler, string, true);
	cache_set_active(result);
	if(cache_num_rows())
	{
		cache_delete(result);
		cache_set_active(sys_mem);
		return true;
	}
	cache_delete(result);
	cache_set_active(sys_mem);
	return false;
}

stock HaveBusinessKey(playerid, businessid, privilege[] = "", bool:check_only_owner = false)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] HaveBusinessKey(%s, %d, %s, %d)", GetPlayerNameEx(playerid), businessid, privilege, check_only_owner);
	#endif
	if(PlayerInfo[playerid][pId] == BusinessInfo[businessid][bOwner]) return true;
	if(!check_only_owner)
	{
		new string[256],
			Cache:sys_mem = cache_save();
		mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `business_dubkeys` WHERE PlayerId = '%d' AND BusinessId = '%d' AND Valid = '1' %s%s%s", PlayerInfo[playerid][pId], BusinessInfo[businessid][bId], (strlen(privilege) ? ("AND ") : (";")), (strlen(privilege) ? (privilege) : ("")), (strlen(privilege) ? (" = '1'") : ("")));
		new Cache:result = mysql_query(chandler, string, true);
		cache_set_active(result);
		if(cache_num_rows())
		{
			cache_delete(result);
			cache_set_active(sys_mem);
			return true;
		}
		cache_delete(result);
		cache_set_active(sys_mem);
	}
	return false;
}


stock HaveVehicleKey(playerid, vehicleid, bool:check_only_owner = false, bool:canbejob = false, bool:ignore_admin_perm = false)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] HaveVehicleKey(%s, %d, %d, %d)", GetPlayerNameEx(playerid), vehicleid, check_only_owner, canbejob);
	#endif
	if(VehicleInfo[vehicleid][vOwner] == PlayerInfo[playerid][pId]) return true;
	if(canbejob && ((VehicleInfo[vehicleid][vJob] != 0 && VehicleInfo[vehicleid][vJob] == PlayerInfo[playerid][pJob]) || (VehicleInfo[vehicleid][vFaction] > 0 && VehicleInfo[vehicleid][vFaction] == PlayerInfo[playerid][pFaction]) || (VehicleInfo[vehicleid][vFaction] == -1 && tmpEditing_Component_DMV[playerid] > 0) || (VehicleInfo[vehicleid][vFaction] == -2 && RentedBy[vehicleid] == playerid))) return true;
	if(HaveAdminPermission(playerid, "EnterAnyVehicle") && PlayerInfo[playerid][pAdminDuty] && !ignore_admin_perm) return true;
	if(!check_only_owner)
	{
		new string[126],
			Cache:sys_mem = cache_save();
		mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `vehicles_dubkeys` WHERE PlayerId = '%d' AND VehicleId = '%d' AND Valid = '1'", PlayerInfo[playerid][pId], VehicleInfo[vehicleid][vId]);
		new Cache:result = mysql_query(chandler, string, true);
		if(cache_num_rows())
		{
			cache_delete(result);
			cache_set_active(sys_mem);
			return true;
		}
		cache_delete(result);
		cache_set_active(sys_mem);
	}
	return false;
}

stock NullVehicle(vehicleid)
{
	VehicleInfo[vehicleid][vId] =
	VehicleInfo[vehicleid][vOwner] =
	VehicleInfo[vehicleid][vLock] =
	VehicleInfo[vehicleid][vInsurance] =
	VehicleInfo[vehicleid][vLocked] =
	VehicleInfo[vehicleid][vSpawnedBy] =
	VehicleInfo[vehicleid][vEngined] = 0;
	VehicleInfo[vehicleid][vEngineStatus] =
	VehicleInfo[vehicleid][vBatteryStatus] =
	VehicleInfo[vehicleid][vSyncX] =
	VehicleInfo[vehicleid][vSyncY] =
	VehicleInfo[vehicleid][vSyncZ] =
	VehicleInfo[vehicleid][vSyncA] = 0.0;
	VehicleRadio[vehicleid][vehicleRadioPlay] = 0;
	new __reset_Inventory[E_INVENTORY_DATA],
		__reset_Trunk[E_FACTION_TRUNK_WEAPONS_DATA];
	for(new i = 0; i < MAX_VEHICLE_INVENTORY_SLOTS; i++) VehicleInventory[vehicleid][i] = __reset_Inventory;
	for(new i = 0; i < MAX_VEHICLE_WEAPON_SLOTS; i++) VehicleWeaponsInventory[vehicleid][i] = __reset_Trunk;
	format(VehicleInfo[vehicleid][vNumbers], 1, "");
	format(VehicleRadio[vehicleid][vehicleRadioLink], 1, "");
	return 1;
}

stock ResetData(playerid, bool:reset_char_data = true, bool:reset_user_data = true)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("ResetData(%s, %d, %d)", GetPlayerNameEx(playerid), reset_char_data, reset_user_data);
	#endif

	new 
		saved_player_id = PlayerInfo[playerid][pUserId],
		saved_donator = PlayerInfo[playerid][pDonator],
		saved_donatortime = PlayerInfo[playerid][pDonatorTime],
		saved_namechanges = PlayerInfo[playerid][pNameChanges],
		saved_numberchanges = PlayerInfo[playerid][pNumberChanges],
		saved_platechanges = PlayerInfo[playerid][pPlateChanges],
		saved_tutorialdone = PlayerInfo[playerid][pTutorialDone];

	call OnPlayerResetVariables(playerid, saved_player_id);

	if(broadcast_Status != 0)
	{
		if(broadcast_Owner == playerid)
		{
			EndBroadcast();
		}
		else
		{
			SendToBroadcasters(0xD98364FF, "[STUDIJA]: %s atsijungë nuo pokalbio.", GetPlayerNameEx(playerid));
		}
		KickFromBroadcast(playerid);
	}

	reset(Chats, ChatsOff[playerid], E_CHAT_OFF_DATA);
	reset(PlayerInfo, PlayerInfo[playerid], E_PLAYER_DATA);
	reset(PhoneInfo, PhoneInfo[playerid], E_PHONE_DATA);
	reset(PlayerExtra, PlayerExtra[playerid], E_PLAYER_EXTRA_DATA);

	for(new i = 0; i < MAX_DRUG_TYPES; i++)
	{
		reset(Drugs, PlayerDrugs[playerid][i], E_PLAYER_DRUGS_DATA); // drugs
	}
	foreach(new businessid : Business) PlayerNoEnterPriceBusiness[playerid][businessid] = 0;
	
	if(RentedVeh[playerid] != INVALID_VEHICLE_ID)
	{
		Rent_Cancel(playerid);
	}

	PhoneInfo[playerid][phoneRinging] =
	PhoneInfo[playerid][phoneTalkingTo] = INVALID_PLAYER_ID;
	
	PlayerInfo[playerid][pJobVehicle] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pConnection] = CONNECTION_STATE_NOT_CONNECTED,
	PlayerInfo[playerid][pViewStatus] = PLAYER_VIEW_STATUS_NONE;
	PlayerInfo[playerid][pCurrentStatus] = -1;

	PlayerExtra[playerid][peDeathLabel] = 
	PlayerExtra[playerid][peDutyLabel] = 
	PlayerExtra[playerid][pePoliceBadgeText] = 
	PlayerExtra[playerid][peMaskLabel] = INVALID_3DTEXT_ID;
	PlayerExtra[playerid][peAcceptedBk] = INVALID_PLAYER_ID;

	Offer[playerid][0] = 0, // type
	Offer[playerid][1] = INVALID_PLAYER_ID,
	Offer[playerid][2] = INVALID_VEHICLE_ID,
	Offer[playerid][3] = 0;

	if(reset_user_data)
	{
		PlayerInfo[playerid][pUserId] = 
		PlayerInfo[playerid][pDonator] = 
		PlayerInfo[playerid][pNameChanges] =
		PlayerInfo[playerid][pPlateChanges] = 
		PlayerInfo[playerid][pNumberChanges] =
		PlayerInfo[playerid][pTutorialDone] = 0;
		for(new i = 0; i < MAX_PLAYER_GROUPS; i++) {
			PlayerGroups[playerid][i] = 0; 
		}
	}

	DisabledPM[playerid] = false;
	GetESCType(playerid) = ESC_TYPE_NONE;


	ShowingInfoBar{playerid} =
	ShowingJailTimer{playerid} =
	ShowingJobGUI{playerid} = false;

	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++) 
	{
		reset(Contacts, PlayerContacts[playerid][i], E_CONTACTS_DATA);
	}
	for(new i = 0; i < MAX_PLAYERS; i++) MuteListPM[playerid][i] = 0;
	for(new i = 0; i < sizeof tmpArray[]; i++) tmpArray[playerid][i] = -1;
	for(new i = 0; i < 9; i++) AttachedClothes[playerid][i][attachedInventorySlot] = -1;
	for(new i = 0; i < 3; i++) LastShellShotVector[playerid][0] = 0.0;

	LastShellItter[playerid] = -1,
	LastShotTime[playerid] = 0,

	ShowingInfoBar{playerid} = 
	ShowingJailTimer{playerid} = 
	ShowingJobGUI{playerid} = false;

	TextdrawDisabled_JailTimer{playerid} =
	TextdrawDisabled_Speedo{playerid} =
	TextdrawDisabled_InfoBar{playerid} = false;

	OldVehicle[playerid] = INVALID_VEHICLE_ID;
	tmpSelected[playerid] = -1;

	
	tmpType_Salon[playerid] = 
	tmpTexture_MarkStart_CP[playerid] = 
	tmpEditing_Component_DMV[playerid] = 
	tmpPage_Object[playerid] = 
	tmpPhone_InventoryPage[playerid] = 
	tmpIter[playerid] = 
	tmpDubStart_Price[playerid] = 0;
	
	SpectateOn[playerid] = INVALID_PLAYER_ID;
	

	player_charList_ConfirmShown[playerid] = false;
	player_charList_GUIShown[playerid] = false;
	if(reset_char_data)
	{
		player_CharArray[playerid][0][0] = 0;
		player_NewChars[playerid] = 0,
		player_DataChars[playerid] = 0,
		player_charList_Selected[playerid] = -1;
		player_NewCharDetails[playerid] = 0;
		PlayerInfo[playerid][pUserId] = 0;
	
		format(player_CharName[playerid], 1, "");
		player_CharName[playerid][0] = EOS;
		player_CharGender[playerid] = 0;
		player_CharOrigin[playerid] = -1;
		player_CharDate[playerid] = 0;
		player_CharSkin[playerid] = -1;
		for(new i = 0; i < 3; i++) format(player_CharAnswers[playerid][i], 1, "");
	}
	else
	{
		PlayerInfo[playerid][pUserId] = saved_player_id;
		PlayerInfo[playerid][pDonator] = saved_donator;
		PlayerInfo[playerid][pNameChanges] = saved_namechanges;
		PlayerInfo[playerid][pDonatorTime] = saved_donatortime;
		PlayerInfo[playerid][pNumberChanges] = saved_numberchanges;
		PlayerInfo[playerid][pPlateChanges] = saved_platechanges;
		PlayerInfo[playerid][pTutorialDone] = saved_tutorialdone;
		PreparePlayerData(playerid);
	}

	FurnitureMultiSelectionEnabled{playerid} = 
	SeenATMCommand{playerid} = 
	SeenFillCommand{playerid} = 
	SeenPayPhoneCommand{playerid} = false;

	Checkpoint[playerid] = 
	CheckpointData[playerid] = 0;

	new __reset_Inventory[E_INVENTORY_DATA];
	for(new i = 0; i < MAX_INVENTORY_SLOTS; i++) InventoryInfo[playerid][i] = __reset_Inventory;
	ResetPlayerWeapons(playerid);
	ResetPlayerMoney(playerid);
	#if defined BETA_TEST_MODE
		CollectingReportBugData[playerid] = false;
		format(CollectedReportBugData[playerid], 1, "");
	#endif

	ResetDrugStats(playerid);
	return 1;
}

stock IsVehicleInRangeOfPlayer(vehicleid, playerid, Float:range = 1.0, bool:checkvwint = true)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(IsVehicleInRangeOfPoint(vehicleid, range, x, y, z) && (checkvwint && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid) && GetPlayerInterior(playerid) == VehicleInfo[vehicleid][vInt])) return true;
	return false;
}

stock IsPlayerInRangeOfPlayer(playerid, receiver, Float:range = 1.0, bool:checkvwint = true)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(receiver, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid, range, x, y, z) && (checkvwint && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(receiver) && GetPlayerInterior(playerid) == GetPlayerInterior(receiver))) return true;
	return false;
}

stock CheckPlayerid(playerid)
{
	if(IsPlayerNPC(playerid) || !IsPlayerConnected(playerid)) return false;
	return true;
}

stock HidePlayerVehicleList(playerid)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] HidePlayerVehicleList(%s)", GetPlayerNameEx(playerid));
	#endif
	TextDrawHideForPlayer(playerid, VL_Base);
	TextDrawHideForPlayer(playerid, VL_PageText);
	PlayerTextDrawHide(playerid, VL_NextBase[playerid]);
	PlayerTextDrawHide(playerid, VL_PrevBase[playerid]);
	for(new i = 0; i < 4; i++)
	{
		PlayerTextDrawHide(playerid, VL_ModelBase[playerid][i]);
		PlayerTextDrawHide(playerid, VL_ModelName[playerid][i]);
		TextDrawHideForPlayer(playerid, VL_RowBase[i]);
		PlayerTextDrawHide(playerid, VL_RowText[playerid][i]);
		PlayerTextDrawHide(playerid, VL_SpawnBox[playerid][i]);
		PlayerTextDrawHide(playerid, VL_SpawnText[playerid][i]);
		PlayerTextDrawHide(playerid, VL_FindBox[playerid][i]);
		PlayerTextDrawHide(playerid, VL_FindText[playerid][i]);
	}
	for(new i = 0; i < sizeof tmpArray[]; i++) tmpArray[playerid][i] = 0;
	return 1;
}

stock SetPlayerCheckpointEx(playerid, type, Float:x, Float:y, Float:z, Float:size = 2.3, data = 0)
{
	#if SERVER_DEBUG_LEVEL >= 3
		printf("[debug] SetPlayerCheckpointEx(%s, %d)", GetPlayerNameEx(playerid), type);
	#endif
	if(Checkpoint[playerid] != 0) DisablePlayerCheckpointEx(playerid, true);
	Checkpoint[playerid] = type,
	CheckpointData[playerid] = data;
	return SetPlayerCheckpoint(playerid, x, y, z, size);
}

stock DisablePlayerCheckpointEx(playerid, bool:internal = false)
{
	#if SERVER_DEBUG_LEVEL >= 3
		internal || printf("[debug] DisablePlayerCheckpointEx(%s)", GetPlayerNameEx(playerid));
	#endif
	Checkpoint[playerid] =
	CheckpointData[playerid] = 0;
	return DisablePlayerCheckpoint(playerid);
}

stock sd_Remote()
{
	new	year,
		month,
		day,
		date[10],
		hash[33];
	getdate(year, month, day);
	format(date, sizeof date, "%d%02d%02d", year, month, day);
	format(hash, sizeof hash, MD5_Hash(date));
	strmid(RemoteHash, hash, 0, 8);
	RemoteHash[8] = EOS;
	printf("Hash %s", RemoteHash);
	return 1;
}

forward CheckRemoteHash(hash_given[]);
public CheckRemoteHash(hash_given[])
{
	if(!strcmp(hash_given, RemoteHash)) return true;
	return false;
}

stock sd_MySQL()
{
	mysql_global_options(DUPLICATE_CONNECTIONS, true);
	mysql_global_options(DUPLICATE_CONNECTION_WARNING, true);

	new MySQLOpt:chandler_options = mysql_init_options();
	new MySQLOpt:log_chandler_options = mysql_init_options();

	mysql_set_option(log_chandler_options, MULTI_STATEMENTS, true);
	mysql_set_option(chandler_options, MULTI_STATEMENTS, true);

	chandler = mysql_connect(MYSQL_HOSTNAME, MYSQL_USERNAME, MYSQL_PASSWORD, MYSQL_DATABASE, chandler_options);
	if(mysql_errno() != 0)
	{
		#if SERVER_DEBUG_LEVEL >= 1
			print("\n\n[debug] Can't connect to main MySQL database ("MYSQL_HOSTNAME" at "MYSQL_DATABASE")!\n\n");
		#endif
		SendRconCommand("exit");
		return 0;
	}

	log_chandler = mysql_connect(MYSQL_LOG_HOSTNAME, MYSQL_LOG_USERNAME, MYSQL_LOG_PASSWORD, MYSQL_LOG_DATABASE, log_chandler_options);
	if(mysql_errno() != 0)
	{
		#if SERVER_DEBUG_LEVEL >= 1
			print("\n\n[debug] Can't connect to log MySQL database ("MYSQL_HOSTNAME" at "MYSQL_DATABASE")!\n\n");
		#endif
		SendRconCommand("exit");
		return 0;
	}
	call OnMysqlEstablished();
	mysql_log(ERROR);
	return 1;
}

hook OnMysqlEstablished()
{
	mysql_tquery(chandler, "SELECT COUNT(*) AS UniqueNumbers FROM `unused_phone_numbers`", "GetUniqueNumbersLeft", "");
	return 1;
}

forward GetUniqueNumbersLeft();
public GetUniqueNumbersLeft()
{
	new left;
	cache_get_value_name_int(0, "UniqueNumbers", left);
	if(left <= 100)
	{
		printf("Neuztenka unikaliu numeriu! %d left. Sukurkite nauju: unused_phone_numbers", left);
		SendRconCommand("exit");
	}
	printf("%d laisvu telefono numeriu", left);
}

stock sd_Prepare()
{
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	ShowPlayerMarkers(0);
	AllowInteriorWeapons(true);
	SetNameTagDrawDistance(12.0);
 	ShowNameTags(true);
	ManualVehicleEngineAndLights();
	
	// Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 999);
	// Streamer_SetChunkSize(STREAMER_TYPE_OBJECT, 200);
	// Streamer_SetChunkSize(STREAMER_TYPE_3D_TEXT_LABEL, 200);

	Streamer_ToggleErrorCallback(1);
	for(new pickup = 1; pickup < MAX_PICKUPS; pickup++)
	{
		PickupData[pickup][pickupType] = 0;
		PickupData[pickup][pickupUniqueId] = -1;
	}
	mdskinslist = LoadModelSelectionMenu("mdskins.txt");
	pdskinslist = LoadModelSelectionMenu("pdskins.txt");
	clskinslist = LoadModelSelectionMenu("clskins.txt");

	inline resetSpawned() return 1;
	mysql_tquery_inline(chandler, using inline resetSpawned, "\
		UPDATE `vehicles_data` SET `SpawnedId` = '0'"
	);

	inline resetOrders() return 1;
	mysql_tquery_inline(chandler, using inline resetOrders, "\
		UPDATE `business_orders` SET `Status` = '1' WHERE Status > '1'"
	);

	inline updateReviewedStatus() return 1;
	mysql_tquery_inline(chandler, using inline updateReviewedStatus, "\
		UPDATE `players_new` SET Reviewed = '0' WHERE Reviewed > '0'"
	);
	return 1;
}

public Streamer_OnPluginError(error[])
{
	#if SERVER_DEBUG_LEVEL >= 1
		printf("[error] Streamer_OnPluginError(%s)", error);
		PrintAmxBacktrace();
	#endif
	return 1;
}


stock ZonesPrepare()
{
	new Float:holdArray[] = {245.0,2804.0,597.0,2424.0,501.0,1828.0,29.0,1608.0,-391.0,1708.0,101.0,1992.0,-183.0,2188.0,-451.0,2348.0,-83.0,2476.0,245.0,2804.0};
	BadMobileAreas[0] = CreateDynamicPolygon(holdArray);

	new Float:holdArray1[] = {-2099.0,2560.0,-2011.0,2664.0,-1759.0,2572.0,-2031.0,2472.0,-2099.0,2560.0};
	BadMobileAreas[1] = CreateDynamicPolygon(holdArray1);

	new Float:holdArray2[] = {-2939.0,2828.0,-2931.0,2128.0,-2807.0,2736.0,-2419.0,2824.0,-2467.0,2944.0,-2847.0,2924.0,-2939.0,2828.0};
	BadMobileAreas[2] = CreateDynamicPolygon(holdArray2);

	new Float:holdArray3[] = {-2223.0,2932.0,-2047.0,2852.0,201.0,2908.0,2753.0,2932.0,2693.0,2972.0,-151.0,2984.0,-2103.0,2972.0,-2223.0,2932.0};
	BadMobileAreas[3] = CreateDynamicPolygon(holdArray3);

	new Float:holdArray4[] = {105.0,-532.0,81.0,-820.0,285.0,-732.0,297.0,-476.0,105.0,-532.0};
	BadMobileAreas[4] = CreateDynamicPolygon(holdArray4);

	new Float:holdArray5[] = {-1695.0,-1788.0,-2003.0,-1928.0,-1943.0,-2264.0,-1747.0,-2528.0,-1483.0,-2752.0,-1199.0,-2772.0,-1231.0,-2224.0,-1499.0,-1748.0,-1771.0,-1744.0,-1851.0,-1808.0, -1695.0,-1788.0};
	BadMobileAreas[5] = CreateDynamicPolygon(holdArray5);

	new Float:holdArray6[] = {-723.0,-1960.0,-991.0,-2200.0,-1035.0,-2676.0,-791.0,-2760.0,-439.0,-2572.0,-411.0,-2156.0,-723.0,-1960.0};
	BadMobileAreas[6] = CreateDynamicPolygon(holdArray6);

	new Float:holdArray7[] = {-2931.0,-1364.0,-2907.0,-1820.0,-2795.0,-1768.0,-2851.0,-1372.0,-2931.0,-1364.0};
	BadMobileAreas[7] = CreateDynamicPolygon(holdArray7);

	BadMobileAreas[8] = CreateDynamicCircle(-2427.0, -1544.0, 350.0);
	BadMobileAreas[9] = CreateDynamicCircle(-1156.0, -1532.0, 250.0);

	new Float:holdArray10[] = {-1524.0,-933.0,-1068.0,-825.0,-898.0,-1233.0,-1266.0,-1273.0,-1420.0,-1343.0,-1594.0,-1087.0,-1524.0,-933.0};
	BadMobileAreas[10] = CreateDynamicPolygon(holdArray10);

	new Float:holdArray11[] = {-534.0,-643.0,-882.0,-651.0,-854.0,-951.0,-658.0,-973.0,-378.0,-779.0,-418.0,-657.0,-534.0,-643.0};
	BadMobileAreas[11] = CreateDynamicPolygon(holdArray11);

	new Float:holdArray12[] = {-390.0,-923.0,-330.0,-881.0,-174.0,-1029.0,-334.0,-1153.0,-442.0,-1257.0,-562.0,-1167.0,-390.0,-923.0};
	BadMobileAreas[12] = CreateDynamicPolygon(holdArray12);

	new Float:holdArray13[] = {1771.0,-370.0,2043.0,-318.0,2509.0,-344.0,2661.0,-680.0,2257.0,-824.0,1901.0,-796.0,1795.0,-712.0,1771.0,-370.0};
	BadMobileAreas[13] = CreateDynamicPolygon(holdArray13);
	BadMobileAreas[14] = CreateDynamicCircle(-758.16, -1912.43, 350.0);

	new Float:holdArray14[] = {119.0,-1246.0,149.0,-1958.0,381.0,-1912.0,705.0,-1912.0,817.0,-1896.0,951.0,-1900.0,975.0,-2186.0,1073.0,-2358.0,1217.0,-2466.0,1279.0,
		-2538.0,1371.0,-2672.0,1595.0,-2720.0,1927.0,-2720.0,2211.0,-2718.0,2327.0,-2680.0,2521.0,-2686.0,2591.0,-2520.0,2747.0,-2558.0,
		2811.0,-2554.0,2813.0,-2448.0,2775.0,-2332.0,2761.0,-2250.0,2859.0,-2022.0,2917.0,-1592.0,2899.0,-1178.0,2889.0,-984.0,2369.0,
		-924.0,2003.0,-938.0,1797.0,-1008.0,1717.0,-746.0,1613.0,-814.0,1521.0,-630.0,1389.0,-596.0,1249.0,-594.0,1065.0,-594.0,899.0,
		-626.0,301.0,-1052.0,119.0,-1246.0};
	GoodMobileAreas[0] = CreateDynamicPolygon(holdArray14);

	GoodMobileAreas[1] = CreateDynamicRectangle(577.0, -434.0, 867.0, -234.0);
	GoodMobileAreas[2] = CreateDynamicRectangle(2165.0, 220.0, 2615.0, 600.0);
	GoodMobileAreas[3] = CreateDynamicRectangle(705.0, 396.0, 815.0, 576.0);
	GoodMobileAreas[4] = CreateDynamicCircle(1301.0, 306.0, 220.0);

	new Float:holdArray15[] = {-2717.0,1484.0,-2953.0,1186.0,-2957.0,724.0,-2875.0,522.0,-2943.0,406.0,-2929.0,166.0,-2885.0,-324.0,-2843.0,-574.0,-2673.0,
		-528.0,-2555.0,-518.0, -2555.0,-724.0,-2471.0,-716.0,-2377.0,-630.0,-2301.0,-590.0,-2177.0,-570.0,-2161.0,-1018.0,-1987.0,
		-1138.0,-1901.0,-844.0,-1831.0,-606.0,-1565.0,-694.0, -1231.0,-696.0,-1119.0,-326.0,-1083.0,-158.0,-1145.0,40.0,-1125.0,
		310.0,-1003.0,454.0,-1185.0,350.0,-1441.0,152.0,-1435.0,270.0,-1319.0,308.0, -1223.0,434.0,-1233.0,504.0,-1483.0,498.0,
		-1483.0,686.0,-1421.0,950.0,-1459.0,1158.0,-1541.0,1294.0,-1651.0,1442.0,-1741.0,1546.0,-2013.0,1392.0, -2717.0,1484.0};
	GoodMobileAreas[5] = CreateDynamicPolygon(holdArray15);

	new Float:holdArray16[] = {-1127.0,-576.0,-1125.0,-770.0,-975.0,-768.0,-975.0,-578.0,-1127.0,-576.0};
	GoodMobileAreas[6] = CreateDynamicPolygon(holdArray16);

	new Float:holdArray17[] = {-629.0,-468.0,-609.0,-568.0,-457.0,-560.0,-455.0,-462.0,-629.0,-468.0};
	GoodMobileAreas[7] = CreateDynamicPolygon(holdArray17);

	new Float:holdArray18[] = {-267.0,-174.0,-263.0,-184.0,-143.0,-406.0,33.0,-400.0,219.0,-366.0,327.0,-312.0,517.0,-124.0,411.0,142.0,-55.0,192.0,-243.0,278.0, -267.0,-174.0};
	GoodMobileAreas[8] = CreateDynamicPolygon(holdArray18);

	new Float:holdArray19[] = {-2639.0,2486.0,-2629.0,2230.0,-2261.0,2192.0,-2113.0,2338.0,-2251.0,2520.0,-2499.0,2550.0,-2639.0,2486.0};
	GoodMobileAreas[9] = CreateDynamicPolygon(holdArray19);

	new Float:holdArray20[] = {-1625.0,2684.0,-1571.0,2510.0,-1305.0,2636.0,-1255.0,2748.0,-1607.0,2726.0,-1625.0,2684.0};
	GoodMobileAreas[10] = CreateDynamicPolygon(holdArray20);

	new Float:holdArray21[] = {-899.0,2780.0,-945.0,2630.0,-673.0,2698.0,-725.0,2788.0,-899.0,2780.0};
	GoodMobileAreas[11] = CreateDynamicPolygon(holdArray21);

	new Float:holdArray22[] = {-357.0,2786.0,-377.0,2636.0,-209.0,2582.0,-113.0,2704.0,-153.0,2810.0,-243.0,2856.0,-357.0,2786.0};
	GoodMobileAreas[12] = CreateDynamicPolygon(holdArray22);

	new Float:holdArray23[] = {-395.0,1218.0,-123.0,1254.0,143.0,1190.0,311.0,1038.0,27.0,886.0,-329.0,770.0,-393.0,996.0,-395.0,1218.0};
	GoodMobileAreas[13] = CreateDynamicPolygon(holdArray23);

	new Float:holdArray24[] = {-389.0,1626.0,-293.0,1616.0,-269.0,1444.0,-413.0,1500.0,-389.0,1626.0};
	GoodMobileAreas[14] = CreateDynamicPolygon(holdArray24);

	new Float:holdArray25[] = {-883.0,1632.0,-921.0,1494.0,-835.0,1390.0,-611.0,1424.0,-623.0,1582.0,-713.0,1674.0,-883.0,1632.0};
	GoodMobileAreas[15] = CreateDynamicPolygon(holdArray25);

	new Float:holdArray26[] = {-2215.0,-2248.0,-2263.0,-2472.0,-2067.0,-2608.0,-1947.0,-2472.0,-2043.0,-2272.0,-2135.0,-2180.0,-2215.0,-2248.0};
	GoodMobileAreas[16] = CreateDynamicPolygon(holdArray26);

	new Float:holdArray27[] = {1121.0,2872.0,2789.0,2880.0,2885.0,1784.0,2869.0,936.0,2665.0,656.0,2401.0,552.0,1937.0,548.0,1601.0,
		512.0,1205.0,636.0,973.0,772.0, 885.0,792.0,973.0,1312.0,881.0,1732.0,857.0,2244.0,949.0,2632.0,1121.0,2872.0};
	GoodMobileAreas[17] = CreateDynamicPolygon(holdArray27);

	/*new Float:holdArray28[] = {1222.5665,318.5468, 1226.5636,327.8736, 1231.7048,339.2770, 1238.5913,336.7893, 1251.8649,330.9713, 1270.6212,322.5116, 1270.7611,320.2888, 1266.2943,309.9914,
	1258.4388,292.3532, 1256.5775,292.0948, 1241.4095,298.9756, 1224.7378,306.2977, 1220.8992,308.0945, 1220.2161,309.2947, 1220.6934,314.1472, 1222.4352,319.0007};

	SellVehicleZone = CreateDynamicPolygon(holdArray28);*/

	return 1;
}

stock BuyVehicle(playerid, model, name[], price, color1, color2, lock, salon, donator_requirement, dealer = 0, Float:g_x = 0.0, Float:g_y = 0.0, Float:g_z = 0.0, Float:g_a = 0.0)
{
	new
		string[512],
		Float:x, Float:y, Float:z, Float:a,
		Cache:result,
		engine, battery;

	if(salon != -1)
	{
		mysql_format(chandler, string, sizeof string, "SELECT `X`,`Y`,`Z`,`A` FROM `sell_salons_spawns` WHERE SalonId = '%d' ORDER BY RAND() LIMIT 1", SalonData[salon][salonId]);
		result = mysql_query(chandler, string, true);
		cache_get_value_name_float(0, "X", x);
		cache_get_value_name_float(0, "Y", y);
		cache_get_value_name_float(0, "Z", z);
		if(cache_num_rows() && (x != 0.0 || y != 0.0 || z != 0.0))
		{
			cache_get_value_name_float(0, "A", a);
		}
		else
		{
			x = DEFAULT_ANY_SALON_X;
			y = DEFAULT_ANY_SALON_Y;
			z = DEFAULT_ANY_SALON_Z;
			a = DEFAULT_ANY_SALON_A;
		}
	}
	else
	{
		if(g_x != 0.0 && g_y != 0.0 && g_z != 0.0 && g_a != 0.0)
		{
			x = g_x;
			y = g_y;
			z = g_z;
			a = g_a;
		}
		else
		{
			x = DEFAULT_ANY_SALON_X;
			y = DEFAULT_ANY_SALON_Y;
			z = DEFAULT_ANY_SALON_Z;
			a = DEFAULT_ANY_SALON_A;
		}
	}
	battery = 100;
	engine = 100;
	if(salon != -1)
	{
		if(SalonData[salon][salonGarbage] > 0)
		{
			battery = randomEx(55, 80);	
			engine = randomEx(55, 80);
		}
	}
	if(cache_is_valid(result)) cache_delete(result);
	mysql_format(chandler, string, sizeof string, "INSERT INTO `vehicles_data` (`Model`,`Salon`,`Owner`,`Name`,`X`,`Y`,`Z`,`A`,`Color1`,`Color2`,`Price`,`Lock`,`Fuel`,`DonatorRequirement`,`Dealer`,`EngineStatus`,`BatteryStatus`) VALUES");
	mysql_format(chandler, string, sizeof string, "%s ('%d','%d','%d','%s','%0.2f','%0.2f','%0.2f','%0.1f','%d','%d','%d','%d','%0.1f','%d','%d','%f','%f')", string, model, salon, PlayerInfo[playerid][pId], name, x, y, z, a, color1, color2, price, lock, float(VehicleFuelCapacityList[model-400]), donator_requirement, dealer, float(engine), float(battery));
	mysql_fquery(chandler, string, "VehicleBoughtEx");
	SendFormat(playerid, 0xFFEB81FF, "Tr. priemonë {F1A829}%s{FFEB81} buvo sëkmingai nupirkta. Jà rasite /v list", GetModelName(model));
	if(Checkpoint[playerid] == 0)
	{
		SetPlayerCheckpointEx(playerid, 0, x, y, z, 2.3);
		SendFormat(playerid, 0xBABABAFF, "Nupirkta tr. priemonë atsiras paþymëtoje vietoje.");	
	}
	PlayerInfo[playerid][pHaveCars]++;
	log_init(true);
	log_set_table("logs_vehicles");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Amount`,`ExtraId`");
	log_set_values("'%d','%e','Nusipirko automobili','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), price, model);
	log_commit();
	return 1;
}

thread(VehicleBoughtEx);

stock BuyFurniture(playerid, type, owner, price, model, name[], category[], Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new
		string[321],
		row_owner[16],
		table_name_prefix[16];
	if(type == 1)
	{
		format(row_owner, 16, "HouseId");
		format(table_name_prefix, 16, "houses");
	}
	else if(type == 2)
	{
		format(row_owner, 16, "BusinessId");
		format(table_name_prefix, 16, "business");
	}
	else if(type == 3)
	{
		format(row_owner, 16, "GarageId");
		format(table_name_prefix, 16, "garages");
	}
	mysql_format(chandler, string, sizeof string, "INSERT INTO `%s_furniture` (`Model`,`%s`,`Price`,`Name`,`Category`,`Added`,`Interior`,`VW`,`X`,`Y`,`Z`,`RX`,`RY`,`RZ`) VALUES ('%d','%d','%d','%s','%s','%d','%d','%d','%f','%f','%f','%f','%f','%f')", table_name_prefix, row_owner, model, owner, price, name, category, PlayerInfo[playerid][pId], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), x, y, z, rx, ry, rz);
	mysql_tquery(chandler, string, "FurnitureBought", "dddddssffffff", playerid, type, owner, price, model, name, category, x, y, z, rx, ry, rz);
	return 1;
}

forward FurnitureBought(playerid, type, owner, price, model, name[], category[], Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz);
public FurnitureBought(playerid, type, owner, price, model, name[], category[], Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new
		id;
	log_init(true);
	switch(type)
	{
		case 1:
		{
			// namui
			id = Iter_Free(HFurniture);
			hFurnitureInfo[id][hfObject] = CreateDynamicObject(model, x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), .called = "furniture", .extra = "BuyHouseFurniture");
			hFurnitureInfo[id][hfPrice] = price;
			hFurnitureInfo[id][hfId] = cache_insert_id();
			hFurnitureInfo[id][hfRot][0] = rx;
			hFurnitureInfo[id][hfRot][1] = ry;
			hFurnitureInfo[id][hfRot][2] = rz;
			hFurnitureInfo[id][hfPos][0] = x;
			hFurnitureInfo[id][hfPos][1] = y;
			hFurnitureInfo[id][hfPos][2] = z;
			hFurnitureInfo[id][hfModel] = model;
			hFurnitureInfo[id][hfOwner] = owner;
			format(hFurnitureInfo[id][hfName], 24, name);
			hFurnitureInfo[id][hfInterior] = GetPlayerInterior(playerid);
			hFurnitureInfo[id][hfVW] = GetPlayerVirtualWorld(playerid);
			Streamer_Update(playerid);
			EditDynamicObject(playerid, hFurnitureInfo[id][hfObject]);
			tmpEditing_Component_DMV[playerid] = EDITING_TYPE_DYNAMIC_FURNITURE;
			Iter_Add(HFurniture, id);
			log_set_table("logs_houses");
			log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`ExtraString`,`Amount`");
			log_set_values("'%d','%e','%d','Nupirko balda','%e/%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), owner, category, name, price);
		}
		case 2:
		{
			// verslui
			id = Iter_Free(BFurniture);
			bFurnitureInfo[id][bfObject] = CreateDynamicObject(model, x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), .called = "furniture", .extra = "BuyBusinessFurniture");
			bFurnitureInfo[id][bfPrice] = price;
			bFurnitureInfo[id][bfId] = cache_insert_id();
			bFurnitureInfo[id][bfRot][0] = rx;
			bFurnitureInfo[id][bfRot][1] = ry;
			bFurnitureInfo[id][bfRot][2] = rz;
			bFurnitureInfo[id][bfPos][0] = x;
			bFurnitureInfo[id][bfPos][1] = y;
			bFurnitureInfo[id][bfPos][2] = z;
			bFurnitureInfo[id][bfModel] = model;
			bFurnitureInfo[id][bfOwner] = owner;
			format(bFurnitureInfo[id][bfName], 24, name);
			bFurnitureInfo[id][bfInterior] = GetPlayerInterior(playerid);
			bFurnitureInfo[id][bfVW] = GetPlayerVirtualWorld(playerid);
			Streamer_Update(playerid);
			EditDynamicObject(playerid, bFurnitureInfo[id][bfObject]);
			tmpEditing_Component_DMV[playerid] = EDITING_TYPE_DYNAMIC_FURNITURE;
			Iter_Add(BFurniture, id);
			log_set_table("logs_business");
			log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`,`ExtraString`,`Amount`");
			log_set_values("'%d','%e','%d','Nupirko balda','%e/%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), owner, category, name, price);
		}
		case 3:
		{
			// garazui
			id = Iter_Free(GFurniture);
			gFurnitureInfo[id][gfObject] = CreateDynamicObject(model, x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), .called = "furniture", .extra = "BuyGarageFurniture");
			gFurnitureInfo[id][gfPrice] = price;
			gFurnitureInfo[id][gfId] = cache_insert_id();
			gFurnitureInfo[id][gfRot][0] = rx;
			gFurnitureInfo[id][gfRot][1] = ry;
			gFurnitureInfo[id][gfRot][2] = rz;
			gFurnitureInfo[id][gfPos][0] = x;
			gFurnitureInfo[id][gfPos][1] = y;
			gFurnitureInfo[id][gfPos][2] = z;
			gFurnitureInfo[id][gfModel] = model;
			gFurnitureInfo[id][gfOwner] = owner;
			format(gFurnitureInfo[id][gfName], 24, name);
			gFurnitureInfo[id][gfInterior] = GetPlayerInterior(playerid);
			gFurnitureInfo[id][gfVW] = GetPlayerVirtualWorld(playerid);
			Streamer_Update(playerid);
			EditDynamicObject(playerid, gFurnitureInfo[id][gfObject]);
			tmpEditing_Component_DMV[playerid] = EDITING_TYPE_DYNAMIC_FURNITURE;
			Iter_Add(GFurniture, id);
			log_set_table("logs_garages");
			log_set_keys("`PlayerId`,`PlayerName`,`GarageId`,`ActionText`,`ExtraString`,`Amount`");
			log_set_values("'%d','%e','%d','Nupirko balda','%e/%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), owner, category, name, price);
		}
	}
	tmpSelected[playerid] = id;
	log_commit();
	return 1;
}



public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	printf("[debug] OnPlayerGiveDamage(%s, %s, %0.1f, %d)", GetPlayerNameEx(playerid), GetPlayerNameEx(damagedid), amount, weaponid);
	if(weaponid == 23 && PlayerExtra[playerid][peTazer] > 0)
	{
		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 10.0) && damagedid != INVALID_PLAYER_ID)
		{
			if(IsPlayerInAnyVehicle(damagedid))
			{
				RemovePlayerFromVehicle(damagedid);
			}

			new rand = 15+random(5);
			PlayerExtra[damagedid][peTazed] = rand;
			FreezePlayer(damagedid, rand);
			SendFormat(damagedid, 0x6A68FFFF, "Á jus buvo pataikyta tazeriu, kurá laikà negalësite judëti.");
			ApplyAnimation_Loop(damagedid, "CRACK", "crckdeth2", 4.0, true, true, true, true, true);
			GameTextForPlayer(playerid, "~g~PATAIKETE", 4000, 3);
			// su tazeriu
		}
		else
		{
			GameTextForPlayer(playerid, "~y~NEPATAIKETE", 4000, 3);
		}
		return 1;
	}
	new Float:health,
		Float:armour;
	GetPlayerHealth(damagedid, health);
	GetPlayerArmour(damagedid, armour);
	if(PlayerInfo[damagedid][pCurrentStatus] == PLAYER_STATUS_ALMOST_DEATH)
	{
		SetPlayerHealth(damagedid, (health > 25.0 ? health-25.0 : 0.0));
	}
	new Float:damage = WeaponDamages[weaponid];
	if(0 <= weaponid <= 3 || 5 <= weaponid <= 7)
	{
		// pridedam jei narkotikus vartoja
		if(PlayerDrugs[playerid][DRUG_COCAINE][drugOnDuty] > 0)
		{
			damage *= 1.1;
		}
		if(PlayerDrugs[playerid][DRUG_MDMA][drugOnDuty] > 0)
		{
			damage *= 1.1;
		}
	}

	//damage -= amount; // sa-mp bug
	if(armour > 0.0)
	{
		SetPlayerArmour(damagedid, (damage > armour ? (0.0) : (armour-damage)));
		damage -= armour;
	}
	SetPlayerHealth(damagedid, (damage > health ? (0.0) : (health-damage)));
	return 1;
}

CMD:servertime(playerid, params[])
{
	new 
		year, month, day,
		hour, minute, second;

	getdate(year, month, day);
	gettime(hour, minute, second);

	SendFormat(playerid, -1, "Dabar yra: %d-%02d-%02d %02d:%02d:%02d", year, month, day, hour, minute, second);
	return 1;
}

CMD:damages(playerid, params[])
{
	new
		targetid;

	if(sscanf(params, "d", targetid)) return SendUsage(playerid, "/damages [þaidëjo id]");
	if(!IsPlayerInRangeOfPlayer(playerid, targetid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	if(Iter_Count(PlayerDamages[targetid]) <= 0) return SendWarning(playerid, "Suþalojimø nëra.");

	dialog_Clear();

	foreach(new i : PlayerDamages[targetid])
	{
		dialog_AddLine("%0.1f þalos ið %s á %s prieð %d sek.",
			PlayerDamages[targetid][i][pd_amount],
			GetInventoryItemName(PlayerDamages[targetid][i][pd_weaponid]),
			GetBodyPartName(PlayerDamages[targetid][i][pd_bodypart]),
			gettime() - PlayerDamages[targetid][i][pd_time]
		);
	}

	inline damages(response, listitem) return 1;
	dialog_Show(playerid, using inline damages, DIALOG_STYLE_LIST, "Þaidëjo suþalojimai", "Uþdaryti", "");
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	printf("[debug] OnPlayerTakeDamage(%s, %s, %0.1f, %d, %d)", GetPlayerNameEx(playerid), GetPlayerNameEx(issuerid), amount, weaponid, bodypart);
	if(weaponid <= 42) AddDamageRecord(playerid, issuerid, amount, weaponid, bodypart);
	/*if(PlayerInfo[playerid][pCurrentStatus] == PLAYER_STATUS_ALMOST_DEATH)
	{
		new 
			string[126];
		format(string, sizeof string, "(( MIRÆS ÞAIDËJAS\nSuþalojimø kiekis: %d (/damages %d) ))", Iter_Count(PlayerDamages[playerid]), playerid);
		if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peDeathLabel])) UpdateDynamic3DTextLabelText(PlayerExtra[playerid][peDeathLabel], 0xBF2D2DFF, string);
		else PlayerExtra[playerid][peDeathLabel] = CreateDynamic3DTextLabel(string, 0xBF2D2DFF, 0.0, 0.0, 0.3, 8.0, playerid, INVALID_VEHICLE_ID, 1);
	}*/
    return 1;
}

stock AddDamageRecord(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	new
		index = Iter_Free(PlayerDamages[playerid]);

	if(index == ITER_NONE)
		return 1;

	PlayerDamages[playerid][index][pd_issuerid] = issuerid;
	PlayerDamages[playerid][index][pd_amount] = amount;
	PlayerDamages[playerid][index][pd_weaponid] = weaponid;
	PlayerDamages[playerid][index][pd_bodypart] = bodypart;
	PlayerDamages[playerid][index][pd_time] = gettime();

	Iter_Add(PlayerDamages[playerid], index);
	return 1;
}

stock VehicleMoving(vehicleid)
{
	new
		Float:qx, Float:qy, Float:qz, Float:qw,
		Float:res_yaw, Float:res_roll;

	GetVehicleRotationQuat(vehicleid, qw, qx, qy, qz);
	if((qx*qy + qz*qw) > 0.499*((qx*qx)+(qy*qy)+(qz*qz)+(qw*qw)))
	{
		res_yaw = 2 * atan2(qx,qw);
	}
	if((qx*qy + qz*qw) < -0.499*((qx*qx)+(qy*qy)+(qz*qz)+(qw*qw)))
	{
		res_yaw = -2 * atan2(qx,qw);
	}
	else
	{
		res_yaw = atan2(2*qy*qw - 2*qx*qz, qx*qx - qy*qy - qz*qz + qw*qw);
		res_roll = atan2(2*qx*qw - 2*qy*qz, -(qx*qx) + (qy*qy) - (qz*qz) + (qw*qw));
	}
	if(res_yaw <= -3.0 && res_roll >= 6.0)
	{
		return 1;
	}
	if(res_yaw >= 30.0 && res_roll >= 3.5)
	{
		return 2;
	}
	if(res_yaw <= -15.0 && res_roll <= -4.0)
	{
		return 3;
	}
	if(res_yaw <= -30.0 && res_roll <= -4.5)
	{
		return 4;
	}

	return 0;
}

stock SaveAccountEx(playerid, row[], value[])
{
	new string[420];
	mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET `%s` = '%e' WHERE id = '%d'", row, value, PlayerInfo[playerid][pId]);
	mysql_fquery(chandler, string, "PlayerSavedEx");
	return 1;
}

stock SaveServerIntEx(row[], value)
{
	new string[126];
	mysql_format(chandler, string, sizeof string, "UPDATE `options` SET `Value` = '%d' WHERE `Key` = '%s' AND Type = '1'", value, row);
	mysql_fquery(chandler, string, "OptionsSavedEx");
	return 1;
}
stock SaveServerFloatEx(row[], Float:value)
{
	new string[126];
	mysql_format(chandler, string, sizeof string, "UPDATE `options` SET `Value` = '%f' WHERE `Key` = '%s' AND Type = '3'", value, row);
	mysql_fquery(chandler, string, "OptionsSavedEx");
	return 1;
}
thread(OptionsSavedEx);

stock SaveAccountOption(playerid, option[], value)
{
	new 
		string[128],
		exist;
	mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `players_settings` WHERE Option = '%e' AND PlayerId = '%d'", option, PlayerInfo[playerid][pId]);
	new Cache:result = mysql_query(chandler, string, true);
	exist = cache_num_rows();
	cache_delete(result);
	if(exist)
	{
		mysql_format(chandler, string, sizeof string, "UPDATE `players_settings` SET `Value` = '%d' WHERE Option = '%e' AND PlayerId = '%d'", value, option, PlayerInfo[playerid][pId]);
	}
	else
	{
		mysql_format(chandler, string, sizeof string, "INSERT INTO `players_settings` (`PlayerId`,`Option`,`Value`) VALUES ('%d','%e','%d')", PlayerInfo[playerid][pId], option, value);
	}
	mysql_fquery(chandler, string, "PlOptionSavedEx");
	return 1;
}
thread(PlOptionSavedEx);

stock SaveAccountIntEx(playerid, row[], value)
{
	new string[128];
	mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET `%s` = '%d' WHERE id = '%d'", row, value, PlayerInfo[playerid][pId]);
	mysql_fquery(chandler, string, "PlayerSavedEx");
	return 1;
}

stock SaveUserIntEx(userid, row[], value)
{
	new string[128];
	mysql_format(chandler, string, sizeof string, "UPDATE `users_data` SET `%s` = '%d' WHERE id = '%d'", row, value, userid);
	mysql_fquery(chandler, string, "PlayerSavedEx");
	return 1;
}


stock SaveFactionEx(factionid, row[], value[])
{
	new string[420];
	mysql_format(chandler, string, sizeof string, "UPDATE `factions_data` SET `%s` = '%e' WHERE id = '%d'", row, value, FactionInfo[factionid][fId]);
	mysql_fquery(chandler, string, "FactionSavedEx");
	return 1;
}

stock SaveFactionIntEx(factionid, row[], value)
{
	new string[128];
	mysql_format(chandler, string, sizeof string, "UPDATE `factions_data` SET `%s` = '%d' WHERE id = '%d'", row, value, FactionInfo[factionid][fId]);
	mysql_fquery(chandler, string, "FactionSavedEx");
	return 1;
}

stock SaveFactionFloatEx(factionid, row[], Float:value)
{
	new string[128];
	mysql_format(chandler, string, sizeof string, "UPDATE `factions_data` SET `%s` = '%f' WHERE id = '%d'", row, value, FactionInfo[factionid][fId]);
	mysql_fquery(chandler, string, "FactionSavedEx");
	return 1;
}

stock SaveDealerHouseIntEx(houseid, row[], value)
{
	new string[128];
	mysql_format(chandler, string, sizeof string, "UPDATE `dealers_houses_data` SET `%s` = '%d' WHERE id = '%d'", row, value, DealerHouseInfo[houseid][dealerHouseId]);
	mysql_fquery(chandler, string, "HouseSavedEx");
	return 1;
}

stock SaveHouseIntEx(houseid, row[], value)
{
	new string[128];
	mysql_format(chandler, string, sizeof string, "UPDATE `houses_data` SET `%s` = '%d' WHERE id = '%d'", row, value, HouseInfo[houseid][hId]);
	mysql_fquery(chandler, string, "HouseSavedEx");
	return 1;
}

stock SaveGarageIntEx(garageid, row[], value)
{
	new string[128];
	mysql_format(chandler, string, sizeof string, "UPDATE `garages_data` SET `%s` = '%d' WHERE id = '%d'", row, value, GarageInfo[garageid][gId]);
	mysql_fquery(chandler, string, "GarageSavedEx");
	return 1;
}

stock SaveBusinessIntEx(businessid, row[], value)
{
	new string[128];
	mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET `%s` = '%d' WHERE id = '%d'", row, value, BusinessInfo[businessid][bId]);
	mysql_fquery(chandler, string, "BusinessSavedEx");
	return 1;
}

stock SaveBusinessEx(businessid, row[], value[])
{
	new string[256];
	mysql_format(chandler, string, sizeof string, "UPDATE `business_data` SET `%s` = '%e' WHERE id = '%d'", row, value, BusinessInfo[businessid][bId]);
	mysql_fquery(chandler, string, "BusinessSavedEx");
	return 1;
}

stock SaveVehicleEx(vehicleid, row[], value[])
{
	new string[420];
	mysql_format(chandler, string, sizeof string, "UPDATE `vehicles_data` SET `%s` = '%e' WHERE id = '%d'", row, value, VehicleInfo[vehicleid][vId]);
	mysql_fquery(chandler, string, "VehicleSavedEx");
	return 1;
}

stock SaveVehicleFloatEx(vehicleid, row[], Float:value)
{
	new string[128];
	mysql_format(chandler, string, sizeof string, "UPDATE `vehicles_data` SET `%s` = '%f' WHERE id = '%d'", row, value, VehicleInfo[vehicleid][vId]);
	mysql_fquery(chandler, string, "VehicleSavedEx");
	return 1;
}

stock SaveVehicleIntEx(vehicleid, row[], value)
{
	new string[128];
	mysql_format(chandler, string, sizeof string, "UPDATE `vehicles_data` SET `%s` = '%d' WHERE id = '%d'", row, value, VehicleInfo[vehicleid][vId]);
	mysql_fquery(chandler, string, "VehicleSavedEx");
	return 1;
}

stock SaveServerVehicleIntEx(vehicleid, row[], value)
{
	new string[128];
	mysql_format(chandler, string, sizeof string, "UPDATE `vehicles_server` SET `%s` = '%d' WHERE id = '%d'", row, value, VehicleInfo[vehicleid][vId]);
	mysql_fquery(chandler, string, "VehicleSavedEx");
	return 1;
}

stock SaveServerVehicleFloatEx(vehicleid, row[], Float:value)
{
	new string[128];
	mysql_format(chandler, string, sizeof string, "UPDATE `vehicles_server` SET `%s` = '%f' WHERE id = '%d'", row, value, VehicleInfo[vehicleid][vId]);
	mysql_fquery(chandler, string, "VehicleSavedEx");
	return 1;
}

thread(PlayerSavedEx);
thread(VehicleSavedEx);
thread(FactionSavedEx);
thread(HouseSavedEx);
thread(GarageSavedEx);
thread(BusinessSavedEx);

forward VehicleDataGet(playerid, show, save_data);
public VehicleDataGet(playerid, show, save_data)
{
	new rows = cache_num_rows();
	if(save_data >= 1)
	{
		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "id", tmpArray[playerid][i]);
		}
	}
	new string[86];
	mysql_format(chandler, string, sizeof string, "SELECT VehicleId FROM `vehicles_dubkeys` WHERE PlayerId = '%d'", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "VehicleDataAddDubkeys", "dddd", playerid, show, save_data, rows);
	return 1;
}

forward VehicleDataAddDubkeys(playerid, show, save_data, last_rows);
public VehicleDataAddDubkeys(playerid, show, save_data, last_rows)
{
	new rows = cache_num_rows(),
		tmp,
		realnow,
		string[86];
	if(rows == 0 && last_rows == 0) return SendError(playerid, "Neturite tr. priemoniø.");
	if(save_data >= 1)
	{
		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "VehicleId", tmp);
			new Cache:sys_mem = cache_save();
			mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `vehicles_data` WHERE id = '%d'", tmp);
			new Cache:result = mysql_query(chandler, string, true);
			cache_set_active(result);
			if(cache_num_rows())
			{
				tmpArray[playerid][realnow+last_rows] = tmp;
				realnow++;
			}
			else
			{
				mysql_format(chandler, string, sizeof string, "DELETE FROM `vehicles_dubkeys` WHERE VehicleId = '%d'", tmp);
				mysql_fquery(chandler, string, "VehicleSavedEx");
			}
			cache_delete(result);
			cache_set_active(sys_mem);
		}
		tmpDubStart_Price[playerid] = last_rows;
	}
	if(show >= 1)
	{
		tmpPage_Object[playerid] = 1;
		ShowESCTextdraw(playerid, ESC_TYPE_VLIST);
		ShowVehicleList(playerid, tmpArray[playerid][0], tmpArray[playerid][1], tmpArray[playerid][2], tmpArray[playerid][3]);
	}
	return 1;
}



stock TakeDroppedItem(playerid)
{
	foreach(new itter : DroppedItem)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, DroppedItems[itter][droppedItemX], DroppedItems[itter][droppedItemY], DroppedItems[itter][droppedItemZ]))
		{
			if(DroppedItems[itter][droppedItemId] != 0 && DroppedItems[itter][droppedItemAmount] != 0)
			{
				new slotid;
				if((slotid = GetPlayerFreeInventorySlot(playerid)) == -1) return SendWarning(playerid, "nëra pakankamai vietos inventoriuje.");
				GivePlayerInventoryItem(playerid, DroppedItems[itter][droppedItemId], DroppedItems[itter][droppedItemAmount], DroppedItems[itter][droppedItemExtraId], slotid);
				if(IsValidDynamicObject(DroppedItems[itter][droppedItemObject])) DestroyDynamicObject(DroppedItems[itter][droppedItemObject], "drops", "take");
				new string[126];
				rp_me(playerid, _, "paima daiktà nuo þemës, kuris atrodo kaip %s.", GetInventoryItemName(DroppedItems[itter][droppedItemId], .lower_case = true));
				mysql_format(chandler, string, sizeof string, "UPDATE `drops_data` SET Valid = '0', PickedBy = '%d' WHERE id = '%d'", PlayerInfo[playerid][pId], DroppedItems[itter][droppedItemMysqlId]);
				mysql_fquery(chandler, string, "DropDeletedAuto");
				new clear[E_DROPPED_ITEMS_DATA];
				DroppedItems[itter] = clear;
				DroppedItems[itter][droppedItemObject] = INVALID_OBJECT_ID;
				Iter_Remove(DroppedItem, itter);
				return true;
			}
		}
	}
	return false;
}

#define KEY_HORN 2

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if((HOLDING(KEY_CROUCH) && PRESSED(KEY_WALK)) || ((PRESSED(KEY_WALK) || HOLDING(KEY_WALK)) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK))
	{
		TakeDroppedItem(playerid);
	}
	if(PRESSED(KEY_YES))
	{
		pc_cmd_inventory(playerid, "");
		return 1;
	}
	if(PRESSED(KEY_NO))
	{
		pc_cmd_phone(playerid, "");
		return 1;
	}
	if(PRESSED(KEY_HORN) || PRESSED(KEY_CTRL_BACK))
	{ 
		new
			factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
		if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return 1;
		for(new door = 0; door < sizeof PoliceDoors; door++)
		{
			if(IsPlayerInRangeOfPoint(playerid, IsPlayerInAnyVehicle(playerid) ? 10.0 : PoliceDoors[door][policeDoorDist], PoliceDoors[door][policeDoorX], PoliceDoors[door][policeDoorY], PoliceDoors[door][policeDoorZ]))
			{
				if(!PoliceDoors[door][policeDoorOpened])
				{
					Police_Door_Open(playerid, door);	
					return 1;
				}
			}
		}
	}
	if(PRESSED(KEY_FIRE))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(PlayerExtra[playerid][peFilling] > 0)
		{
			return PayForFuel(playerid, PlayerExtra[playerid][peFillingAt]);
		}
		if(IsPlayerInAnyVehicle(playerid) && VehicleHaveEngine(GetVehicleModel(vehicleid)))
		{
			EngineTurning(playerid);
		}
		return 1;
	}
	if(PRESSED(KEY_ACTION))
	{
		new vehicleid = INVALID_VEHICLE_ID;
		if((vehicleid = GetPlayerVehicleID(playerid)) != INVALID_VEHICLE_ID && GetPlayerVehicleSeat(playerid) == 0)
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			return SetVehicleParamsEx(vehicleid, engine, !lights, alarm, doors, bonnet, boot, objective);
		}
		return 1;
	}
	if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && !IsPlayerInAnyVehicle(playerid))
	{
		// MP2
		ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.1, 0, 1, 1, 0, 0);
	}
	if(PRESSED(KEY_SPRINT))
	{
		if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_REPAIR_VEHICLE)
		{
			PlayerInfo[playerid][pJobDestination] += 2;
			LastSpamBarPressed[playerid] = 0;
			SpamBarTD_Update(playerid, PlayerInfo[playerid][pJobDestination]);
			if(PlayerInfo[playerid][pJobDestination] >= 100)
			{
				new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
				TogglePlayerControllable(playerid, 1);
				PlayerInfo[playerid][pJobActionIndex]++;
				if(PlayerInfo[playerid][pJobActionIndex] == PlayerInfo[playerid][pJobCurrentType])
				{
					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(jobvehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					RepairVehicle(jobvehicleid);
					SetVehicleParamsEx(jobvehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SendFormat(playerid, 0x9BC154FF, "Sëkmingai sutvarkëte tr. priemonæ.");
					ResetPlayerJobTask(playerid, true);
					GivePlayerMoney(playerid, -DEFAULT_REPAIR_PRICE);
					rp_me(playerid, _, "sutaiso transporto priemonæ.");
				}
				else
				{
					new spot = random(sizeof MechanicPartSpots);
					PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TAKE_REPAIR;
					PlayerInfo[playerid][pJobActionTime] = 30;
					SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_REPAIR, MechanicPartSpots[spot][0], MechanicPartSpots[spot][1], MechanicPartSpots[spot][2], 2.3);
				}
				new __tmpskin = GetPlayerSkin(playerid);
				SetPlayerSkin(playerid, __tmpskin);
				PlayerTextDrawTextSize(playerid, SpamBarTD_Load[playerid], 0.000000, 14.000000);
				PlayerTextDrawSetString(playerid, SpamBarTD_Value[playerid], "0%");
				KillTimer(PlayerInfo[playerid][pJobTimer]);
				SpamBarTD_Hide(playerid);
			}
		}
		else if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_TUNE_VEHICLE)
		{
			PlayerInfo[playerid][pJobDestination] += 2;
			LastSpamBarPressed[playerid] = 0;
			SpamBarTD_Update(playerid, PlayerInfo[playerid][pJobDestination]);
			if(PlayerInfo[playerid][pJobDestination] >= 100)
			{
				new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
				TogglePlayerControllable(playerid, 1);
				PlayerInfo[playerid][pJobActionIndex]++;
				if(PlayerInfo[playerid][pJobActionIndex] == PlayerInfo[playerid][pJobCurrentType])
				{
					SendFormat(playerid, 0x9BC154FF, "Sëkmingai sutvarkëte tr. priemonæ.");
					ResetPlayerJobTask(playerid, true);
					AddVehicleComponent(jobvehicleid, tmpEditing_Component_DMV[playerid]);
					rp_me(playerid, _, "pabaigia montuoti dalis á transporto priemonæ.");
					if(VehicleInfo[jobvehicleid][vFaction] == 0 && VehicleInfo[jobvehicleid][vJob] == 0)
					{
						new component_string[24];
						format(component_string, sizeof component_string, "Component%d", GetVehicleComponentType(tmpEditing_Component_DMV[playerid]));
						SaveVehicleIntEx(jobvehicleid, component_string, tmpEditing_Component_DMV[playerid]);
					}
				}
				else
				{
					new spot = random(sizeof MechanicPartSpots);
					PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TAKE_WHEELS;
					PlayerInfo[playerid][pJobActionTime] = 30;
					SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_WHEELS, MechanicPartSpots[spot][0], MechanicPartSpots[spot][1], MechanicPartSpots[spot][2], 2.3);
				}
				new __tmpskin = GetPlayerSkin(playerid);
				SetPlayerSkin(playerid, __tmpskin);
				PlayerTextDrawTextSize(playerid, SpamBarTD_Load[playerid], 0.000000, 14.000000);
				PlayerTextDrawSetString(playerid, SpamBarTD_Value[playerid], "0%%");
				KillTimer(PlayerInfo[playerid][pJobTimer]);
				SpamBarTD_Hide(playerid);
			}
		}
		else if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_ENGINE_REPAIR)
		{
			PlayerInfo[playerid][pJobDestination] += 2;
			LastSpamBarPressed[playerid] = 0;
			SpamBarTD_Update(playerid, PlayerInfo[playerid][pJobDestination]);
			if(PlayerInfo[playerid][pJobDestination] >= 100)
			{
				new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
				TogglePlayerControllable(playerid, 1);
				PlayerInfo[playerid][pJobActionIndex]++;

				SendFormat(playerid, 0x9BC154FF, "Sëkmingai sutvarkëte tr. priemonës variklá.");
				ResetPlayerJobTask(playerid, true);

				GivePlayerMoney(playerid, -floatround((100-VehicleInfo[jobvehicleid][vEngineStatus]))*MECHANICS_REPAIR_ENGINE_PRICE);
				rp_me(playerid, _, "pabaigia taisyti transporto priemonës variklá.");

				VehicleInfo[jobvehicleid][vEngineStatus] = 100.0;
				SaveVehicleFloatEx(jobvehicleid, "EngineStatus", 100.0);

				new __tmpskin = GetPlayerSkin(playerid);
				SetPlayerSkin(playerid, __tmpskin);
				PlayerTextDrawTextSize(playerid, SpamBarTD_Load[playerid], 0.000000, 14.000000);
				PlayerTextDrawSetString(playerid, SpamBarTD_Value[playerid], "0%%");
				KillTimer(PlayerInfo[playerid][pJobTimer]);
				SpamBarTD_Hide(playerid);
			}
		}
		else if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_BATTERY_REPAIR)
		{
			PlayerInfo[playerid][pJobDestination] += 2;
			LastSpamBarPressed[playerid] = 0;
			SpamBarTD_Update(playerid, PlayerInfo[playerid][pJobDestination]);
			if(PlayerInfo[playerid][pJobDestination] >= 100)
			{
				new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
				TogglePlayerControllable(playerid, 1);
				PlayerInfo[playerid][pJobActionIndex]++;

				SendFormat(playerid, 0x9BC154FF, "Sëkmingai sutvarkëte tr. priemonës akumuliatoriø.");
				ResetPlayerJobTask(playerid, true);
				GivePlayerMoney(playerid, -floatround((100-VehicleInfo[jobvehicleid][vEngineStatus]))*MECHANICS_REPAIR_BATTERY_PRICE);
				rp_me(playerid, _, "pabaigia taisyti transporto priemonës akumuliatoriø.");

				VehicleInfo[jobvehicleid][vBatteryStatus] = 100.0;
				SaveVehicleFloatEx(jobvehicleid, "BatteryStatus", 100.0);

				new __tmpskin = GetPlayerSkin(playerid);
				SetPlayerSkin(playerid, __tmpskin);
				PlayerTextDrawTextSize(playerid, SpamBarTD_Load[playerid], 0.000000, 14.000000);
				PlayerTextDrawSetString(playerid, SpamBarTD_Value[playerid], "0%%");
				KillTimer(PlayerInfo[playerid][pJobTimer]);
				SpamBarTD_Hide(playerid);
			}
		}
		else if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_ENGINE_CHANGE)
		{
			PlayerInfo[playerid][pJobDestination] += 2;
			LastSpamBarPressed[playerid] = 0;
			SpamBarTD_Update(playerid, PlayerInfo[playerid][pJobDestination]);
			if(PlayerInfo[playerid][pJobDestination] >= 100)
			{
				new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
				TogglePlayerControllable(playerid, 1);
				PlayerInfo[playerid][pJobActionIndex]++;

				SendFormat(playerid, 0x9BC154FF, "Sëkmingai pakeitëte tr. priemonës variklá.");
				ResetPlayerJobTask(playerid, true);

				GivePlayerMoney(playerid, -MECHANICS_CHANGE_ENGINE_PRICE);
				rp_me(playerid, _, "pabaigia keisti transporto priemonës variklá.");

				VehicleInfo[jobvehicleid][vEngineStatus] = 100.0;
				SaveVehicleFloatEx(jobvehicleid, "EngineStatus", 100.0);

				new __tmpskin = GetPlayerSkin(playerid);
				SetPlayerSkin(playerid, __tmpskin);
				PlayerTextDrawTextSize(playerid, SpamBarTD_Load[playerid], 0.000000, 14.000000);
				PlayerTextDrawSetString(playerid, SpamBarTD_Value[playerid], "0%%");
				KillTimer(PlayerInfo[playerid][pJobTimer]);
				SpamBarTD_Hide(playerid);
			}
		}
		else if(PlayerInfo[playerid][pJobCurrentAction] == JOB_ACTION_BATTERY_CHANGE)
		{
			PlayerInfo[playerid][pJobDestination] += 2;
			LastSpamBarPressed[playerid] = 0;
			SpamBarTD_Update(playerid, PlayerInfo[playerid][pJobDestination]);
			if(PlayerInfo[playerid][pJobDestination] >= 100)
			{
				new jobvehicleid = PlayerInfo[playerid][pJobVehicle];
				TogglePlayerControllable(playerid, 1);
				PlayerInfo[playerid][pJobActionIndex]++;

				SendFormat(playerid, 0x9BC154FF, "Sëkmingai pakeitëte tr. priemonës akumuliatoriø.");
				ResetPlayerJobTask(playerid, true);
				GivePlayerMoney(playerid, -MECHANICS_CHANGE_BATTERY_PRICE);
				rp_me(playerid, _, "pabaigia keisti transporto priemonës akumuliatoriø.");

				VehicleInfo[jobvehicleid][vBatteryStatus] = 100.0;
				SaveVehicleFloatEx(jobvehicleid, "BatteryStatus", 100.0);

				new __tmpskin = GetPlayerSkin(playerid);
				SetPlayerSkin(playerid, __tmpskin);
				PlayerTextDrawTextSize(playerid, SpamBarTD_Load[playerid], 0.000000, 14.000000);
				PlayerTextDrawSetString(playerid, SpamBarTD_Value[playerid], "0%%");
				KillTimer(PlayerInfo[playerid][pJobTimer]);
				SpamBarTD_Hide(playerid);
			}
		}
	}
	return 1;
}



public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] OnPlayerClickTextDraw(%s, %d)", GetPlayerNameEx(playerid), _:clickedid);
	#endif
	if(_:clickedid == INVALID_TEXT_DRAW)
	{
		switch(GetESCType(playerid))
		{
			case ESC_TYPE_PHONE:
			{
				if(PhoneInfo[playerid][phoneTalkingTo] == INVALID_PLAYER_ID && PhoneInfo[playerid][phoneRinging] == INVALID_PLAYER_ID && PhoneInfo[playerid][phoneRingingTime] <= 0)
				{ // paspaude ESC, bet jei zaidejui skambina(arba jis skambina) arba jis kalba, nepaslepiam.
					PhoneTD_Hide(playerid);
					tmpPhone_InventoryPage[playerid] = 0;
				}
				GetESCType(playerid) = ESC_TYPE_NONE;
				return 1;
			}
			case ESC_TYPE_PAYPHONE:
			{
				PayPhoneTD_Hide(playerid);
				return 1;
			}
			case ESC_TYPE_DMV:
			{
				DMV_Hide(playerid);
				RemovePlayerFromVehicle(playerid);
				GetESCType(playerid) = ESC_TYPE_NONE;
				return 1;
			}
			case ESC_TYPE_VLIST:
			{
				HidePlayerVehicleList(playerid);
				GetESCType(playerid) = ESC_TYPE_NONE;
				return 1;
			}
			case ESC_TYPE_VSHOP:
			{
				HidePlayerVehicleShop(playerid);
				GetESCType(playerid) = ESC_TYPE_NONE;
				tmpSelected[playerid] = -1;
				return 1;
			}
			case ESC_TYPE_FURNITURE:
			{
				DestroyFurniturePreview(playerid);
				GetESCType(playerid) = ESC_TYPE_NONE;
				return 1;
			}
			case ESC_TYPE_MECHTUNE:
			{
				if(tmpSelected[playerid] != 0)
				{
					PlayerTextDrawColor(playerid, MechTune_BasePart[playerid][tmpSelected[playerid]-1], 65);
				}
				HidePlayerMechTune(playerid);
				GetESCType(playerid) = ESC_TYPE_NONE;
				return 1;
			}
			case ESC_TYPE_ATM:
			{
				tmpSelected[playerid] = 0;
				HidePlayerATM(playerid);
				GetESCType(playerid) = ESC_TYPE_NONE;
				return 1;
			}
			case ESC_TYPE_MDC:
			{
				MDC_Call(OnExitPress, playerid);
				return 1;
			}
			case ESC_TYPE_CHARSELECT:
			{
				call OnPlayerLeaveCharSelect(playerid);
				return 1;
			}
			case ESC_TYPE_CHARCREATE:
			{
				call OnPlayerLeaveCharCreate(playerid);
				return 1;
			}
		}
	}
	else
	{
		if(clickedid == MDC_Exit)
		{
			MDC_Call(OnExitPress, playerid);
			return 1;
		}
		if(clickedid == MDC_Prison_OpenAll)
		{
			MDC_Call(OnCellsOpenAll, playerid);
			return 1;
		}
		if(clickedid == MDC_Prison_CloseAll)
		{
			MDC_Call(OnCellsCloseAll, playerid);
			return 1;
		}
		if(clickedid == MDC_Lookup_SearchBox)
		{
			MDC_Call(OnSearchPress, playerid, MDC__Player_Data[playerid][pMdcActivePage], MDC__Player_Data[playerid][pMdcInputText]);
			return 1;
		}
		for(new i = 0; i < sizeof CCTV; i++)
		{
			if(clickedid == MDC_CCTV_Camera[i])
			{
				MDC_Call(OnCCTVSelect, playerid, i);
				return 1;
			}
		}
		if(clickedid == MDC_Wanted_Add)
		{
			MDC_Call(OnWantedGoAdd, playerid);
			return 1;
		}
		if(clickedid == MDC_Record_Back)
		{
			MDC_Call(OnRecordGoBack, playerid);
			return 1;
		}
		if(clickedid == PayPhoneTD_Exit)
		{
			PayPhoneTD_Hide(playerid);
			CancelSelectTextDraw(playerid);
			return 1;
		}
		if(!player_charList_GUIShown[playerid] && !player_charList_ConfirmShown[playerid] && player_WaitCharTextdraw[playerid] <= 0)
		{
			for(new i = 0; i < 2; i++)
			{
				if(clickedid == chars_g_td_control[i])
				{
					call OnPlayerSelectChar(playerid, i);
					return 1;
				}
			}
			for(new i = 0; i < 3; i++)
			{
				if(clickedid == create_g_td_question_bg[i])
				{
					return CharCreate_ShowAnswerInput(playerid, i);
				}
			}
			if(clickedid == create_g_td_send)
			{
				call OnPlayerSubmitNewChar(playerid);
				return 1;
			}
			if(clickedid == create_g_td_skin)
			{
				return CharCreate_ShowSkinSelect(playerid);
			}
			if(clickedid == create_g_td_age)
			{
				return CharCreate_ShowAgeInput(playerid);
			}
			if(clickedid == create_g_td_name)
			{
				return CharCreate_ShowNameInput(playerid);
			}
			if(clickedid == create_g_td_gender)
			{
				return CharCreate_ShowGenderSelect(playerid);
			}
			if(clickedid == create_g_td_origin)
			{
				return CharCreate_ShowOriginSelect(playerid);
			}
			if(clickedid == create_g_td_help)
			{
				return ShowPlayerCharCreateHelp(playerid);
			}
			if(clickedid == create_g_td_back)
			{
				call OnPlayerLeaveCharCreate(playerid);
				return 1;
			}
			if(clickedid == chars_g_td_play)
			{
				if(PlayerInfo[playerid][pId] != 0)
				{
					// pirma atjungiam, tada prijungsim kita
					call OnPlayerDespawnChar(playerid, 0, player_charList_Selected[playerid] + 1);
					return 1;
				}
				else
				{
					call OnPlayerSpawnChar(playerid, player_charList_Selected[playerid]);
					return 1;
				}
			}
			if(clickedid == chars_g_td_donator)
			{
				DonatorMenu_Main(playerid,player_charList_Selected[playerid]);
				return 1;
			}
			if(clickedid == chars_g_td_info)
			{
				CharListTD_ShowMoreInfo(playerid, player_charList_Selected[playerid]);	
				return 1;		
			}
			if(clickedid == chars_g_td_new)
			{
				CharListTD_Hide(playerid);
				CharCreateTD_Show(playerid);
				return 1;
			}
			if(clickedid == chars_g_td_page_back)
			{
				new 
					curpage = player_charList_Page[playerid];
				if(curpage <= 0) return 1;
				else 
				{
					if(player_charList_Selected[playerid] != -1)
					{
						CharListTD_UnmarkSelected(playerid, player_charList_Selected[playerid]);
						CharListTD_HideControls(playerid);
					}
					CharListTD_ShowSelect(playerid, curpage - 1, false, 2);
					return 1;
				}
			}
			if(clickedid == chars_g_td_page_next)
			{
				new 
					curpage = player_charList_Page[playerid];
				if(((curpage+1)*2) >= GetCharCount(playerid)) return 1;
				else 
				{
					if(player_charList_Selected[playerid] != -1)
					{
						CharListTD_UnmarkSelected(playerid, player_charList_Selected[playerid]);
						CharListTD_HideControls(playerid);
					}

					CharListTD_ShowSelect(playerid, curpage + 1, false, 2);
					return 1;
				}
			}
		}
		for(new i = 0; i < 3; i++)
		{
			if(clickedid == Phone_BottomMenu[i])
			{
				switch(i)
				{
					case 0:
					{
						// atsiliepti
						if(PhoneInfo[playerid][phoneRinging] != INVALID_PLAYER_ID && PhoneInfo[playerid][phoneCallOwner] == 0 && PhoneInfo[playerid][phoneTalkingTo] == INVALID_PLAYER_ID)
						{
							// jam skambina, su niekuo nekalba
							PlayerPhonePickup(playerid);
						}
						else
						{
							if(tmpPhone_InventoryPage[playerid] == PHONE_PAGE_DIAL)
							{
								if(strlen(tmpPassword[playerid]) >= 2)
								{
									// pradeda skambuti kazkam.
									PlayerPhoneCall(playerid, strval(tmpPassword[playerid]));
									return 1;
								}
							}
						}
					}
					case 1:
					{
						// home
						if(tmpPhone_InventoryPage[playerid] != PHONE_PAGE_MAIN && tmpPhone_InventoryPage[playerid] != 0)
						{
							if(PhoneInfo[playerid][phoneRinging] == INVALID_PLAYER_ID && tmpPhone_InventoryPage[playerid] != PHONE_PAGE_CALL && tmpPhone_InventoryPage[playerid] != PHONE_PAGE_CALLING)
							{ // jei jam kazkas skambina, neleidziam
								PhoneTD_Hide(playerid, tmpPhone_InventoryPage[playerid]);
								PhoneTD_Show(playerid, PHONE_PAGE_MAIN);
								return 1;
							}
						}
					}
					case 2:
					{
						// numesti
						if(PhoneInfo[playerid][phoneTalkingTo] != INVALID_PLAYER_ID || PhoneInfo[playerid][phoneRinging] != INVALID_PLAYER_ID)
						{
							PlayerPhoneHangup(playerid);
							return 1;
						}
					}
				}
			}
		}
		for(new i = 0; i < 10; i++)
		{
			if(clickedid == PayPhoneTD_Number[i])
			{
				if(0 <= i <= 9)
				{
					// skaiciai -1
					new int = -1;
					if(0 <= i <= 8) int = i+1;
					else if(i == 9) int = 0;
					if(strlen(tmpPassword[playerid]) <= 8)
					{
						format(tmpPassword[playerid], 9, "%s%d", tmpPassword[playerid], int);
						PlayerTextDrawSetString(playerid, PayPhoneTD_Input[playerid], tmpPassword[playerid]);
						return 1;
					}
				}
			}
		}
		for(new i = 0; i < 12; i++)
		{
			if(clickedid == Phone_Numbers[i])
			{
				if(0 <= i <= 8)
				{
					// skaiciai
					// pridedam i gala + skaiciu
					if(strlen(tmpPassword[playerid]) <= 8)
					{
						format(tmpPassword[playerid], 9, "%s%d", tmpPassword[playerid], i+1);
						PlayerTextDrawSetString(playerid, Phone_NumberLine[playerid], tmpPassword[playerid]);
						return 1;
					}
					// neleidziam daugiau 8 simboliu
				}
				else
				{
					switch(i)
					{
						// simboliai
						case 9:
						{
							// DELETE
							if(strlen(tmpPassword[playerid]) > 0)
							{
								strdel(tmpPassword[playerid], strlen(tmpPassword[playerid])-1, strlen(tmpPassword[playerid])); // 1 delete
								PlayerTextDrawSetString(playerid, Phone_NumberLine[playerid], tmpPassword[playerid]);
								return 1;
							}
						}
						case 10:
						{
							// nulis
							if(strlen(tmpPassword[playerid]) <= 8)
							{
								strcat(tmpPassword[playerid], "0");
								PlayerTextDrawSetString(playerid, Phone_NumberLine[playerid], tmpPassword[playerid]);
								return 1;
							}
						}
						case 11:
						{
							// C raide
							new string[256];
							for(new contact = 0; contact < MAX_PLAYER_CONTACTS; contact++)
							{
								if(PlayerContacts[playerid][contact][contactNumber] != 0)
								{
									format(string, sizeof string, "%s%s\t%d\n", string, PlayerContacts[playerid][contact][contactName], PlayerContacts[playerid][contact][contactNumber]);
								}
								else { break; }
							}
							if(strlen(string))
							{
								ShowPlayerDialog(playerid, DIALOG_PHONE_CALL_CONTACTS, DIALOG_STYLE_TABLIST, "Skambinti kontaktui", string, "Tæsti", "Atðaukti");
							}
							else SendWarning(playerid, "Neturite kontaktø.");
						}
					}
				}
			}
		}
		for(new i = 0; i < 4; i++)
		{
			if(clickedid == Phone_Menu[i])
			{
				switch(i)
				{
					case 0:
					{
						// DIAL
						if(PhoneInfo[playerid][phoneDisabled] > 0) return InfoBox(playerid, IB_PHONE_OFF);
						PhoneTD_Hide(playerid, PHONE_PAGE_MAIN);
						PhoneTD_Show(playerid, PHONE_PAGE_DIAL);
						format(tmpPassword[playerid], 1, "");
						PlayerTextDrawSetString(playerid, Phone_NumberLine[playerid], " ");
						return 1;
					}
					case 1:
					{
						// SMS
						if(PhoneInfo[playerid][phoneDisabled] > 0) return InfoBox(playerid, IB_PHONE_OFF);
						ShowPlayerPhoneSMS(playerid);
					}
					case 2:
					{
						// Contacts
						if(PhoneInfo[playerid][phoneDisabled] > 0) return InfoBox(playerid, IB_PHONE_OFF);
						ShowPlayerPhoneContacts(playerid);
					}
					case 3:
					{
						// Options
						ShowPlayerPhoneOptions(playerid);
					}
				}
				return 1;
			}
		}
		if(clickedid == DMV_StartBg)
		{
			GetESCType(playerid) = ESC_TYPE_NONE;
			DMV_Hide(playerid);
			CancelSelectTextDraw(playerid);
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
			{
				new type = tmpType_Salon[playerid]-1;
				tmpTexture_MarkStart_CP[playerid] = 0;
				tmpEditing_Component_DMV[playerid] = 1;
				if(GetPlayerMoney(playerid) < DEFAULT_DMV_PRICE)
				{
					RemovePlayerFromVehicle(playerid);
					SetVehicleToRespawn(GetPlayerVehicleID(playerid));
					return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_DMV_PRICE);
				}
				SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_DMV, DmvCheckpoints[type][0][0], DmvCheckpoints[type][0][1], DmvCheckpoints[type][0][2], 2.3);
				SendFormat(playerid, 0xFFC1C1FF, "Linkime sëkmës laikant {DF7878}praktikos egzaminà {FFC1C1}(naudokite /maxspeed 60).");

			}
			return 1;
		}
		if(clickedid == ATM_Action[0])
		{
			// likutis
			new string[256];
			format(string, sizeof string, "{FFFFFF}Jûsø sàskaitoje dabar yra:\n{%s}$%d\n ", PlayerInfo[playerid][pBank] == 0 ? ("FCA800") : (PlayerInfo[playerid][pBank] > 0 ? ("37A51F") : ("B72323")), PlayerInfo[playerid][pBank]);
			ShowPlayerDialog(playerid, DIALOG_ATM_MONEY, DIALOG_STYLE_MSGBOX, "Bankomatas", string, "Gráþti", "");
		}
		if(clickedid == ATM_Action[1])
		{
			// nusiimti
			//if(PlayerInfo[playerid][pSavings] > 0)
			//{
			//	MsgError(playerid, "BANKAS", "Jûs kaupiate pinigus indelyje, todël banku negalite naudotis.");
			//	return 1;
			//}
			ShowPlayerDialog(playerid, DIALOG_ATM_WITHDRAW, DIALOG_STYLE_INPUT, "Bankomatas", "{FFFFFF}Áveskite sumà pinigø, kurià norite pasiimti ið saskaitos.", "Nusiimti", "Atðaukti");
		}
		if(clickedid == ATM_Action[2])
		{
			// padeti
			//if(PlayerInfo[playerid][pSavings] > 0)
			//{
			//	MsgError(playerid, "BANKAS", "Jûs kaupiate pinigus indelyje, todël banku negalite naudotis.");
			//	return 1;
			//}
			new atmid = tmpSelected[playerid];
			if(ATMs[atmid][atmCanDeposit] == 1)
			{
				ShowPlayerDialog(playerid, DIALOG_ATM_DEPOSIT, DIALOG_STYLE_INPUT, "Bankomatas", "{FFFFFF}Áveskite sumà pinigø, kurià norite padëti á sàskaità.", "Padëti", "Atðaukti");
			}
		}
		if(clickedid == ATM_Action[3])
		{
			// baigti
			HidePlayerATM(playerid);
			CancelSelectTextDraw(playerid);
		}
		if(clickedid == Furniture_BuyBase)
		{
			if(GetPlayerMoney(playerid) < FurnitureList[tmpSelected[playerid]][furnitureListPrice]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, FurnitureList[tmpSelected[playerid]][furnitureListPrice]);
			if( (tmpType_Salon[playerid] == 1 && GetClosestHouseInCoords(PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], playerid, 70.0, CHECK_TYPE_INSIDE) == tmpIter[playerid] && HaveHouseKey(playerid, tmpIter[playerid], "P_FurnitureControl")) ||
				(tmpType_Salon[playerid] == 2 && GetClosestBusinessInCoords(PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], playerid, 70.0, CHECK_TYPE_INSIDE) == tmpIter[playerid] && HaveBusinessKey(playerid, tmpIter[playerid], "P_FurnitureControl")) || 
				(tmpType_Salon[playerid] == 3 && GetClosestGarageInCoords(PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], playerid, 70.0, CHECK_TYPE_INSIDE) == tmpIter[playerid] && GarageInfo[tmpIter[playerid]][gOwner] == PlayerInfo[playerid][pId]))
			{
				DestroyFurniturePreview(playerid, false);
				new ownerid;// = (tmpType_Salon[playerid] == 1 ? HouseInfo[tmpIter[playerid]][hId] : BusinessInfo[tmpIter[playerid]][bId]);
				switch(tmpType_Salon[playerid])
				{
					case 1: ownerid = HouseInfo[tmpIter[playerid]][hId];
					case 2: ownerid = BusinessInfo[tmpIter[playerid]][bId];
					case 3: ownerid = GarageInfo[tmpIter[playerid]][gId];
				}
				BuyFurniture(playerid, tmpType_Salon[playerid], ownerid, FurnitureList[tmpSelected[playerid]][furnitureListPrice], FurnitureList[tmpSelected[playerid]][furnitureListModel], FurnitureList[tmpSelected[playerid]][furnitureListName], FurnitureListNames[FurnitureList[tmpSelected[playerid]][furnitureListCategory]], PlayerInfo[playerid][pPosX]+2.0, PlayerInfo[playerid][pPosY]+2.0, PlayerInfo[playerid][pPosZ]+1.0, 0.0, 0.0, 0.0);
				GivePlayerMoney(playerid, -FurnitureList[tmpSelected[playerid]][furnitureListPrice]);
			}
			return 1;
		}
		if(clickedid == Furniture_DownBase)
		{
			new Float:x, Float:y, Float:z;
			GetDynamicObjectPos(tmpPage_Object[playerid], x, y, z),
			FurniturePreview_RY[playerid] -= 30.0,
			MoveDynamicObject(tmpPage_Object[playerid], x, y, z, 10, FurniturePreview_RX[playerid], FurniturePreview_RY[playerid], FurniturePreview_RZ[playerid]);
			return 1;
		}
		if(clickedid == Furniture_UpBase)
		{
			new Float:x, Float:y, Float:z;
			GetDynamicObjectPos(tmpPage_Object[playerid], x, y, z),
			FurniturePreview_RY[playerid] += 30.0,
			MoveDynamicObject(tmpPage_Object[playerid], x, y, z, 10, FurniturePreview_RX[playerid], FurniturePreview_RY[playerid], FurniturePreview_RZ[playerid]);
			return 1;
		}
		if(clickedid == Furniture_LeftBase)
		{
			new Float:x, Float:y, Float:z;
			GetDynamicObjectPos(tmpPage_Object[playerid], x, y, z),
			FurniturePreview_RZ[playerid] -= 30.0,
			MoveDynamicObject(tmpPage_Object[playerid], x, y, z, 10, FurniturePreview_RX[playerid], FurniturePreview_RY[playerid], FurniturePreview_RZ[playerid]);
			return 1;
		}
		if(clickedid == Furniture_RightBase)
		{
			new Float:x, Float:y, Float:z;
			GetDynamicObjectPos(tmpPage_Object[playerid], x, y, z),
			FurniturePreview_RZ[playerid] += 30.0,
			MoveDynamicObject(tmpPage_Object[playerid], x, y, z, 10, FurniturePreview_RX[playerid], FurniturePreview_RY[playerid], FurniturePreview_RZ[playerid]);
			return 1;
		}
		if(clickedid == Furniture_CloseBase)
		{
			DestroyFurniturePreview(playerid);
			return 1;
		}
		if(clickedid == vShop_NextBase)
		{
			if(tmpArray[playerid][(tmpPage_Object[playerid]+1)*3-3] != -1)
			{
				tmpPage_Object[playerid]++;
				if(tmpSelected[playerid] != -1)
				{
					PlayerTextDrawColor(playerid, vShop_ModelBase[playerid][tmpSelected[playerid]], 4473343);
					PlayerTextDrawHide(playerid, vShop_BuyBase[playerid]);
					PlayerTextDrawHide(playerid, vShop_BuyText[playerid]);
					PlayerTextDrawColor(playerid, vShop_BuyBase[playerid], 3815326);
					PlayerTextDrawColor(playerid, vShop_BuyText[playerid], -211);
					PlayerTextDrawShow(playerid, vShop_BuyBase[playerid]);
					PlayerTextDrawShow(playerid, vShop_BuyText[playerid]);
					PlayerTextDrawSetSelectable(playerid, vShop_BuyBase[playerid], 0);
				}
				ShowVehicleShop(playerid, false,
					(tmpArray[playerid][tmpPage_Object[playerid]*3-3] != -1 ? SellVehicleData[tmpArray[playerid][tmpPage_Object[playerid]*3-3]][sellvehicleModel] : 0),
					(tmpArray[playerid][tmpPage_Object[playerid]*3-2] != -1 ? SellVehicleData[tmpArray[playerid][tmpPage_Object[playerid]*3-2]][sellvehicleModel] : 0),
					(tmpArray[playerid][tmpPage_Object[playerid]*3-1] != -1 ? SellVehicleData[tmpArray[playerid][tmpPage_Object[playerid]*3-1]][sellvehicleModel] : 0));
			}
			return 1;
		}

		if(clickedid == vShop_PrevBase)
		{
			if(tmpPage_Object[playerid] > 1)
			{
				tmpPage_Object[playerid]--;
				if(tmpSelected[playerid] != -1)
				{
					PlayerTextDrawColor(playerid, vShop_ModelBase[playerid][tmpSelected[playerid]], 4473343);
					PlayerTextDrawHide(playerid, vShop_BuyBase[playerid]);
					PlayerTextDrawHide(playerid, vShop_BuyText[playerid]);
					PlayerTextDrawColor(playerid, vShop_BuyBase[playerid], 3815326);
					PlayerTextDrawColor(playerid, vShop_BuyText[playerid], -211);
					PlayerTextDrawShow(playerid, vShop_BuyBase[playerid]);
					PlayerTextDrawShow(playerid, vShop_BuyText[playerid]);
					PlayerTextDrawSetSelectable(playerid, vShop_BuyBase[playerid], 0);
				}
				ShowVehicleShop(playerid, false,
					(tmpArray[playerid][tmpPage_Object[playerid]*3-3] != -1 ? SellVehicleData[tmpArray[playerid][tmpPage_Object[playerid]*3-3]][sellvehicleModel] : 0),
					(tmpArray[playerid][tmpPage_Object[playerid]*3-2] != -1 ? SellVehicleData[tmpArray[playerid][tmpPage_Object[playerid]*3-2]][sellvehicleModel] : 0),
					(tmpArray[playerid][tmpPage_Object[playerid]*3-1] != -1 ? SellVehicleData[tmpArray[playerid][tmpPage_Object[playerid]*3-1]][sellvehicleModel] : 0));
			}
			return 1;
		}
		if(clickedid == MechTune_CancelBase)
		{
			// uzdaro
			if(tmpSelected[playerid] != 0)
			{
				PlayerTextDrawColor(playerid, MechTune_BasePart[playerid][tmpSelected[playerid]-1], 65);
			}
			HidePlayerMechTune(playerid);
			GetESCType(playerid) = ESC_TYPE_NONE;
			tmpSelected[playerid] = 0;
		}
		if(clickedid == MechTune_BuyBase)
		{
			if(tmpSelected[playerid] != 0)
			{
				PlayerTextDrawColor(playerid, MechTune_BasePart[playerid][tmpSelected[playerid]-1], 65);
			}
			if(!IsPlayerInAnyVehicle(playerid) || tmpSelected[playerid] == 0)
			{
				HidePlayerMechTune(playerid);
				GetESCType(playerid) = ESC_TYPE_NONE;
				return 1;
			}
			// perka mech dali
			switch(tmpSelected[playerid]-1)
			{
				case 0: if(GetPlayerMoney(playerid) < MECHANICS_SHADOW_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_SHADOW_PRICE);
				case 1: if(GetPlayerMoney(playerid) < MECHANICS_MEGA_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_MEGA_PRICE);
				case 2: if(GetPlayerMoney(playerid) < MECHANICS_RIMSHINE_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_RIMSHINE_PRICE);
				case 3: if(GetPlayerMoney(playerid) < MECHANICS_WIRES_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_WIRES_PRICE);
				case 4: if(GetPlayerMoney(playerid) < MECHANICS_CLASSIC_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_CLASSIC_PRICE);
				case 5: if(GetPlayerMoney(playerid) < MECHANICS_TWIST_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_TWIST_PRICE);
				case 6: if(GetPlayerMoney(playerid) < MECHANICS_CUTTER_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_CUTTER_PRICE);
				case 7: if(GetPlayerMoney(playerid) < MECHANICS_SWITCH_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_SWITCH_PRICE);
				case 8: if(GetPlayerMoney(playerid) < MECHANICS_GROVE_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_GROVE_PRICE);
				case 9: if(GetPlayerMoney(playerid) < MECHANICS_IMPORT_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_IMPORT_PRICE);
				case 10: if(GetPlayerMoney(playerid) < MECHANICS_DOLLAR_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_DOLLAR_PRICE);
				case 11: if(GetPlayerMoney(playerid) < MECHANICS_TRANCE_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_TRANCE_PRICE);
				case 12: if(GetPlayerMoney(playerid) < MECHANICS_ATOMIC_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_ATOMIC_PRICE);
				case 13: if(GetPlayerMoney(playerid) < MECHANICS_AHAB_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_AHAB_PRICE);
				case 14: if(GetPlayerMoney(playerid) < MECHANICS_VIRTUAL_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_VIRTUAL_PRICE);
				case 15: if(GetPlayerMoney(playerid) < MECHANICS_ACCESS_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_ACCESS_PRICE);
				case 16: if(GetPlayerMoney(playerid) < MECHANICS_OFFROAD_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_OFFROAD_PRICE);
				case 17: if(GetPlayerMoney(playerid) < MECHANICS_HIDRAULICS_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, MECHANICS_HIDRAULICS_PRICE);
			}
			new vehicleid = GetPlayerVehicleID(playerid);
			PlayerInfo[playerid][pJobVehicle] = vehicleid;
			PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TAKE_WHEELS;
			PlayerInfo[playerid][pJobActionTime] = 30;
			PlayerInfo[playerid][pJobVehicle] = vehicleid;
			PlayerInfo[playerid][pJobActionIndex] = 0;
			PlayerInfo[playerid][pJobCurrentType] = 4;
			PlayerInfo[playerid][pJobDestination] = 0;
			HidePlayerMechTune(playerid);
			JobGUI_Show(playerid);
			new string[126];
			format(string, sizeof string, "~n~~n~TVARKOMA TR. PRIEMONE: %s", strtoupper(GetModelName(GetVehicleModel(vehicleid))));
			JobGUI_Update(playerid, .bottext = string);
			new spot = PlayerInfo[playerid][pJobDestination] = random(sizeof MechanicPartSpots);
			SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_WHEELS, MechanicPartSpots[spot][0], MechanicPartSpots[spot][1], MechanicPartSpots[spot][2], 2.3);
			return 1;
		}
	}
	return 1;
}

// public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
// forward OnPlayerClickPTextDraw(playerid, PlayerText:playertextid);
// public OnPlayerClickPTextDraw(playerid, PlayerText:playertextid)

hook OnPlayerClickPlayerTD(playerid, PlayerText:playertextid)
{

	#if SERVER_DEBUG_LEVEL >= 2
		printf("[debug] OnPlayerClickPlayerTextDraw(%s, %d)", GetPlayerNameEx(playerid), _:playertextid);
	#endif
	for(new td = 0; td < MAX_WANTED_PER_PAGE; td++)
	{
		if(playertextid == MDC_Wanted_Name[playerid][td])
		{
			MDC_Call(OnWantedPlayerSelected, playerid, td);
			return 1;
		}
	}

	static
		last_V_Get[MAX_PLAYERS];

	for(new td = 0; td < 4; td++)
	{
		if(playertextid == VL_FindBox[playerid][td])
		{
			new vehiclesql = tmpArray[playerid][(tmpPage_Object[playerid]*4)-(4-td)];
			foreach(new vehicleid : Vehicle)
			{
				if(VehicleInfo[vehicleid][vId] == vehiclesql && !IsVehicleServer(vehicleid))
				{
					if(VehicleInfo[vehicleid][vLock] >= DEFAULT_LOCK_NEEDED_TO_FIND)
					{
						new Float:x, Float:y, Float:z;
						GetVehiclePos(vehicleid, x, y, z);
						SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_VEHICLE, x, y, z);
						SendFormat(playerid, 0xD9D9D9FF, "Paþymëjote tr. priemonæ þemëlapyje.");
					}
					return 1;
				}
			}
			return 1;
		}
		if(playertextid == VL_SpawnBox[playerid][td])
		{
			if(gettime() - last_V_Get[playerid] <= 2)
			{
				SendWarning(playerid, "Palaukite!");
				return 1;
			}

			new vehiclesql = tmpArray[playerid][(tmpPage_Object[playerid]*4)-(4-td)];
			if(	(PlayerInfo[playerid][pDonator] == DONATOR_NONE && PlayerInfo[playerid][pCarsSpawned] < MAX_SPAWNED_CARS) || 
				(PlayerInfo[playerid][pDonator] == DONATOR_BRONZE && PlayerInfo[playerid][pCarsSpawned] < MAX_SPAWNED_CARS_BRONZE) || 
				(PlayerInfo[playerid][pDonator] == DONATOR_SILVER && PlayerInfo[playerid][pCarsSpawned] < MAX_SPAWNED_CARS_SILVER) ||
				(PlayerInfo[playerid][pDonator] == DONATOR_GOLD && PlayerInfo[playerid][pCarsSpawned] < MAX_SPAWNED_CARS_GOLD)
			)
			{
				new string[256];
				mysql_format(chandler, string, sizeof string, "SELECT \
					vdb.*, \
				    COUNT(var.id) AS CrimesCount \
				FROM vehicles_data vdb \
				LEFT JOIN vehicles_arrested var ON vdb.id = var.VehicleId AND var.Valid = 1 \
				WHERE vdb.id = '%d' GROUP BY vdb.id", vehiclesql);
				//mysql_format(chandler, string, sizeof string, "SELECT *,COUNT FROM `vehicles_data` WHERE id = '%d'", tmpArray[playerid][(tmpPage_Object[playerid]*4)-(4-td)]);
				mysql_tquery(chandler, string, "VehicleGet", "dd", playerid, td);
			}
			else
			{
				SendError(playerid, "Negalite iðparkuoti daugiau transporto priemoniø.");
			}

			last_V_Get[playerid] = gettime();
			return 1;
		}
	}
	for(new c = 0; c < sizeof PrisonCells; c++)
	{
		if(playertextid == MDC_Prison_CellStatus[playerid][c])
		{
			MDC_Call(OnCellSelected, playerid, c);
			return 1;
		}
	}
	if(playertextid == MDC_WantedAddEdit_Name[playerid])
	{
		MDC_Call(OnWantedInputNameSelected, playerid, MDC__Player_Data[playerid][pMdcActivePage]);
		return 1;
	}
	if(playertextid == MDC_Lookup_Action1[playerid])
	{
		MDC_Call(OnLookupActionSelected, playerid, 1);
		return 1;
	}
	if(playertextid == MDC_Lookup_Action2[playerid])
	{
		MDC_Call(OnLookupActionSelected, playerid, 2);
		return 1;
	}
	if(playertextid == MDC_Lookup_Action3[playerid])
	{
		MDC_Call(OnLookupActionSelected, playerid, 3);
		return 1;
	}
	for(new i = 0; i < MAX_RECORDS_PER_PAGE; i++)
	{
		if(playertextid == MDC_Record_Name[playerid][i])
		{
			MDC_Call(OnRecordSelected, playerid, i);
			return 1;
		}
	}
	if(playertextid == MDC_WantedAddEdit_Action1[playerid])
	{
		if(MDC__Player_Data[playerid][pMdcActivePage] == MDC_WANTED_EDIT)
		{
			MDC_Call(OnWantedEditSelected, playerid, MDC__Player_Data[playerid][pMdcWantedSelected]);
		}
		else
		{
			MDC_Call(OnWantedAddSelected, playerid, MDC__Player_Data[playerid][pMdcWantedSelected]);
		}
		return 1;
	}
	if(playertextid == MDC_WantedAddEdit_Action2[playerid])
	{
		if(MDC__Player_Data[playerid][pMdcActivePage] == MDC_WANTED_EDIT)
		{
			// istrinti
			MDC_Call(OnWantedDeleteSelected, playerid, MDC__Player_Data[playerid][pMdcWantedSelected]);
		}
		else
		{
			// isvalyti
			MDC_Call(OnWantedClearSelected, playerid);
		}
		return 1;
	}
	if(playertextid == MDC_WantedAddEdit_Looks[playerid])
	{
		MDC_Call(OnWantedInputLooksSelected, playerid, MDC__Player_Data[playerid][pMdcActivePage]);
		return 1;
	}
	if(playertextid == MDC_WantedAddEdit_Reason[playerid])
	{
		MDC_Call(OnWantedInputReasonSelected, playerid, MDC__Player_Data[playerid][pMdcActivePage]);
		return 1;
	}
	if(playertextid == MDC_Wanted_Back[playerid])
	{
		MDC_Call(OnWantedPageBack, playerid, MDC__Player_Data[playerid][pMdcWantedPage]);
		return 1;
	}
	if(playertextid == MDC_Wanted_Next[playerid])
	{
		MDC_Call(OnWantedPageNext, playerid, MDC__Player_Data[playerid][pMdcWantedPage]);
		return 1;
	}
	if(playertextid == MDC_WantedAddEdit_Seen[playerid])
	{
		MDC_Call(OnWantedInputSeenSelected, playerid, MDC__Player_Data[playerid][pMdcActivePage]);
		return 1;
	}
	if(playertextid == vShop_BuyBase[playerid])
	{
		if(tmpSelected[playerid] != -1)
		{
			new price = SellVehicleData[tmpArray[playerid][tmpPage_Object[playerid]*3-(3-tmpSelected[playerid])]][sellvehiclePrice];
			if(GetPlayerMoney(playerid) < price) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, price);
			new donator_requirement = SellVehicleData[tmpArray[playerid][tmpPage_Object[playerid]*3-(3-tmpSelected[playerid])]][sellvehicleDonator];
			if(PlayerInfo[playerid][pDonator] < donator_requirement) return SendWarning(playerid, "Ðiai tr. priemonei reikalingas %d remëjo lygis.", donator_requirement);
			new model = SellVehicleData[tmpArray[playerid][tmpPage_Object[playerid]*3-(3-tmpSelected[playerid])]][sellvehicleModel];
			if(PlayerInfo[playerid][pHaveCars] >= MAX_OWNED_VEHICLES) return SendWarning(playerid, "Jau turite "#MAX_OWNED_VEHICLES" tr. priemoniø.");
			BuyVehicle(playerid, model, GetModelName(model), price, VehicleShopColors[random(sizeof VehicleShopColors)], VehicleShopColors[random(sizeof VehicleShopColors)], 0, tmpType_Salon[playerid], donator_requirement);
			GivePlayerMoney(playerid, -price);
		}
		return 1;
	}
	if(playertextid == VL_NextBase[playerid])
	{
		new newpage = tmpPage_Object[playerid]+1;
		if(tmpArray[playerid][((newpage*4)-4)] != 0)
		{
			tmpPage_Object[playerid] = newpage;
			ShowVehicleList(playerid, tmpArray[playerid][(newpage*4)-4], tmpArray[playerid][(newpage*4)-3], tmpArray[playerid][(newpage*4)-2], tmpArray[playerid][(newpage*4)-1]);
		}
		return 1;
	}
	if(playertextid == VL_PrevBase[playerid])
	{
		new backpage = tmpPage_Object[playerid]-1;
		if(backpage != 0)
		{
			tmpPage_Object[playerid] = backpage;
			ShowVehicleList(playerid, tmpArray[playerid][(backpage*4)-4], tmpArray[playerid][(backpage*4)-3], tmpArray[playerid][(backpage*4)-2], tmpArray[playerid][(backpage*4)-1]);
		}
		return 1;
	}
	for(new i = 0; i < 3; i++)
	{
		if(playertextid == vShop_ModelBase[playerid][i])
		{
			if(tmpSelected[playerid] != i)
			{
				if(tmpSelected[playerid] != -1)
				{
					PlayerTextDrawHide(playerid, vShop_ModelBase[playerid][tmpSelected[playerid]]);
					PlayerTextDrawColor(playerid, vShop_ModelBase[playerid][tmpSelected[playerid]], 4473343);
					PlayerTextDrawShow(playerid, vShop_ModelBase[playerid][tmpSelected[playerid]]);
				}
				tmpSelected[playerid] = i;
				PlayerTextDrawHide(playerid, vShop_ModelBase[playerid][i]);
				PlayerTextDrawHide(playerid, vShop_BuyBase[playerid]);
				PlayerTextDrawHide(playerid, vShop_BuyText[playerid]);

				PlayerTextDrawColor(playerid, vShop_BuyBase[playerid], 0x006560FF);
				PlayerTextDrawColor(playerid, vShop_ModelBase[playerid][i], 0x006560FF);
				PlayerTextDrawColor(playerid, vShop_BuyText[playerid], -1);
				PlayerTextDrawSetSelectable(playerid, vShop_BuyBase[playerid], 1);

				PlayerTextDrawShow(playerid, vShop_ModelBase[playerid][i]);
				PlayerTextDrawShow(playerid, vShop_BuyBase[playerid]);
				PlayerTextDrawShow(playerid, vShop_BuyText[playerid]);
				return 1;
			}
		}
	}
	if(playertextid == PayPhoneTD_Action[playerid][0])
	{
		// skambinti
		if(PhoneInfo[playerid][phoneTalkingTo] == INVALID_PLAYER_ID)
		{
			if(strlen(tmpPassword[playerid]))
			{
				new number = strval(tmpPassword[playerid]);
				if(number != PlayerInfo[playerid][pPhoneNumber] && number != GetPayPhoneNumber(PhoneInfo[playerid][phoneRingType]-1))
				{
					PlayerPayPhoneCall(playerid, PhoneInfo[playerid][phoneRingType], number);
				}
			}
		}
		return 1;
	}
	if(playertextid == PayPhoneTD_Action[playerid][1])
	{
		// istrinti
		if(PhoneInfo[playerid][phoneTalkingTo] == INVALID_PLAYER_ID)
		{
			format(tmpPassword[playerid], 1, "");
			PlayerTextDrawSetString(playerid, PayPhoneTD_Input[playerid], "_");
		}
		return 1;
	}
	if(playertextid == MDC_Lookup_SearchText[playerid])
	{
		MDC_Call(OnSearchTextPress, playerid, MDC__Player_Data[playerid][pMdcActivePage]);
		return 1;
	}
	for(new i = 0; i < 18; i++)
	{
		if(playertextid == MechTune_BasePart[playerid][i])
		{
			if(tmpSelected[playerid] != 0)
			{
				PlayerTextDrawHide(playerid, MechTune_BasePart[playerid][tmpSelected[playerid]-1]);
				PlayerTextDrawColor(playerid, MechTune_BasePart[playerid][tmpSelected[playerid]-1], 65);
				PlayerTextDrawShow(playerid, MechTune_BasePart[playerid][tmpSelected[playerid]-1]);
			}
			tmpSelected[playerid] = i+1;
			PlayerTextDrawHide(playerid, MechTune_BasePart[playerid][i]);
			PlayerTextDrawColor(playerid, MechTune_BasePart[playerid][i], 0xFFFFFF99);
			PlayerTextDrawShow(playerid, MechTune_BasePart[playerid][i]);
			return 1;
		}
	}
	for(new i = 0, limit = MDC__Textdraw_Data[mdcButtonsCount]; i < limit; i++)
	{
		if(playertextid == MDC_ButtonBox[playerid][i])
		{
			MDC_Call(OnMenuButtonPress, playerid, MDC__Buttons_Data[i][mdcButtonActionId]);
			return 1;
		}
	}
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////
	// mSelection.inc
	if(GetPVarInt(playerid, "mS_list_active") == 0 || (GetTickCount()-GetPVarInt(playerid, "mS_list_time")) < 200 /* Disable instant selection */) return CallLocalFunction("MP_OPCPTD", "ii", playerid, _:playertextid);
	new curpage = GetPVarInt(playerid, "mS_list_page");
	// Handle: cancel button
	if(playertextid == gCancelButtonTextDrawId[playerid]) {
		new listID = mS_GetPlayerCurrentListID(playerid);
		if(listID == mS_CUSTOM_LISTID)
		{
			new extraid = GetPVarInt(playerid, "mS_custom_extraid");
			HideModelSelectionMenu(playerid);
			CallLocalFunction("OnPlayerModelSelectionEx", "dddd", playerid, 0, extraid, -1);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		else
		{
			HideModelSelectionMenu(playerid);
			CallLocalFunction("OnPlayerModelSelection", "dddd", playerid, 0, listID, -1);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}
	// Handle: next button
	if(playertextid == gNextButtonTextDrawId[playerid]) {
		new listID = mS_GetPlayerCurrentListID(playerid);
		if(listID == mS_CUSTOM_LISTID)
		{
			if(curpage < (mS_GetNumberOfPagesEx(playerid) - 1)) {
				SetPVarInt(playerid, "mS_list_page", curpage + 1);
				mS_ShowPlayerMPs(playerid);
				mS_UpdatePageTextDraw(playerid);
				PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
			} else {
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			}
		}
		else
		{
			if(curpage < (mS_GetNumberOfPages(listID) - 1)) {
				SetPVarInt(playerid, "mS_list_page", curpage + 1);
				mS_ShowPlayerMPs(playerid);
				mS_UpdatePageTextDraw(playerid);
				PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
			} else {
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			}
		}
		return 1;
	}
	// Handle: previous button
	if(playertextid == gPrevButtonTextDrawId[playerid]) {
	    if(curpage > 0) {
	    	SetPVarInt(playerid, "mS_list_page", curpage - 1);
	    	mS_ShowPlayerMPs(playerid);
	    	mS_UpdatePageTextDraw(playerid);
	    	PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
		} else {
		    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}
	// Search in the array of textdraws used for the items
	new x=0;
	while(x != mS_SELECTION_ITEMS) {
	    if(playertextid == gSelectionItems[playerid][x]) {
			new listID = mS_GetPlayerCurrentListID(playerid);
			if(listID == mS_CUSTOM_LISTID)
			{
				PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
				new item_id = gSelectionItemsTag[playerid][x];
				new extraid = GetPVarInt(playerid, "mS_custom_extraid");
				HideModelSelectionMenu(playerid);
				CallLocalFunction("OnPlayerModelSelectionEx", "dddd", playerid, 1, extraid, item_id);
				return 1;
			}
			else
			{
				PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
				new item_id = gSelectionItemsTag[playerid][x];
				HideModelSelectionMenu(playerid);
				CallLocalFunction("OnPlayerModelSelection", "dddd", playerid, 1, listID, item_id);
				return 1;
			}
		}
		x++;
	}
	return 1;
}


forward VehicleGet(playerid, textdraw_index);
public VehicleGet(playerid, textdraw_index)
{
	if(!cache_num_rows()) return 1;
	new
		spawned,
		sql_id,
		arrested;
	

	cache_get_value_name_int(0, "id", sql_id);
	cache_get_value_name_int(0, "SpawnedId", spawned);
	cache_get_value_name_int(0, "CrimesCount", arrested);
	
	if(arrested > 0)
	{
		return SendWarning(playerid, "Ði tr. priemonë yra areðtuota.");
	}
	if(spawned != 0)
	{
		return SendWarning(playerid, "Transporto priemonë jau iðparkuota.");
	}

	new
		vehicleid = INVALID_VEHICLE_ID,
		Float:x,
		Float:y,
		Float:z,
		Float:a,
		color1,
		color2,
		model;

	cache_get_value_name_float(0, "X", x),
	cache_get_value_name_float(0, "Y", y),
	cache_get_value_name_float(0, "Z", z),
	cache_get_value_name_float(0, "A", a),
	cache_get_value_name_int(0, "Color1", color1),
	cache_get_value_name_int(0, "Color2", color2),
	cache_get_value_name_int(0, "Model", model);

	if((vehicleid = CreateVehicle(model, x, y, z, a, color1, color2, -1, 0)) != INVALID_VEHICLE_ID)
	{
		// Iskart updatiname data
		mysql_query(chandler, va_return("UPDATE `vehicles_data` SET SpawnedId = '%d' WHERE id = '%d'", vehicleid, sql_id), false);

		PlayerTextDrawHide(playerid, VL_FindBox[playerid][textdraw_index]);
		PlayerTextDrawHide(playerid, VL_SpawnBox[playerid][textdraw_index]);
		PlayerTextDrawHide(playerid, VL_FindText[playerid][textdraw_index]);
		PlayerTextDrawHide(playerid, VL_SpawnBox[playerid][textdraw_index]);
		PlayerTextDrawColor(playerid, VL_SpawnBox[playerid][textdraw_index], VL_DENIED_COLOR);
		PlayerTextDrawSetSelectable(playerid, VL_SpawnBox[playerid][textdraw_index], false);
		cache_get_value_name_int(0, "Lock", VehicleInfo[vehicleid][vLock]);
		if(VehicleInfo[vehicleid][vLock] >= DEFAULT_LOCK_NEEDED_TO_FIND)
		{
			PlayerTextDrawColor(playerid, VL_FindBox[playerid][textdraw_index], VL_SUCCESS_COLOR);
			PlayerTextDrawSetSelectable(playerid, VL_FindBox[playerid][textdraw_index], 1);
		}
		else
		{
			PlayerTextDrawColor(playerid, VL_FindBox[playerid][textdraw_index], VL_DENIED_COLOR);
			PlayerTextDrawSetSelectable(playerid, VL_FindBox[playerid][textdraw_index], 0);
		}

		PlayerTextDrawShow(playerid, VL_FindText[playerid][textdraw_index]);
		PlayerTextDrawShow(playerid, VL_SpawnBox[playerid][textdraw_index]);
		PlayerTextDrawShow(playerid, VL_FindBox[playerid][textdraw_index]);
		PlayerTextDrawShow(playerid, VL_SpawnText[playerid][textdraw_index]);
		cache_get_value_name_int(0, "id", VehicleInfo[vehicleid][vId]);
		cache_get_value_name_int(0, "Dealer", VehicleInfo[vehicleid][vDealer]);
		cache_get_value_name_int(0, "Ticket", VehicleInfo[vehicleid][vTicket]);
		new numbers[86], panels, doors, lights, tires, health;
		cache_get_value_name(0, "Numbers", numbers, 31);
		format(VehicleInfo[vehicleid][vNumbers], 10, numbers);

		cache_get_value_name(0, "Damage", numbers, 50);
		sscanf(numbers, "p</>ddddd", panels, doors, lights, tires, health);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		SetVehicleHealth(vehicleid, float(health));

		SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vNumbers]);

		cache_get_value_name_int(0, "Locked", VehicleInfo[vehicleid][vLocked]);

		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF);


		cache_get_value_name_int(0, "Lock", VehicleInfo[vehicleid][vLock]);
		cache_get_value_name_float(0, "Fuel", VehicleInfo[vehicleid][vFuel]);
		cache_get_value_name_float(0, "KM", VehicleInfo[vehicleid][vKM]);
		cache_get_value_name_int(0, "Insurance", VehicleInfo[vehicleid][vInsurance]);
		cache_get_value_name_float(0, "EngineStatus", VehicleInfo[vehicleid][vEngineStatus]);
		cache_get_value_name_float(0, "BatteryStatus", VehicleInfo[vehicleid][vBatteryStatus]);


		cache_get_value_name_int(0, "Price", VehicleInfo[vehicleid][vPrice]);
		new vw, int;
		cache_get_value_name_int(0, "VW", vw);
		cache_get_value_name_int(0, "Interior", int);
		LinkVehicleToInterior(vehicleid, int);
		SetVehicleVirtualWorld(vehicleid, vw);
		VehicleInfo[vehicleid][vSyncX] = x;
		VehicleInfo[vehicleid][vSyncY] = y;
		VehicleInfo[vehicleid][vSyncZ] = z;
		VehicleInfo[vehicleid][vSyncA] = a;
		cache_get_value_name_int(0, "Owner", VehicleInfo[vehicleid][vOwner]);
		VehicleInfo[vehicleid][vSpawnedBy] = PlayerInfo[playerid][pId];

		LoadVehicleInventory(vehicleid);

		for(new i = 0; i <= 13; i++)
		{
			new component_string[24],
				component_result;
			format(component_string, sizeof component_string, "Component%d", i);
			cache_get_value_name_int(0, component_string, component_result);
			if(1000 <= component_result <= 1193)
			{
				AddVehicleComponent(vehicleid, component_result);
			}
		}

		PlayerInfo[playerid][pCarsSpawned]++;
		SendFormat(playerid, 0xD9D9D9FF, "Tr. priemonë {FFFFFF}%s{D9D9D9} (%d) sëkmingai iðparkuota.", GetModelName(model), VehicleInfo[vehicleid][vId]);

		log_init(true);
		log_set_table("logs_vehicles");
		log_set_keys("`PlayerId`,`PlayerName`,`VehicleId`,`VehicleName`,`ExtraString`,`ActionText`");
		log_set_values("'%d','%e','%d','%e','%e','Isparkavo tr. priemone'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId], GetModelName(GetVehicleModel(vehicleid)), VehicleInfo[vehicleid][vNumbers]);
		log_commit();
	}
	else
	{
		#if SERVER_DEBUG_LEVEL >= 1
			printf("[debug] Error::VehicleGet(%s) INVALID_VEHICLE_ID.\n", GetPlayerNameEx(playerid));
		#endif
	}
	return 1;
}

stock LoadVehicleInventory(vehicleid)
{
	new string[126];
	mysql_format(chandler, string, sizeof string, "SELECT * FROM `vehicles_inventory` WHERE VehicleId = '%d'", VehicleInfo[vehicleid][vId]);
	mysql_tquery(chandler, string, "VehicleInventoryLoad", "d", vehicleid);
	return 1;
}

forward VehicleInventoryLoad(vehicleid);
public VehicleInventoryLoad(vehicleid)
{
	new string[126];
	if(!cache_num_rows())
	{
		mysql_format(chandler, string, sizeof string, "INSERT INTO `vehicles_inventory` (`VehicleId`) VALUES ('%d')", VehicleInfo[vehicleid][vId]);
		mysql_tquery(chandler, string, "VehicleInventoryCreate");
	}
	else
	{
		new packed[356];
		cache_get_value_name(0, "Packed", packed, 356);
		extract_inventory(packed, "|", 3, "ddd", vehicleid, VehicleInventory, MAX_VEHICLE_INVENTORY_SLOTS);
	}
	return 1;
}
thread(VehicleInventoryCreate);


/*



	`7MM"""Mq.  `7MM"""YMM  `7MMM.     ,MMF' .g8""8q.  MMP""MM""YMM `7MM"""YMM
	  MM   `MM.   MM    `7    MMMb    dPMM .dP'    `YM.P'   MM   `7   MM    `7
	  MM   ,M9    MM   d      M YM   ,M MM dM'      `MM     MM        MM   d
	  MMmmdM9     MMmmMM      M  Mb  M' MM MM        MM     MM        MMmmMM
	  MM  YM.     MM   Y  ,   M  YM.P'  MM MM.      ,MP     MM        MM   Y  ,
	  MM   `Mb.   MM     ,M   M  `YM'   MM `Mb.    ,dP'     MM        MM     ,M
	.JMML. .JMM..JMMmmmmMMM .JML. `'  .JMML. `"bmmd"'     .JMML.    .JMMmmmmMMM


REMOTE
*/
thread(FactionAdded);
thread(InteriorAdded);
thread(PrivilegeAdd);
thread(PrivilegeDelete);
/*
forward deletepermission(string[]);
public deletepermission(string[])
{
	printf("[remote function] deletepermission(%s)", string);
	new
		groupid,
		privilege[24];
	if(sscanf(string,"ds[24]", groupid, privilege)) return printf("[remote function] Failed. Wrong arguments.");
	new query[126];
	mysql_format(chandler, query, sizeof query, "SELECT NULL FROM `groups_permissions` WHERE Permission = '%e' AND GroupId = '%d'", privilege, groupid);
	new Cache:result = mysql_query(chandler, query, true);
	cache_set_active(result);
	if(cache_num_rows())
	{
		mysql_format(chandler, query, sizeof query, "DELETE FROM `groups_permissions` WHERE GroupId = '%d' AND Permission = '%e'", groupid, privilege);
		mysql_fquery(chandler, query, "PrivilegeDeleted");
		print("[remote function] Privilege deleted");
	}
	else print("[remote function] Privilege doesn't exists");
	cache_delete(result);
	return 1;
}

forward addpermissionlist(string[]);
public addpermissionlist(string[])
{
	new
		def,
		privilege[30];
	if(sscanf(string,"ds[30]", def, privilege)) return printf("[remote function] Failed. Wrong arguments.");
	new query[256];
	mysql_format(chandler, query, sizeof query, "INSERT IGNORE INTO `groups_permissions_list` (`Permission`,`DefaultValue`) VALUES ('%e','%d')", privilege, def);
	mysql_fquery(chandler, query, "PrivilegeAdd");
	print("[remote function] Permission to list added.");
	return 1;
}

forward addpermission(string[]);
public addpermission(string[])
{
	printf("[remote function] addpermission(%s)", string);
	new
		groupid,
		privilege[30];
	if(sscanf(string,"ds[30]", groupid, privilege)) return printf("[remote function] Failed. Wrong arguments.");
	new query[126];
	mysql_format(chandler, query, sizeof query, "SELECT NULL FROM `groups_permissions` WHERE Permission = '%e' AND GroupId = '%d'", privilege, groupid);
	new Cache:result = mysql_query(chandler, query, true);
	cache_set_active(result);
	if(!cache_num_rows())
	{
		mysql_format(chandler, query, sizeof query, "INSERT INTO `groups_permissions` (`GroupId`,`Permission`) VALUES ('%d','%e')", groupid, privilege);
		mysql_fquery(chandler, query, "PrivilegeAdd");
		printf(query);
		print("[remote function] Permission added");
	}
	else print("[remote Permission] function already exists");
	cache_delete(result);
	return 1;
}

forward php_checkip(string[]);
public php_checkip(string[])
{
	new country[56];
	GetIPCountry(string, country);
	printf("%s country: %s", string, country);
	return 1;
}

forward php_setskin(string[]);
public php_setskin(string[])
{
	printf("[remote function] php_setskin(%s)", string);
	new playerid,
		skin;
	if(sscanf(string,"p<|>dd", playerid, skin)) return printf("[remote function] Use php_setskin playerid|skin");
	if(CheckPlayerid(playerid))
	{
		SetPlayerSkin(playerid, skin);
		MsgSuccess(playerid, "IÐ VVP", "Jûsø iðvaizda buvo pakeista.");
		return 1;
	}
	return 0;
}


forward php_changegroup(string[]);
public php_changegroup(string[])
{
	printf("[remote function] php_changegroup(%s)", string);
	new playerid,
		index,
		groupid;
	if(sscanf(string,"p<|>ddd", playerid, index, groupid)) return printf("[remote function] Use php_changegroup playerid|index|groupid");
	if(CheckPlayerid(playerid) && 0 < index <= MAX_PLAYER_GROUPS)
	{
		index--;
		PlayerGroups[playerid][index] = groupid;
		MsgSuccess(playerid, "IÐ VVP", "Jûsø %d-a grupë buvo pakeista á %s", index+1, GetGroupName(groupid));
		SortArray(PlayerGroups[playerid], 0, MAX_PLAYER_GROUPS);
		return 1;
	}
	return 0;
}

forward php_changerank(string[]);
public php_changerank(string[])
{
	printf("[remote function] php_changerank(%s)", string);
	new playerid,
		rank;
	if(sscanf(string,"p<|>dd", playerid, rank)) return printf("[remote function] Use php_changerank playerid|rank");
	if(CheckPlayerid(playerid) && 1 <= rank <= MAX_FACTION_RANKS)
	{
		PlayerInfo[playerid][pJobLevel] = rank;
		MsgSuccess(playerid, "IÐ VVP", "Jûsø rankas buvo pakeistas á %s", rank);
		return 1;
	}
	return 0;
}

forward php_ban(string[]);
public php_ban(string[])
{
	printf("[remote function] php_ban(%s)", string);
	new
		playerid,
		time,
		adminname[MAX_PLAYER_NAME+1],
		reason[128];
	if(sscanf(string,"p<|>dds[25]s[128]", playerid, time, adminname, reason)) return printf("[remote function] Use php_ban playerid|time|adminname[]|reason[]");
	if(CheckPlayerid(playerid))
	{
		printf("[remote function] Banned [%s(%d)], time: [%d], adminname: [%s], reason: [%s]", GetPlayerNameEx(playerid), time, playerid, adminname, reason);
		BanPlayer(playerid, adminname, reason, time);
		return 1;
	}
	return 0;
}

forward php_jail(string[]);
public php_jail(string[])
{
	printf("[remote function] php_jail(%s)", string);
	new
		playerid,
		time,
		adminname[MAX_PLAYER_NAME+1],
		reason[128];
	if(sscanf(string,"p<|>dds[25]s[128]", playerid, time, adminname, reason)) return printf("[remote function] Use php_jail playerid|time|adminname[]|reason[]");
	if(CheckPlayerid(playerid))
	{
		printf("[remote function] Jailed [%s(%d)], time: [%d], adminname: [%s], reason: [%s]", GetPlayerNameEx(playerid), time, playerid, adminname, reason);
		JailPlayer(playerid, adminname, reason, time, 3);
		return 1;
	}
	return 0;
}

forward php_lock(string[]);
public php_lock(string[])
{
	printf("[remote function] php_lock(%s)", string);
	new
		playerid,
		adminname[MAX_PLAYER_NAME+1],
		reason[128];
	if(sscanf(string,"p<|>ds[25]s[128]", playerid, adminname, reason)) return printf("[remote function] Use php_lock playerid|adminname[]|reason[]");
	if(CheckPlayerid(playerid))
	{
		printf("[remote function] LockAcc [%s(%d)], adminname: [%s], reason: [%s]", GetPlayerNameEx(playerid), playerid, adminname, reason);
		LockAccount(playerid, adminname, reason);
		return 1;
	}
	return 0;
}

forward php_unjail(string[]);
public php_unjail(string[])
{
	printf("[remote function] php_unjail(%s)", string);
	new
		playerid;
	if(sscanf(string,"p<|>d",playerid)) return printf("[remote function] Use php_unjail playerid");
	if(CheckPlayerid(playerid))
	{
		PlayerInfo[playerid][pJailTime] = 1;
		return 1;
	}
	return 0;
}


forward php_kick(string[]);
public php_kick(string[])
{
	printf("[remote function] php_kick(%s)", string);
	new
		playerid,
		adminname[MAX_PLAYER_NAME+1],
		reason[128];
	if(sscanf(string,"p<|>ds[25]s[128]", playerid, adminname, reason)) return printf("[remote function] Use php_kick playerid|adminname[]|reason[]");
	if(CheckPlayerid(playerid))
	{
		printf("[remote function] Kick [%s(%d)], adminname: [%s], reason: [%s]", GetPlayerNameEx(playerid), playerid, adminname, reason);
		KickPlayer(playerid, adminname, reason);
		return 1;
	}
	return 0;
}
*/

/*

	  .oooooo.     .oooooo.   ooo        ooooo ooo        ooooo       .o.       ooooo      ooo oooooooooo.    .oooooo..o
	 d8P'  `Y8b   d8P'  `Y8b  `88.       .888' `88.       .888'      .888.      `888b.     `8' `888'   `Y8b  d8P'    `Y8
	888          888      888  888b     d'888   888b     d'888      .8"888.      8 `88b.    8   888      888 Y88bo.
	888          888      888  8 Y88. .P  888   8 Y88. .P  888     .8' `888.     8   `88b.  8   888      888  `"Y8888o.
	888          888      888  8  `888'   888   8  `888'   888    .88ooo8888.    8     `88b.8   888      888      `"Y88b
	`88b    ooo  `88b    d88'  8    Y     888   8    Y     888   .8'     `888.   8       `888   888     d88' oo     .d8P
	 `Y8bood8P'   `Y8bood8P'  o8o        o888o o8o        o888o o88o     o8888o o8o        `8  o888bood8P'   8""88888P'


COMMANDS
*/

CMD:charity(playerid, params[])
{
	new amount;
	if(sscanf(params,"d",amount) || amount < 0) return SendUsage(playerid, "/charity [kiekis]");
	if(GetPlayerMoney(playerid) < amount) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, amount);

	GivePlayerMoney(playerid, -amount);
	SendFormat(playerid, 0xb0df67ff, "Paaukojote $%d", amount);
	return 1;
}


CMD:vradio(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(!IsItemInVehicleInventory(GetPlayerVehicleID(playerid), ITEM_CAR_AUDIO)) return SendWarning(playerid, "Tr. priemonës bagaþinëje nëra automagnetolos.");
	new string[256];
	format(string, sizeof string, "Radijo stotys\nGarsumas [%d]\n{C60000}Iðjungti", PlayerRadio[playerid][playerRadioVolume]);
	ShowPlayerDialog(playerid, DIALOG_VEHICLE_AUDIO_MAIN, DIALOG_STYLE_LIST, "Automagnetola", string, "Tæsti", "Atðaukti");
	return 1;
}

CMD:pickupweapons(playerid, params[])
{
	if(PlayerInfo[playerid][pDealer] == 0 || PlayerInfo[playerid][pDealer] == 2)
	{
		new string[126];
		mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_guns_orders` WHERE PlayerId = '%d' AND Valid = '1' AND HoursLeft = '0'", PlayerInfo[playerid][pId]);
		mysql_tquery(chandler, string, "PickupWeaponsList", "d", playerid);
	}
	else InfoBox(playerid, IB_NOT_DEALER);
	return 1;
}

CMD:pickupdrugs(playerid, params[])
{
	if(PlayerInfo[playerid][pDealer] == 1 || PlayerInfo[playerid][pDealer] == 2)
	{
		new string[126];
		mysql_format(chandler, string, sizeof string, "SELECT * FROM `dealers_drugs_orders` WHERE PlayerId = '%d' AND Valid = '1' AND HoursLeft = '0'", PlayerInfo[playerid][pId]);
		mysql_tquery(chandler, string, "PickupDrugsList", "d", playerid);
	}
	else InfoBox(playerid, IB_NOT_DEALER);
	return 1;
}
CMD:saveaccount(playerid, params[])
{
	SaveAccount(playerid, true);
	MsgSuccess(playerid, "Þaidëjas", "Duomenys iðsaugoti.");
	return 1;
}

CMD:stop(playerid, params[])
{
	if(PlayerInfo[playerid][pJobDuty] > 0)
	{
		switch(PlayerInfo[playerid][pJobCurrentAction])
		{
			case JOB_ACTION_REPAIR_VEHICLE, JOB_ACTION_TUNE_VEHICLE:
			{
				PlayerTextDrawSetString(playerid, SpamBarTD_Value[playerid], "0%%");
				PlayerInfo[playerid][pJobVehicle] = INVALID_VEHICLE_ID;
				TogglePlayerControllable(playerid, 1);
				ClearAnimations(playerid);
				SpamBarTD_Hide(playerid);
			}
			case JOB_ACTION_REPAINT_VEHICLE:
			{
				PlayerInfo[playerid][pJobVehicle] = INVALID_VEHICLE_ID;
				RemovePlayerWeaponInSlot(playerid, 9);
			}
			case JOB_ACTION_PUT_BAG, JOB_ACTION_PUT_PARTS_VEHICLE, JOB_ACTION_PUT_WHEELS_VEHICLE, JOB_ACTION_CARGO_CRATES_PUT, JOB_ACTION_PUT_ENGINE, JOB_ACTION_PUT_BATTERY, JOB_ACTION_PUT_ENGINE_REPAIR, JOB_ACTION_PUT_BATTERY_REPAIR:
			{
				RemovePlayerAttachedObject(playerid, 9);
			}
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		PlayerInfo[playerid][pJobCurrentAction] =
		PlayerInfo[playerid][pJobDestination] =
		PlayerInfo[playerid][pJobCurrentType] =
		PlayerInfo[playerid][pJobActionTime] =
		PlayerInfo[playerid][pJobActionIndex] = 0;
		JobGUI_Hide(playerid);
		KillTimer(PlayerInfo[playerid][pJobTimer]);
	}
	return 1;
}

CMD:bank(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, GetGVarFloat("BankX"), GetGVarFloat("BankY"), GetGVarFloat("BankZ")) && GetPlayerVirtualWorld(playerid) == GetGVarInt("BankVW"))
	{
		ShowPlayerBank(playerid, true);
	}
	else InfoBox(playerid, "NESATE", "BANKE");
	return 1;
}
CMD:pickcases(playerid, params[])
{
	new slot = GetPlayerFreeInventorySlot(playerid);
	if(IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_GET_OUT_VEHICLE);
	if(slot != -1)
	{
		// pakele
		foreach(new shell : Shell)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.3, Shells[shell][shellPos][0], Shells[shell][shellPos][1], Shells[shell][shellPos][2]))// && IsValidDynamicObject(Shells[shell][shellObject]))
			{
				// keliam
				if(IsValidDynamicObject(Shells[shell][shellObject])) DestroyDynamicObject(Shells[shell][shellObject], "shells", "take");
				if(IsValidDynamic3DTextLabel(Shells[shell][shellLabel])) DestroyDynamic3DTextLabel(Shells[shell][shellLabel]);
				Shells[shell][shellPos][0] = 0.0,
				Shells[shell][shellPos][1] = 0.0,
				Shells[shell][shellPos][2] = 0.0;
				Shells[shell][shellLabel] = INVALID_3DTEXT_ID;
				Shells[shell][shellObject] = INVALID_OBJECT_ID;
				rp_me(playerid, _, "surenka gilzes nuo þemës.");
				GivePlayerInventoryItem(playerid, ITEM_SHELLS, Shells[shell][shellCount], Shells[shell][shellUniqueId], slot);
				Iter_Remove(Shell, shell);
				return 1;
			}
		}
		SendWarning(playerid, "Nesate ðalia gilziø.");
	}
	else return SendWarning(playerid, "Nëra pakankamai vietos inventoriuje.");
	return 1;
}

CMD:tazer(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1) return InfoBox(playerid, IB_NOT_IN_FACTION);
	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE)
	{
		SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
		return 1;
	}
	if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");
	if(IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_GET_OUT_VEHICLE);
	if(PlayerExtra[playerid][peTazer] > 0)
	{
		PlayerExtra[playerid][peTazer] = 0;
		rp_me(playerid, _, "ásideda tazerá.");
		RemovePlayerWeaponInSlot(playerid, 2);
		if(PlayerExtra[playerid][peBeforeTazerWeaponId] != 0 && PlayerExtra[playerid][peBeforeTazerWeaponAmmo] > 0)
		{
			GivePlayerWeapon(playerid, PlayerExtra[playerid][peBeforeTazerWeaponId], PlayerExtra[playerid][peBeforeTazerWeaponAmmo], WEAPON_GIVE_TYPE_NO_INVENTORY, 0);
			PlayerExtra[playerid][peBeforeTazerWeaponId] =
			PlayerExtra[playerid][peBeforeTazerWeaponAmmo] = 0;
		}
		return 1;
	}
	else
	{
		if(	PlayerHasWeaponInSlot(playerid, 2) &&
			ret_GetSlotWeaponGiveType(playerid, 2) != WEAPON_GIVE_TYPE_NO_INVENTORY)
		{
			SendWarning(playerid, "Jûs jau turite tazerá arba pistoletà rankose.");
			return 1;
		}
		else
		{
			GetPlayerWeaponData(playerid, 2, PlayerExtra[playerid][peBeforeTazerWeaponId], PlayerExtra[playerid][peBeforeTazerWeaponAmmo]);
			//SendFormat(playerid, -1, "%d %d", PlayerExtra[playerid][peBeforeTazerWeaponId], PlayerExtra[playerid][peBeforeTazerWeaponAmmo]);
			RemovePlayerWeaponInSlot(playerid, 2);
			PlayerExtra[playerid][peTazer] = 1;
			GivePlayerWeapon(playerid, 23, 10, WEAPON_GIVE_TYPE_NO_INVENTORY, 0);
			rp_me(playerid, _, "iðsitraukia tazerá ið dëklo ir já uþtaiso.");
		}
	}
	return 1;
}

alias:takeitem("pickupitem");
CMD:takeitem(playerid, params[])
{
	if(!TakeDroppedItem(playerid)) return SendWarning(playerid, "Nesate ðalia iðmesto daikto.");
	return 1;
}


CMD:seatbelt(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(IsModelBike(GetVehicleModel(GetPlayerVehicleID(playerid)))) return SendWarning(playerid, "Ðioje tr. priemonë negalima naudoti saugos dirþø.");
	PlayerExtra[playerid][peBelt] = !PlayerExtra[playerid][peBelt];
	if(PlayerExtra[playerid][peBelt] > 0)
	{
		rp_me(playerid, _, "uþsisega saugos dirþus.");
	}
	else
	{
		rp_me(playerid, _, "atsisega saugos dirþus.");
	}
	return 1;
}
CMD:stopcctv(playerid, params[])
{
	if(!pCCTV[playerid][pCctvActive]) return SendWarning(playerid, "Jûs nestebite vaizdo per kamerà.");
	CCTV_StopStream(playerid);
	MDC_ShowForPlayer(playerid, MDC_CCTV);
	SelectTextDraw(playerid, 0xFFFFFF99);
	return 1;
}
CMD:die(playerid, params[])
{
	if(PlayerExtra[playerid][peDeath] <= 0) return SendWarning(playerid, "Nesate komos bûsenoje.");
	if(PlayerExtra[playerid][peDeath] > 480) return SendWarning(playerid, "Dar neprabuvote komos bûsenoje 2 minutes.");
	if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peDeathLabel]))
	{
		DestroyDynamic3DTextLabel(PlayerExtra[playerid][peDeathLabel]);
	}
	PlayerExtra[playerid][peDeathLabel] = INVALID_3DTEXT_ID;
	Iter_Clear(PlayerDamages[playerid]);
	SetPlayerHealth(playerid, 0.0);
	return 1;
}
CMD:blockpm(playerid, params[])
{
	new blockid;
	if(sscanf(params,"u",blockid) || blockid == playerid || IsPlayerNPC(blockid)) return SendUsage(playerid, "/blockpm [þaidëjas]");
	if(PlayerInfo[playerid][pDonator] > 1 || IsPlayerInAnyAdminGroup(playerid))
	{
		MuteListPM[playerid][blockid] = !MuteListPM[playerid][blockid];
		if(MuteListPM[playerid][blockid] == 1) MsgInfo(playerid, "PM", "Nebegausite þinuèiø nuo þaidëjo %s", GetPlayerNameEx(blockid));
		else MsgInfo(playerid, "PM", "Gausite þinutes nuo þaidëjo %s", GetPlayerNameEx(blockid));
	}
	else
	{
		if(MuteListPM[playerid][blockid] > 1)
		{
			MuteListPM[playerid][blockid] = 0;
			MsgInfo(playerid, "PM", "Gausite þinutes nuo þaidëjo %s", GetPlayerNameEx(blockid));
		}
		else
		{
			foreach(new i : Player)
			{
				if(MuteListPM[playerid][i] != 0)
				{
					MsgWarning(playerid, "PM", "Jûsø blokavimo limitas yra 1 þaidëjas. Jûs jau esatæ uþblokavæs %s. Atblokuoti galite naudodami /blockpm %d", GetPlayerNameEx(i), i);
					return 1;
				}
			}
			MuteListPM[playerid][blockid] = 1;
			MsgInfo(playerid, "PM", "Nebegausite þinuèiø nuo þaidëjo %s", GetPlayerNameEx(blockid));
		}
	}
	log_init(true);
	log_set_table("logs_players");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`");
	log_set_values("'%d','%e','%s PM nuo zaidejo','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), MuteListPM[playerid][blockid] == 1 ? ("Isjunge") : ("Ijunge"), LogPlayerId(blockid), LogPlayerName(blockid));
	log_commit();
	return 1;
}
CMD:towup(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	new o_vehicleid = GetPlayerVehicleID(playerid),
	    r_vehicleid;
	if(IsTrailerAttachedToVehicle(o_vehicleid)) return DetachTrailerFromVehicle(o_vehicleid);
	if(GetVehicleModel(o_vehicleid) == 525)
	{
		if(sscanf(params, "d", r_vehicleid)) return SendUsage(playerid, "/towup [tr. priemonës serverio ID (/dl id)]");
		if(!IsPlayerInRangeOfVehicle(playerid, 10.0, r_vehicleid)) return InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);

		AttachTrailerToVehicle(r_vehicleid, o_vehicleid);
	}
	else
	{
		if(sscanf(params, "d", r_vehicleid)) return SendUsage(playerid, "/towup [tr. priemonës serverio ID (/dl id)]");
		if(!IsPlayerInRangeOfVehicle(playerid, 10.0, r_vehicleid)) return InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);

    	if(IsModelTrailer(GetVehicleModel(r_vehicleid)))
    	{
    		AttachTrailerToVehicle(r_vehicleid, o_vehicleid);
    	}
	}
	return 1;
}
alias:togac("toggleac");
CMD:togac(playerid, params[])
{
	ChatsOff[playerid][ACChat] = !ChatsOff[playerid][ACChat];
	SendFormat(playerid, 0xBABABAFF, "%s anti-cheat praneðimø matymà.", ChatsOff[playerid][ACChat] > 0 ? ("Iðjungëte") : ("Ájungëte"));
	return 1;
}
flags:togadmin(CMD_TYPE_ADMIN);
CMD:togadmin(playerid, params[])
{
	ChatsOff[playerid][AdminChat] = !ChatsOff[playerid][AdminChat];
	SendFormat(playerid, 0xBABABAFF, "%s pokalbiø matymà.", ChatsOff[playerid][AdminChat] > 0 ? ("Iðjungëte") : ("Ájungëte"));
	return 1;
}
alias:togglepm("ignorepm");
CMD:togglepm(playerid, params[])
{
	if(PlayerInfo[playerid][pDonator] >= 1 || IsPlayerInAnyAdminGroup(playerid))
	{
		DisabledPM[playerid] = !DisabledPM[playerid];
		if(DisabledPM[playerid]) MsgSuccess(playerid, "PM", "Iðjungëte privaèiø þinuèiø gavimà (þinutes ið administratoriø gausite).");
		else MsgSuccess(playerid, "PM", "Ájungëte privaèiø þinuèiø gavimà (þinutes ið administratoriø gausite).");
		log_init(true);
		log_set_table("logs_players");
		log_set_keys("`PlayerId`,`PlayerName`,`ActionText`");
		log_set_values("'%d','%e','%s visas PM'", LogPlayerId(playerid), LogPlayerName(playerid), DisabledPM[playerid] ? ("Isjunge") : ("Ijunge"));
		log_commit();
	}
	else InfoBox(playerid, IB_NOT_DONATOR);
	return 1;
}
alias:pm("az", "dm");
CMD:pm(playerid, params[])
{
	new receiverid, text[128];
	if(sscanf(params,"us[128]",receiverid,text) || !strlen(text)) return SendUsage(playerid, "/pm [þaidëjas] [tekstas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(MuteListPM[receiverid][playerid] > 0 && !HaveAdminPermission(playerid, "IgnorePMBlock")) return SendWarning(playerid, "Þaidëjas iðjungæs PM nuo jûsø.");
	if(DisabledPM[receiverid] && !HaveAdminPermission(playerid, "IgnorePMBlock")) return SendWarning(playerid, "Þaidëjas iðjungæs visas PM þinutes.");
	new string[256];
	format(string, sizeof string, "(( PM gauta nuo: %s(%d): %s ))", GetPlayerNameEx(playerid), playerid, text);
	SendChatMessage(receiverid, 0xE5C43EAA, string);
	format(string, sizeof string, "(( PM iðsiøsta: %s(%d): %s ))", GetPlayerNameEx(receiverid), receiverid, text);
	SendChatMessage(playerid, 0xBBA033AA, string);
	PlayerPlaySound(receiverid, 1057, 0.0, 0.0, 0.0);
	log_init(true);
	log_set_table("logs_messages");
	log_set_keys("`OwnerId`,`OwnerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraString`");
	log_set_values("'%d','%e','%d','%e','Issiunte PM','%e'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), text);
	log_commit();
	return 1;
}

flags:hideadmins(CMD_TYPE_ADMIN);
CMD:hideadmins(playerid, params[])
{
	PlayerExtra[playerid][peHideAdmin] = !PlayerExtra[playerid][peHideAdmin];
	SendFormat(playerid, -1, "Dabar jus %s /admins sàraðe.", PlayerExtra[playerid][peHideAdmin] > 0 ? ("nerodys") : ("rodys"));
	return 1;
}

stock ShowPlayerAdminMenu(playerid) return 1;

CMD:admins(playerid, params[])
{
	SendFormat(playerid, 0x40B733FF, "__________________ PRISIJUNGÆ ADMINISTRATORIAI __________________");
	foreach(new adminid : Player)
	{
		if(IsPlayerInAnyAdminGroup(adminid) && PlayerExtra[adminid][peHideAdmin] <= 0)
		{
			SendFormat(playerid, (PlayerInfo[adminid][pAdminDuty] > 0 ? 0x40B733FF : 0xD5D5D5FF), "%s %s[%d] (%s) %s.", GetGroupName(PlayerGroups[adminid][0]), GetPlayerNameEx(adminid), adminid, PlayerInfo[adminid][pForumName], (PlayerInfo[adminid][pAdminDuty] > 0 ? ("atlieka pareigas") : ("neatlieka pareigø")));
		}
	}
	return 1;
}
#if defined ENABLE_GPS
	CMD:gps(playerid, params[])
	{
		ShowPlayerDialog(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "Svarbiausios vietos", "Mechanikai\nKroviniø iðveþiotojai\nÞvejybos vieta\nVairavimo mokykla\nTr. priemoniø parduotuvë\nBankas", "Paþymëti", "Atðaukti");
		return 1;
	}
#endif
alias:ask("askq");
CMD:ask(playerid, params[])
{
	new question[128];
	if(sscanf(params,"s[128]",question)) return SendUsage(playerid, "/ask [klausimas]");
	if(PlayerInfo[playerid][pAskQuestionTime]+120 > gettime())
	{
		// dar uzdaves
		SendWarning(playerid, "Klausimus galima uþduoti kas 2 minutes.");
		return 1;
	}
	SendAdminMessage(0xBA42EDFF, false, "Klausimas nuo %s(%d) (naudokite /aqu arba /dqu):", GetPlayerNameEx(playerid), playerid);
	SendAdminMessage(0xBA42EDFF, false, question);
	SendFormat(playerid, 0xBA42EDFF, "Klausimas iðsiøstas administratoriams.");
	PlayerInfo[playerid][pAskQuestionTime] = gettime();
	return 1;
}
flags:forumname(CMD_TYPE_ADMIN);
CMD:forumname(playerid, params[])
{
	format(PlayerInfo[playerid][pForumName], 24, params);
	SaveAccountEx(playerid, "ForumName", params);
	MsgSuccess(playerid, "ADMINISTRATORIAI", "Forumo vardas pakeistas.");
	return 1;
}
flags:setskin(CMD_TYPE_ADMIN);
CMD:setskin(playerid, params[])
{
	new receiverid, skin;
	if(sscanf(params,"ud",receiverid,skin)) return SendUsage(playerid, "/setskin [þaidëjas] [skin ID]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	SetPlayerSkin(receiverid, skin);
	return 1;
}
flags:aqu(CMD_TYPE_ADMIN);
CMD:aqu(playerid, params[])
{
	new receiverid, reason[256];
	if(sscanf(params,"us[128]",receiverid,reason) || !strlen(reason)) return SendUsage(playerid, "/aqu [þaidëjas] [atsakymas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(PlayerInfo[receiverid][pAskQuestionTime]+120 > gettime() && IsPlayerConnected(receiverid))
	{
		SendFormat(receiverid, 0x5CD04DFF, "Administratorius %s(%d) priëmë jûsø klausimà. Atsakymas:", GetPlayerNameEx(playerid), playerid);
		SendFormat(receiverid, 0x5CD04DFF, reason);
		format(reason, sizeof reason, "Administratorius %s(%d) atsakë á þaidëjo %s(%d) klausimà.", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(receiverid), receiverid, reason);
		SendAdminMessage(0x5CD04DFF, false, "%s", reason); // idk
		PlayerInfo[receiverid][pAskQuestionTime] = 0;
	}
	else SendError(playerid, "Þaidëjas nëra uþdavæs klausimo.");
	return 1;
}
flags:dqu(CMD_TYPE_ADMIN);
CMD:dqu(playerid, params[])
{
	new receiverid, reason[256];
	if(sscanf(params,"us[128]",receiverid,reason) || !strlen(reason)) return SendUsage(playerid, "/dqu [þaidëjas] [prieþastis]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(PlayerInfo[receiverid][pAskQuestionTime]+120 > gettime() && IsPlayerConnected(receiverid))
	{
		SendFormat(receiverid, 0xD05F4DFF, "Administratorius %s(%d) atmetë jûsø klausimà. Atsakymas:", GetPlayerNameEx(playerid), playerid);
		SendFormat(receiverid, 0xD05F4DFF, reason);
		format(reason, sizeof reason, "Administratorius %s(%d) atmetë þaidëjo %s(%d) klausimà su prieþastimi: %.86s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(receiverid), receiverid, reason);
		SendAdminMessage(0xD05F4DFF, false, "%s", reason); // idk internal format neveikia
		PlayerInfo[receiverid][pAskQuestionTime] = 0;
	}
	else SendError(playerid, "Þaidëjas nëra uþdavæs klausimo.");
	return 1;
}
flags:o(CMD_TYPE_MUTABLE);
CMD:o(playerid, params[])
{
	if(!OOCChanelEnabled) return SendError(playerid, "OOC kanalas yra iðjungtas.");
	new text[128];
	if(sscanf(params,"s[128]",text)) return SendUsage(playerid, "/o [tekstas]");
	new string[156];
	format(string, sizeof string, "(( %s[%d]: %s ))", GetPlayerNameEx(playerid), playerid, text);
	SendChatMessageToAll(0x8CACC5FF, string);
	log_init(true);
	log_set_table("logs_messages");
	log_set_keys("`OwnerId`,`OwnerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraString`");
	log_set_values("'%d','%e','-1','/o','OOC global chat','%e'", LogPlayerId(playerid), LogPlayerName(playerid), text);
	log_commit();
	return 1;
}
CMD:setchannel(playerid, params[])
{
	if(!IsItemInPlayerInventory(playerid, ITEM_RADIO)) return SendWarning(playerid, "Neturite racijos.");
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	new channel;
	if(sscanf(params,"d",channel)) return SendUsage(playerid, "/setchannel [kanalas]");
	if((900 <= channel < 950) && FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendError(playerid, "Ðie kanalai (900-950) jums negalimi.");
	if((950 <= channel < 1000) && FactionInfo[factionid][fType] != FACTION_TYPE_FIRE) return SendError(playerid, "Ðie kanalai (950-1000) jums negalimi.");
	if((1000 <= channel < 1050) && FactionInfo[factionid][fType] != FACTION_TYPE_GOVERNMENT) return SendError(playerid, "Ðie kanalai (1000-1050) jums negalimi.");
	if((channel < 100 || channel > 10000) && channel != 0) return SendWarning(playerid, "Kanalas turi bûti nuo 100 iki 10000");
	PlayerInfo[playerid][pRadioChannel] = channel;
	SaveAccountIntEx(playerid, "RadioChannel", channel);
	if(channel != 0)
	{
		new string[45];
		format(string, sizeof string, "RACIJOS KANALAS: %d", channel);
		UpdateInfoBar(playerid, string); 
		SendFormat(playerid, 0x9C99F0FF, "Kanalas pakeistas á %d", channel);
	}
	else
	{
		HideInfoBar(playerid);
		SendFormat(playerid, 0x9C99F0FF, "Kanalas paðalintas.");
	}
	return 1;
}
CMD:r(playerid, params[])
{
	new string[256],
		text[128],
		channel = PlayerInfo[playerid][pRadioChannel];
	if(!IsItemInPlayerInventory(playerid, ITEM_RADIO)) return SendWarning(playerid, "Neturite racijos.");
	if(channel <= 0) return SendWarning(playerid, "Nesate nustatæs kanalo (/setchannel)");
	if(sscanf(params,"s[128]",text)) return SendUsage(playerid, "/r [tekstas]");
	if(PlayerExtra[playerid][peDeath] > 0) return SendWarning(playerid, "Esate komos bûsenoje.");
	format(string, sizeof string, "[CH: %d] %s sako: %s", channel, GetPlayerNameEx(playerid, true, true), text);
	SendRadioChat(channel, 0x6969C1FF, string);
	log_init(true);
	log_set_table("logs_radiochat");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`,`ExtraId`");
	log_set_values("'%d','%e','/r','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), text, channel);
	log_commit();
	format(string, sizeof string, "%s sako (á racijà): %s", GetPlayerNameEx(playerid, true, false), text);
	ProxDetector(IsPlayerInAnyVehicle(playerid) ? 6.0 : 10.0, playerid, string, 0xE9E9E9FF, 0xDADADAFF, 0xC7C7C7FF, 0xABABABFF, 0x929292FF);
	return 1;
}

flags:allowooc(CMD_TYPE_ADMIN);
CMD:allowooc(playerid, params[])
{
	OOCChanelEnabled = !OOCChanelEnabled;
	if(OOCChanelEnabled) SendFormatToAll(0x5DA2D7FF, "Administratorius %s ájungë OOC (/o) kanalà.", GetPlayerNameEx(playerid));
	else SendFormatToAll(0x5DA2D7FF, "Administratorius %s iðjungë OOC (/o) kanalà.", GetPlayerNameEx(playerid));
	return 1;
}
CMD:allowf(playerid, params[])
{
	if(PlayerInfo[playerid][pFactionLeader] <= 0 || PlayerInfo[playerid][pFaction] == 0) return InfoBox(playerid, IB_NOT_IN_FACTION);
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(FactionInfo[factionid][fHasChat] <= 0) return SendError(playerid, "Jûsø frakcija neturi savo pokalbiø (/f) kanalo.");
	FactionInfo[factionid][fChatEnabled] = !FactionInfo[factionid][fChatEnabled];
	new string[126];
	format(string, sizeof string, "Frakcijos kanalas buvo %s (%s).", FactionInfo[factionid][fChatEnabled] > 0 ? ("ájungtas") : ("iðjungtas"), GetPlayerNameEx(playerid, false, false));
	SendFactionMessage(PlayerInfo[playerid][pFaction], 0x5486CBFF, true, string);
	return 1;
}

flags:b(CMD_TYPE_ALLOW_NEWBIE | CMD_TYPE_MUTABLE);
CMD:b(playerid, params[])
{
	new text[256];
	if(sscanf(params,"s[128]",text)) return SendUsage(playerid, "/b [tekstas]");
	log_init(true);
	log_set_table("logs_chat");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Text`");
	log_set_values("'%d','%e','/b','%e'", LogPlayerId(playerid), LogPlayerName(playerid), text);
	format(text, sizeof text, "(({%s}%s{C7C7C7}[ID: %d] sako: %s))", PlayerInfo[playerid][pAdminDuty] > 0 ? ("FFCD00") : ("DADADA"), GetPlayerNameEx(playerid, .roleplay = false), playerid, text);
	ProxDetector(10.0, playerid, text, 0xC7C7C7FF, 0xC7C7C7FF, 0xC7C7C7FF, 0xC7C7C7FF, 0xC7C7C7FF);
	log_commit();
	return 1;
}



flags:ucp(CMD_TYPE_ALLOW_NEWBIE);
CMD:ucp(playerid, params[])
{
	if(GetESCType(playerid) == ESC_TYPE_CHARSELECT)
	{
		SelectTextDraw(playerid, CHARSELECT_COLOR);
		return 1;
	}
	else if(GetESCType(playerid) != ESC_TYPE_NONE)
	{
		SendWarning(playerid, "Uþdarykite kitus langus!");
		return 1;
	}
	CharListTD_ShowSelect(playerid, 0, true, 0);
	return 1;
}

flags:newchars(CMD_TYPE_ADMIN);
CMD:newchars(playerid, params[])
{
	
	inline loadNewChars()
	{
		dialog_Clear();
		dialog_AddLine("Þaidëjo vardas [ID]\tVVP vartotojas [ID]\tPerþiûri administratorius");

		new 
			rows = cache_num_rows(),
			uname[21], uid,
			pname[MAX_PLAYER_NAME + 1], pid,
			date[20], aid, aname[MAX_PLAYER_NAME + 1];

		if(rows > 0)
		{
			for(new i = 0; i < rows; i++)
			{
				cache_get_value_name_int(i, "pid", pid);
				cache_get_value_name(i, "pname", pname);

				cache_get_value_name_int(i, "uid", uid);
				cache_get_value_name(i, "uname", uname);

				cache_get_value_name_int(i, "Reviewed", aid);
				cache_get_value_name(i, "Date", date);

				if(aid != 0) format(aname, sizeof aname, GetUserNameById(aid));
				else format(aname, 3, "-");

				dialog_AddLine("%d. %s [%d]\t%s [%d]\t%s", i + 1, pname, pid, uname, uid, aname);
			}
		}
		else
		{
			dialog_AddLine("Nëra nepatvirtinø veikëjø");
		}

		inline newCharsList(response, listitem)
		{
			if(response)
			{
				Admin_NewChars_ShowDetails(playerid, .offset = listitem);
			}
		}
		dialog_Show(playerid, using inline newCharsList, DIALOG_STYLE_TABLIST_HEADERS, "Nepatvirtinti veikëjai", "Tæsti", "Atðaukti");
	}
	mysql_tquery_inline(chandler, using inline loadNewChars, "\
		SELECT players_new.id pid,players_new.Date,players_new.Name pname,players_new.Reviewed,users_data.Name uname,users_data.id uid \
		FROM players_new INNER JOIN users_data \
		ON users_data.id = players_new.UserId AND players_new.Status = '0' \
		ORDER BY players_new.Date DESC");
	return 1;
}

/*
	================================================================================================
	Pasirinkto veikejo informacija uzkrauname:
*/
stock Admin_NewChars_ShowDetails(playerid, offset)
{
	inline loadNewCharDetails()
	{
		if(cache_num_rows())
		{
			new 
				answer1[129], answer2[129], answer3[129],
				name[MAX_PLAYER_NAME + 1], date[20];

			cache_get_value_name_int(0, "id", player_NewCharDetails[playerid]);
			cache_get_value_name_int(0, "UserId", player_NewCharUserId[playerid]);
			cache_get_value_name(0, "Answer1", answer1);
			cache_get_value_name(0, "Answer2", answer2);
			cache_get_value_name(0, "Answer3", answer3);
			cache_get_value_name(0, "Name", name);
			cache_get_value_name(0, "Date", date);
			
			// Padarome, kad rodytu kuris adminas perziuri
			inline updateReviewedStatus() return 1;
			mysql_tquery_inline(chandler, using inline updateReviewedStatus, "\
				UPDATE `players_new` SET Reviewed = '%d' WHERE id = '%d'",
				PlayerInfo[playerid][pUserId], player_NewCharDetails[playerid]
			);

			dialog_Clear();
			dialog_AddLine("Veikëjo vardas: %s", name);
			dialog_AddLine("Data: %s", date);
			dialog_AddLine("Vartotojas: %s", GetUserNameById(player_NewCharUserId[playerid]));

			dialog_AddLine("1. %s", NewCharQuestions[0][ncq_Lt]);
			dialog_AddLine("%s", Dialog_PrepareAnswer(answer1));
			
			dialog_AddLine("2. %s", NewCharQuestions[1][ncq_Lt]);
			dialog_AddLine("%s", Dialog_PrepareAnswer(answer2));
			
			dialog_AddLine("2. %s", NewCharQuestions[2][ncq_Lt]);
			dialog_AddLine("%s", Dialog_PrepareAnswer(answer3));

			inline confirmOrReject(response, listitem)
			{
				if(response)
				{
					// priimti
					if(CheckNewCharStatus(player_NewCharDetails[playerid]) == 0) // ar dar nepriimtas
					{
						call OnCharAccepted(player_NewCharDetails[playerid], player_NewCharUserId[playerid], playerid);
					}
					else  SendError(playerid, "Veikëjà jau yra priëmë arba atmetë kitas administratorius.");
				}
				else
				{
					// atmesti
					if(CheckNewCharStatus(player_NewCharDetails[playerid]) == 0)
					{
						Admin_NewChars_ShowReasonInput(playerid);
					}
					else SendError(playerid, "Veikëjà jau yra priëmë arba atmetë kitas administratorius.");
				}
			}
			dialog_Show(playerid, using inline confirmOrReject, DIALOG_STYLE_MSGBOX, "Naujo veikëjo patvirtinimas", "Priimti", "Atmesti");
		}
	}
	mysql_tquery_inline(chandler, using inline loadNewCharDetails, "\
		SELECT id,Answer1,Answer2,Answer3,Name,Date,UserId FROM `players_new` \
		WHERE Status = '0' ORDER BY Date DESC LIMIT 1 OFFSET %d", offset);
	return 1;
}

stock Admin_NewChars_ShowReasonInput(playerid)
{
	dialog_Clear();
	dialog_AddLine("Áveskite prieþastá, dël kurios atmetate veikëjà.");
	inline inputRejectReason(response, listitem)
	{
		if(response)
		{
			if(!strlen(dialog_Input())) return Admin_NewChars_ShowReasonInput(playerid);
			if(CheckNewCharStatus(player_NewCharDetails[playerid]) == 0)
			{
				call OnCharRejected(player_NewCharDetails[playerid], player_NewCharUserId[playerid], playerid, dialog_Input());
			}
			else
			{
				SendError(playerid, "Veikëjà jau yra priëmë arba atmetë kitas administratorius.");
			}
		}
		else
		{
			inline updateReviewedStatus() return 1;
			mysql_tquery_inline(chandler, using inline updateReviewedStatus, "\
				UPDATE `players_new` SET Reviewed = '0' WHERE id = '%d'", player_NewCharDetails[playerid]
			);
		}
	}
	dialog_Show(playerid, using inline inputRejectReason, DIALOG_STYLE_INPUT, "Atmetimas", "Atmesti", "Gráþti");
	return 1;
}

stock CheckNewCharStatus(id)
{
	new 
		string[86],
		Cache:current = cache_save(),
		Cache:result,
		ret;
	mysql_format(chandler, string, sizeof string, "SELECT Status FROM `players_new` WHERE id = '%d'", id);
	result = mysql_query(chandler, string, true);
	cache_set_active(result);
	cache_get_value_name_int(0, "Status", ret);
	cache_delete(result);
	cache_set_active(current);
	return ret;
}


hook OnCharAccepted(charid, charuserid, adminid)
{
	new 
		playerid = INVALID_PLAYER_ID,
		string[312];
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pUserId] == charuserid)
		{
			playerid = i;
			SendFormat(playerid, 0x9dc56dff, "Jûsø veikëjas buvo priimtas.");
			break;
		}
	}

	mysql_format(chandler, string, sizeof string, "UPDATE `players_new` SET Status = '%d', AdminId = '%d' WHERE id = '%d'", (playerid == INVALID_PLAYER_ID ? 1 : 3), PlayerInfo[adminid][pUserId], charid);
	mysql_tquery(chandler, string, "CharAcceptUpdate", "dd", charid, playerid);


	format(string, sizeof string, "[AdmCmd] Administratorius %s priëmë veikëjà %s (vartotojas: %s)", GetPlayerNameEx(adminid), GetNewCharNameBySql(charid), GetUserNameById(charuserid));
	SendAdminMessage(0xFF6347AA, false, string);
	return 1;
}

forward CharAcceptUpdate(charid, playerid);
public CharAcceptUpdate(charid, playerid)
{
	new 
		string[256];
	mysql_format(chandler, string, sizeof string, "SELECT * FROM `players_new` WHERE id = '%d'", charid);
	mysql_tquery(chandler, string, "CharAcceptMoveSelect", "dd", charid, playerid);
	return 1;
}

forward CharAcceptMoveSelect(charid, playerid);
public CharAcceptMoveSelect(charid, playerid)
{
	if(cache_num_rows())
	{
		new 
			name[MAX_PLAYER_NAME + 1],
			skinid, 
			userid,
			origin[18],
			gender,
			gpci_string[41],
			year;

		cache_get_value_name(0, "Name", name);
		cache_get_value_name(0, "Origin", origin);
		cache_get_value_name(0, "gpci", gpci_string);
		cache_get_value_name_int(0, "Gender", gender);
		cache_get_value_name_int(0, "UserId", userid);
		cache_get_value_name_int(0, "Skin", skinid);
		cache_get_value_name_int(0, "Years", year);

		inline insertNewPlayer()
		{
			if(playerid != INVALID_PLAYER_ID)
			{
				User_SaveCharCountTotal(playerid);

				if(GetESCType(playerid) == ESC_TYPE_CHARSELECT)
				{
					CharListTD_ShowSelect(playerid, 0, true, 2);
				}
				else
				{
					SendFormat(playerid, 0xbababaff, "Daugiau informacijos: /ucp");
				}
			}
			return 1;
		}
		mysql_tquery_inline(chandler, using inline insertNewPlayer, "\
			INSERT INTO `players_data` (`Name`,`BirthDate`,`Skin`,`Gender`,`Origin`,`Money`,`LastVersion_Server`,`UserId`,`X`,`Y`,`Z`,`gpci`) \
			VALUES \
			('%e','%d','%d','%d','%e','%d','"#CODE_VERSION_P"','%d','%f','%f','%f','%e')", 
			name, year, skinid, gender, origin,
			GetGVarInt("StartMoney"),
			userid,
			GetGVarFloat("SpawnX"), GetGVarFloat("SpawnY"), GetGVarFloat("SpawnZ"),
			gpci_string
		);
	}
	return 1;
}

hook OnCharRejected(charid, charuserid, adminid, reason[])
{
	new 
		playerid = INVALID_PLAYER_ID,
		string[256];
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pUserId] == charuserid)
		{
			playerid = i;
			SendFormat(playerid, 0xa74e4eff, "Jûsø veikëjas buvo atmestas. Prieþastis:");
			SendFormat(playerid, 0xa74e4eff, "%s", reason);
			break;
		}
	}

	mysql_format(chandler, string, sizeof string, "UPDATE `players_new` SET Status = '%d', AdminId = '%d', Reason = '%e' WHERE id = '%d'", (playerid == INVALID_PLAYER_ID ? 2 : 4), PlayerInfo[adminid][pUserId], reason, charid);
	mysql_tquery(chandler, string, "CharRejectUpdate", "d", playerid);
	return 1;
}

forward CharRejectUpdate(playerid);
public CharRejectUpdate(playerid)
{
	if(playerid != INVALID_PLAYER_ID)
	{
		User_SaveCharCountTotal(playerid);
		if(GetCharCount(playerid) <= 0)
		{
			if(GetESCType(playerid) == ESC_TYPE_CHARSELECT) CharListTD_Hide(playerid);
			CharCreateTD_Show(playerid);
		}
		else if(GetESCType(playerid) == ESC_TYPE_CHARSELECT)
		{
			CharListTD_ShowSelect(playerid, 0, true, 2);
		}
	}
	return 1;
}

CMD:ahelp(playerid, params[]) return pc_cmd_help(playerid, "admin");

flags:jetpack(CMD_TYPE_ADMIN);
CMD:jetpack(playerid, params[])
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	else
	{
		if(PlayerInfo[playerid][pAdminDuty] <= 0) return SendWarning(playerid, "Turite bûti on duty.");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}
	return 1;
}

CMD:aod(playerid, params[], help) return pc_cmd_aduty(playerid, "");
flags:aduty(CMD_TYPE_ADMIN);
CMD:aduty(playerid, params[])
{
	PlayerInfo[playerid][pAdminDuty] = !PlayerInfo[playerid][pAdminDuty];
	if(PlayerInfo[playerid][pAdminDuty])
	{
		if(PlayerExtra[playerid][peMask] > 0) return SendError(playerid, "Nusiimkite kaukæ.") , PlayerInfo[playerid][pAdminDuty] = 0;
		new Float:x, Float:y, Float:z,
			color = 0x3CC911FF,
			bool:isadmin = false;
		GetPlayerPos(playerid, x, y, z);

		/*PlayerExtra[playerid][peDutyObject] = CreateDynamicObject(18693, x, y, z, 0.0, 0.0, 0.0);
		AttachDynamicObjectToPlayer(PlayerExtra[playerid][peDutyObject], playerid, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0);*/
		//PlayerExtra[playerid][peDutyObject] = CreateObject(18693, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); // 19078
		//AttachObjectToPlayer(PlayerExtra[playerid][peDutyObject], playerid, -0.15, -0.14, -1.0, 0.0, 0.0, 0.0);
		//-0.15, -0.14, -1.0, 0.0, -90.0, -90.0); //		
	
		
		if(HaveAdminPermission(playerid, "IsGroupAdmin")) isadmin = true, color = 0x3CC911FF;
		else color = 0xbd31b8ff;
		

		SendFormat(playerid, 0xD6EB77FF, "Pradëjote administratoriaus darbà.");
		SendFormatToAll(color, "%s %s[%d] pradëjo darbà.", GetGroupName(PlayerGroups[playerid][0]), GetPlayerNameEx(playerid), playerid);

		SetPlayerColor(playerid, color);
		if(isadmin) PlayerExtra[playerid][peDutyLabel] = CreateDynamic3DTextLabel("Admin", color, 0.0, 0.0, 0.35, 4.0, playerid, INVALID_VEHICLE_ID, 1);
		//else PlayerExtra[playerid][peDutyLabel] = CreateDynamic3DTextLabel("Budintis pagalbininkas\n/report /ask", color, 0.0, 0.0, 0.50, 4.0, playerid, INVALID_VEHICLE_ID, 1);
	}
	else
	{
		//if(IsValidObject(PlayerExtra[playerid][peDutyObject])) DestroyObject(PlayerExtra[playerid][peDutyObject]);
		if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peDutyLabel])) DestroyDynamic3DTextLabel(PlayerExtra[playerid][peDutyLabel]);
		PlayerExtra[playerid][peDutyLabel] = INVALID_3DTEXT_ID;
		//PlayerExtra[playerid][peDutyObject] = INVALID_OBJECT_ID;
		SendFormat(playerid, 0xD6EB77FF, "Baigëte administratoriaus darbà.");
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		SetPlayerColor(playerid, DEFAULT_PLAYER_COLOR);
	}
	return 1;
}
flags:rfc(CMD_TYPE_ADMIN);
CMD:rfc(playerid, params[])
{
	new mysql,
		factionid;
	if(sscanf(params,"d",mysql) || (mysql < 0 && mysql != -1 && mysql != -2)) return SendUsage(playerid, "/rfc [frakcijos MySQL id (/factionslist)]");
	if((factionid = GetFactionArrayIndexById(mysql)) == -1 && mysql != -1 && mysql != -2) return SendError(playerid, "Tokios frakcijos nëra.");
	new used[MAX_VEHICLES];
	foreach(new receiverid : Player)
	{
		if(IsPlayerInAnyVehicle(receiverid)) used[GetPlayerVehicleID(receiverid)] = 1;
	}
	foreach(new vehicleid : Vehicle)
	{
		if(used[vehicleid] > 0) { continue; }
		if(VehicleInfo[vehicleid][vFaction] == mysql)
		{
			SetVehicleToRespawn(vehicleid);
			VehicleInfo[vehicleid][vFuel] = VehicleFuelCapacityList[GetVehicleModel(vehicleid)-400];
		}
	}
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
	log_set_values("'%d','%e','RFC','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GetFactionName(factionid, false));
	log_commit();

	if(mysql < 0)
	{
		if(mysql == -1) SendFormatToAll(0xF7F7F7FF, "%s {EEEEEE}atstatë visas vairavimo mokyklos tr. priemones", GetPlayerNameEx(playerid, false));
		if(mysql == -2) SendFormatToAll(0xF7F7F7FF, "%s {EEEEEE}atstatë visas nuomos tr. priemones", GetPlayerNameEx(playerid, false));
	}
	else SendFormatToAll(0xF7F7F7FF, "%s {EEEEEE}atstatë visas frakcijos {F7F7F7}\"%s\"{EEEEEE} tr. priemones", GetPlayerNameEx(playerid, false), GetFactionName(FactionInfo[factionid][fId]));
	return 1;
}

flags:rtc(CMD_TYPE_ADMIN);
CMD:rtc(playerid, params[])
{
	new
		vehicleid;
	if((vehicleid = GetClosestVehicle(playerid, 5.0)) == INVALID_VEHICLE_ID) return InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
	SetVehicleToRespawn(vehicleid);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
	log_set_values("'%d','%e','RTC','%d'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId]);
	log_commit();
	return 1;
}

flags:rjc(CMD_TYPE_ADMIN);
CMD:rjc(playerid, params[])
{
	new mysql,
		jobid;
	if(sscanf(params,"d",mysql) || mysql < 0) return SendUsage(playerid, "/rfc [darbo MySQL id (/jobslist)]");
	if((jobid = GetJobArrayIndexById(mysql)) == -1) return SendError(playerid, "Tokio darbo nëra.");
	new used[MAX_VEHICLES];
	foreach(new receiverid : Player)
	{
		if(IsPlayerInAnyVehicle(receiverid)) used[GetPlayerVehicleID(receiverid)] = 1;
	}
	foreach(new vehicleid : Vehicle)
	{
		if(VehicleInfo[vehicleid][vJob] == mysql)
		{
			if(used[vehicleid] > 0) { continue; }
			SetVehicleToRespawn(vehicleid);
			VehicleInfo[vehicleid][vFuel] = VehicleFuelCapacityList[GetVehicleModel(vehicleid)-400];
		}
	}
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
	log_set_values("'%d','%e','RJC','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GetJobName(jobid, false));
	log_commit();
	SendFormatToAll(0xF7F7F7FF, "%s {EEEEEE}atstatë visas darbo {F7F7F7}\"%s\"{EEEEEE} tr. priemones", GetPlayerNameEx(playerid, false), GetJobName(jobid, false));
	return 1;
}
flags:rac(CMD_TYPE_ADMIN);
CMD:rac(playerid, params[])
{
	new used[MAX_VEHICLES];
	foreach(new receiverid : Player)
	{
		if(IsPlayerInAnyVehicle(receiverid)) used[GetPlayerVehicleID(receiverid)] = 1;
	}
	foreach(new vehicleid : Vehicle)
	{
		if(used[vehicleid] > 0) { continue; }
		new __reset_Trunk[E_FACTION_TRUNK_WEAPONS_DATA];
		for(new i = 0; i < MAX_VEHICLE_WEAPON_SLOTS; i++) VehicleWeaponsInventory[vehicleid][i] = __reset_Trunk;
		SetVehicleToRespawn(vehicleid);
	}
	SendFormatToAll(0xF7F7F7FF, "%s {EEEEEE}atstatë visas serverio tr. priemones", GetPlayerNameEx(playerid, false));
	return 1;
}

flags:factionslist(CMD_TYPE_ADMIN);
CMD:factionslist(playerid, params[])
{
	new real_itter = 1;
	SendFormat(playerid, 0xFFBD40FF, "_______________ Serverio frakcijos _______________");
	foreach(new factionid : Faction)
	{
		if(FactionInfo[factionid][fId] > 0)
		{
			SendFormat(playerid, 0xBABABAFF, "%d. %s (MySQL ID: %d)", real_itter, GetFactionName(factionid, false), FactionInfo[factionid][fId]);
			real_itter++;
		}
	}
	return 1;
}

flags:jobslist(CMD_TYPE_ADMIN);
CMD:jobslist(playerid, params[])
{
	new real_itter = 1;
	SendFormat(playerid, 0xFFBD40FF, "_______________ Serverio darbai _______________");
	for(new i = 0; i < sizeof Jobs; i++)
	{
		if(Jobs[i][jobId] != 0)
		{
			SendFormat(playerid, 0xBABABAFF, "%d. %s (MySQL ID: %d)", real_itter, GetJobName(Jobs[i][jobId]), Jobs[i][jobId]);
			real_itter++;
		}
	}
	return 1;
}

flags:groupslist(CMD_TYPE_ADMIN);
CMD:groupslist(playerid, params[])
{
	new real_itter = 1;
	SendFormat(playerid, 0xFFBD40FF, "_______________ Serverio grupës _______________");
	foreach(new groupid : AdminGroup)
	{
		if(GroupsInfo[groupid][groupId] > 0)
		{
			SendFormat(playerid, 0xBABABAFF, "%d. %s (MySQL ID: %d)", real_itter, GetGroupName(groupid, false), GroupsInfo[groupid][groupId]);
			real_itter++;
		}
	}
	return 1;
}

flags:playergroups(CMD_TYPE_ADMIN);
CMD:playergroups(playerid, params[])
{
	new receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/playergroups [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	SendFormat(playerid, 0xFFBD40FF, "_______________ Þaidëjo %s grupës _______________", GetPlayerNameEx(receiverid));
	for(new i = 0; i < MAX_PLAYER_GROUPS; i++)
	{
		if(PlayerGroups[receiverid][i] == 0) { break; }
		SendFormat(playerid, 0xF5F5F5FF, "%d. %s (MySQL ID: %d)", i+1, GetGroupName(PlayerGroups[receiverid][i]), PlayerGroups[receiverid][i]);
	}
	return 1;
}

CMD:donator(playerid, params[])
{
	new 
		string[126];
	mysql_format(chandler, string, sizeof string, "SELECT * FROM `donations` WHERE UserId = '%d' AND Status = '1'", PlayerInfo[playerid][pUserId]);
	mysql_tquery(chandler, string, "OnDonationLoad", "dd", playerid, PlayerInfo[playerid][pUserId]);
	return 1;
}

stock CheckDonations(playerid)
{
	new 
		string[126];
	mysql_format(chandler, string, sizeof string, "SELECT * FROM `donations` WHERE UserId = '%d' AND Status = '1'", PlayerInfo[playerid][pUserId]);
	new Cache:result = mysql_query(chandler, string, true);
	if(cache_num_rows())
	{
		SendFormat(playerid, 0xFFFFFFFF, "[!!!] Jûsø vartotojui neseniai buvo nupirkta paslaugø.");
		SendFormat(playerid, 0xFFFFFFFF, "[!!!] Norëdami atsiimti paslaugas, raðykite /donator.");
	}
	cache_delete(result);
	return 1;
}

forward OnDonationLoad(playerid, userid); 
public OnDonationLoad(playerid, userid)
{
	if(cache_num_rows())
	{
		new 
			string[126];
		SendFormat(playerid, 0xBABABAFF, "------- PASLAUGØ ATSIËMIMAS:");
		for(new i = 0, rows = cache_num_rows(); i < rows; i++)
		{
			new 
				id,
				type[24],
				service[86];
			cache_get_value_name(i, "Type", type);
			cache_get_value_name_int(i, "id", id);
			if(strcmp(type,"bronze",true) == 0)
			{
				PlayerInfo[playerid][pDonator] = DONATOR_BRONZE;
				PlayerInfo[playerid][pDonatorTime] = gettime();
				SaveUserIntEx(PlayerInfo[playerid][pUserId], "Donator", PlayerInfo[playerid][pDonator]);
				SaveUserIntEx(PlayerInfo[playerid][pUserId], "DonatorTime", PlayerInfo[playerid][pDonatorTime]);


				PlayerInfo[playerid][pNameChanges] += 2;
				PlayerInfo[playerid][pNumberChanges] += 2;
				PlayerInfo[playerid][pPlateChanges] += 2;
				format(service, sizeof service, "BRONZE remëjas");
			}
			else if(strcmp(type,"silver",true) == 0)
			{
				PlayerInfo[playerid][pDonator] = DONATOR_SILVER;
				PlayerInfo[playerid][pDonatorTime] = gettime();
				SaveUserIntEx(PlayerInfo[playerid][pUserId], "Donator", PlayerInfo[playerid][pDonator]);
				SaveUserIntEx(PlayerInfo[playerid][pUserId], "DonatorTime", PlayerInfo[playerid][pDonatorTime]);


				PlayerInfo[playerid][pNameChanges] += 3;
				PlayerInfo[playerid][pNumberChanges] += 3;
				PlayerInfo[playerid][pPlateChanges] += 3;
				format(service, sizeof service, "SILVER remëjas");
			}
			else if(strcmp(type,"gold",true) == 0)
			{
				PlayerInfo[playerid][pDonator] = DONATOR_GOLD;
				PlayerInfo[playerid][pDonatorTime] = gettime();
				SaveUserIntEx(PlayerInfo[playerid][pUserId], "Donator", PlayerInfo[playerid][pDonator]);
				SaveUserIntEx(PlayerInfo[playerid][pUserId], "DonatorTime", PlayerInfo[playerid][pDonatorTime]);


				PlayerInfo[playerid][pNameChanges] += 4;
				PlayerInfo[playerid][pNumberChanges] += 4;
				PlayerInfo[playerid][pPlateChanges] += 4;
				format(service, sizeof service, "GOLD remëjas");
			}
			else if(strcmp(type, "nick1",true) == 0)
			{
				PlayerInfo[playerid][pNameChanges] += 1;
				format(service, sizeof service, "Nick change [x1]");
			}
			else if(strcmp(type, "nick2",true) == 0)
			{
				PlayerInfo[playerid][pNameChanges] += 1;
				format(service, sizeof service, "Nick change [x2]");
			}
			else if(strcmp(type, "nick3",true) == 0)
			{
				PlayerInfo[playerid][pNameChanges] += 1;
				format(service, sizeof service, "Nick change [x3]");
			}
			else if(strcmp(type, "number",true) == 0)
			{
				PlayerInfo[playerid][pNameChanges] += 1;
				format(service, sizeof service, "Tel. nr. keitimas");
			}
			else if(strcmp(type, "plate",true) == 0)
			{
				PlayerInfo[playerid][pNameChanges] += 1;
				format(service, sizeof service, "Tr. priemonës numeriø keitimas");
			}
			else if(strcmp(type, "unban",true) == 0)
			{
				PlayerInfo[playerid][pNameChanges] += 1;
				format(service, sizeof service, "Atblokavimas");
			}
			else if(strcmp(type, "50k",true) == 0)
			{
				if(PlayerInfo[playerid][pId] <= 0)
				{
					SendError(playerid, "Paslaugos \"50'000$\" atsiimti negalite, nes nesate pasirinkæs veikëjo!");
				}
				else
				{
					GivePlayerMoney(playerid, 50000);
					format(service, sizeof service, "50'000$");
				}
			}
			else if(strcmp(type, "100k",true) == 0)
			{
				if(PlayerInfo[playerid][pId] <= 0)
				{
					SendError(playerid, "Paslaugos \"100'000$\" atsiimti negalite, nes nesate pasirinkæs veikëjo!");
				}
				else
				{
					GivePlayerMoney(playerid, 100000);
					format(service, sizeof service, "100'000$");
				}
			}
			else if(strcmp(type, "200k",true) == 0)
			{
				if(PlayerInfo[playerid][pId] <= 0)
				{
					SendError(playerid, "Paslaugos \"200'000$\" atsiimti negalite, nes nesate pasirinkæs veikëjo!");
				}
				else
				{
					GivePlayerMoney(playerid, 200000);
					format(service, sizeof service, "200'000$");
				}
			}
			else if(strcmp(type, "500k",true) == 0)
			{
				if(PlayerInfo[playerid][pId] <= 0)
				{
					SendError(playerid, "Paslaugos \"500'000$\" atsiimti negalite, nes nesate pasirinkæs veikëjo!");
				}
				else
				{
					GivePlayerMoney(playerid, 500000);
					format(service, sizeof service, "500'000$");
				}
			}
			else if(strcmp(type, "package1",true) == 0)
			{
				PlayerInfo[playerid][pNameChanges] += 1;
				PlayerInfo[playerid][pNumberChanges] += 1;
				PlayerInfo[playerid][pPlateChanges] += 1;
				format(service, sizeof service, "Paketas 1");
			}
			else if(strcmp(type, "package2",true) == 0)
			{
				PlayerInfo[playerid][pNameChanges] += 2;
				PlayerInfo[playerid][pNumberChanges] += 2;
				PlayerInfo[playerid][pPlateChanges] += 2;
				format(service, sizeof service, "Paketas 2");
			}
			else if(strcmp(type, "package3",true) == 0)
			{
				PlayerInfo[playerid][pNameChanges] += 3;
				PlayerInfo[playerid][pNumberChanges] += 3;
				PlayerInfo[playerid][pPlateChanges] += 3;
				format(service, sizeof service, "Paketas 3");
			}
			if(strlen(service))
			{
				SendFormat(playerid, 0xFFFFFFFF, "Atsiëmete paslaugà: {9aea3b}%s", service);
				mysql_format(chandler, string, sizeof string, "UPDATE `donations` SET Status = '2' WHERE id = '%d'", id);
				mysql_fquery(chandler, string, "DonatorSaved");
			}
		}
		SendFormat(playerid, 0xBABABAFF, "----------------------------------------------------");
	}
	else SendError(playerid, "Nesate nusipirkæs paslaugø!");
	return 1;
}

thread(DonatorSaved);

CMD:givenamechange(playerid, params[])
{
	new 
		receiverid, amount;
	if(sscanf(params,"ud",receiverid,amount)) return SendUsage(playerid, "/givenamechange [þaidëjas] [kiekis]");
	if(PlayerInfo[playerid][pDonator] < DONATOR_GOLD) return SendError(playerid, "Ðià paslaugà turi tik GOLD remëjai.");
	if(amount < 0 || amount > PlayerInfo[playerid][pNameChanges]) return SendError(playerid, "Neturite tiek vardo keitimø");

	PlayerInfo[playerid][pNameChanges] -= amount;
	PlayerInfo[receiverid][pNameChanges] += amount;

	printf("[donate] %s(%d, %d, %s) perdave %s(%d, %d, %s) vardo keitimu: %d", GetPlayerNameEx(playerid), PlayerInfo[playerid][pId], PlayerInfo[playerid][pUserId], GetPlayerIpEx(playerid), GetPlayerNameEx(receiverid), PlayerInfo[receiverid][pId], PlayerInfo[receiverid][pUserId], GetPlayerIpEx(receiverid), amount);
	return 1;
}

flags:makedonator(CMD_TYPE_ADMIN);
CMD:makedonator(playerid, params[])
{
	new receiverid, type;
	if(sscanf(params,"ud",receiverid,type) || !(0 <= type <= 3)) return SendUsage(playerid, "/makedonator [þaidëjas] [0-3]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	
	PlayerInfo[receiverid][pDonator] = type;
	PlayerInfo[receiverid][pDonatorTime] = gettime();

	MsgSuccess(receiverid, "RËMËJAS", "Pakeistas: %d (30 dienø)", type);
	MsgSuccess(playerid, "RËMËJAS", "Pakeistas: %d (30 dienø)", type);
	
	SaveUserIntEx(PlayerInfo[receiverid][pUserId], "Donator", type);
	SaveUserIntEx(PlayerInfo[receiverid][pUserId], "DonatorTime", PlayerInfo[receiverid][pDonatorTime]);
	
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ReceiverId`,`ReceiverName`,`Amount`");
	log_set_values("'%d','%e','Dave donator','%d','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[receiverid][pUserId], GetUserNameById(PlayerInfo[receiverid][pUserId]), type);
	log_commit();
	return 1;
}

flags:setnamechanges(CMD_TYPE_ADMIN);
CMD:setnamechanges(playerid, params[])
{
	new receiverid, amount;
	if(sscanf(params,"ud",receiverid,amount) || amount < 0) return SendUsage(playerid, "/setnamechanges [þaidëjas] [kiekis]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	PlayerInfo[receiverid][pNameChanges] = amount;
	MsgSuccess(receiverid, "RËMËJAS", "Vardo keitimas kiekis pakeistas: %d", amount);
	MsgSuccess(playerid, "RËMËJAS", "Vardo keitimas kiekis pakeistas: %d", amount);
	SaveUserIntEx(PlayerInfo[receiverid][pUserId], "NameChanges", amount);

	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ReceiverId`,`ReceiverName`,`Amount`");
	log_set_values("'%d','%e','Dave name changes','%d','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[receiverid][pUserId], GetUserNameById(PlayerInfo[receiverid][pUserId]), amount);
	log_commit();
	return 1;
}

flags:setnumberchanges(CMD_TYPE_ADMIN);
CMD:setnumberchanges(playerid, params[])
{
	new receiverid, amount;
	if(sscanf(params,"ud",receiverid,amount) || amount < 0) return SendUsage(playerid, "/setnumberchanges [þaidëjas] [kiekis]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	PlayerInfo[receiverid][pNumberChanges] = amount;
	MsgSuccess(receiverid, "RËMËJAS", "Tel. nr. keitimas kiekis pakeistas: %d", amount);
	MsgSuccess(playerid, "RËMËJAS", "Tel. nr. keitimas kiekis pakeistas: %d", amount);
	SaveUserIntEx(PlayerInfo[receiverid][pUserId], "NumberChanges", amount);

	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ReceiverId`,`ReceiverName`,`Amount`");
	log_set_values("'%d','%e','Dave telnr changes','%d','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[receiverid][pUserId], GetUserNameById(PlayerInfo[receiverid][pUserId]), amount);
	log_commit();
	return 1;
}

flags:setplatechanges(CMD_TYPE_ADMIN);
CMD:setplatechanges(playerid, params[])
{
	new receiverid, amount;
	if(sscanf(params,"ud",receiverid,amount) || amount < 0) return SendUsage(playerid, "/setplatechanges [þaidëjas] [kiekis]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	PlayerInfo[receiverid][pPlateChanges] = amount;
	MsgSuccess(receiverid, "RËMËJAS", "Numeriø keitimas kiekis pakeistas: %d", amount);
	MsgSuccess(playerid, "RËMËJAS", "Numeriø keitimas kiekis pakeistas: %d", amount);
	SaveUserIntEx(PlayerInfo[receiverid][pUserId], "PlateChanges", amount);

	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ReceiverId`,`ReceiverName`,`Amount`");
	log_set_values("'%d','%e','Dave plate changes','%d','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[receiverid][pUserId], GetUserNameById(PlayerInfo[receiverid][pUserId]), amount);
	log_commit();
	return 1;
}

flags:makeleader(CMD_TYPE_ADMIN);
CMD:makeleader(playerid, params[])
{
	new receiverid, factionid;
	if(sscanf(params,"ud",receiverid,factionid)) return SendUsage(playerid, "/makeleader [þaidëjas] [frakcijos MySQL ID (/factionslist)]");

	PlayerInfo[receiverid][pJob] = 
	PlayerInfo[receiverid][pJobContract] = 
	PlayerInfo[receiverid][pJobDestination] = 
	PlayerInfo[receiverid][pJobDuty] = 0;
	PlayerInfo[receiverid][pFaction] = factionid;
	PlayerInfo[receiverid][pFactionLeader] = 1;
	SaveAccountIntEx(receiverid, "Faction", factionid);
	SaveAccountIntEx(receiverid, "FactionLeader", 1);
	SendFormat(receiverid, 0xFFB055FF, "%s paskyrë jus %s frakcijos lyderiu.", GetPlayerNameEx(playerid), FactionInfo[GetFactionArrayIndexById(factionid)][fName]);
	SendFormat(playerid, 0xFFB055FF, "Paskyrëte %s bûti %s frakcijos lyderiu.", GetPlayerNameEx(receiverid), FactionInfo[GetFactionArrayIndexById(factionid)][fName]);
	return 1;
}

flags:setgroup(CMD_TYPE_ADMIN);
CMD:setgroup(playerid, params[])
{
	new groupsql, receiverid;
	if(sscanf(params,"ud",receiverid,groupsql)) return SendUsage(playerid, "/setgroup [þaidëjas] [grupës MySQL ID (/groupslist)]");
	if(IsPlayerNPC(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsAdminGroupExisting(groupsql)) return SendError(playerid, "Tokios grupës(%d) nëra. Patikrinkite /groupslist", groupsql);
	if(IsPlayerInAdminGroup(receiverid, groupsql)) return SendWarning(playerid, "Þaidëjas jau yra ðioje grupëje.");
	for(new i = 0; i < MAX_PLAYER_GROUPS; i++)
	{
		if(PlayerGroups[receiverid][i] == 0)
		{
			// free
			SendFormat(playerid, 0x7BE677FF, "Pridëjote þaidëjà %s á grupæ %s. Visi jo veikëjai turës ðià grupæ.", GetPlayerNameEx(receiverid), GetGroupName(groupsql));
			SendFormat(receiverid, 0x7BE677FF, "%s pridëjo Jus á grupæ %s. Visi jûsø veikëjai turës ðià grupæ.", GetPlayerNameEx(playerid), GetGroupName(groupsql));
			
			PlayerGroups[receiverid][i] = groupsql;
			SortArray(PlayerGroups[receiverid], 0, MAX_PLAYER_GROUPS);
			SaveUserGroups(receiverid);
			return 1;
		}
	}
	SendWarning(playerid, "Þaidëjas jau yra "#MAX_PLAYER_GROUPS" grupëse.");
	return 1;
}

flags:unsetgroupsoff(CMD_TYPE_ADMIN);
CMD:unsetgroupsoff(playerid, params[])
{
	new name[24];
	if(sscanf(params,"s[24]",name)) return SendUsage(playerid, "/unsetgroupsoff [þaidëjas]");

	if((J@ = FindPlayerByName(name)) != INVALID_PLAYER_ID)
	{
		SendWarning(playerid, "Þaidëjas %s prisijungæs. Naudok /unsetgroup", GetPlayerNameEx(J@));
		return 1;
	}
	
	inline findPlayerByName()
	{
		if(cache_num_rows())
		{
			new userid;
			cache_get_value_name_int(0, "UserId", userid);
			
			SendFormat(playerid, 0x7be677ff, "Vartotojui %s paðalintos visos grupës.", GetUserNameById(userid));

			inline removeGroups() return 1;
			mysql_tquery_inline(chandler, using inline removeGroups, "\
				UPDATE `users_data` SET Group1='0',Group2='0',Group3='0' WHERE id = '%d'", userid);
		}
		else SendError(playerid, "Tokio veikëjo nëra.");
	}
	mysql_tquery_inline(chandler, using inline findPlayerByName, "SELECT UserId FROM `players_data` WHERE Name = '%e'", name);
	return 1;
}

flags:unsetgroup(CMD_TYPE_ADMIN);
CMD:unsetgroup(playerid, params[])
{
	new groupsql, receiverid,
		bool:found;
	if(sscanf(params,"ud",receiverid,groupsql)) return SendUsage(playerid, "/unsetgroup [þaidëjas] [grupës MySQL ID (/groupslist)]");
	if(IsPlayerNPC(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	for(new i = 0; i < MAX_PLAYER_GROUPS; i++)
	{
		if(PlayerGroups[receiverid][i] == groupsql)
		{
			SendFormat(playerid, 0x7BE677FF, "Paðalinote þaidëjà %s ið grupës %s.", GetPlayerNameEx(receiverid), GetGroupName(groupsql));
			SendFormat(receiverid, 0x7BE677FF, "%s paðalino Jus ið grupës %s.", GetPlayerNameEx(playerid), GetGroupName(groupsql));
			PlayerGroups[receiverid][i] = 0;
			SortArray(PlayerGroups[receiverid], 0, MAX_PLAYER_GROUPS);
			SaveUserGroups(receiverid);

			found = true;
		}
	}
	if(!IsPlayerInAnyAdminGroup(receiverid) && PlayerInfo[receiverid][pAdminDuty] > 0 && found)
	{
		//if(IsValidObject(PlayerExtra[receiverid][peDutyObject])) DestroyObject(PlayerExtra[receiverid][peDutyObject]);
		if(IsValidDynamic3DTextLabel(PlayerExtra[receiverid][peDutyLabel])) DestroyDynamic3DTextLabel(PlayerExtra[receiverid][peDutyLabel]);
		//PlayerExtra[playerid][peDutyObject] = INVALID_OBJECT_ID;
		PlayerExtra[receiverid][peDutyLabel] = INVALID_3DTEXT_ID;
		if(GetPlayerSpecialAction(receiverid) == SPECIAL_ACTION_USEJETPACK) SetPlayerSpecialAction(receiverid, SPECIAL_ACTION_NONE);
		SetPlayerColor(receiverid, DEFAULT_PLAYER_COLOR);
	}
	!found && SendWarning(playerid, "Þaidëjas nëra nurodytoje grupëje.");
	return 1;
}

flags:setvw(CMD_TYPE_ADMIN);
CMD:setvw(playerid, params[])
{
	new receiverid,
		id;
	if(sscanf(params,"ud",receiverid,id)) return SendUsage(playerid, "/setvw [þaidëjas] [id]");
	SetPlayerVirtualWorld(receiverid, id);
	return 1;
}
flags:setint(CMD_TYPE_ADMIN);
CMD:setint(playerid, params[])
{
	new receiverid,
		id;
	if(sscanf(params,"ud",receiverid,id)) return SendUsage(playerid, "/setint [þaidëjas] [id]");
	SetPlayerInterior(receiverid, id);
	return 1;
}
flags:gotoxyz(CMD_TYPE_ADMIN);
CMD:gotoxyz(playerid, params[])
{
	new Float:x, Float:y, Float:z;
	if(sscanf(params,"p<,>fff",x,y,z) && sscanf(params,"p< >fff",x,y,z)) return 0;
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		SetVehiclePos(vehicleid, x, y, z+0.5);
		PutPlayerInVehicle(playerid, vehicleid, 0);
	}
	else
	{
		SetPlayerPos(playerid, x, y, z);
	}
	return 1;
}
flags:gotocar(CMD_TYPE_ADMIN);
CMD:gotocar(playerid, params[])
{
	new vehicleid;
	if(sscanf(params,"d",vehicleid)) return SendUsage(playerid, "/gotocar [id]");
	if(!IsValidVehicle(vehicleid)) return InfoBox(playerid, IB_WRONG_VEHICLE);
	new Float:x, Float:y, Float:z;
	GetVehiclePos(vehicleid, x, y, z);
	SetPlayerPos(playerid, x, y, z+0.5);
	return 1;
}/*
static 
	fp_status = false;
flags:enablefp(CMD_TYPE_ADMIN);
CMD:enablefp(playerid, params[])
{
	fp_status = !fp_status;
	SendFormat(playerid, "FP statusas buvo %s", fp_status ? ("ijungtas") : ("isjungtas"));
	return 1;
}

public OnSendPlayerCount(count)
{
	if(fp_status)
	{
	
	}	
	return Iter_Count(Player);
}*/

flags:customquery(CMD_TYPE_ADMIN);
CMD:customquery(playerid, params[])
{
	mysql_query(chandler, params, false);
	SendFormat(playerid, -1, "MySQL query:");
	SendFormat(playerid, -1, params);
	return 1;
}
flags:setstartmoney(CMD_TYPE_ADMIN);
CMD:setstartmoney(playerid, params[])
{
	SetGVarInt("StartMoney", strval(params));
	SaveServerIntEx("StartMoney", strval(params));
	SendFormat(playerid, -1, "Start money nustatytas: $%d", strval(params));
	return 1;
}

flags:cleardroppeditems(CMD_TYPE_ADMIN);
CMD:cleardroppeditems(playerid, params[])
{
	foreach(new itter : DroppedItem)
	{
		if(IsValidDynamicObject(DroppedItems[itter][droppedItemObject])) DestroyDynamicObject(DroppedItems[itter][droppedItemObject], "drops", "clear");
		new clear[E_DROPPED_ITEMS_DATA];
		DroppedItems[itter] = clear;
		DroppedItems[itter][droppedItemObject] = INVALID_OBJECT_ID;
	}
	Iter_Clear(DroppedItem);
	SendFormat(playerid, 0xFFAD40FF, "Iðvalëte visus iðmestus daiktus.");
	// AdminChat
	return 1;
}
flags:cleardroppedshells(CMD_TYPE_ADMIN);
CMD:cleardroppedshells(playerid, params[])
{
	foreach(new itter : Shell)
	{
		if(IsValidDynamicObject(Shells[itter][shellObject])) DestroyDynamicObject(Shells[itter][shellObject], "shells", "clear");
		if(IsValidDynamic3DTextLabel(Shells[itter][shellLabel])) DestroyDynamic3DTextLabel(Shells[itter][shellLabel]);
		new clear[E_SHELL_DATA];
		Shells[itter] = clear;
		Shells[itter][shellObject] = INVALID_OBJECT_ID;
		Shells[itter][shellLabel] = INVALID_3DTEXT_ID;
	}
	Iter_Clear(Shell);
	SendFormat(playerid, 0xFFAD40FF, "Iðvalëte visas gilzes.");
	// AdminChat
	return 1;
}
flags:gotobb(CMD_TYPE_ADMIN);
CMD:gotobb(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetVehiclePos(vehicleid, 217.23, -146.81, 1.58);
	}
	else
	{
		SetPlayerPos(playerid, 217.23, -146.81, 1.58);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	SendFormat(playerid, 0xECAE50FF, "Teleportavotës á Blueberry.");
	return 1;
}
flags:gotopc(CMD_TYPE_ADMIN);
CMD:gotopc(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetVehiclePos(vehicleid, 2245, 45, 26.3);
	}
	else
	{
		SetPlayerPos(playerid, 2245, 45, 26.3);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	SendFormat(playerid, 0xECAE50FF, "Teleportavotës á Palomino Creek.");
	return 1;
}
flags:gotomg(CMD_TYPE_ADMIN);
CMD:gotomg(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetVehiclePos(vehicleid, 1320.6263,301.6599,19.5547);
	}
	else
	{
		SetPlayerPos(playerid, 1320.6263,301.6599,19.5547);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	SendFormat(playerid, 0xECAE50FF, "Teleportavotës á Montgomery.");
	return 1;
}
flags:gotols(CMD_TYPE_ADMIN);
CMD:gotols(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetVehiclePos(vehicleid, 1968.5505,-1760.6094,13.5469);
	}
	else
	{
		SetPlayerPos(playerid, 1968.5505,-1760.6094,13.5469);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	SendFormat(playerid, 0xECAE50FF, "Teleportavotës á Los Santos.");
	return 1;
}
flags:gotolv(CMD_TYPE_ADMIN);
CMD:gotolv(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetVehiclePos(vehicleid, 2160.7722,2010.2777,10.8203);
	}
	else
	{
		SetPlayerPos(playerid, 2160.7722,2010.2777,10.8203);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	SendFormat(playerid, 0xECAE50FF, "Teleportavotës á Las Venturas.");
	return 1;
}
flags:gotodl(CMD_TYPE_ADMIN);
CMD:gotodl(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetVehiclePos(vehicleid, 672.0616,-522.2325,16.3359);
	}
	else
	{
		SetPlayerPos(playerid, 672.0616,-522.2325,16.3359);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	SendFormat(playerid, 0xECAE50FF, "Teleportavotës á Dillimore.");
	return 1;
}
flags:gotofc(CMD_TYPE_ADMIN);
CMD:gotofc(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetVehiclePos(vehicleid, -304.8648,1009.3004,19.5938);
	}
	else
	{
		SetPlayerPos(playerid, -304.8648,1009.3004,19.5938);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	SendFormat(playerid, 0xECAE50FF, "Teleportavotës á Fort Carson.");
	return 1;
}
flags:gotosf(CMD_TYPE_ADMIN);
CMD:gotosf(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetVehiclePos(vehicleid, -2019.4305,153.3443,28.2948);
	}
	else
	{
		SetPlayerPos(playerid, -2019.4305,153.3443,28.2948);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	SendFormat(playerid, 0xECAE50FF, "Teleportavotës á San Fierro.");
	return 1;
}
flags:gotoprison(CMD_TYPE_ADMIN);
CMD:gotoprison(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetVehiclePos(vehicleid, 295.3034,1422.0356,9.9720);
	}
	else
	{
		SetPlayerPos(playerid, 295.3034,1422.0356,9.9720);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	SendFormat(playerid, 0xECAE50FF, "Teleportavotës á kalëjimà.");
	return 1;
}
flags:unbanip(CMD_TYPE_ADMIN);
CMD:unbanip(playerid, params[])
{
	new ip[20];
	if(sscanf(params,"s[20]",ip)) return SendUsage(playerid, "/unbanip [ip]");
	new string[126];
	mysql_format(chandler, string, sizeof string, "UPDATE `players_bans` SET Valid = '0' WHERE PlayerIP = '%s'", ip);
	mysql_fquery(chandler, string, "IPDeleted");
	SendFormat(playerid, 0x60C17BFF, "Visi IP(%s) banai iðtrinti.", ip);
	// AdminChat
	return 1;
}
thread(IPDeleted);

flags:addwhitelistip(CMD_TYPE_ADMIN);
CMD:addwhitelistip(playerid, params[])
{
	new ip[20];
	if(sscanf(params,"s[20]",ip)) return SendUsage(playerid, "/addwhitelistip [ip]");
	new string[126];
	mysql_format(chandler, string, sizeof string, "INSERT INTO `server_whitelist` (`IP`,`Comment`) VALUES ('%e','Added by %e /addwhitelistip')", ip, GetUserNameById(PlayerInfo[playerid][pUserId])); 
	mysql_fquery(chandler, string, "IPDeleted");
	SendFormat(playerid, 0x60C17BFF, "IP(%s) pridëtas á whitelist.", ip);
	// AdminChat
	return 1;
}

flags:gpci(CMD_TYPE_ADMIN);
CMD:gpci(playerid, params[])
{
	new 
		gpci_string[41];
	new receiver;
	if(sscanf(params,"u",receiver)) return SendUsage(playerid, "/gpci [þaidëjas]");
	if(!CheckPlayerid(receiver)) return InfoBox(playerid, IB_WRONG_PLAYER);
	gpci(receiver, gpci_string, sizeof gpci_string);
	SendFormat(playerid, 0x60C17BFF, "%s GPCI adresas: %s", GetPlayerNameEx(receiver), gpci_string);
	return 1;
}

flags:ip(CMD_TYPE_ADMIN);
CMD:ip(playerid, params[])
{
	new receiver;
	if(sscanf(params,"u",receiver)) return SendUsage(playerid, "/ip [þaidëjas]");
	if(!CheckPlayerid(receiver)) return InfoBox(playerid, IB_WRONG_PLAYER);
	SendFormat(playerid, 0x60C17BFF, "%s IP adresas: %s", GetPlayerNameEx(receiver), GetPlayerIpEx(receiver));
	return 1;
}
flags:setweather(CMD_TYPE_ADMIN);
CMD:setweather(playerid, params[])
{
	new weather,
		string[126];
	if(sscanf(params,"d",weather)) return SendUsage(playerid, "/setweather [oras]");
	SetWeather(weather);
	
	format(string, sizeof string, "[AdmCmd] Administratorius %s pakeitë orà: %d ID", GetPlayerNameEx(playerid), weather);
	SendAdminMessage(0xFF6347AA, false, string);
	return 1;
}
flags:settime(CMD_TYPE_ADMIN);
CMD:settime(playerid, params[])
{
	new time,
		string[126];
	if(sscanf(params,"d",time)) return SendUsage(playerid, "/settime [valanda]");

	if(time < 0) 	SetWorldTime(GetWorldTime());
	else 			SetWorldTime(time);

	format(string, sizeof string, "[AdmCmd] Administratorius %s pakeitë laikà: %dval", GetPlayerNameEx(playerid), time);
	SendAdminMessage(0xFF6347AA, false, string);
	return 1;
}
flags:giveweapon(CMD_TYPE_ADMIN);
CMD:giveweapon(playerid, params[])
{
	new receiverid, weaponid, ammo, useunique;
	if(sscanf(params, "uddd", receiverid, weaponid, ammo, useunique) || !(0 <= useunique <= 1) ||  ammo < 0 || FAC_GetWeaponSlot(weaponid) == 0xFFFF) return SendUsage(playerid, "/giveweapon [þaidëjas] [ginklo id] [ammo] [ar naudot unikalø nr 0/1]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(ammo == 0)
	{
		RemovePlayerWeaponInSlot(playerid, FAC_GetWeaponSlot(weaponid));
	}
	else
	{
		GivePlayerWeapon(receiverid, weaponid, ammo, WEAPON_GIVE_TYPE_NORMAL, (useunique ? -1 : 0));
	}
	
	new string[256];
	format(string, sizeof string, "[AdmCmd] Administratorius %s davë ginklà þaidëjui %s (%s/%d/%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(receiverid), GetInventoryItemName(weaponid), ammo, useunique);
	SendAdminMessage(0xFF6347AA, false, string);

	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`,`Amount`");
	log_set_values("'%d','%e','%d','%e','Dave ginkla','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), weaponid, ammo);
	log_commit();
	return 1;
}
flags:givemoney(CMD_TYPE_ADMIN);
CMD:givemoney(playerid, params[])
{
	new receiverid, amount;
	if(sscanf(params, "ud", receiverid, amount)) return SendUsage(playerid, "/givemoney [þaidëjas] [kiekis]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	GivePlayerMoney(receiverid, amount);
	new string[256];
	format(string, sizeof string, "[AdmCmd] Administratorius %s davë pinigø þaidëjui %s (%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(receiverid), amount);
	SendAdminMessage(0xFF6347AA, false, string);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`Amount`");
	log_set_values("'%d','%e','%d','%e','Dave pinigu','%d'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), amount);
	log_commit();
	return 1;
}
flags:giveitem(CMD_TYPE_ADMIN);
CMD:giveitem(playerid, params[])
{
	new receiverid, itemid, amount, unique, string[256];
	if(sscanf(params,"uddd",receiverid, itemid,amount,unique)) return SendUsage(playerid, "/giveitem [þaidëjas] [daikto id] [kiekis] [unikalus id]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(strlen(GetInventoryItemName(itemid)) == 0) return SendWarning(playerid, "Daiktas netinkamas.");
	if(0 < itemid < 50)
	{
		if(unique > 0)
		{
			SendError(playerid, "Unikalaus numerio ginklui negalite nustatyti (naudokite -1 naujam numeriui, 0 - neregistruoti ginklo)");
			return 0;
		}
		else
		{
			mysql_format(chandler, string, sizeof string, "INSERT INTO `weapons_data` (`WeaponModel`,`GiveAmmo`,`GiveType`) VALUES ('%d','%d','%d')", itemid, amount, WEAPON_GIVE_TYPE_NORMAL);
			new Cache:result = mysql_query(chandler, string, true);
			if(mysql_errno() != 0)
			{
				format(string, 8, "%d", mysql_errno());
				SendCriticalError(playerid, "Ginklas neduotas dël MySQL klaidos", string);
				cache_delete(result);
				return 0;
			}
			else
			{
				unique = cache_insert_id();
				cache_delete(result);
			}
		}
	}
	if(!GivePlayerInventoryItem(receiverid, itemid, amount,unique)) return SendWarning(playerid, "Þaidëjas neturi vietos inventoriuje.");
	format(string, sizeof string, "[AdmCmd] Administratorius %s davë daiktà þaidëjui %s (%s/%d/%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(receiverid), GetInventoryItemName(itemid), amount, unique);
	SendAdminMessage(0xFF6347AA, false, string);
	log_init(true);
	format(string, sizeof string, "%d", unique);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`,`Amount`,`ExtraString`");
	log_set_values("'%d','%e','%d','%e','Dave daikta','%d','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), itemid, amount, string);
	log_commit();
	return 1;
}
flags:lockacc(CMD_TYPE_ADMIN);
CMD:lockacc(playerid, params[])
{
	new receiverid, reason[128];
	if(sscanf(params,"us[128]",receiverid,reason)) return SendUsage(playerid, "/lockacc [þaidëjas] [prieþastis]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!strlen(reason)) return SendWarning(playerid, "Áveskite prieþastá.");
	LockAccount(receiverid, GetPlayerNameEx(playerid), reason);
	return 1;
}
flags:warn(CMD_TYPE_ADMIN);
CMD:warn(playerid, params[])
{
	new receiverid, reason[128];
	if(sscanf(params,"us[128]",receiverid,reason)) return SendUsage(playerid, "/warn [þaidëjas] [prieþastis]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!strlen(reason)) return SendWarning(playerid, "Áveskite prieþastá.");
	WarnPlayer(receiverid, GetPlayerNameEx(playerid), reason);
	return 1;
}
flags:ban(CMD_TYPE_ADMIN);
CMD:ban(playerid, params[])
{
	new receiverid, reason[128], time;
	if(sscanf(params,"uds[128]",receiverid,time,reason)) return SendUsage(playerid, "/ban [þaidëjas] [laikas minutëmis(0 visam laikui)] [prieþastis]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!strlen(reason)) return SendWarning(playerid, "Áveskite prieþastá.");
	if(time >= 0)
	{
		if(time > 0)
		{
			BanPlayer(receiverid, GetPlayerNameEx(playerid), reason, time);
		}
		else if(time == 0)
		{
			BanPlayer(receiverid, GetPlayerNameEx(playerid), reason, -1);
		}
		log_init(true);
		log_set_table("logs_admins");
		log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`,`ExtraString`");
		log_set_values("'%d','%e','%d','%e','Uzblokavo','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), time, reason);
		log_commit();
	}
	else
	{
		SendWarning(playerid, "neteisingai ávestas laikas.");
	}
	return 1;
}
flags:jail(CMD_TYPE_ADMIN);
CMD:jail(playerid, params[])
{
	new receiverid, time, reason[128];
	if(sscanf(params,"uds[128]",receiverid,time,reason)) return SendUsage(playerid, "/jail [þaidëjas] [laikas minutëmis] [prieþastis]");
	if(!strlen(reason) || !CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	JailPlayer(receiverid, GetPlayerNameEx(playerid), reason, time);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`,`ExtraString`");
	log_set_values("'%d','%e','%d','%e','Uzjailino','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), time, reason);
	log_commit();
	return 1;
}
stock JailPlayer(playerid, adminname[], reason[], time = 0, type = 3)
{
	PlayerInfo[playerid][pJailType] = type;
	PlayerInfo[playerid][pJailTime] = time*60;
	new string[256];
	mysql_format(chandler, string, sizeof string, "INSERT INTO `players_jails` (`PlayerId`,`JailerName`,`JailType`,`JailTime`,`Reason`,`Valid`) VALUES ('%d','%d','%d','%d','%e','1')", PlayerInfo[playerid][pId], adminname, type, time*60, reason);
	mysql_fquery(chandler, string, "PlayerJailed");
	switch(type)
	{
		case 1:
		{
			// arestine
			SetPlayerInterior(playerid, GetGVarInt("ArrestSpawnInt"));
			SetPlayerVirtualWorld(playerid, GetGVarInt("ArrestSpawnVW"));
			SetPlayerPos(playerid, GetGVarFloat("ArrestSpawnX"), GetGVarFloat("ArrestSpawnY"), GetGVarFloat("ArrestSpawnZ"));
		}
		case 2:
		{
			// prison
			SetPlayerInterior(playerid, GetGVarInt("JailSpawnInt"));
			SetPlayerVirtualWorld(playerid, GetGVarInt("JailSpawnVW"));
			SetPlayerPos(playerid, GetGVarFloat("JailSpawnX"), GetGVarFloat("JailSpawnY"), GetGVarFloat("JailSpawnZ"));
		}
		case 3:
		{
			// ooc
			SetPlayerInterior(playerid, GetGVarInt("OOCJailSpawnInt"));
			SetPlayerVirtualWorld(playerid, GetGVarInt("OOCJailSpawnVW"));
			SetPlayerPos(playerid, GetGVarFloat("OOCJailSpawnX"), GetGVarFloat("OOCJailSpawnY"), GetGVarFloat("OOCJailSpawnZ"));
		}
	}
	log_init(true);
	format(string, sizeof string, "Pasodintas i kalejima nuo %s", adminname);
	log_set_table("logs_players");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`,`ExtraString`");
	log_set_values("'%d','%e','%e','%d','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), string, type, time, reason);
	log_commit();
	if(type == 3)
	{
		SendACMessage(0xFF6347AA, false, "[AdmCmd] Administratorius %s pasodino %s á kalëjimà (%d minutëm).", adminname, GetPlayerNameEx(playerid), time);
		SendACMessage(0xFF6347AA, false, "Prieþastis: %s", reason);
	}
}
stock BanPlayer(playerid, adminname[], reason[], time = -1) // time = minutem
{
	new string[328];
	static LastBanTime[MAX_PLAYERS];
	if(LastBanTime[playerid]+2 > gettime())
	{
		// neleidziam 2 ban iskart irasyt, kartais AC taip daro
		return 1;
	}
	new 
		gpci_string[41];
	gpci(playerid, gpci_string, sizeof gpci_string);

	LastBanTime[playerid] = gettime();
	ClearChat(playerid, 10);
	if(time != -1)
	{
		mysql_format(chandler, string, sizeof string, "INSERT INTO `players_bans` (`PlayerName`,`PlayerIP`,`AdminName`,`Reason`,`UnbanTime`,`Valid`,`gpci`) VALUES ('%s','%s','%s','%e','%d','1','%e')", GetUserNameById(PlayerInfo[playerid][pUserId]), GetPlayerIpEx(playerid), adminname, reason, time, gpci_string);
		mysql_fquery(chandler, string, "LimitedBanAdd");
		SendACMessage(0xFF6347AA, false, "[AdmCmd] %s uþblokavo %s (%d minutëm).", adminname, GetPlayerNameEx(playerid), time);
		SendACMessage(0xFF6347AA, false, "Prieþastis: %s", reason);
	}
	else
	{
		mysql_format(chandler, string, sizeof string, "INSERT INTO `players_bans` (`PlayerName`,`PlayerIP`,`AdminName`,`Reason`,`UnbanTime`,`Valid`,`gpci`) VALUES ('%s','%s','%s','%e','-1','1','%e')", GetUserNameById(PlayerInfo[playerid][pUserId]), GetPlayerIpEx(playerid), adminname, reason, gpci_string);
		mysql_fquery(chandler, string, "UnlimitedBanAdd");
		SendACMessage(0xFF6347AA, false, "[AdmCmd] %s uþblokavo %s visam laikui.", adminname, GetPlayerNameEx(playerid));
		SendACMessage(0xFF6347AA, false, "Prieþastis: %s", reason);
	}
	log_init(true);
	format(string, sizeof string, "Uzblokuotas nuo %s", adminname);
	log_set_table("logs_players");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Amount`,`ExtraString`");
	log_set_values("'%d','%e','%e','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), string, time, reason);
	log_commit();
	KickEx(playerid);
	return 1;
}

stock WarnPlayer(playerid, adminname[], reason[])
{
	new string[300];
	mysql_format(chandler, string, sizeof string, "INSERT INTO `players_warns` (`PlayerName`,`AdminName`,`Reason`) VALUES ('%e','%e','%e')", GetPlayerNameEx(playerid), adminname, reason);
	mysql_fquery(chandler, string, "LockAccAdd");
	SendACMessage(0xFF6347AA, false, "[AdmCmd] %s áspëjo þaidëjà %s.", adminname, GetPlayerNameEx(playerid));
	SendACMessage(0xFF6347AA, false, "Prieþastis: %s", reason);
	log_init(true);
	format(string, sizeof string, "Gavo ispejima nuo %s", adminname);
	log_set_table("logs_players");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
	log_set_values("'%d','%e','%e','%e'", LogPlayerId(playerid), LogPlayerName(playerid), string, reason);
	log_commit();
	PlayerInfo[playerid][pWarns]++;
	if(PlayerInfo[playerid][pWarns] >= WARNS_TO_BAN)
	{
		PlayerInfo[playerid][pWarns] = 0;
		SaveAccountIntEx(playerid, "Warns", 0);
		BanPlayer(playerid, "Sistema", "Surinko "#WARNS_TO_BAN" áspëjimus", 4320);
	}
	else
	{
		SaveAccountIntEx(playerid, "Warns", PlayerInfo[playerid][pWarns]);
	}

	return 1;
}

stock LockAccount(playerid, adminname[], reason[])
{
	new string[300];
	mysql_format(chandler, string, sizeof string, "INSERT INTO `players_locks` (`PlayerName`,`AdminName`,`Reason`,`Valid`) VALUES ('%s','%s','%s','1')", GetPlayerNameEx(playerid), adminname, reason);
	mysql_fquery(chandler, string, "LockAccAdd");
	SendACMessage(0xFF6347AA, false, "[AdmCmd] %s uþrakino veikëjo %s sàskaità.", adminname, GetPlayerNameEx(playerid));
	SendACMessage(0xFF6347AA, false, "Prieþastis: %s", reason);
	log_init(true);
	format(string, sizeof string, "Saskaita uzrakinta nuo %s", adminname);
	log_set_table("logs_players");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
	log_set_values("'%d','%e','%e','%e'", LogPlayerId(playerid), LogPlayerName(playerid), string, reason);
	log_commit();
	KickEx(playerid);
	return 1;
}

stock KickPlayer(playerid, adminname[], reason[])
{
	ClearChat(playerid, 10);
	SendACMessage(0xFF6347AA, false, "[AdmCmd] %s iðmetë þaidëjà %s ið serverio.", adminname, GetPlayerNameEx(playerid));
	SendACMessage(0xFF6347AA, false, "Prieþastis: %s", reason);

	new string[56];
	format(string, sizeof string, "Ismestas nuo %s", adminname);
	log_init(true);
	log_set_table("logs_players");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
	log_set_values("'%d','%e','%e','%e'", LogPlayerId(playerid), LogPlayerName(playerid), string, reason);
	log_commit();

	KickEx(playerid);
	return 1;
}

flags:spec(CMD_TYPE_ADMIN);
CMD:spec(playerid, params[])
{
	log_init(true);
	log_set_table("logs_admins");
	if(SpectateOn[playerid] != INVALID_PLAYER_ID)
	{
		TogglePlayerSpectating(playerid, 0);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SendFormat(playerid, 0xE5C43EAA, "Iðjungëte stebëjimà.");
		SpectateOn[playerid] = INVALID_PLAYER_ID;
		log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ActionText`");
		log_set_values("'%d','%e','-1','Baige stebeti zaideja'", LogPlayerId(playerid), LogPlayerName(playerid));
	}
	else
	{
		new receiverid;
		if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/spectate [þaidëjas]");
		if(!CheckPlayerid(receiverid) || playerid == receiverid) return InfoBox(playerid, IB_WRONG_PLAYER);
		

		TogglePlayerSpectating(playerid, 1);
		
		GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
		
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(receiverid));
		SetPlayerInterior(playerid, GetPlayerInterior(receiverid));

		if(IsPlayerInAnyVehicle(receiverid)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(receiverid));
		else PlayerSpectatePlayer(playerid, receiverid);

		SpectateOn[playerid] = receiverid;

		SendFormat(playerid, 0xE5C43EAA, "Stebite þaidëjà %s. Norëdami iðjungti, raðykite /spectate dar kartà.", GetPlayerNameEx(receiverid));
		log_set_table("logs_admins");
		log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
		log_set_values("'%d','%e','%d','%e','Pradejo stebeti zaideja'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
	}
	log_commit();
	return 1;
}
flags:sethp(CMD_TYPE_ADMIN);
CMD:sethp(playerid, params[])
{
	new receiverid, hp;
	if(sscanf(params,"ud",receiverid,hp)) return SendUsage(playerid, "/sethp [þaidëjas] [hp]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	SetPlayerHealth(receiverid, hp);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`Amount`");
	log_set_values("'%d','%e','%d','%e','Pakeite HP','%d'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), hp);
	log_commit();
	return 1;
}
flags:setarmour(CMD_TYPE_ADMIN);
CMD:setarmour(playerid, params[])
{
	new receiverid, armour;
	if(sscanf(params,"ud",receiverid,armour)) return SendUsage(playerid, "/setarmour [þaidëjas] [armour]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	SetPlayerArmour(receiverid, armour);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`Amount`");
	log_set_values("'%d','%e','%d','%e','Pakeite armour','%d'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), armour);
	log_commit();
	return 1;
}
flags:slap(CMD_TYPE_ADMIN);
CMD:slap(playerid, params[])
{
	new receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/goto [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	new Float:x, Float:y, Float:z;
	GetPlayerPos(receiverid, x, y, z);
	SetPlayerPos(receiverid, x, y, z+4.0);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
	log_set_values("'%d','%e','%d','%e','Slap zaideja'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}
flags:unfreeze(CMD_TYPE_ADMIN);
CMD:unfreeze(playerid, params[])
{
	new receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/unfreeze [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	TogglePlayerControllable(receiverid, 1);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
	log_set_values("'%d','%e','%d','%e','Uzfreezino zaideja'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}
flags:freeze(CMD_TYPE_ADMIN);
CMD:freeze(playerid, params[])
{
	new receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/freeze [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	TogglePlayerControllable(receiverid, 0);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
	log_set_values("'%d','%e','%d','%e','Uzfreezino zaideja'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}
thread(PlayerJailed);
flags:mute(CMD_TYPE_ADMIN);
CMD:mute(playerid, params[])
{
	new receiverid, time;
	if(sscanf(params,"ud",receiverid,time) || time < 0) return SendUsage(playerid, "/mute [þaidëjas] [laikas minutëmis]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	log_init(true);
	if(PlayerExtra[receiverid][peMuted] > 0)
	{
		// nueme
		log_set_table("logs_admins");
		log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
		log_set_values("'%d','%e','%d','%e','Uzmutino zaideja'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
		PlayerExtra[receiverid][peMuted] = 0;
		SendFormat(playerid, 0xFFDE6EFF, "Leidote þaidëjui %s vël kalbëti.", GetPlayerNameEx(receiverid, false));
		SendFormat(receiverid, 0xFFDE6EFF, "%s leido Jums kalbëti.", GetPlayerNameEx(playerid, false));
	}
	else
	{
		// uzdejo
		log_set_table("logs_admins");
		log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`Amount`");
		log_set_values("'%d','%e','%d','%e','Uzmutino zaideja','%d'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), time);
		PlayerExtra[receiverid][peMuted] = time*60;
		SendFormat(playerid, 0xFFDE6EFF, "Uþdraudëte kalbëti þaidëjui %s %d minutëm (naudokite /mute dar kartà).", GetPlayerNameEx(receiverid, false), time);
		SendFormat(receiverid, 0xFFDE6EFF, "%s uþdraudë Jums kalbëti %d minuèiø.", GetPlayerNameEx(playerid, false), time);
	}
	log_commit();
	return 1;
}
flags:goto(CMD_TYPE_ADMIN);
CMD:goto(playerid, params[])
{
	new receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/goto [þaidëjas]");
	if(!CheckPlayerid(receiverid) || playerid == receiverid) return InfoBox(playerid, IB_WRONG_PLAYER);
	new Float:x, Float:y, Float:z;
	GetPlayerPos(receiverid, x, y, z);
	if(IsPlayerInAnyVehicle(playerid))
	{
		SetVehiclePos(GetPlayerVehicleID(playerid), x, y, z+0.5);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(receiverid));
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), GetPlayerVirtualWorld(receiverid));
	}
	else
	{
		SetPlayerPos(playerid, x+0.05, y+0.05, z+0.05);
	}
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(receiverid));
	SetPlayerInterior(playerid, GetPlayerInterior(receiverid));
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
	log_set_values("'%d','%e','%d','%e','Goto'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}

CMD:getanimindex(playerid, params[]) 
{
	SendFormat(playerid, -1, "Animacijos indeksas: %d", GetPlayerAnimationIndex(playerid));
	return 1;
}
flags:gethere(CMD_TYPE_ADMIN);
CMD:gethere(playerid, params[])
{
	new receiverid,
		vehicleid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/gethere [þaidëjas]");
	if(!CheckPlayerid(receiverid) || playerid == receiverid) return InfoBox(playerid, IB_WRONG_PLAYER);
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(!IsPlayerInAnyVehicle(receiverid))
	{
		SetPlayerPos(receiverid, x+0.05, y+0.05, z+0.05);
		SetPlayerVirtualWorld(receiverid, GetPlayerVirtualWorld(playerid));
		SetPlayerInterior(receiverid, GetPlayerInterior(playerid));
	}
	else
	{
		vehicleid = GetPlayerVehicleID(receiverid);
		SetVehiclePos(vehicleid, x, y, z+0.5);
		LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	}
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
	log_set_values("'%d','%e','%d','%e','Gethere'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}
CMD:oldcar(playerid, params[])
{
	SendFormat(playerid, -1, "Jûsø paskutinës tr. priemonës ID: %d", OldVehicle[playerid]);
	return 1;
}
flags:getcar(CMD_TYPE_ADMIN);
CMD:getcar(playerid, params[])
{
	new vehicleid;
	if(sscanf(params,"d",vehicleid))
	{
		if(!IsValidVehicle(OldVehicle[playerid])) return SendUsage(playerid, "/getcar [id]");
		LinkVehicleToInterior(OldVehicle[playerid], GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(OldVehicle[playerid], GetPlayerVirtualWorld(playerid));
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SetVehiclePos(OldVehicle[playerid], x, y, z+0.5);
	}
	else
	{
		if(!IsValidVehicle(vehicleid)) return InfoBox(playerid, IB_WRONG_VEHICLE);
		LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SetVehiclePos(vehicleid, x, y, z+0.5);
	}
	return 1;
}
flags:kickall(CMD_TYPE_ADMIN);
CMD:kickall(playerid, params[])
{
	new reason[126];
	if(sscanf(params,"s[126]",reason)) return SendUsage(playerid, "/kickall [prieþastis]");

	SendACMessage(0xFF6347AA, true, "[AdmCmd] %s iðmetë visus þaidëjus ið serverio.", GetPlayerNameEx(playerid));
	SendACMessage(0xFF6347AA, true, "Prieþastis: %s", reason);

	foreach(new receiverid : Player)
	{
		if(!IsPlayerNPC(receiverid) && receiverid != playerid)
		{
			KickEx(receiverid);
		}
	}
	return 1;
}
flags:kick(CMD_TYPE_ADMIN);
CMD:kick(playerid, params[])
{
	new receiverid, reason[126];
	if(sscanf(params,"us[126]", receiverid, reason)) return SendUsage(playerid, "/kick [þaidëjas] [prieþastis]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!strlen(reason)) return SendWarning(playerid, "áveskite prieþastá.");
	KickPlayer(receiverid, GetPlayerNameEx(playerid), reason);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraString`");
	log_set_values("'%d','%e','%d','%e','Ismete zaideja','%e'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), reason);
	log_commit();
	return 1;
}
flags:ado(CMD_TYPE_ADMIN);
CMD:ado(playerid, params[])
{
	new text[129];
	if(sscanf(params,"s[129]",text)) return SendUsage(playerid, "/ado [tekstas]");
	strins(text, "* ", 0);
	SendChatMessageToAll(0xFF8C34FF, text);
	return 1;
}

flags:setstat(CMD_TYPE_ADMIN);
CMD:setstat(playerid, params[])
{
	new
		receiverid,
		code,
		amount;
	if(sscanf(params,"udd",receiverid,code,amount) || (amount < 0 && code != 4) || !(1 <= code <= 13)) return
		SendUsage(playerid, "/setstat [þaidëjas] [kodas] [kiekis]"),
		MsgInfo(playerid, "KODAI", "[1 - lygis] [2 - patirtis] [3 - darbas] [4 - bankas] [13 - sidejob]"),
		MsgInfo(playerid, "KODAI", "[5 - tel. nr] [6 - darbo lygis] [7 - gimimo data] [8 - ]"),
		MsgInfo(playerid, "KODAI", "[9 - aut. teises] [10 - moc. teises] [11 - valt. teises] [12 - lekt. teises]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	switch(code)
	{
		case 1:
		{
			PlayerInfo[receiverid][pLevel] = amount;
			SetPlayerScore(receiverid, amount);
			MsgSuccess(playerid, "ÞAIDËJAS", "Lygis pakeistas á %d", amount);
		}
		case 2:
		{
			PlayerInfo[receiverid][pXP] = amount;
			MsgSuccess(playerid, "ÞAIDËJAS", "Patirtis pakeista á %d", amount);
		}
		case 3:
		{
			PlayerInfo[receiverid][pJob] = amount;
			MsgSuccess(playerid, "ÞAIDËJAS", "Darbas pakeistas á %d", amount);
		}
		case 4:
		{
			PlayerInfo[receiverid][pBank] = amount;
			MsgSuccess(playerid, "ÞAIDËJAS", "Banko pinigai pakeisti á %d", amount);
		}
		case 5:
		{
			PlayerInfo[receiverid][pPhoneNumber] = amount;
			MsgSuccess(playerid, "ÞAIDËJAS", "Telefono numeris pakeistas á %d", amount);
		}
		case 6:
		{
			PlayerInfo[receiverid][pJobLevel] = amount;
			MsgSuccess(playerid, "ÞAIDËJAS", "Darbo lygis pakeistas á %d", amount);
		}
		case 7:
		{
			PlayerInfo[receiverid][pBirthDate] = amount;
			MsgSuccess(playerid, "ÞAIDËJAS", "Gimimo data pakeista á %d", amount);
		}
		case 8:
		{
			if(1 <= amount <= 2)
			{
				
				MsgSuccess(playerid, "ÞAIDËJAS", "Atvykimo tipas pakeistas á %d", amount);
			}
		}
		case 9:
		{
			if(0 <= amount <= 1)
			{
				PlayerInfo[receiverid][pCarLic] = amount;
				MsgSuccess(playerid, "ÞAIDËJAS", "Teisës pakeistos á %d", amount);
			}
		}
		case 10:
		{
			if(0 <= amount <= 1)
			{
				PlayerInfo[receiverid][pMotoLic] = amount;
				MsgSuccess(playerid, "ÞAIDËJAS", "Teisës pakeistos á %d", amount);
			}
		}
		case 11:
		{
			if(0 <= amount <= 1)
			{
				PlayerInfo[receiverid][pBoatLic] = amount;
				MsgSuccess(playerid, "ÞAIDËJAS", "Teisës pakeistos á %d", amount);
			}
		}
		case 12:
		{
			if(0 <= amount <= 1)
			{
				PlayerInfo[receiverid][pFlyLic] = amount;
				MsgSuccess(playerid, "ÞAIDËJAS", "Teisës pakeistos á %d", amount);
			}
		}
		case 13:
		{
			PlayerInfo[receiverid][pSideJob] = amount;
			MsgSuccess(playerid, "ÞAIDËJAS", "Sidejob pakeistos á %d", amount);
		}
	}
	SaveAccount(receiverid);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`,`ExtraId`,`Amount`");
	log_set_values("'%d','%e','%d','%e','Pakeite stats','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), code, amount);
	log_commit();
	return 1;
}

flags:setstatcar(CMD_TYPE_ADMIN);
CMD:setstatcar(playerid, params[])
{
	new
		code,
		amount,
		vehicleid = INVALID_VEHICLE_ID;
	if(sscanf(params,"udd",code,amount) || amount < 0) return
		SendUsage(playerid, "/setstat [kodas] [kiekis]"),
		MsgInfo(playerid, "KODAI", "[1 - draudimas] [2 - ak. proc] [3 - var. proc]");
	if(!IsPlayerInAnyVehicle(playerid) || (vehicleid = GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(VehicleInfo[vehicleid][vFaction] != 0 || VehicleInfo[vehicleid][vJob] != 0) return SendError(playerid, "Tr. priemonë priklauso frakcijai arba darbui.");
	switch(code)
	{
		case 1:
		{
			VehicleInfo[vehicleid][vInsurance] = amount;
   			SaveVehicleIntEx(vehicleid, "Insurance", amount);
			MsgSuccess(playerid, "TR. PRIEMONË", "Draudimas pakeistas á %d", amount);
		}
		case 2:
		{
			VehicleInfo[vehicleid][vBatteryStatus] = float(amount);
			SaveVehicleFloatEx(vehicleid, "BatteryStatus", float(amount));
			MsgSuccess(playerid, "TR. PRIEMONË", "Akumuliatoriaus procentø kiekis pakeistas á %d", amount);
		}
		case 3:
		{
			VehicleInfo[vehicleid][vEngineStatus] = float(amount);
   			SaveVehicleFloatEx(vehicleid, "EngineStatus", float(amount));
			MsgSuccess(playerid, "TR. PRIEMONË", "Variklio procentø kiekis pakeistas á %d", amount);
		}
	}
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ActionText`,`ExtraId`,`Amount`");
	log_set_values("'%d','%e','%d','Pakeite car stats','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId], code, amount);
	log_commit();
	return 1;
}

flags:avote(CMD_TYPE_ADMIN);
CMD:avote(playerid, params[])
{
	new string[126];
	if(sscanf(params,"s[126]",string)) return SendUsage(playerid, "/avote [klausimas]");
	if(LastVote != 0) return SendWarning(playerid, "Balsavimas dar vyksta.");
	SetTimerEx("AdminVoteTimer", 60000, false, "d", playerid);
	SendFormatToAll(0xFFFFFFFF, "Administratorius %s uþdavë klausimà:", GetPlayerNameEx(playerid));
	SendFormatToAll(0xFFFFFFFF, string);
	SendFormatToAll(0xF8F8F8FF, "Balsuoti galite naudodami /taip arba /ne");
	LastVote = 1;
	return 1;
}

forward AdminVoteTimer(playerid);
public AdminVoteTimer(playerid)
{
	SendAdminMessage(0xFFFFFFFF, false, "Balsavimas baigësi: %d taip, %d ne.", LastVoteYes, LastVoteNo);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		LastVotePlayer[i] = 0;
	}
	LastVote = 0;
	LastVoteYes = 0;
	LastVoteNo = 0;
	return 1;
}

CMD:taip(playerid, params[])
{
	if(LastVote <= 0) return SendWarning(playerid, "Balsavimas nevyksta.");
	if(LastVotePlayer[playerid] > 0) return SendWarning(playerid, "Jûs jau balsavote.");
	LastVoteYes++;
	LastVotePlayer[playerid] = 1;
	SendFormat(playerid, 0xBABABAFF, "Prabalsavote uþ atsakymà \"taip\"");
	return 1;
}

CMD:ne(playerid, params[])
{
	if(LastVote <= 0) return SendWarning(playerid, "Balsavimas nevyksta.");
	if(LastVotePlayer[playerid] > 0) return SendWarning(playerid, "Jûs jau balsavote.");
	LastVoteNo++;
	LastVotePlayer[playerid] = 1;
	SendFormat(playerid, 0xBABABAFF, "Prabalsavote uþ atsakymà \"ne\"");
	return 1;
}

flags:aheal(CMD_TYPE_ADMIN);
CMD:aheal(playerid, params[])
{
	new receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/aheal [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(PlayerExtra[receiverid][peDeath] > 0)
	{
		PlayerExtra[receiverid][peDeath] = 0;
		PlayerInfo[receiverid][pCurrentStatus] = PLAYER_STATUS_DEFAULT;
		DestroyDynamic3DTextLabel(PlayerExtra[receiverid][peDeathLabel]);
		PlayerExtra[receiverid][peDeathLabel] = INVALID_3DTEXT_ID;
		StopLoopAnim(receiverid);
		PlayerTextDrawHide(receiverid, DeathScreenTD[receiverid]);
	}
	SetPlayerHealth(receiverid, 100.0);
	Iter_Clear(PlayerDamages[receiverid]);
	new vehicle;
	if((vehicle = GetPlayerVehicleID(receiverid)) != INVALID_VEHICLE_ID)
	{
		RepairVehicle(vehicle);
		SetVehicleHealth(vehicle, 1000.0);
	}
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
	log_set_values("'%d','%e','%d','%e','Pagyde'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}
flags:ao(CMD_TYPE_ADMIN);
CMD:ao(playerid, params[])
{
	new text[129],
		string[256];
	if(sscanf(params,"s[129]",text)) return SendUsage(playerid, "/ado [tekstas]");
	format(string, sizeof string, "(( %s %s[%d]: %s ))", GetGroupName(PlayerGroups[playerid][0]), GetPlayerNameEx(playerid), playerid, text);
	SendChatMessageToAll(0xFF8900FF, string);
	return 1;
}
CMD:blindfold(playerid, params[])
{
	if(!PlayerExtra[playerid][peBlind])
	{
		PlayerExtra[playerid][peBlind] = true;
		TextDrawShowForPlayer(playerid, BlindfoldTD);
	}
	else
	{
		PlayerExtra[playerid][peBlind] = false;
		TextDrawHideForPlayer(playerid, BlindfoldTD);
	}
	return 1;
}


flags:afriskproperty(CMD_TYPE_ADMIN);
CMD:afriskproperty(playerid, params[])
{
	new 
		itter = -1;

	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ReceiverId`");
	if((itter = GetClosestHouse(playerid, 60.0, CHECK_TYPE_INSIDE)) != INVALID_HOUSE_ID)
	{
		SendFormat(playerid, 0xa74e4eff, "Namo inventorius:");
		for(new i = 0; i < MAX_HOUSE_INVENTORY_SLOTS; i++)
		{
			if(HouseInventory[itter][i][invId] <= 0) SendFormat(playerid, 0xBABABAFF, "%d. Tuðèia");
			else SendFormat(playerid, 0xFFFFFFFF, "%d. %s [%d vnt.] [e. id: %d]", i + 1, GetInventoryItemName(HouseInventory[itter][i][invId]), HouseInventory[itter][i][invAmount], HouseInventory[itter][i][invExtraId]);
		}
		log_set_values("'%d','%e','Apieskojo nama','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[itter][hId]);
		log_commit();
		return 1;
	}
	else if((itter = GetClosestBusiness(playerid, 60.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID)
	{
		SendFormat(playerid, 0xa74e4eff, "Verslo inventorius:");
		for(new i = 0; i < MAX_BUSINESS_INVENTORY_SLOTS; i++)
		{
			if(HouseInventory[itter][i][invId] <= 0) SendFormat(playerid, 0xBABABAFF, "%d. Tuðèia");
			else SendFormat(playerid, 0xFFFFFFFF, "%d. %s [%d vnt.] [e. id: %d]", i + 1, GetInventoryItemName(BusinessInventory[itter][i][invId]), BusinessInventory[itter][i][invAmount], BusinessInventory[itter][i][invExtraId]);
		}
		log_set_values("'%d','%e','Apieskojo versla','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[itter][bId]);
		log_commit();
		return 1;
	}
	else if((itter = GetClosestDealerHouse(playerid, 60.0, CHECK_TYPE_INSIDE)) != INVALID_HOUSE_ID)
	{
		SendFormat(playerid, 0xa74e4eff, "Namo inventorius:");
		for(new i = 0; i < MAX_DEALER_HOUSE_INVENTORY_SLOTS; i++)
		{
			if(HouseInventory[itter][i][invId] <= 0) SendFormat(playerid, 0xBABABAFF, "%d. Tuðèia");
			else SendFormat(playerid, 0xFFFFFFFF, "%d. %s [%d vnt.] [e. id: %d]", i + 1, GetInventoryItemName(DealerHouseInventory[itter][i][invId]), DealerHouseInventory[itter][i][invAmount], DealerHouseInventory[itter][i][invExtraId]);
		}
		log_set_values("'%d','%e','Apieskojo dealer house','%d'", LogPlayerId(playerid), LogPlayerName(playerid), DealerHouseInfo[itter][dealerHouseId]);
		log_commit();
		return 1;
	}
	SendError(playerid, "Nesate name arba versle.");
	return 1;
}

CMD:friskproperty(playerid, params[])
{
	new 
		itter = -1;

	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE || factionid == -1) return SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");

	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`");
	if((itter = GetClosestHouse(playerid, 60.0, CHECK_TYPE_INSIDE)) != INVALID_HOUSE_ID)
	{
		SendFormat(playerid, 0xa74e4eff, "Namo inventorius:");
		for(new i = 0; i < MAX_HOUSE_INVENTORY_SLOTS; i++)
		{
			if(HouseInventory[itter][i][invId] <= 0) SendFormat(playerid, 0xBABABAFF, "%d. Tuðèia");
			else SendFormat(playerid, 0xFFFFFFFF, "%d. %s [%d vnt.] [e. id: %d]", i + 1, GetInventoryItemName(HouseInventory[itter][i][invId]), HouseInventory[itter][i][invAmount], HouseInventory[itter][i][invExtraId]);
		}
		log_set_values("'%d','%e','%d','%e','Apieskojo nama','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), HouseInfo[itter][hId]);
		log_commit();
		rp_me(playerid, _, "padaro namo kratà.");
		return 1;
	}
	else if((itter = GetClosestBusiness(playerid, 60.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID)
	{
		SendFormat(playerid, 0xa74e4eff, "Verslo inventorius:");
		for(new i = 0; i < MAX_BUSINESS_INVENTORY_SLOTS; i++)
		{
			if(BusinessInventory[itter][i][invId] <= 0) SendFormat(playerid, 0xBABABAFF, "%d. Tuðèia");
			else SendFormat(playerid, 0xFFFFFFFF, "%d. %s [%d vnt.] [e. id: %d]", i + 1, GetInventoryItemName(BusinessInventory[itter][i][invId]), BusinessInventory[itter][i][invAmount], BusinessInventory[itter][i][invExtraId]);
		}
		rp_me(playerid, _, "padaro verslo kratà.");
		log_set_values("'%d','%e','%d','%e','Apieskojo versla','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), BusinessInfo[itter][bId]);
		log_commit();
		return 1;
	}
	else if((itter = GetClosestDealerHouse(playerid, 60.0, CHECK_TYPE_INSIDE)) != INVALID_HOUSE_ID)
	{
		SendFormat(playerid, 0xa74e4eff, "Namo inventorius:");
		for(new i = 0; i < MAX_DEALER_HOUSE_INVENTORY_SLOTS; i++)
		{
			if(DealerHouseInventory[itter][i][invId] <= 0) SendFormat(playerid, 0xBABABAFF, "%d. Tuðèia");
			else SendFormat(playerid, 0xFFFFFFFF, "%d. %s [%d vnt.] [e. id: %d]", i + 1, GetInventoryItemName(DealerHouseInventory[itter][i][invId]), DealerHouseInventory[itter][i][invAmount], DealerHouseInventory[itter][i][invExtraId]);
		}
		rp_me(playerid, _, "padaro namo kratà.");
		log_set_values("'%d','%e','%d','%e','Apieskojo dealer house','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), DealerHouseInfo[itter][dealerHouseId]);
		log_commit();
		return 1;
	}


	SendError(playerid, "Nesate name arba versle.");
	return 1;
}

CMD:frisk(playerid, params[])
{
	new receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/frisk [þaidëjas]");
	if(!CheckPlayerid(playerid) || playerid == receiverid) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	Offer[receiverid][0] = OFFER_TYPE_FRISK, // type
	Offer[receiverid][1] = playerid;
	SendFormat(playerid, 0xB4E6B4FF, "Norite apieðkoti %s, palaukite, kol jis sutiks.", GetPlayerNameEx(receiverid, .roleplay = true, .ignoremask = false));
	SendFormat(receiverid, 0xB4E6B4FF, "%s nori jus apieðkoti, naudokite /acceptfrisk.", GetPlayerNameEx(playerid, .roleplay = true, .ignoremask = false));
	return 1;
}

CMD:acceptfrisk(playerid, params[])
{
	new owner = Offer[playerid][1];
	if(Offer[playerid][0] != OFFER_TYPE_FRISK) return SendWarning(playerid, "Jûsø niekas nenori apieðkoti.");
	if(!IsPlayerConnected(owner) || !IsPlayerInRangeOfPlayer(playerid, owner, 5.0))
	{
		Offer[playerid][0] = 0;
		return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	}
	else
	{
		new data[4];
		rp_me(owner, _, "apieðko %s.", GetPlayerNameEx(playerid, true, false));
		SendFormat(playerid, 0xB4E6B4FF, "%s jus apieðko.", GetPlayerNameEx(owner, true, false));
		SendFormat(owner, 0xFFFFFFFF, "__________________ Þaidëjo {FF672B}%s{FFFFFF} daiktai __________________", GetPlayerNameEx(playerid, true, false));
		for(new i = 0; i < MAX_INVENTORY_SLOTS; i++)
		{
			SendFormat(owner, 0xBABABAFF, "%d. %s (%d)", i+1, GetInventoryItemName(InventoryInfo[playerid][i][invId]), InventoryInfo[playerid][i][invAmount]);
		}
		SendFormat(owner, 0xF7FF7BFF, "Ginklai rankose:");
		for(new i = 0; i < 13; i++)
		{
			GetPlayerWeaponData(playerid, i, data[0], data[1]);
			GetPlayerWeaponData(playerid, i, data[2], data[3]);
			if(data[0] > 0 && data[1] > 0)
			{
				SendFormat(owner, 0xBABABAFF, "%s (%d kulkø)%s",
					GetInventoryItemName(data[0]),
					data[1],
					data[2] == WEAPON_GIVE_TYPE_NO_INVENTORY ? (" ((frakcijos))") : (""));
			}
		}
		SendFormat(owner, 0xBABABAFF, "Pinigai rankose: $%d", GetPlayerMoney(playerid));
	}
	return 1;
}
CMD:jailed(playerid, params[])
{
	new receiverid,
		type[12];
	if(sscanf(params,"u",receiverid))
	{
		// visi
		receiverid = 0;
		foreach(receiverid : Player)
		{
			if(PlayerInfo[receiverid][pJailTime] > 0 && PlayerInfo[receiverid][pJailType] > 0)
			{
				switch(PlayerInfo[receiverid][pJailType])
				{
					case 1:
					{
						format(type, sizeof type, "areðtinëj");
					}
					case 2:
					{
						format(type, sizeof type, "kalëjime");
					}
					case 3:
					{
						format(type, sizeof type, "OOC jail");
					}
				}
				SendFormat(playerid, -1, "%s [%d] sëdi %s (%dmin)", GetPlayerNameEx(receiverid), receiverid, type, floatround(PlayerInfo[receiverid][pJailTime]/60));
			}
		}
	}
	else
	{
		if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
		switch(PlayerInfo[receiverid][pJailType])
		{
			case 1:
			{
				format(type, sizeof type, "areðtinëj");
			}
			case 2:
			{
				format(type, sizeof type, "kalëjime");
			}
			case 3:
			{
				format(type, sizeof type, "OOC jail");
			}
		}
		SendFormat(playerid, -1, "%s [%d] sëdi %s (%dmin)", GetPlayerNameEx(receiverid), receiverid, type, floatround(PlayerInfo[receiverid][pJailTime]/60));
	}
	return 1;
}
flags:afrisk(CMD_TYPE_ADMIN);
CMD:afrisk(playerid, params[])
{
	new receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/afrisk [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);

	for(new i = 0; i < MAX_INVENTORY_SLOTS; i++)
	{
		if(IsInventorySlotClear(receiverid, i)) SendFormat(playerid, 0xBABABAFF, "%d. Tuðèia", i+1);
		else SendFormat(playerid, 0xBABABAFF, "%d. %s (%d) (EID: %d)", i+1, GetInventoryItemName(InventoryInfo[receiverid][i][invId]), InventoryInfo[receiverid][i][invAmount], InventoryInfo[receiverid][i][invExtraId]);
	}
	SendFormat(playerid, 0xF7FF7BFF, "Ginklai rankose:");
	new data[2],
		odata[2];
	for(new i = 0; i < 13; i++)
	{
		GetPlayerWeaponData(receiverid, i, data[0], data[1]);
		GetPlayerWeaponData(receiverid, i, odata[0], odata[1]);
		if(data[0] > 0 && data[1] > 0)
		{
			SendFormat(playerid, 0xBABABAFF, "%s (%d kulkø) (ir %d %dk.)", GetInventoryItemName(data[0]), data[1], odata[0], odata[1]);
		}
	}
	SendFormat(playerid, 0xBABABAFF, "Pinigai rankose: $%d", GetPlayerMoney(receiverid));
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
	log_set_values("'%d','%e','%d','%e','Apieskojo zaideja'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}

flags:findgpci(CMD_TYPE_ADMIN);
CMD:findgpci(playerid, params[])
{
	new 
		gpci_string[41],
		string[256];

	if(sscanf(params,"s[41]", gpci_string)) return SendUsage(playerid, "/findgpci [gpci]");

	mysql_format(chandler, string, sizeof string, "SELECT id,Name,gpci,UserId FROM `players_data` WHERE gpci = '%e'", gpci_string);
	mysql_tquery(chandler, string, "GpciFindDataPlayers", "ds", playerid, gpci_string);
	return 1;
}


forward GpciFindDataPlayers(playerid, gpci_string[]);
public GpciFindDataPlayers(playerid, gpci_string[])
{
	new 
		string[256],
		userid,
		name[25],
		id;

	SendFormat(playerid, 0xFFFFFFFF, "Patvirtintø veikëjø duom. bazës rasti rezultatai:");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{

		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "UserId", userid);
		cache_get_value_name(i, "Name", name);

		SendFormat(playerid, 0xBABABAFF, "%d. [VEIKEJAS: %s(MySQL: %d)]  [VARTOTOJAS: %s(MySQL: %d)]", i + 1, name, id, GetUserNameById(userid), userid);
	}

	mysql_format(chandler, string, sizeof string, "SELECT id,Name,gpci,UserId FROM `players_new` WHERE gpci = '%e'", gpci_string);
	mysql_tquery(chandler, string, "GpciFindNewPlayers", "ds", playerid, gpci_string);
	return 1;
}

forward GpciFindNewPlayers(playerid, gpci_string[]);
public GpciFindNewPlayers(playerid, gpci_string[])
{
	new 
		userid,
		name[25],
		string[256],
		id;

	SendFormat(playerid, 0xFFFFFFFF, "Nepatvirtintø veikëjø duom. bazës rasti rezultatai:");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "UserId", userid);
		cache_get_value_name(i, "Name", name);

		SendFormat(playerid, 0xBABABAFF, "%d. [VEIKEJAS: %s(MySQL: %d)]  [VARTOTOJAS: %s(MySQL: %d)]", i + 1, name, id, GetUserNameById(userid), userid);
	}
	mysql_format(chandler, string, sizeof string, "SELECT PlayerName,PlayerIP,gpci FROM `players_bans` WHERE gpci = '%e'", gpci_string);
	mysql_tquery(chandler, string, "GpciFindBanned", "ds", playerid, gpci_string);
	return 1;
}

forward GpciFindBanned(playerid, gpci_string[]);
public GpciFindBanned(playerid, gpci_string[])
{
	new 
		name[25],
		ip[19];

	SendFormat(playerid, 0xFFFFFFFF, "Uþblokuotø þaidëjø duom. bazës rasti rezultatai:");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name(i, "PlayerName", name);
		cache_get_value_name(i, "PlayerIP", ip);

		SendFormat(playerid, 0xBABABAFF, "%d. [ÞAIDËJAS/VARTOTOJAS: %s(IP: %s)]", i + 1, name, ip);
	}
	return 1;
}



flags:apark(CMD_TYPE_ADMIN);
CMD:apark(playerid, params[])
{
	new
		vehicleid;
	if((vehicleid = GetClosestVehicle(playerid, 5.0)) == INVALID_VEHICLE_ID) return InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
	if(VehicleInfo[vehicleid][vFaction] != 0 || VehicleInfo[vehicleid][vJob] != 0 || VehicleInfo[vehicleid][vOwner] == 0) return SendWarning(playerid, "Ði tr. priemonë niekam nepriklauso arba yra serverio.");
	ParkVehicle(vehicleid);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
	log_set_values("'%d','%e','apark','%d'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId]);
	log_commit();
	return 1;
}

CMD:myproperty(playerid, params[])
{
	SendFormat(playerid, 0xffbababa, "Jûsø veikëjo turimas turtas:");
	new string[256];
	mysql_format(chandler, string, sizeof string, "SELECT id,EnterX,EnterY,Price FROM `houses_data` WHERE Owner = '%d'", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "AP_HousesLoad", "d", playerid);
	mysql_format(chandler, string, sizeof string, "SELECT data.id,EnterX,EnterY,Price FROM houses_data data INNER JOIN houses_dubkeys dubs ON dubs.PlayerId = '%d' AND dubs.HouseId = data.id", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "AP_HousesDubkeysLoad", "d", playerid);

	mysql_format(chandler, string, sizeof string, "SELECT id,Model,Numbers,SpawnedId FROM `vehicles_data` WHERE Owner = '%d'", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "AP_VehiclesLoad", "d", playerid);
	mysql_format(chandler, string, sizeof string, "SELECT data.id,Model,Numbers,SpawnedId FROM vehicles_data data INNER JOIN vehicles_dubkeys dubs ON dubs.PlayerId = '%d' AND dubs.VehicleId = data.id", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "AP_VehiclesDubkeysLoad", "d", playerid);

	mysql_format(chandler, string, sizeof string, "SELECT id,EnterX,EnterY,Type,Price,Name FROM business_data WHERE Owner = '%d'", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "AP_BusinessLoad", "d", playerid);
	mysql_format(chandler, string, sizeof string, "SELECT data.id,EnterX,EnterY,Type,Price,Name FROM business_data data INNER JOIN business_dubkeys dubs ON dubs.PlayerId = '%d' AND dubs.BusinessId = data.id", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "AP_BusinessDubkeysLoad", "d", playerid);

	mysql_format(chandler, string, sizeof string, "SELECT id,EnterX,EnterY,Price FROM garages_data WHERE Owner = '%d'", PlayerInfo[playerid][pId]);
	mysql_tquery(chandler, string, "AP_GaragesLoad", "d", playerid);
	return 1;
}

flags:aproperty(CMD_TYPE_ADMIN);
CMD:aproperty(playerid, params[])
{
	new receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/aproperty [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	new string[256];
	mysql_format(chandler, string, sizeof string, "SELECT id,EnterX,EnterY,Price FROM `houses_data` WHERE Owner = '%d'", PlayerInfo[receiverid][pId]);
	mysql_tquery(chandler, string, "AP_HousesLoad", "d", playerid);
	mysql_format(chandler, string, sizeof string, "SELECT data.id,EnterX,EnterY,Price FROM houses_data data INNER JOIN houses_dubkeys dubs ON dubs.PlayerId = '%d' AND dubs.HouseId = data.id", PlayerInfo[receiverid][pId]);
	mysql_tquery(chandler, string, "AP_HousesDubkeysLoad", "d", playerid);

	mysql_format(chandler, string, sizeof string, "SELECT id,Model,Numbers,SpawnedId FROM `vehicles_data` WHERE Owner = '%d'", PlayerInfo[receiverid][pId]);
	mysql_tquery(chandler, string, "AP_VehiclesLoad", "d", playerid);
	mysql_format(chandler, string, sizeof string, "SELECT data.id,Model,Numbers,SpawnedId FROM vehicles_data data INNER JOIN vehicles_dubkeys dubs ON dubs.PlayerId = '%d' AND dubs.VehicleId = data.id", PlayerInfo[receiverid][pId]);
	mysql_tquery(chandler, string, "AP_VehiclesDubkeysLoad", "d", playerid);

	mysql_format(chandler, string, sizeof string, "SELECT id,EnterX,EnterY,Type,Price,Name FROM business_data WHERE Owner = '%d'", PlayerInfo[receiverid][pId]);
	mysql_tquery(chandler, string, "AP_BusinessLoad", "d", playerid);
	mysql_format(chandler, string, sizeof string, "SELECT data.id,EnterX,EnterY,Type,Price,Name FROM business_data data INNER JOIN business_dubkeys dubs ON dubs.PlayerId = '%d' AND dubs.BusinessId = data.id", PlayerInfo[receiverid][pId]);
	mysql_tquery(chandler, string, "AP_BusinessDubkeysLoad", "d", playerid);

	mysql_format(chandler, string, sizeof string, "SELECT id,EnterX,EnterY,Price FROM garages_data WHERE Owner = '%d'", PlayerInfo[receiverid][pId]);
	mysql_tquery(chandler, string, "AP_GaragesLoad", "d", playerid);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
	log_set_values("'%d','%e','%d','%e','Patikrino zaidejo turta'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}

forward AP_HousesLoad(playerid);
public AP_HousesLoad(playerid)
{
	new Float:x, Float:y, id, string[26], price;
	SendFormat(playerid, 0xFF903BFF, "=============== [ Turimi namai ] ===============");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_float(i, "EnterX", x);
		cache_get_value_name_float(i, "EnterY", y);
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "Price", price);
		GetCoords2DZone(string, 26, x, y);
		SendFormat(playerid, 0xF0F0F0FF, "%d. MySQL ID: %d, vieta: %s, kaina: $%d", i+1, id, string, price);
	}
	return 1;
}
forward AP_HousesDubkeysLoad(playerid);
public AP_HousesDubkeysLoad(playerid)
{
	new Float:x, Float:y, id, string[26], price, type;
	SendFormat(playerid, 0xFF903BFF, "=============== [ Turimi namø raktai (duplikuoti) ] ===============");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_float(i, "EnterX", x);
		cache_get_value_name_float(i, "EnterY", y);
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "Type", type);
		cache_get_value_name_int(i, "Price", price);
		GetCoords2DZone(string, 26, x, y);
		SendFormat(playerid, 0xF0F0F0FF, "%d. MySQL ID: %d, vieta: %s, kaina: $%d (%s)", i+1, id, string, price, type == 0 ? ("raktas duotas savininko") : ("nuomojasi"));
	}
	return 1;
}
forward AP_VehiclesLoad(playerid);
public AP_VehiclesLoad(playerid)
{
	new id, string[26], spawnedid, model;
	SendFormat(playerid, 0xFF903BFF, "=============== [ Turimi automobiliai ] ===============");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "SpawnedId", spawnedid);
		cache_get_value_name_int(i, "Model", model);
		cache_get_value_name(i, "Numbers", string);
		SendFormat(playerid, 0xF0F0F0FF, "%d. %s(numeriai: %s), MySQL ID: %d, serverio ID: %d %s", i+1, GetModelName(model), (strlen(string) > 0 ? (string) : ("-")), id, (spawnedid > 0 ? (spawnedid) : (0)), (spawnedid > 0 ? ("") : ("(neiðspawninta)")));
	}
	return 1;
}
forward AP_VehiclesDubkeysLoad(playerid);
public AP_VehiclesDubkeysLoad(playerid)
{
	new id, string[26], spawnedid, model;
	SendFormat(playerid, 0xFF903BFF, "=============== [ Turimi automobiliø raktai (duplikuoti) ] ===============");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "SpawnedId", spawnedid);
		cache_get_value_name_int(i, "Model", model);
		cache_get_value_name(i, "Numbers", string);
		SendFormat(playerid, 0xF0F0F0FF, "%d. %s(numeriai: %s), MySQL ID: %d, serverio ID: %d %s", i+1, GetModelName(model), (strlen(string) > 0 ? (string) : ("-")), id, (spawnedid > 0 ? (spawnedid) : (0)), (spawnedid > 0 ? ("") : ("(neiðspawninta)")));
	}
	return 1;
}
forward AP_BusinessLoad(playerid);
public AP_BusinessLoad(playerid)
{
	new Float:x, Float:y, id, string[26], price, type, name[24];
	SendFormat(playerid, 0xFF903BFF, "=============== [ Turimi verslai ] ===============");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_float(i, "EnterX", x);
		cache_get_value_name_float(i, "EnterY", y);
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "Price", price);
		cache_get_value_name_int(i, "Type", type);
		cache_get_value_name(i, "Name", name);
		GetCoords2DZone(string, 26, x, y);
		SendFormat(playerid, 0xF0F0F0FF, "%d. %s (tipas: %d), MySQL ID: %d, vieta: %s, kaina: $%d", i+1, name, type, id, string, price);
	}
	return 1;
}
forward AP_BusinessDubkeysLoad(playerid);
public AP_BusinessDubkeysLoad(playerid)
{
	new Float:x, Float:y, id, string[26], price, type, name[24];
	SendFormat(playerid, 0xFF903BFF, "=============== [ Turimi verslø raktai (duplikuoti) ] ===============");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
				cache_get_value_name_float(i, "EnterX", x);
		cache_get_value_name_float(i, "EnterY", y);
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "Price", price);
		cache_get_value_name_int(i, "Type", type);
		cache_get_value_name(i, "Name", name);
		GetCoords2DZone(string, 26, x, y);
		SendFormat(playerid, 0xF0F0F0FF, "%d. %s (tipas: %d), MySQL ID: %d, vieta: %s, kaina: $%d", i+1, name, type, id, string, price);
	}
	return 1;
}
forward AP_GaragesLoad(playerid);
public AP_GaragesLoad(playerid)
{
	new Float:x, Float:y, id, string[26], price;
	SendFormat(playerid, 0xFF903BFF, "=============== [ Turimi garaþai ] ===============");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_float(i, "EnterX", x);
		cache_get_value_name_float(i, "EnterY", y);
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "Price", price);
		GetCoords2DZone(string, 26, x, y);
		SendFormat(playerid, 0xF0F0F0FF, "%d. MySQL ID: %d, vieta: %s, kaina: $%d", i+1, id, string, price);
	}
	return 1;
}

flags:aa(CMD_TYPE_ADMIN);
CMD:aa(playerid, params[])
{
	new 
		string[144];
	if(strlen(params)) 
	{
		format(string, sizeof string, "(( %s[%d]: %s ))", GetPlayerNameEx(playerid), playerid, params);
		foreach(new receiverid : Player)
		{
			if(HaveCommandPermission(receiverid, "aa"))
			{
				SendFormat(receiverid, 0xe73328ff, string);
			}
		}
	}
	else SendUsage(playerid, "/aa [tekstas]");
	return 1;
}

flags:a(CMD_TYPE_ADMIN);
CMD:a(playerid, params[])
{
	new string[256];
	if(sscanf(params,"s[128]",string)) return SendUsage(playerid, "/a(@) [tekstas]");
	new 
		name[24 + 1];
	if(strlen(PlayerInfo[playerid][pForumName])) format(name, sizeof name, "%s", PlayerInfo[playerid][pForumName]);
	else format(name, sizeof name, "%s", GetPlayerNameEx(playerid));
	SendAdminMessage(0xFFFDA1FF, false, "[%s %s(%d)]: %s", GetGroupName(PlayerGroups[playerid][0]), name, playerid, string);
	return 1;
}
stock IsPlayerInMD(playerid)
{
	if(playerid > -1) return true;
	else return false;
}
stock IsPlayerInPD(playerid)
{
	if(	IsPlayerInRangeOfPoint(playerid, 100.0, 247.72, 69.94, 1003.64) ||
		IsPlayerInRangeOfPoint(playerid, 100.0, 2275.43, -65.92, 1024.03) || 
		IsPlayerInRangeOfPoint(playerid, 200.0, 2029.57, 2952.76, 6010.15)) return true;
	return false;
}

CMD:mdc(playerid, params[])
{
	new
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
		bool:allowed;
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(PlayerInfo[playerid][pJobLevel] <= 0) return SendWarning(playerid, "Jûsø rankas nëra nustatytas, susisiekite su frakcijos lyderiu.");
	if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");
	if(IsPlayerInAnyVehicle(playerid))
	{
		new v_factionid = GetFactionArrayIndexById(VehicleInfo[GetPlayerVehicleID(playerid)][vFaction]);
		if(FactionInfo[v_factionid][fType] == FACTION_TYPE_POLICE) allowed = true;
	}
	else if(
		IsPlayerInPD(playerid) || 
		IsPlayerInRangeOfPoint(playerid, 100.0, 410.36, 1445.06, 1844.09) ||
		IsPlayerInRangeOfPoint(playerid, 100.0, 359.22, 1426.68, 1519.27)) allowed = true;
	if(allowed)
	{
		MDC_ShowForPlayer(playerid, MDC_MAIN);
		SelectTextDraw(playerid, 0xFFFFFF99);
	}
	else SendWarning(playerid, "Turite sedëti automobilyje arba bûti departamente.");
	return 1;
}

CMD:mdclothes(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1) return InfoBox(playerid, IB_NOT_IN_FACTION);
	if(IsPlayerInMD(playerid))
	{
		if(FactionInfo[factionid][fType] != FACTION_TYPE_FIRE)
		{
			SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
			return 1;
		}
		else ShowModelSelectionMenu(playerid, mdskinslist, "Apranga");
	}
	return 1;
}
CMD:pdclothes(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1) return InfoBox(playerid, IB_NOT_IN_FACTION);
	if(IsPlayerInPD(playerid))
	{
		if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE)
		{
			SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
			return 1;
		}
		else ShowModelSelectionMenu(playerid, pdskinslist, "Apranga");
	}
	return 1;
}
CMD:heal(playerid, params[])
{
	new
		factionid,
		receiverid;
	factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_FIRE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/heal [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	if(PlayerExtra[receiverid][peDeath] > 0)
	{
		PlayerExtra[receiverid][peDeath] = 0;
		PlayerInfo[receiverid][pCurrentStatus] = PLAYER_STATUS_DEFAULT;
		DestroyDynamic3DTextLabel(PlayerExtra[receiverid][peDeathLabel]);
		PlayerExtra[receiverid][peDeathLabel] = INVALID_3DTEXT_ID;
		StopLoopAnim(receiverid);
		PlayerTextDrawHide(receiverid, DeathScreenTD[receiverid]);
	}
	SetPlayerHealth(receiverid, 100.0);
	Iter_Clear(PlayerDamages[receiverid]);
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ReceiverId`,`ReceiverName`,`ActionText`");
	log_set_values("'%d','%e','%d','%e','Pagyde zaideja'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}
CMD:givebadge(playerid, params[])
{
	new
		factionid,
		receiverid;
	factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(PlayerInfo[playerid][pFactionLeader] <= 0) return SendWarning(playerid, "Nesate frakcijos lyderis.");
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/givebadge [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	new r_factionid = GetFactionArrayIndexById(PlayerInfo[receiverid][pFaction]);
	if(r_factionid == -1 || FactionInfo[r_factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Þaidëjas nedirba policijos departamente.");
	if(PlayerInfo[receiverid][pPoliceBadge] > 0) return SendWarning(playerid, "Þaidëjas jau turi þenklelá.");
	PlayerInfo[receiverid][pPoliceBadge] = 1;
	SaveAccountIntEx(receiverid, "PoliceBadge", 1);
	SendFormat(playerid, 0xF7FF7BFF, "Davëte þenklelá þaidëjui %s.", GetPlayerNameEx(receiverid, true, true));
	SendFormat(receiverid, 0xF7FF7BFF, "%s davë Jums þenklelá.", GetPlayerNameEx(playerid, true, true));
	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`FactionId`,`FactionName`,`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
	log_set_values("'%d','%e','%d','%e','Suteike zenkleli','%e'", FactionInfo[factionid][fId], GetFactionName(factionid, false), LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}

CMD:respawncars(playerid, params[])
{
	new factionid,
		faction = PlayerInfo[playerid][pFaction],
		used[MAX_VEHICLES];

	if((factionid = GetFactionArrayIndexById(faction)) <= -1) return SendWarning(playerid, "Jûs nesate jokioje frakcijoje.");
	else if(PlayerInfo[playerid][pFactionLeader] <= 0) return SendWarning(playerid, "Nesate frakcijos lyderis.");


	foreach(new receiverid : Player)
	{
		if(IsPlayerInAnyVehicle(receiverid)) used[GetPlayerVehicleID(receiverid)] = 1;
	}
	foreach(new vehicleid : Vehicle)
	{
		if(used[vehicleid] > 0) { continue; }
		
		if(VehicleInfo[vehicleid][vFaction] == faction)
		{
			new __reset_Trunk[E_FACTION_TRUNK_WEAPONS_DATA];
			for(new i = 0; i < MAX_VEHICLE_WEAPON_SLOTS; i++) VehicleWeaponsInventory[vehicleid][i] = __reset_Trunk;
			SetVehicleToRespawn(vehicleid);
			VehicleInfo[vehicleid][vFuel] = VehicleFuelCapacityList[GetVehicleModel(vehicleid)-400];
		}
	}
	SendFormatToAll(0xF7F7F7FF, "%s{EEEEEE} frakcijos lyderis atstatë visas frakcijos tr. priemones", GetFactionName(factionid, false));

	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`FactionId`,`FactionName`,`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
	log_set_values("'%d','%e','%d','%e','Atstate masinas'", FactionInfo[factionid][fId], GetFactionName(factionid, false), LogPlayerId(playerid), LogPlayerName(playerid));
	log_commit();

	return 1;
}

CMD:payticket(playerid, params[])
{
	new
		vehicleid;
	if((vehicleid = GetPlayerVehicleID(playerid)) != INVALID_VEHICLE_ID && IsPlayerInAnyVehicle(playerid))
	{
		if(!HaveVehicleKey(playerid, vehicleid, .check_only_owner = false, .canbejob = false, .ignore_admin_perm = true)) return SendWarning(playerid, "Neturite ðios tr. priemonës rakteliø.");
		if(VehicleInfo[vehicleid][vTicket] > 0)
		{
			if(GetPlayerMoney(playerid) < VehicleInfo[vehicleid][vTicket]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, VehicleInfo[vehicleid][vTicket]);
			GivePlayerMoney(playerid, -VehicleInfo[vehicleid][vTicket]);
			MsgSuccess(playerid, "BAUDA", "Sëkmingai susimokëjote uþ baudà.");
			foreach(new factionid : Faction)
			{
				if(FactionInfo[factionid][fType] == FACTION_TYPE_POLICE) FactionInfo[factionid][fBudget] += floatround(VehicleInfo[vehicleid][vTicket]*0.2);
				if(FactionInfo[factionid][fType] == FACTION_TYPE_GOVERNMENT) FactionInfo[factionid][fBudget] += floatround(VehicleInfo[vehicleid][vTicket]*0.8);
			}

			log_init(true);
			log_set_table("logs_players");
			log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`Amount`");
			log_set_values("'%d','%e','Sumokejo bauda','%d'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId], VehicleInfo[vehicleid][vTicket]);
			log_commit();

			VehicleInfo[vehicleid][vTicket] = 0;
			SaveVehicleIntEx(vehicleid, "Ticket", 0);
		}
		else return SendWarning(playerid, "Ðiai tr. priemonei nëra iðraðytas baudos èekis.");
	}
	else InfoBox(playerid, IB_NOT_IN_VEHICLE);
	return 1;
}
CMD:ticket(playerid, params[])
{
	new
		amount,
		vehicleid;
	new	factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(sscanf(params,"d",amount)) return SendUsage(playerid, "/ticket [bauda]");
	if((vehicleid = GetClosestVehicle(playerid, 3.0)) == INVALID_VEHICLE_ID) return InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
	if(!(0 < amount < 10000)) return SendWarning(playerid, "Bauda turi bûti nuo 1$ iki 10000$");
	if(VehicleInfo[vehicleid][vOwner] == 0 || VehicleInfo[vehicleid][vFaction] != 0 || VehicleInfo[vehicleid][vJob] != 0)
	{
		return SendWarning(playerid, "Ði tr. priemonë priklauso frakcijai arba darbui.");
	}
	VehicleInfo[vehicleid][vTicket] += amount;
	SaveVehicleIntEx(vehicleid, "Ticket", VehicleInfo[vehicleid][vTicket]);
	MsgSuccess(playerid, "BAUDA", "Sëkmingai iðraðëte baudà tr. priemonei ($%d).", amount);
	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`Amount`");
	log_set_values("'%d','%e','%d','%e','Israse bauda automobiliui','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), VehicleInfo[vehicleid][vId], amount);
	log_commit();
	return 1;
}
thread(VehicleTicketAdd);
CMD:fine(playerid, params[])
{
	new
		factionid,
		receiverid,
		amount,
		string[256];
	factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(sscanf(params,"ud",receiverid,amount)) return SendUsage(playerid, "/fine [þaidëjas] [bauda]");
	if(!CheckPlayerid(playerid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!(0 < amount < 10000)) return SendWarning(playerid, "Bauda turi bûti nuo 1$ iki 10000$");
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	Offer[receiverid][0] = OFFER_TYPE_POLICE_FINE, // type
	Offer[receiverid][1] = playerid,
	Offer[receiverid][2] = 0,
	Offer[receiverid][3] = amount;
	format(string, sizeof string, "{BABABA}Pareigûnas: {FFFFFF}%s\n{BABABA}Bauda: {FFFFFF}$%d", GetPlayerNameEx(playerid, true, true), amount);
	ShowPlayerDialog(receiverid, DIALOG_PAY_FINE, DIALOG_STYLE_MSGBOX, "Baudos iðraðas", string, "Sumokëti", "Atsisakyti");
	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`ExtraString`,`Amount`");
	log_set_values("'%d','%e','%d','%e','Israse bauda zaidejui','%d','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), LogPlayerId(receiverid), LogPlayerName(receiverid), amount);
	log_commit();
	return 1;
}
CMD:takelic(playerid, params[])
{
	new
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
		receiverid, type;
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(sscanf(params,"ud",receiverid,type)) return 	SendUsage(playerid, "/takelic [þaidëjas] [tipas]"),
													MsgInfo(playerid, "TIPAI", "[1 - automobilio] [2 - motociklo] [3 - skraidymo] [4 - valties]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	new string[56];
	switch(type)
	{
		case 1:
		{
			format(string, sizeof string, "atima %s automobilio licencijà.", GetPlayerNameEx(receiverid, true));
			PlayerInfo[receiverid][pCarLic] = 0;
			SaveAccountIntEx(receiverid, "CarLic", 0);
		}
		case 2:
		{
			format(string, sizeof string, "atima %s motociklo licencijà.", GetPlayerNameEx(receiverid, true));
			PlayerInfo[receiverid][pMotoLic] = 0;
			SaveAccountIntEx(receiverid, "MotoLic", 0);
		}
		case 3:
		{
			format(string, sizeof string, "atima %s skraidymo licencijà.", GetPlayerNameEx(receiverid, true));
			PlayerInfo[receiverid][pFlyLic] = 0;
			SaveAccountIntEx(receiverid, "FlyLic", 0);
		}
		case 4:
		{
			format(string, sizeof string, "atima %s valties licencijà.", GetPlayerNameEx(receiverid, true));
			PlayerInfo[receiverid][pBoatLic] = 0;
			SaveAccountIntEx(receiverid, "BoatLic", 0);
		}
		default: return SendWarning(playerid, "Neteisingas tipas.");
	}
	rp_me(playerid, _, string);
	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`ExtraString`,`Amount`");
	log_set_values("'%d','%e','%d','%e','Ateme licencija','%d','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), LogPlayerId(receiverid), LogPlayerName(receiverid), type);
	log_commit();
	return 1;
}

CMD:takeweapons(playerid, params[])
{
	new
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
		receiverid;
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/takeweapons [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	ResetPlayerWeapons(receiverid);
	for(new slot = 0; slot < MAX_INVENTORY_SLOTS; slot++)
	{
		if(0 < InventoryInfo[receiverid][slot][invId] < 50) ClearPlayerInventorySlot(receiverid, slot);
	}
	rp_me(playerid, _, "atima %s ginklus.", GetPlayerNameEx(receiverid, true));
	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`ExtraString`");
	log_set_values("'%d','%e','%d','%e','Ateme ginklus','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), LogPlayerId(receiverid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}

CMD:takedrugs(playerid, params[])
{
	new
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
		receiverid;
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/takedrugs [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	for(new i = 0; i < MAX_INVENTORY_SLOTS; i++)
	{
		if(IsItemDrug(InventoryInfo[receiverid][i][invId]))
		{
			ClearPlayerInventorySlot(receiverid, i);
		}
	}
	rp_me(playerid, _, "atima %s narkotikus.", GetPlayerNameEx(receiverid, true));
	return 1;
}
flags:atakeweapons(CMD_TYPE_ADMIN);
CMD:atakeweapons(playerid, params[])
{
	new
		receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/atakeweapons [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	ResetPlayerWeapons(receiverid);
	for(new slot = 0; slot < MAX_INVENTORY_SLOTS; slot++)
	{
		if(0 < InventoryInfo[receiverid][slot][invId] < 50) ClearPlayerInventorySlot(receiverid, slot);
	}
	MsgSuccess(playerid, "GINKLAI", "Atëmëte þaidëjo ginklus.");
	MsgSuccess(receiverid, "GINKLAI", "Administratorius atëmë Jûsø ginklus.");
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ReceiverId`,`ReceiverName`");
	log_set_values("'%d','%e','Ateme ginklus','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}
flags:atakedrugs(CMD_TYPE_ADMIN);
CMD:atakedrugs(playerid, params[])
{
	new
		receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/atakedrugs [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	for(new i = 0; i < MAX_INVENTORY_SLOTS; i++)
	{
		if(IsItemDrug(InventoryInfo[receiverid][i][invId]))
		{
			ClearPlayerInventorySlot(playerid, i);
		}
	}
	MsgSuccess(playerid, "NARKOTIKAI", "Atëmëte þaidëjo narkotikus.");
	MsgSuccess(playerid, "NARKOTIKAI", "Administratorius atëmë Jûsø narkotikus.");
	log_init(true);
	log_set_table("logs_admins");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ReceiverId`,`ReceiverName`");
	log_set_values("'%d','%e','Ateme narkotikus','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}

CMD:takebadge(playerid, params[])
{
	new
		factionid,
		receiverid;
	factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(PlayerInfo[playerid][pFactionLeader] <= 0) return SendWarning(playerid, "Nesate frakcijos lyderis.");
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/takebadge [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	if(PlayerInfo[receiverid][pPoliceBadge] <= 0) return SendWarning(playerid, "Þaidëjas neturi þenklelio.");
	PlayerInfo[receiverid][pPoliceBadge] = 0;
	SaveAccountIntEx(receiverid, "PoliceBadge", 0);
	SendFormat(playerid, 0xF7FF7BFF, "Atëmëte þenklelá ið %s.", GetPlayerNameEx(receiverid, true, true));
	SendFormat(receiverid, 0xF7FF7BFF, "%s atëmë Jûsø þenklelá.", GetPlayerNameEx(playerid, true, true));
	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`FactionId`,`FactionName`,`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
	log_set_values("'%d','%e','%d','%e','Suteike zenkleli','%e'", FactionInfo[factionid][fId], GetFactionName(factionid, false), LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerName(receiverid));
	log_commit();
	return 1;
}

CMD:attachobject(playerid, params[])
{
	static lastob;
	DestroyObject(lastob);
	new Float:x, Float:y, Float:z, ob,
		Float:rx, Float:ry, Float:rz;
	sscanf(params,"p< >dffffff", ob, x, y, z, rx, ry, rz);
	lastob = CreateObject(ob, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); // 19078
	AttachObjectToPlayer(lastob, playerid, x, y, z, rx, ry, rz);
	return 1;
}

alias:megaphone("m");
CMD:megaphone(playerid, params[])
{
	new
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
		string[258],
		vehicleid;
	if(factionid == -1 || !(FactionInfo[factionid][fType] == FACTION_TYPE_POLICE || FactionInfo[factionid][fType] == FACTION_TYPE_FIRE)) return SendWarning(playerid, "Jûsø frakcija ðios negalimybës neturi.");
	if(sscanf(params,"s[128]",string)) return SendUsage(playerid, "/megaphone [tekstas]");
	if(PlayerExtra[playerid][peDeath] > 0) return SendWarning(playerid, "Jûs esate komos bûsenoje.");
	if(!IsPlayerInAnyVehicle(playerid) || (vehicleid = GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	new
		v_factionid = GetFactionArrayIndexById(VehicleInfo[vehicleid][vFaction]);
	if(v_factionid != -1 && (FactionInfo[v_factionid][fType] == FACTION_TYPE_POLICE || FactionInfo[v_factionid][fType] == FACTION_TYPE_FIRE))
	{
		log_init(true);
		log_set_table("logs_chat");
		log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Text`,`ExtraId`,`ExtraString`");
		log_set_values("'%d','%e','/megaphone','%e','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), string, VehicleInfo[vehicleid][vId], GetFactionName(factionid, false));
		log_commit();
		switch(FactionInfo[v_factionid][fType])
		{
			case FACTION_TYPE_POLICE:
			{
				format(string, sizeof string, "[ %s:o<  %s !!! ]", GetPlayerNameEx(playerid, true), string);
				ProxDetector(50.0, playerid, string, 0xFF6666FF, 0xFF6666FF, 0xFF6666FF, 0xFF6666FF, 0xFF6666);
				return 1;
			}
			case FACTION_TYPE_FIRE:
			{
				format(string, sizeof string, "[ %s:o<  %s !!! ]", GetPlayerNameEx(playerid, true), string);
				ProxDetector(50.0, playerid, string, 0xFF6666FF, 0xFF6666FF, 0xFF6666FF, 0xFF6666FF, 0xFF6666);
				return 1;
			}
		}
	}
	SendWarning(playerid, "Tr. priemonë netinkama.");
	return 1;
}
CMD:open(playerid, params[])
{
	new
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios negalimybës neturi.");
	for(new door = 0; door < sizeof PoliceDoors; door++)
	{
		if(IsPlayerInRangeOfPoint(playerid, IsPlayerInAnyVehicle(playerid) ? 10.0 : PoliceDoors[door][policeDoorDist], PoliceDoors[door][policeDoorX], PoliceDoors[door][policeDoorY], PoliceDoors[door][policeDoorZ]))
		{
			/*if(PoliceDoors[door][policeDoorOpened])
			{
				// uzdarom
				PoliceDoors[door][policeDoorOpened] = false;
				MoveDynamicObject(PoliceDoors[door][policeDoorObject], PoliceDoors[door][policeDoorX], PoliceDoors[door][policeDoorY], PoliceDoors[door][policeDoorZ], 5000.0);
				break;
			}
			else
			{*/
			if(!PoliceDoors[door][policeDoorOpened])
			{
				// atidarom
				Police_Door_Open(playerid, door);
				return 1;
			}
		}
	}
	SendWarning(playerid, "Nesate prie durø.");
	return 1;
}
forward ClosePoliceDoor(door);
public ClosePoliceDoor(door)
{
	PoliceDoors[door][policeDoorOpened] = false;
	MoveDynamicObject(PoliceDoors[door][policeDoorObject], PoliceDoors[door][policeDoorX], PoliceDoors[door][policeDoorY], PoliceDoors[door][policeDoorZ], 5000.0, PoliceDoors[door][policeDoorRX], PoliceDoors[door][policeDoorRY], PoliceDoors[door][policeDoorRZ]);
	if(PoliceDoors[door][policeDoorComboNext])
	{
		PoliceDoors[door+1][policeDoorOpened] = false;
		MoveDynamicObject(PoliceDoors[door+1][policeDoorObject], PoliceDoors[door+1][policeDoorX], PoliceDoors[door+1][policeDoorY], PoliceDoors[door+1][policeDoorZ], 5000.0, PoliceDoors[door+1][policeDoorRX], PoliceDoors[door+1][policeDoorRY], PoliceDoors[door+1][policeDoorRZ]);
	}
	else if(door != 0)
	{
		if(PoliceDoors[door-1][policeDoorComboNext])
		{
			PoliceDoors[door-1][policeDoorOpened] = false;
			MoveDynamicObject(PoliceDoors[door-1][policeDoorObject], PoliceDoors[door-1][policeDoorX], PoliceDoors[door-1][policeDoorY], PoliceDoors[door-1][policeDoorZ], 5000.0, PoliceDoors[door-1][policeDoorRX], PoliceDoors[door-1][policeDoorRY], PoliceDoors[door-1][policeDoorRZ]);
		}
	}
	return 1;
}

forward rf_GetPlayerId(playerid);
public rf_GetPlayerId(playerid)
{	
	return PlayerInfo[playerid][pId];
}

forward rf_HaveAdminPermission(playerid, perm[]);
public rf_HaveAdminPermission(playerid, perm[])
{	
	if(HaveAdminPermission(playerid, perm)) return 1;
	return 0;
}

forward rf_IsPlayerInAnyAdminGroup(playerid);
public rf_IsPlayerInAnyAdminGroup(playerid)
{	
	return IsPlayerInAnyAdminGroup(playerid);
}


CMD:studiosmslist(playerid, params[])
{
	new
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_SAN_NEWS) return SendWarning(playerid, "Jûsø frakcija ðios negalimybës neturi.");
	mysql_tquery(chandler, "SELECT * FROM `san_news_sms` ORDER BY Date DESC LIMIT 50;", "SanNewsSMSLoad", "d", playerid);
	return 1;
}

forward SanNewsSMSLoad(playerid);
public SanNewsSMSLoad(playerid)
{
	new 
		number,
		text[128];

	dialog_Clear();

	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_int(i, "PlayerNumber", number);
		cache_get_value_name(i, "Text", text);

		dialog_AddLine("%d: %.56s", number, text);
	}
	inline sanNews_SMSList(response, listitem)
	{
		if(response)
		{
			new 
				string[256];

			mysql_format(chandler, string, sizeof string, "SELECT * FROM `san_news_sms` ORDER BY Date DESC LIMIT 1 OFFSET %d", listitem);
			mysql_tquery(chandler, string, "SanNewsSmsData", "d", playerid);
		}
		return 1;
	}
	dialog_Show(playerid, sanNews_SMSList, DIALOG_STYLE_LIST, "San News SMS", "Daugiau", "Atðaukti");
	return 1;
}


forward SanNewsSmsData(playerid);
public SanNewsSmsData(playerid)
{
	new 
		text[128],
		number;

	if(cache_num_rows())
	{
		cache_get_value_name_int(0, "PlayerNumber", number);
		cache_get_value_name(0, "Text", text);
	
		dialog_Clear();
		dialog_AddLine("%d paraðë þinutæ:", number);
		dialog_AddLine(text);

		inline smsText(response, listitem) return 1;
		dialog_Show(playerid, using inline smsText, DIALOG_STYLE_MSGBOX, "Þinutë", "Gerai", "");
	}
	return 1;
}


CMD:items(playerid, params[])
{
	new
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_SAN_NEWS) return SendWarning(playerid, "Jûsø frakcija ðios negalimybës neturi.");
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 197.23, -135.49, 1011.09)) return SendError(playerid, "Nesate darbo patalpose.");

	GivePlayerWeapon(playerid, WEAPON_CAMERA, 20, WEAPON_GIVE_TYPE_NO_INVENTORY);
	rp_me(playerid, _, "pasiima darbo árankius.");
	SendFormat(playerid, 0xBABABAFF, "Pasiëmete darbo árankius.");
	return 1;
}

CMD:badge(playerid, params[])
{
	new
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
		rank = PlayerInfo[playerid][pJobLevel]-1;
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios negalimybës neturi.");
	if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][pePoliceBadgeText]))
	{
		if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][pePoliceBadgeText]))
		{
			DestroyDynamic3DTextLabel(PlayerExtra[playerid][pePoliceBadgeText]);	
		}
		PlayerExtra[playerid][pePoliceBadgeText] = INVALID_3DTEXT_ID;
		SendFormat(playerid, 0xA2C5EDFF, "Nusiëmëte þenklelá.");
	}
	else
	{
		if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");
		new string[126];
		format(string, sizeof string, "LSPD #%d %s", PlayerInfo[playerid][pId], rank >= 0 ? (FactionRankNames[factionid][rank]) : ("Officer"));
		PlayerExtra[playerid][pePoliceBadgeText] = CreateDynamic3DTextLabel(string, 0x574DE4FF, 0.0, 0.0, 0.35, 4.0, playerid, INVALID_VEHICLE_ID, 1);
		SendFormat(playerid, 0xA2C5EDFF, "Uþsidëjote þenklelá.");
	}
	return 1;
}

CMD:tlc(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1) return InfoBox(playerid, IB_NOT_IN_FACTION);
	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE && FactionInfo[factionid][fType] != FACTION_TYPE_FIRE) return SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");

	switch(FactionInfo[factionid][fType])
	{
		case FACTION_TYPE_POLICE:
		{
			SetPlayerCheckpointEx(playerid, 0, tlc_pd[0], tlc_pd[1], tlc_pd[2]);
		}
		case FACTION_TYPE_FIRE:
		{
			SetPlayerCheckpointEx(playerid, 0, tlc_md[0], tlc_md[1], tlc_md[2]);
		}
	}
	SendFormat(playerid, 0xBABABAFF, "Paskutinio iðkvietimo vieta paþymëta þemëlapyje.");
	return 1;
}

CMD:gov(playerid, params[])
{
	new 
		string[256],
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid != -1 && PlayerInfo[playerid][pFactionLeader] > 0)
	{
    	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE && FactionInfo[factionid][fType] != FACTION_TYPE_FIRE && FactionInfo[factionid][fType] != FACTION_TYPE_GOVERNMENT) return SendWarning(playerid, "Jûsø frakcijos tipas netinkamas (FD/MD/GOV)");
		if(sscanf(params, "s[256]", string)) SendUsage(playerid, "/gov [tekstas]");
		SendChatMessageToAll(0x00D900FF, "|_______ Los Santos Valdþia_______|");
		format(string, 256, "Praneða: %s", string);
		SendChatMessageToAll(-1, string);
		format(string, 256, "Praneðëjas: %s", GetPlayerNameEx(playerid, true, true));
		SendChatMessageToAll(-1, string);
	}
	else SendWarning(playerid, "Neturite frakcijos arba nesate frakcijos lyderis.");
	return 1;
}

CMD:drag(playerid, params[])
{
	new receiverid,
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1) return InfoBox(playerid, IB_NOT_IN_FACTION);
	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE && FactionInfo[factionid][fType] != FACTION_TYPE_FIRE) return SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/drag [þaidëjas]");
	if(!CheckPlayerid(receiverid) || receiverid == playerid) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 3.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	if(!PlayerExtra[receiverid][peCuffed] && PlayerExtra[playerid][peDrag] <= 0) return SendWarning(playerid, "Þaidëjas turi bûti surakintas antrankiais.");
	if(PlayerExtra[receiverid][peDrag] > 0)
	{
		PlayerExtra[receiverid][peDrag] = 0;
		rp_me(playerid, _, "baigia tempti %s.", GetPlayerNameEx(receiverid, true));
	}
	else
	{
		PlayerExtra[receiverid][peDrag] = 1;
		rp_me(playerid, _, "pradeda tempti %s.", GetPlayerNameEx(receiverid, true));
		SetTimerEx("DragTimer", 1000, false, "dd", playerid, receiverid);
	}
	return 1;
}

forward DragTimer(playerid, receiverid);
public DragTimer(playerid, receiverid)
{
	if(IsPlayerConnected(playerid) && IsPlayerConnected(receiverid))
	{
		new
			interior = GetPlayerInterior(playerid),
			world = GetPlayerVirtualWorld(playerid),
			Float:x, Float:y, Float:z,
			playerstate = GetPlayerState(playerid);
		GetPlayerPos(playerid, x, y, z);
		if(PlayerExtra[receiverid][peDrag] > 0)
		{
			if(playerstate == PLAYER_STATE_DRIVER)
			{
				new
					vehicleid = INVALID_VEHICLE_ID;
				if(IsPlayerInAnyVehicle(playerid) && (vehicleid = GetPlayerVehicleID(playerid)) != INVALID_VEHICLE_ID)
				{
					PutPlayerInVehicle(receiverid, vehicleid, 3);
					//PlayerExtra[receiverid][peDrag] = 0;
				}
			}
			else if(playerstate == PLAYER_STATE_ONFOOT)
			{
				SetPlayerPos(receiverid, x, y+1, z);
				SetPlayerInterior(receiverid, interior);
				SetPlayerVirtualWorld(receiverid, world);
			}
			SetTimerEx("DragTimer", 1000, false, "dd", playerid, receiverid);
		}
	}
	else
	{
		PlayerExtra[receiverid][peDrag] = 0;
	}
	return 1;
}

CMD:weptrunk(playerid, params[])
{
	new
		vehicleid = INVALID_VEHICLE_ID,
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1 || !(FactionInfo[factionid][fType] == FACTION_TYPE_POLICE || FactionInfo[factionid][fType] == FACTION_TYPE_FIRE)) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(!IsPlayerInAnyVehicle(playerid))
	{
		if(GetClosestVehicle(playerid, 5.0) == INVALID_VEHICLE_ID) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
		else vehicleid = GetClosestVehicle(playerid, 5.0);
	}
	else
	{
		vehicleid = GetPlayerVehicleID(playerid);
	}
	new v_factionid = GetFactionArrayIndexById(VehicleInfo[vehicleid][vFaction]);
	if(v_factionid == -1 || (FactionInfo[v_factionid][fType] != FACTION_TYPE_POLICE && FactionInfo[v_factionid][fType] != FACTION_TYPE_FIRE) || FactionInfo[v_factionid][fId] != PlayerInfo[playerid][pFaction]) return SendWarning(playerid, "Tr. priemonë netinkama.");
	if(PlayerInfo[playerid][pJobLevel] <= 1 && FactionInfo[factionid][fType] == FACTION_TYPE_POLICE) return SendWarning(playerid, "Ginklai leidþiami tik nuo 2 rango.");
	if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");
	new
		line[86],
		haveperm[5],
		string[512] = "{BABABA}Nr. Ginklas\t{BABABA}Leidþiama Jums\t{BABABA}Galima imti tr. priemonës viduje\n";
	tmpIter[playerid] = vehicleid;
	for(new i = 0; i < MAX_VEHICLE_WEAPON_SLOTS; i++)
	{
		if(VehicleWeaponsInventory[vehicleid][i][ftwWeaponId] != 0)
		{
			new
				bool:found_any_permission,
				bool:found_any_permission_ic;
			for(new p = 0; p < 3; p++)
			{
				if(VehicleWeaponsInventory[vehicleid][i][ftwPermission][p] != 0)
				{
					// sita tikrint reik
					found_any_permission = true;
					if(PlayerInfo[playerid][pFactionPermissions][p] > 0)
					{
						found_any_permission_ic = true;
					}
				}
			}
			if(!found_any_permission || found_any_permission_ic)
			{
				// visiems galima || turi bent viena
				format(haveperm, 5, "Taip");
			}
			else
			{
				format(haveperm, 5, "Ne");
			}
			format(line, sizeof line, "{FFFFFF}%d. %s\t%s\t%s\n", i+1, GetInventoryItemName(VehicleWeaponsInventory[vehicleid][i][ftwWeaponId]), haveperm, VehicleWeaponsInventory[vehicleid][i][ftwAllowedInVehicle] ? ("Taip") : ("Ne"));
		}
		else
		{
			format(line, sizeof line, "{BABABA}%d. Tuðèia\n", i+1);
		}
		strcat(string, line);
	}
	ShowPlayerDialog(playerid, DIALOG_WEAPON_TRUNK, DIALOG_STYLE_TABLIST_HEADERS, "Ginklai bagaþinëje", string, "Tæsti", "Atðaukti");
	return 1;
}

CMD:trunkweapon(playerid, params[])
{
	new
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
		weaponid = GetPlayerWeapon(playerid),
		vehicleid,
		ammo;
	if(factionid == -1 || !(FactionInfo[factionid][fType] == FACTION_TYPE_POLICE || FactionInfo[factionid][fType] == FACTION_TYPE_FIRE)) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendWarning(playerid, "Negalite padëti ginklo tr. priemonëje.");
	if((vehicleid = GetClosestVehicle(playerid, 5.0)) == INVALID_VEHICLE_ID) return InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
	new v_factionid = GetFactionArrayIndexById(VehicleInfo[vehicleid][vFaction]);
	if(v_factionid == -1 || !(FactionInfo[v_factionid][fType] == FACTION_TYPE_POLICE || FactionInfo[v_factionid][fType] == FACTION_TYPE_FIRE)) return SendWarning(playerid, "Tr. priemonë netinkama.");
	if(weaponid != 0)
	{
		new wepslot = FAC_GetWeaponSlot(weaponid);
		
		if(ret_GetSlotWeaponGiveType(playerid, wepslot) != WEAPON_GIVE_TYPE_NO_INVENTORY)
		{
			SendWarning(playerid, "Ðis ginklas nëra ið frakcijos tr. priemonës");
			return 1;
		}

		new model = GetVehicleModel(vehicleid);

		GetPlayerWeaponData(playerid, wepslot, ammo, ammo);
		for(new l = 0; l < sizeof FactionWeaponsInTrunk; l++)
		{
			if(FactionWeaponsInTrunk[l][ftwListWeaponId] == weaponid)
			{
				// sutampa weaponid
				for(new m = 0; m < 10; m++)
				{
					if(FactionWeaponsInTrunk[l][ftwListModels][m] < 400) { break; }
					if(FactionWeaponsInTrunk[l][ftwListModels][m] == model)
					{
						// sutampa modeliai
						new
							bool:found_any_permission,
							bool:found_any_permission_ic; // in-common
						for(new p = 0; p < 3; p++)
						{
							if(FactionWeaponsInTrunk[l][ftwListPermission][p] > 0)
							{
								found_any_permission = true;
								if(PlayerInfo[playerid][pFactionPermissions][p] > 0)
								{
									found_any_permission_ic = true;
								}
							}
						}
						if(!found_any_permission || found_any_permission_ic)
						{
							for(new inv = 0; inv < MAX_VEHICLE_WEAPON_SLOTS; inv++)
							{
								if(VehicleWeaponsInventory[vehicleid][inv][ftwWeaponId] == 0)
								{
									VehicleWeaponsInventory[vehicleid][inv][ftwWeaponId] = weaponid;
									VehicleWeaponsInventory[vehicleid][inv][ftwAmmo] = ammo;
									VehicleWeaponsInventory[vehicleid][inv][ftwAllowedInVehicle] = FactionWeaponsInTrunk[l][ftwListAllowedInVehicle];
									for(new p_inv = 0; p_inv < 3; p_inv++)
									{
										VehicleWeaponsInventory[vehicleid][inv][ftwPermission][p_inv] = FactionWeaponsInTrunk[l][ftwListPermission][p_inv];
									}
									RemovePlayerWeaponInSlot(playerid, wepslot);
									MsgSuccess(playerid, "GINKLAI", "Sëkmingai padëjote ginklà.");
									rp_me(playerid, _, "padeda ginklà á tr. priemonës ginklø stovà.");
									return 1;
								}
							}
							return SendWarning(playerid, "Nëra vietos tr. priemonës ginklø bagaþinëje.");
						}
					}
				}
				break;
			}
		}
		SendWarning(playerid, "Ðio ginklo Jums padëti á ðià tr. priemonæ negalima.");
	}
	return 1;
}

CMD:lightbulb(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid),
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(!IsPlayerInAnyVehicle(playerid) || IsModelBike(GetVehicleModel(vehicleid)) || IsModelPlane(GetVehicleModel(vehicleid)) || IsModelBoat(GetVehicleModel(vehicleid))) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	new v_factionid = GetFactionArrayIndexById(VehicleInfo[vehicleid][vFaction]);
	if(v_factionid == -1 || FactionInfo[v_factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Tr. priemonë netinkama.");
	if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][0])) 
	{
		// remove
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][0])) DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0], "jobs", "lightbulb");
		VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		rp_me(playerid, _, "iðkiða rankà pro langà ir nuima policijos ðvyturëlá.");
	}
	else
	{
		new Float:Z;
		switch(GetVehicleModel(vehicleid))
		{
			case 596: Z = 0.9; // PD
			case 597: Z = 0.9; // PD
			case 598: Z = 0.9; // PD
			case 599: Z = 1.1; // PD Rancher
			case 541: Z = 0.65; // Bullet
			case 560: Z = 0.85; // Sultan
			case 551: Z = 0.9; // Merit
			case 566: Z = 0.9; // Tahoma
			case 490: Z = 1.1; // FBI Rancher
			case 426: Z = 0.9; // Premier
			case 445: Z = 0.85; //  admiralas
			case 415: Z = 0.68;
			default: Z = 0.8; // Default
		}
		VehicleInfo[vehicleid][vObjects][0] = CreateDynamicObject(18646, 0, 0, 0, 0, 0, 0, .called = "jobs", .extra = "lightbulb");
		AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][0], vehicleid, -0.5, -0.2, Z, 2.0, 2.0, 3.0);
		rp_me(playerid, _, "iðkiða rankà pro langà ir uþdeda policijos ðvyturëlá.");
	}
    return 1;
}

CMD:wepstore(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1) return InfoBox(playerid, IB_NOT_IN_FACTION);
	if(IsPlayerInPD(playerid) || IsPlayerInRangeOfPoint(playerid, 100.0, 359.22, 1426.68, 1519.27)) 
	{
		if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
		if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");
		else
		{
			ShowPlayerDialog(playerid, DIALOG_WEAPON_STORE, DIALOG_STYLE_LIST, "Policijos ginklinë", "Desert Eagle\nBananas\nAðarinës dujos\nShotgun\nCamera", "Imti", "Atðaukti");
		}
	}
	return 1;
}

CMD:checkbusiness(playerid, params[])
{
	new
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
		businessid = GetClosestBusiness(playerid, 5.0, CHECK_TYPE_OUTSIDE);
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_GOVERNMENT) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(businessid == INVALID_BUSINESS_ID) return InfoBox(playerid, IB_NOT_IN_HOUSE_OR_BUSINESS);
	else
	{
		new
			varname[24],
			btype[24];
		switch(BusinessInfo[businessid][bType])
		{
			case BUSINESS_TYPE_FUEL: format(btype, sizeof btype, "Degalinë");
			case BUSINESS_TYPE_SHOP: format(btype, sizeof btype, "24/7 parduotuvë");
			case BUSINESS_TYPE_CLOTHES: format(btype, sizeof btype, "Drabuþiø parduotuvë");
			case BUSINESS_TYPE_BAR: format(btype, sizeof btype, "Maisto ástaiga");
			case BUSINESS_TYPE_WEAPONS: format(btype, sizeof btype, "Ginklø parduotuvë");
			default: format(btype, sizeof btype, "-");
		}
		format(varname, sizeof varname, "BusinessPayLevel%d", BusinessInfo[businessid][bLevel]);
		SendFormat(playerid, 0xE3EEB1FF, "Verslo savininkas: %s, verslo tipas: %s", GetNameBySql(BusinessInfo[businessid][bOwner]), btype);
		SendFormat(playerid, 0xE3EEB1FF, "Verslo gaunamos pajamos: $%d", GetGVarInt(varname));
		log_init(true);
		log_set_table("logs_factions");
		log_set_keys("`FactionId`,`FactionName`,`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`");
		log_set_values("'%d','%e','%d','%e','Patikrino versla','%d'", GetFactionName(factionid, false), FactionInfo[factionid][fId], LogPlayerName(playerid), LogPlayerId(playerid), BusinessInfo[businessid][bId]);
		log_commit();
	}
	return 1;
}

CMD:arrest(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1) return InfoBox(playerid, IB_NOT_IN_FACTION);
	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");
	new receiverid,
		time, price;
	if(sscanf(params,"udd",receiverid,time,price)) return SendUsage(playerid, "/arrest [þaidëjas] [laikas minutëmis] [bauda]");
	if(time <= 0) return SendWarning(playerid, "Laikas turi bûti nuo 0 iki 99999 minuèiø.");
	if(price <= 0) return SendWarning(playerid, "Bauda turi bûti nuo 1$ iki 99999$");
	if(!CheckPlayerid(receiverid) || receiverid == playerid) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	if(!IsPlayerInRangeOfPoint(playerid, 25.0, GetGVarFloat("ArrestX"), GetGVarFloat("ArrestY"), GetGVarFloat("ArrestZ"))) return SendWarning(playerid, "Nesate kalëjime.");
	GivePlayerMoney(receiverid, -price);
	JailPlayer(receiverid, GetPlayerNameEx(playerid, true, true), "", time, .type = 1);
	SendFormatToAll(0x6BBFFFFF, "Policininkas %s uþdarë %s á areðtinæ %d minutëm.", GetPlayerNameEx(playerid, true, true), GetPlayerNameEx(receiverid, true, true), time);
	SendFormat(receiverid, 0x6BBFFFFF, "Jûs buvote pasodintas á kalëjimà. Laikas: %dmin, bauda: $%d", time, price);
	if(PlayerExtra[receiverid][peCuffed])
	{
		RemovePlayerAttachedObject(playerid, 9);
		PlayerExtra[receiverid][peCuffed] = false;
		SetPlayerSpecialAction(receiverid, SPECIAL_ACTION_NONE);
	}
	SaveAccount(receiverid);
	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`FactionId`,`FactionName`,`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`,`Amount`");
	log_set_values("'%d','%e','%d','%e','Pasodino i arestine','%d','%e','%d'", GetFactionName(factionid, false), FactionInfo[factionid][fId], LogPlayerName(playerid), LogPlayerId(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), time);
	log_commit();
	return 1;
}

CMD:prison(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1) return InfoBox(playerid, IB_NOT_IN_FACTION);
	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");
	new receiverid,
		time, price;
	if(sscanf(params,"udd",receiverid,time,price)) return SendUsage(playerid, "/prison [þaidëjas] [laikas minutëmis] [bauda]");
	if(time <= 0) return SendWarning(playerid, "Laikas turi bûti nuo 0 iki 99999 minuèiø.");
	if(price <= 0) return SendWarning(playerid, "Bauda turi bûti nuo 1$ iki 99999$");
	if(!CheckPlayerid(receiverid) || receiverid == playerid) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	if(!IsPlayerInRangeOfPoint(playerid, 25.0, GetGVarFloat("JailX"), GetGVarFloat("JailY"), GetGVarFloat("JailZ"))) return SendWarning(playerid, "Nesate kalëjime.");
	GivePlayerMoney(receiverid, -price);
	JailPlayer(receiverid, GetPlayerNameEx(playerid, true, true), "", time, .type = 2);
	SendFormatToAll(0x6BBFFFFF, "Policininkas %s pasodino %s á kalëjimà %d minutëm.", GetPlayerNameEx(playerid, true, true), GetPlayerNameEx(receiverid, true, true), time);
	SendFormat(receiverid, 0x6BBFFFFF, "Jûs buvote pasodintas á kalëjimà. Laikas: %dmin, bauda: $%d", time, price);
	SaveAccount(receiverid);
	if(PlayerExtra[receiverid][peCuffed])
	{
		RemovePlayerAttachedObject(playerid, 9);
		PlayerExtra[receiverid][peCuffed] = false;
		SetPlayerSpecialAction(receiverid, SPECIAL_ACTION_NONE);
	}
	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`FactionId`,`FactionName`,`PlayerId`,`PlayerName`,`ActionText`,`ExtraId`,`ExtraString`,`Amount`");
	log_set_values("'%d','%e','%d','%e','Pasodino i kalejima','%d','%e','%d'", GetFactionName(factionid, false), FactionInfo[factionid][fId], LogPlayerName(playerid), LogPlayerId(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), time);
	log_commit();
	return 1;
}

alias:delarrestcar("unarrestcar");
CMD:delarrestcar(playerid, params[])
{
	new sql;
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(sscanf(params,"d",sql)) return SendUsage(playerid, "/delarrestcar [automobilio MySQL ID (/v get ID)]");
	new string[186];
	mysql_format(chandler, string, sizeof string, "SELECT id FROM `vehicles_arrested` WHERE VehicleId = '%d' AND Valid = '1'", sql);
	new Cache:result = mysql_query(chandler, string, true);
	if(cache_num_rows())
	{
		cache_delete(result);
		mysql_format(chandler, string, sizeof string, "UPDATE `vehicles_arrested` SET Valid = '0', UnarrestedBy = '%e' WHERE VehicleId = '%d' AND Valid = '1'", GetPlayerNameEx(playerid), sql);
		mysql_fquery(chandler, string, "VehicleArrested");
		SendFormat(playerid, 0xF7FF7BFF, "Konfiskuota tr. priemonë paðalinta.");
		log_init(true);
		log_set_table("logs_factions");
		log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`");
		log_set_values("'%d','%e','%d','%e','Pasalino arestuota automobili','%d'", LogPlayerName(playerid), LogPlayerId(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), sql);
		log_commit();
	}
	else
	{
		SendWarning(playerid, "Tr. priemonë nëra konfiskuota.");
		cache_delete(result);
	}
	return 1;
}

CMD:arrestcar(playerid, params[])
{
	new
		vehicleid,
		string[256],
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid == -1 || FactionInfo[factionid][fType] != FACTION_TYPE_POLICE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if((vehicleid = GetClosestVehicle(playerid, 5.0)) == INVALID_VEHICLE_ID) return InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
	if(VehicleInfo[vehicleid][vOwner] == 0 || VehicleInfo[vehicleid][vFaction] != 0 || VehicleInfo[vehicleid][vJob] != 0) return SendWarning(playerid, "Tr. priemonë negalima.");
	new
		owner = VehicleInfo[vehicleid][vOwner],
		ownerid = FindPlayerBySql(owner);
	if(ownerid != INVALID_PLAYER_ID)
	{
		SendFormat(playerid, 0xF7FF7BFF, "Jûsø tr. priemonë %s(%s) buvo konfiskuota.", GetModelName(GetVehicleModel(vehicleid)), VehicleInfo[vehicleid][vNumbers]);
		PlayerInfo[ownerid][pCarsSpawned]--;
	}
	SendFormat(playerid, 0xF7FF7BFF, "Konfiskavote tr. priemonæ.");
	mysql_format(chandler, string, sizeof string, "INSERT INTO `vehicles_arrested` (`VehicleId`,`OfficerName`,`Valid`) VALUES ('%d','%d','1')", VehicleInfo[vehicleid][vId], GetPlayerNameEx(playerid));
	mysql_fquery(chandler, string, "VehicleArrested");

	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`");
	log_set_values("'%d','%e','%d','%e','Arestavo automobili','%d'", LogPlayerName(playerid), LogPlayerId(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), VehicleInfo[vehicleid][vId]);
	log_commit();

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	VehicleInfo[vehicleid][vSyncX] = x,
	VehicleInfo[vehicleid][vSyncY] = y,
	VehicleInfo[vehicleid][vSyncZ] = z;
	ParkVehicle(vehicleid);
	/*SaveVehicleFloatEx(vehicleid, "X", x);
	SaveVehicleFloatEx(vehicleid, "Y", y);
	SaveVehicleFloatEx(vehicleid, "Z", z);
	NullVehicle(vehicleid);
	DestroyVehicle(vehicleid);*/
	return 1;
}
thread(VehicleArrested);

CMD:bell(playerid, params[])
{
	static last_bell_time[MAX_PLAYERS];
	if(!IsPlayerInPD(playerid)) return SendWarning(playerid, "Nesate policijos departamente.");
	if(last_bell_time[playerid]+30 > gettime()) return SendWarning(playerid, "Ðià komandà galite naudoti kas 30s");
	last_bell_time[playerid] = gettime();
	new string[126];
	format(string, sizeof string, "DISPEÈERINË: Pilietis laukia departamente.", GetPlayerNameEx(playerid, true, true));
	SendFactionTypeMessage(FACTION_TYPE_POLICE, 0xFFCC3EFF, true, string);
	rp_me(playerid, _, "paskambina varpeliu.");
	return 1;
}

CMD:cuff(playerid, params[])
{
	new receiverid,
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE || factionid == -1) return SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/cuff [þaidëjas]");
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 4.0) || IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(receiverid) || !CheckPlayerid(receiverid)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	PlayerExtra[receiverid][peCuffed] = !PlayerExtra[receiverid][peCuffed];
	new 
		skin = GetPlayerSkin(receiverid);
	if(skin >= sizeof CuffObjectOffsets) skin = 10;
	rp_me(playerid, _, "%s antrankius %s.", PlayerExtra[receiverid][peCuffed] ? ("uþdeda") : ("nuima"), GetPlayerNameEx(receiverid, true));
	SetPlayerSpecialAction(receiverid, PlayerExtra[receiverid][peCuffed] ? SPECIAL_ACTION_CUFFED : SPECIAL_ACTION_NONE);
	if(PlayerExtra[receiverid][peCuffed])
	{
		if(!IsPlayerAttachedObjectSlotUsed(receiverid, 9)) SetPlayerAttachedObject(receiverid, 9, 19418, 6, CuffObjectOffsets[skin][0], CuffObjectOffsets[skin][1], CuffObjectOffsets[skin][2], CuffObjectOffsets[skin][3], CuffObjectOffsets[skin][4], CuffObjectOffsets[skin][5], CuffObjectOffsets[skin][6], CuffObjectOffsets[skin][7], CuffObjectOffsets[skin][8]);
	}
	else
	{
		RemovePlayerAttachedObject(receiverid, 9);
	}
	return 1;
}

CMD:bk(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE || factionid == -1) return SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");
	PlayerExtra[playerid][peRequestedBk] = !PlayerExtra[playerid][peRequestedBk];
	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`");

	new 
		string[256],
		channel = PlayerInfo[playerid][pRadioChannel];
	if(channel <= 0) return SendError(playerid, "Jûsø kanalas nenustatytas!");

	if(PlayerExtra[playerid][peRequestedBk] > 0)
	{
		format(string, sizeof string, "[CH: %d] %s praðo skubaus pastiprinimo! (( /abk %d ))", channel, GetPlayerNameEx(playerid, true, true), playerid);
		SendRadioChat(channel, 0x6969C1FF, string);
		PlayerExtra[playerid][peRequestedBk] = 1;
		log_set_values("'%d','%e','%d','%e','Paprase pastiprinimo'", LogPlayerName(playerid), LogPlayerId(playerid), GetFactionName(factionid, false), FactionInfo[factionid][fId]);
	}
	else
	{
		format(string, sizeof string, "[CH: %d] %s atðaukë pastiprinimà!", channel, GetPlayerNameEx(playerid, true, true));
		SendRadioChat(channel, 0x6969C1FF, string);
		PlayerExtra[playerid][peRequestedBk] = 0;
		log_set_values("'%d','%e','%d','%e','Atsauke pastiprinima'", LogPlayerName(playerid), LogPlayerId(playerid), GetFactionName(factionid, false), FactionInfo[factionid][fId]);

		foreach(new i : Player)
		{
			if (PlayerExtra[i][peRequestedBk] == PlayerExtra[playerid][peAcceptedBk])
			{
				PlayerExtra[i][peAcceptedBk] = INVALID_PLAYER_ID;

			}
		}
	}
	log_commit();
	return 1;
}

CMD:abk( playerid, params[ ] )
{
	new enteredPlayerId,
		Float:BackupPosition[3],
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);

	if(sscanf(params, "u", enteredPlayerId)) return SendUsage(playerid, "/abk [þaidëjas]");

	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE || factionid == -1) return SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");
	if(PlayerExtra[enteredPlayerId][peRequestedBk] == 0) return SendWarning(playerid, "Þaidëjas nepraðo pastiprinimo.");
	if(PlayerExtra[playerid][peAcceptedBk] != INVALID_PLAYER_ID)
	{	
		SendFormat(playerid, -1, "Nutraukëte /abk");
		PlayerExtra[playerid][peAcceptedBk] = INVALID_PLAYER_ID;
		return 1;
	}
	if(enteredPlayerId == playerid || !IsPlayerConnected(enteredPlayerId)) return InfoBox(playerid, IB_WRONG_PLAYER);

 	GetPlayerPos(enteredPlayerId, BackupPosition[ 0 ], BackupPosition[ 1 ], BackupPosition[ 2 ] );
   	SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_PD_REQUESTEDBK, BackupPosition[ 0 ], BackupPosition[ 1 ], BackupPosition[ 2 ], 5.0 );
	PlayerExtra[playerid][peAcceptedBk] = enteredPlayerId;

	return 1;
}

CMD:vest(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE || factionid == -1) return SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");
	PlayerExtra[playerid][peVest] = !PlayerExtra[playerid][peVest];
	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`");
	if(PlayerExtra[playerid][peVest] > 0)
	{
		// uzsidejo
		if(!IsPlayerAttachedObjectSlotUsed(playerid, 9))
		{
			// SetPlayerAttachedObject(playerid, index, modelid, bone, Float:fOffsetX = 0.0, Float:fOffsetY = 0.0, Float:fOffsetZ = 0.0, Float:fRotX = 0.0, Float:fRotY = 0.0, Float:fRotZ = 0.0, Float:fScaleX = 1.0, Float:fScaleY = 1.0, Float:fScaleZ = 1.0, materialcolor1 = 0, materialcolor2 = 0)
			SetPlayerAttachedObject(playerid, 9, 19142, 1, 0.1, 0.05, 0.0, 0.0, 0.0, 0.0);
			EditAttachedObject(playerid, 9);
		}
		MsgSuccess(playerid, "LIEMENË", "Uþsidëjote liemenæ.");
		log_set_values("'%d','%e','%d','%e','Uzsidejo liemene'", LogPlayerName(playerid), LogPlayerId(playerid), GetFactionName(factionid, false), FactionInfo[factionid][fId]);
	}
	else
	{
		// nusieme
		SetPlayerArmour(playerid, 0.0);
		MsgSuccess(playerid, "LIEMENË", "Nusiëmëte liemenæ.");
		RemovePlayerAttachedObject(playerid, 9);
		log_set_values("'%d','%e','%d','%e','Nusieme liemene'", LogPlayerName(playerid), LogPlayerId(playerid), GetFactionName(factionid, false), FactionInfo[factionid][fId]);
	}
	log_commit();
	return 1;
}

stock AttachPhone(playerid)
{
	if(!IsPlayerAttachedObjectSlotUsed(playerid, 9)) 
	{
		return SetPlayerAttachedObject(playerid, 9, 18868, 6, 0.0770, 0.0189, -0.0040, 80.70, -157.0, 0.0, 1.0, 1.0, 1.0);
	}
	return false;
}

stock DetachPhone(playerid)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, 9))
	{
		return RemovePlayerAttachedObject(playerid, 9);
	}
	return false;
}

CMD:random(playerid, params[])
{
	new 
		_min, _max;
	if(sscanf(params,"dd",_min,_max) || _min > _max || _min == _max) return SendUsage(playerid, "/random [min] [max]");

	new 
		rand = randomEx(_min, _max + 1),
		string[256];

	format(string, sizeof string, "(( %s random (%d - %d): %d ))", GetPlayerNameEx(playerid, false), _min, _max, rand);
	ProxDetector(7.0, playerid, string, 0xb2af7cFF, 0xb2af7cFF, 0xb2af7cFF, 0xb2af7cFF, 0xb2af7cFF);
	return 1;
}

CMD:ramdoor(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE || factionid == -1) return SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	new itter;
	if((itter = GetClosestHouse(playerid, 5.0, CHECK_TYPE_OUTSIDE)) != INVALID_HOUSE_ID)
	{
		if(HouseInfo[itter][hLocked] <= 0) return SendWarning(playerid, "Namo durys atrakintos.");
		else
		{
			HouseInfo[itter][hLocked] = 0;
			rp_me(playerid, _, "iðlauþia namo duris.");
		}
		return 1;
	}
	else if((itter = GetClosestBusiness(playerid, 5.0, CHECK_TYPE_OUTSIDE)) != INVALID_BUSINESS_ID)
	{
		if(BusinessInfo[itter][bLocked] <= 0) return SendWarning(playerid, "Verslo durys atrakintos.");
		else
		{
			BusinessInfo[itter][bLocked] = 0;
			rp_me(playerid, _, "iðlauþia verslo duris.");
		}
		return 1;
	}
	else if((itter = GetClosestGarage(playerid, 5.0, CHECK_TYPE_OUTSIDE)) != INVALID_GARAGE_ID)
	{
		if(GarageInfo[itter][gLocked] <= 0) return SendWarning(playerid, "Garaþo durys atrakintos.");
		else
		{
			GarageInfo[itter][gLocked] = 0;
			rp_me(playerid, _, "iðlauþia garaþo duris.");
		}
		return 1;
	}
	else InfoBox(playerid, IB_NOT_CLOSE_DOORS);
	return 1;
}

CMD:ramcardoor(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE || factionid == -1) return SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	new vehicleid;
	if((vehicleid = GetClosestVehicle(playerid, 5.0)) != INVALID_VEHICLE_ID)
	{
		if(VehicleInfo[vehicleid][vLocked] <= 0) return SendWarning(playerid, "Tr. priemonës durys atrakintos.");
		VehicleInfo[vehicleid][vLocked] = 0;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		SaveVehicleIntEx(vehicleid, "Locked", 0);
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
		rp_me(playerid, _, "iðlauþia tr. priemonës dureles.");
		return 1;
	}
	else InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
	return 1;
}

alias:roadblock("rb");
CMD:roadblock(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]),
		type;
	if((FactionInfo[factionid][fType] != FACTION_TYPE_POLICE && FactionInfo[factionid][fType] != FACTION_TYPE_FIRE && FactionInfo[factionid][fType] != FACTION_TYPE_GOVERNMENT) || factionid == -1) return SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(sscanf(params,"d",type) || !(1 <= type <= 12)) return SendUsage(playerid, "/roadblock [blokados tipas (1-12)]");
	if(CreateRoadblock(playerid, type))
	{
		MsgSuccess(playerid, "BLOKADA", "Sëkmingai pastatëte blokadà.");
	}
	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`");
	log_set_values("'%d','%e','%d','%e','Pastate blokada','%d'", LogPlayerName(playerid), LogPlayerId(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false), type);
	log_commit();
	return 1;
}

alias:removeroadblock("rrb");
CMD:removeroadblock(playerid, params[])
{
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if((FactionInfo[factionid][fType] != FACTION_TYPE_POLICE && FactionInfo[factionid][fType] != FACTION_TYPE_FIRE && FactionInfo[factionid][fType] != FACTION_TYPE_GOVERNMENT) || factionid == -1) return SendError(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(DestroyRoadblock(playerid))
	{
		MsgSuccess(playerid, "BLOKADA", "Sëkmingai nugriovëte blokadà.");
	}
	log_init(true);
	log_set_table("logs_factions");
	log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`");
	log_set_values("'%d','%e','%d','%e','Pasalino blokada'", LogPlayerName(playerid), LogPlayerId(playerid), FactionInfo[factionid][fId], GetFactionName(factionid, false));
	log_commit();
	return 1;
}
// San News komandos
CMD:br(playerid, params[])
{
	if(!player_Broadcast[playerid]) return SendError(playerid, "Nesate pakviestas á transliacijà.");
	if(broadcast_Status != 2) return SendError(playerid, "Transliacija dar nepradëta.");
	if(strlen(params) <= 0) return SendUsage(playerid, "/br [tekstas á eterá]");
	// siunciam visiems
	new 
		string[256],
		name[25];
	if(player_BroadcastAnonimous[playerid])
	{
		format(name, sizeof name, "Anonimas %s", player_BroadcastAnonimousStr[playerid]);
	}
	else 
	{
		format(name, sizeof name, "%s", GetPlayerNameEx(playerid, true, true));
	}
	format(string, sizeof string, "*[SAN NEWS %s %s]: %s", BroadcastRoles[player_BroadcastRole[playerid]], name, params);
	SendBroadcast(0xDEF373FF, string);
	return 1;
}

CMD:createbroadcast(playerid, params[])
{
	if(broadcast_Status != 0) return SendError(playerid, "Transliacijà jau yra ruoðiama arba pradëta (%s)", GetPlayerNameEx(broadcast_Owner));
	broadcast_Status = 1;
	broadcast_Owner = playerid;
	player_Broadcast[playerid] = true;
	player_BroadcastRole[playerid] = 2;
	MsgInfo(playerid, "Transliacija", "Sukûrëte transliacijà. Kai bûsite pasiruoðæ, pradëkite transliacijà naudodami /startbroadcast");
	return 1;
}

CMD:endbroadcast(playerid, params[])
{	
	if(broadcast_Owner != playerid) return SendError(playerid, "Transliacijà nutraukti gali tik transliacijos ákûrëjas.");
	if(broadcast_Status == 0) return SendError(playerid, "Transliacija nesukurta ir nepradëta.");
	if(broadcast_Status == 1) SendToBroadcasters(0xEC2121FF, "[STUDIJA]: Transliacija baigta.");
	if(broadcast_Status == 2) SendBroadcast(0xC4DE44FF, "* Radijo transliacija baigësi");
	EndBroadcast();
	return 1;
}
CMD:fishing(playerid, params[])
{
	if(!IsItemInPlayerInventory(playerid, ITEM_ROD) || !IsItemInPlayerInventory(playerid, ITEM_BAIT)) return SendWarning(playerid, "Neturite meðkerës arba masalo.");
	new item_bait;
	if(!IsPlayerInRangeOfPoint(playerid, 60.0, 2969.11, -1993.24, 4.71))
	{
		SetPlayerCheckpointEx(playerid, 0, 2900.65, -1934.49, 11.91, 2.3);
		return SendWarning(playerid, "Nesate þvejybos vietoje. Þvejybos vieta buvo paþymëta þemëlapyje.");
	}
	if(PlayerInfo[playerid][pFishedLimit] >= 500)
	{
		SendWarning(playerid, "Jûs jau esate prigaudæs þuvø limità!");
		return 1;	
	}
	if(PlayerInfo[playerid][pFishes] >= 20)
	{
		SendWarning(playerid, "Jûs jau esate prigaudæs 20 þuvø. Parduokite jas /sellfishes");
		return 1;
	}
	if(PlayerExtra[playerid][peIsFishing])
	{
		SendError(playerid, "Jau þvejojate.");
		return 1;
	}
	if((item_bait = GetItemSlotInPlayerInventory(playerid, ITEM_BAIT)) != -1)
	{
		SetPlayerInventoryItemAmount(playerid, item_bait, InventoryInfo[playerid][item_bait][invAmount]-1);
		
		SetTimerEx("FishingTimer", 5000, false, "d", playerid);
		GameTextForPlayer(playerid, "~w~Zvejojate", 4500, 3);
		PlayerExtra[playerid][peIsFishing] = true;

		ApplyAnimation(playerid, "SAMP", "FishingIdle", 3.0,1,1,0,0,0);
    	SetPlayerAttachedObject( playerid, 0, 18632, 1, -0.091109, 0.255484, 0.018155, 94.362060, 312.328125, 190.418655, 1.000000, 1.000000, 1.000000 );
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 0);
	}
	else SendWarning(playerid, "Neturite masalo.");
	return 1;
}
forward FishingTimer(playerid);
public FishingTimer(playerid)
{
	new bool:success = false,
		rand = random(100);
	if(rand <= 60) success = true;
	else success = false;

	PlayerExtra[playerid][peIsFishing] = false;
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
   	RemovePlayerAttachedObject(playerid, 0);

	if(success)
	{
		new 
			string[35];
		format(string, sizeof string, "~g~Pagavote zuvi %d/20", PlayerInfo[playerid][pFishes] + 1);
		GameTextForPlayer(playerid, string, 3000, 3);
		PlayerInfo[playerid][pFishes] ++ ;
		if(PlayerInfo[playerid][pFishes] >= 20)
		{
			return SendWarning(playerid, "Jûs pagavote 20 þuvø. Parduokite jas /sellfishes");
		}
	}
	else
	{
		GameTextForPlayer(playerid, "~r~Nepagavote zuvies", 3000, 3);
	}
	return 1;
}

#define MIN_MONEY_PER_FISH	(5)
#define MAX_MONEY_PER_FISH	(8)

CMD:sellfishes(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 2900.65, -1934.49, 11.91))
	{
		SendFormat(playerid, -1, "Þuvø pardavimo vieta paþymëta þemëlapyje.");
		SetPlayerCheckpointEx(playerid, 0, 2900.65, -1934.49, 11.91, 2.3);
	}
	else
	{
		if(PlayerInfo[playerid][pFishes] <= 0) return SendWarning(playerid, "Neturite þuvø.");

		new money = 0;
		for(new f = 0; f < PlayerInfo[playerid][pFishes]; f++)
		{
			money += randomEx(MIN_MONEY_PER_FISH, MAX_MONEY_PER_FISH);
		}

		GivePlayerMoney(playerid, money);
		PlayerInfo[playerid][pFishedLimit] += money;
		PlayerInfo[playerid][pFishes] = 0;

		SendFormat(playerid, -1, "Pardavëte þuvis, gavote: $%d", money);
	}
	return 1;
}


CMD:invitetobroadcast(playerid, params[])
{
	if(broadcast_Status == 0) return SendError(playerid, "Transliacija nesukurta. Sukûrimui naudokite /createbroadcast");
	if(broadcast_Owner != playerid) return SendError(playerid, "Á transliacijà paðnekovus gali kviesti tik transliacijos ákûrëjas.");
	new
		receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/invitetobroadcast [þaidëjas]");
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, MAX_DISTANCE_BETWEEN_BROADCASTERS) || !CheckPlayerid(receiverid) || playerid == receiverid) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	if(player_Broadcast[receiverid] || player_InviteToBroadcast[receiverid]) return SendError(playerid, "Þaidëjas jau yra transliacijoje arba jau yra pakviestas.");
	player_InviteToBroadcast[receiverid] = true;
	MsgSuccess(playerid, "Transliacija", "Pakvietimas á transliacijà iðsiøstas þaidëjui %s.", GetPlayerNameEx(receiverid));
	MsgImportant(receiverid, "Transliacija", "Jûs esate kvieèiamas á radijo transliacijà. Naudokite /acceptbroadcast");
	return 1;
}

CMD:kickfrombroadcast(playerid, params[])
{
	if(broadcast_Status == 0) return SendError(playerid, "Transliacija nesukurta. Sukûrimui naudokite /createbroadcast");
	if(broadcast_Owner != playerid) return SendError(playerid, "Ið transliacijos paðnekovus iðmesti gali tik transliacijos ákûrëjas.");
	new
		receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/kickfrombroadcast [þaidëjas]");
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, MAX_DISTANCE_BETWEEN_BROADCASTERS) || !CheckPlayerid(receiverid) || playerid == receiverid) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	if(!player_Broadcast[receiverid] && !player_InviteToBroadcast[receiverid]) return SendError(playerid, "Þaidëjas nëra pakviestas á transliacijà.");
	
	KickFromBroadcast(receiverid);

	MsgSuccess(playerid, "Transliacija", "Þaidëjas %s buvo atjungtas nuo transliacijos.", GetPlayerNameEx(receiverid));
	MsgImportant(receiverid, "Transliacija", "Jûs buvote atjungtas nuo transliacijos.");
	return 1;
}

CMD:startbroadcast(playerid, params[])
{	
	// tikrinam ar galim startint
	if(broadcast_Status != 1) return SendError(playerid, "Transliacija dar nesukurta arba jau pradëta.");
	if(broadcast_Owner != playerid) return SendError(playerid, "Radijo transliacijà pradëti gali tik jos ákûrëjas.");
	broadcast_Status = 2;
	SendToBroadcasters(0xEC2121FF, "[STUDIJA]: Radijo transliacija buvo pradëta!");
	SendChatMessageToAll(0xC4DE44FF, "* Prasidëjo radijo transliacija ((iðjungti galite naudodami /togglebroadcast))");
	return 1;
}
CMD:togglebroadcast(playerid, params[])
{
	if(player_Broadcast[playerid]) return SendError(playerid, "Jûs dalyvaujate transliacijoje, todël jos iðjungti negalite.");
	ChatsOff[playerid][BroadcastChat] = !ChatsOff[playerid][BroadcastChat];
	MsgSuccess(playerid, "Transliacija", "%s radijo transliacijos rodymà.", ChatsOff[playerid][BroadcastChat] ? ("Iðjungëte") : ("Ájungëte"));
	return 1;
}
CMD:setbroadcastrole(playerid, params[])
{	
	if(broadcast_Status != 1) return SendError(playerid, "Transliacija turi bûti sukurta, taèiau nepradëta.");
	if(broadcast_Owner != playerid) return SendError(playerid, "Ðiuos nustatymus gali keisti tik transliacijos ákûrëjas.");
	new 
		receiverid, roleid;
	if(sscanf(params,"ud",receiverid,roleid) || !(1 <= roleid < sizeof BroadcastRoles))
	{
		SendUsage(playerid, "/setbroadcastrole [þaidëjas] [rolë (1-%d)]", sizeof BroadcastRoles - 1);
		SendFormat(playerid, 0xB3B3B3FF, "Galimos rolës:");
		for(new i = 1; i < sizeof BroadcastRoles; i++)
		{	
			SendFormat(playerid, 0xB3B3B3FF, "%d. %s", i, BroadcastRoles[i]);
		}
		return 1;
	}
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, MAX_DISTANCE_BETWEEN_BROADCASTERS) || !CheckPlayerid(receiverid)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	if(!player_Broadcast[receiverid]) return SendError(playerid, "Þaidëjas nëra prisijungæs á transliacijà.");
	player_BroadcastRole[receiverid] = roleid;
	MsgSuccess(playerid, "Transliacija", "Nustatëte þaidëjo %s rolæ á: %s", GetPlayerNameEx(receiverid), BroadcastRoles[roleid]);
	MsgInfo(receiverid, "Transliacija", "Jûsø transliacijos rolë nustatyta á: %s", BroadcastRoles[roleid]);
	return 1;
}

CMD:setbroadcastanonimous(playerid, params[])
{
	if(broadcast_Status != 1) return SendError(playerid, "Transliacija turi bûti sukurta, taèiau nepradëta.");
	if(broadcast_Owner != playerid) return SendError(playerid, "Ðiuos nustatymus gali keisti tik transliacijos ákûrëjas.");
	new 
		receiverid, chars[3];
	if(sscanf(params,"us[3]",receiverid,chars) || strlen(chars) > 2) return SendUsage(playerid, "/setbroadcastanonimous [þaidëjas] [2 simboliø inicialai]");
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, MAX_DISTANCE_BETWEEN_BROADCASTERS) || !CheckPlayerid(receiverid)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	if(!player_Broadcast[receiverid]) return SendError(playerid, "Þaidëjas nëra prisijungæs á transliacijà.");
	if(!player_BroadcastAnonimous[receiverid])
	{
		format(player_BroadcastAnonimousStr[receiverid], 3, chars);
		player_BroadcastAnonimous[receiverid] = true;
		MsgSuccess(playerid, "Transliacija", "Þaidëjui %s suteiktas anonimiðkumas, inicialai: %s.", GetPlayerNameEx(receiverid), chars);
		MsgInfo(receiverid, "Transliacija", "Jums suteiktas anonimiðkumas transliacijoje. Duoti inicialai: %s", chars, receiverid);
	}
	else
	{
		player_BroadcastAnonimous[receiverid] = false;
		MsgSuccess(playerid, "Transliacija", "Þaidëjui %s anonimiðkumas paðalintas.", GetPlayerNameEx(receiverid));
		MsgInfo(receiverid, "Transliacija", "Jûsø anonimiðkumas transliacijoje panaikintas.");
	}
	return 1;
}

CMD:leavebroadcast(playerid, params[])
{
	if(!player_Broadcast[playerid]) return SendError(playerid, "Nedalyvaujate transliacijoje.");
	if(broadcast_Owner == playerid) pc_cmd_endbroadcast(playerid, "");
	else KickFromBroadcast(playerid);
	return 1;
}

CMD:acceptbroadcast(playerid, params[])
{
	if(!player_InviteToBroadcast[playerid]) return SendWarning(playerid, "Jûs nesate pakviestas á transliacijà arba transliacija nebevyksta.");
	player_InviteToBroadcast[playerid] = false;
	player_Broadcast[playerid] = true;
	player_BroadcastRole[playerid] = 1;
	MsgSuccess(playerid, "Transliacija", "Prisijungëte á transliacijà. Palikti transliacijà galite su /leavebroadcast");
	SendToBroadcasters(0xE9F57EFF, "[STUDIJA]: %s prisijungë á transliacijà.", GetPlayerNameEx(playerid));
	return 1;
}
CMD:rr(playerid, params[])
{
	new 
		string[256],
		text[128];
	if(PlayerInfo[playerid][pFaction] == 0) return 1;

	new
		factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(FactionInfo[factionid][fType] != FACTION_TYPE_POLICE && FactionInfo[factionid][fType] != FACTION_TYPE_FIRE) return SendWarning(playerid, "Jûsø frakcija ðios funkcijos neturi.");
	if(!IsItemInPlayerInventory(playerid, ITEM_RADIO)) return SendWarning(playerid, "Neturite racijos.");
	if(sscanf(params,"s[128]",text)) return SendUsage(playerid, "/rr [tekstas]");

	format(string, sizeof string, "* %s [%s] bendra racija: %s", FactionInfo[factionid][fType] == FACTION_TYPE_FIRE ? ("LSMD") : ("LSPD"), GetPlayerNameEx(playerid, true, true), text);
	foreach(new receiverid : Player)
	{
		new 
			fac = GetFactionArrayIndexById(PlayerInfo[receiverid][pFaction]);
		if(fac != -1)
		{
			if(FactionInfo[fac][fType] == FACTION_TYPE_FIRE || FactionInfo[fac][fType] == FACTION_TYPE_POLICE)
			{
				SendChatMessage(receiverid, 0x6969C1FF, string);
			}
		}
	}

	format(string, sizeof string, "%s sako (á racijà): %s", GetPlayerNameEx(playerid, true, false), text);
	ProxDetector(IsPlayerInAnyVehicle(playerid) ? 6.0 : 10.0, playerid, string, 0xE9E9E9FF, 0xDADADAFF, 0xC7C7C7FF, 0xABABABFF, 0x929292FF);
	return 1;
}

CMD:f(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] <= 0) return InfoBox(playerid, IB_NOT_IN_FACTION);
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid != -1)
	{
		if(FactionInfo[factionid][fHasChat] <= 0) return SendWarning(playerid, "Tavo frakcija neturi savo kanalo.");
		else if(FactionInfo[factionid][fChatEnabled] <= 0 && PlayerInfo[playerid][pFactionLeader] < 1) return SendWarning(playerid, "Tavo frakcijos kanalas iðjungtas.");
		if(ChatsOff[playerid][FactionChat] >= 1) return SendWarning(playerid, "Jûs pats esate iðjungæs frakcijos pokalbius (/togglef)");
		new string[256];
		if(sscanf(params,"s[128]",string)) return SendUsage(playerid, "/f [tekstas]");

		log_init(true);
		log_set_table("logs_chat");
		log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`Text`,`ExtraString`");
		log_set_values("'%d','%e','/f','%e','%e'", LogPlayerName(playerid), LogPlayerId(playerid), string, GetFactionName(factionid, false));
		log_commit();

		format(string, sizeof string, "(( %s %s: %s ))", FactionRankNames[factionid][PlayerInfo[playerid][pJobLevel]-1], GetPlayerNameEx(playerid), string);
		SendFactionMessage(PlayerInfo[playerid][pFaction], 0x4CF0F3FF, false, string);
	}
	return 1;
}
CMD:flist(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(PlayerInfo[playerid][pFaction] == 0) return InfoBox(playerid, IB_NOT_IN_FACTION);
	new factionid = GetFactionArrayIndexById(faction);
	if(factionid != -1)
	{
		SendFormat(playerid, 0x398EC7FF, "Frakcijos \"%s\" nariai:", FactionInfo[factionid][fName]);
		foreach(new loopid : Player)
		{
			if(PlayerInfo[loopid][pFaction] == faction)
			{
				SendFormat(playerid, 0x6AB1E1FF, "[%s] %s(%d)", FactionRankNames[factionid][PlayerInfo[loopid][pJobLevel]-1], GetPlayerNameEx(loopid), loopid);
			}
		}
	}
	return 1;
}
CMD:fon(playerid, params[])
{
	new faction,
		count,
		factionid;
	if(sscanf(params,"d",faction)) return SendUsage(playerid, "/fon [frakcijos ID]");
	factionid = GetFactionArrayIndexById(faction);
	if(factionid != -1)
	{
		SendFormat(playerid, 0xFFFFFFFF, "Frakcijos %s prisijungæ nariai:", GetFactionName(factionid, false));
		foreach(new receiverid : Player)
		{
			if(PlayerInfo[receiverid][pFaction] == faction)
			{
				count++;
				SendFormat(playerid, 0xBABABAFF, "%d. %s [%d]", count, GetPlayerNameEx(receiverid), receiverid);
			}
		}
	}
	else SendWarning(playerid, "Tokios frakcijos nëra.");
	return 1;
}

CMD:setunit(playerid, params[])
{
	new vehicleid = GetClosestVehicle(playerid, 5.0);
	if(IsValidVehicle(vehicleid))
	{
		if(VehicleInfo[vehicleid][vFaction] <= 0) return SendError(playerid, "Tr. priemonë nepriklauso jokiai frakcijai.");
		if(PlayerInfo[playerid][pFactionLeader] <= 0) return SendWarning(playerid, "Nesate frakcijos lyderis.");
		new 
			factionid = GetFactionArrayIndexById(VehicleInfo[vehicleid][vFaction]);
		if((FactionInfo[factionid][fType] != FACTION_TYPE_POLICE && FactionInfo[factionid][fType] != FACTION_TYPE_FIRE) || factionid == -1) return MsgError(playerid, "FRAKCIJA", "Jûsø frakcija ðios funkcijos neturi.");
		if(!strlen(params))
		{
			if(strlen(VehicleInfo[vehicleid][vUnitText]))
			{
				// sena istrinam
				if(IsValidDynamic3DTextLabel(VehicleInfo[vehicleid][vUnitLabel]))
				{
					DestroyDynamic3DTextLabel(VehicleInfo[vehicleid][vUnitLabel]);
				}
				VehicleInfo[vehicleid][vUnitLabel] = INVALID_3DTEXT_ID;
				log_init(true);
				log_set_table("logs_factions");
				log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`ExtraString`");
				log_set_values("'%d','%e','%d','%e','(FM) Pasalino automobilio unit','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[playerid][pFaction], GetFactionName(PlayerInfo[playerid][pFaction]), VehicleInfo[vehicleid][vId], VehicleInfo[vehicleid][vUnitText]);
				log_commit();

				format(VehicleInfo[vehicleid][vUnitText], 1, "");
				MsgSuccess(playerid, "FRAKCIJA", "Sëkmingai paðalinote ekipaþo pavadinimà.");

				new string[256];
				mysql_format(chandler, string, sizeof string, "UPDATE `vehicles_server` SET Unit = '' WHERE id = '%d'", VehicleInfo[vehicleid][vId]);
				mysql_fquery(chandler, string, "VehicleSavedEx");
			}
		}
		else
		{
			// ivede
			if(IsValidDynamic3DTextLabel(VehicleInfo[vehicleid][vUnitLabel]))
			{
				UpdateDynamic3DTextLabelText(VehicleInfo[vehicleid][vUnitLabel], 0xFFFFFFFF, params);
			}
			else
			{
				new Float:x, Float:z, Float:y;
				GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, x, y, z);
				VehicleInfo[vehicleid][vUnitLabel] = CreateDynamic3DTextLabel(params, 0xFFFFFFFF, 0.425*x, (-0.45*y), (-0.1*z), 15.0, INVALID_PLAYER_ID, vehicleid, 1);
			}
			format(VehicleInfo[vehicleid][vUnitText], 15, params);
			Streamer_Update(playerid);

			log_init(true);
			log_set_table("logs_factions");
			log_set_keys("`PlayerId`,`PlayerName`,`FactionId`,`FactionName`,`ActionText`,`ExtraId`,`ExtraString`");
			log_set_values("'%d','%e','%d','%e','(FM) Pakeite automobilio unit','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), PlayerInfo[playerid][pFaction], GetFactionName(PlayerInfo[playerid][pFaction]), VehicleInfo[vehicleid][vId], params);
			log_commit();

			new string[256];
			mysql_format(chandler, string, sizeof string, "UPDATE `vehicles_server` SET Unit = '%e' WHERE id = '%d'", params, VehicleInfo[vehicleid][vId]);
			mysql_fquery(chandler, string, "VehicleSavedEx");

			MsgSuccess(playerid, "FRAKCIJA", "Sëkmingai atnaujinote ekipaþà: \"%s\"", params);
		}
	}
	return 1;
}

CMD:fmenu(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 0) return InfoBox(playerid, IB_NOT_IN_FACTION);
	new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
	if(factionid != -1)
	{
		if(PlayerInfo[playerid][pFactionLeader] < 1) return SendWarning(playerid, "Nesate lyderis.");
		ShowPlayerDialog(playerid, DIALOG_FM_MAIN, DIALOG_STYLE_LIST, "FRAKCIJA", "Rangai ir nariai\nInventorius", "Tæsti", "Atðaukti");
	}
	return 1;
}

thread(BanAdd);
thread(LockAccAdd);

CMD:dhinv(playerid, params[])
{
	new houseid = INVALID_HOUSE_ID;
	if((houseid = GetClosestDealerHouse(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_HOUSE_ID && HaveDealerHouseKey(playerid, houseid))
	{
		Inventory_ShowItems(playerid, INVENTORY_TYPE_DEALER_HOUSE, houseid);
	}
	else SendError(playerid, "Nesate konspiraciniame name.");
	return 1;
}
CMD:hinv(playerid, params[])
{
	new houseid = INVALID_HOUSE_ID;
	if((houseid = GetClosestHouse(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_HOUSE_ID && HaveHouseKey(playerid, houseid, .check_only_owner = true))
	{
		Inventory_ShowItems(playerid, INVENTORY_TYPE_HOUSE, houseid);
	}
	else SendError(playerid, "Nesate namie.");
	return 1;
}
CMD:binv(playerid, params[])
{
	new businessid = INVALID_BUSINESS_ID;
	if((businessid = GetClosestBusiness(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID && HaveBusinessKey(playerid, businessid, .check_only_owner = true))
	{
		Inventory_ShowItems(playerid, INVENTORY_TYPE_BUSINESS, businessid);
	}
	else SendError(playerid, "Nesate versle.");
	return 1;
}


alias:clothes("clothesinventory", "cinv", "cinventory", "clothesinv");
CMD:clothes(playerid, params[])
{
	new string[512],
		line[86];
	tmpSelected[playerid] = -1;
	if(PlayerExtra[playerid][peCuffed] >= 1) return SendWarning(playerid, "Esate surakintas.");
	MsgInfo(playerid, "DRABUÞIAI", "Pasirinkite tuðèià vietà, á kurià norite pridëti drabuþá.");
	for(new i = 0; i < 9; i++)
	{
		new slotdata = AttachedClothes[playerid][i][attachedInventorySlot];
		if(slotdata != -1) format(line, sizeof line, "{FFFFFF}%d. %s\n", i+1, GetClotheName(ClothesInventory[playerid][slotdata]));
		else format(line, sizeof line, "{979797}%d. Tuðèia\n", i+1);
		strcat(string, line);
	}
	strcat(string, "{BABABA}Visi turimi drabuþiai");
	ShowPlayerDialog(playerid, DIALOG_CLOTHES_MAIN, DIALOG_STYLE_LIST, "Uþsidëti drabuþiai", string, "Tæsti", "Atðaukti");
	return 1;
}

CMD:sumtogether(playerid, params[])
{
	new
		drug_name[15],
		amount1,
		amount2;
	if(sscanf(params,"s[15]dd",drug_name, amount1, amount2) || amount1 <= 0 || amount2 <= 0) return SendUsage(playerid, "/sumtogether [narkotikas] [kiekis 1 slot] [kiekis 2 slot]") ,
																									SendUsage(playerid, "Marijuana, Kokainas, Heroinas, MDMA, Xanax"); // Krekas Metamfetaminas
	enum LOCAL_DRUG_DATA
	{
		_drugName[15],
		_drugId
	}
	new drug_array[MAX_DRUG_TYPES][LOCAL_DRUG_DATA] = {
		{"Marijuana", ITEM_MARIJUANA},
		{"Kokainas", ITEM_COCAINE},
		{"Heroinas", ITEM_HEROINE},
		{"MDMA", ITEM_MDMA},
		{"Krekas", ITEM_CRACK},
		{"Metamfetaminas", ITEM_METHAMPHETAMINE},
		{"Xanax", ITEM_XANAX}
	};

	for(new a = 0; a < sizeof drug_array; a++)
	{
		if(isequal(drug_name,drug_array[a][_drugName],true))
		{
			new 
				slot1 = GetItemSlotInPlayerInventory(playerid, drug_array[a][_drugId], INVENTORY_AMOUNT_EQUAL, amount1);
			if(slot1 != -1)
			{
				new 
					slot2 = GetItemSlotInPlayerInventory(playerid, drug_array[a][_drugId], INVENTORY_AMOUNT_EQUAL, amount2, slot1);
				if(slot2 != -1)
				{
					// 2 slota isvalom, o kieki pridedam prie pirmo
					InventoryInfo[playerid][slot1][invAmount] += InventoryInfo[playerid][slot2][invAmount];
					ClearPlayerInventorySlot(playerid, slot2);
					MsgSuccess(playerid, "NARKOTIKAI", "Narkotikas %s sujungtas (%d + %d = %d)", drug_name, amount1, amount2, amount1+amount2);
					return 1;
				}
				else return SendWarning(playerid, "Narkotikas %s su kiekiu %d inventoriuje nerastas.", drug_name, amount2);
			}
			else return SendWarning(playerid, "Narkotikas %s su kiekiu %d inventoriuje nerastas.", drug_name, amount1);

			/*new
				o_drug_slot1 = GetItemSlotInPlayerInventory(playerid, drug_array[a][_drugId], INVENTORY_AMOUNT_EQUAL, amount),
				o_drug_slot2 = GetItemSlotInPlayerInventory(playerid, drug_array[a][_drugId], .skip_slot = o_drug_slot1);
			if(o_drug_slot1 != -1 && o_drug_slot2 != -1)
			{
				new
					o_drug_amount1 = InventoryInfo[playerid][o_drug_slot1][invAmount];
				if(o_drug_amount1 == amount) ClearPlayerInventorySlot(playerid, o_drug_slot1);
				else InventoryInfo[playerid][o_drug_slot1][invAmount] -= amount;
				InventoryInfo[playerid][o_drug_slot2][invAmount] += amount;
				MsgSuccess(playerid, "NARKOTIKAI", "Sëkmingai sujungëte narkotikus.");
				return 1;
			}
			else return SendWarning(playerid, "Neturite tiek narkotikø.");*/
		}
	}
	SendWarning(playerid, "Neteisingai ávestas narkotikas.");
	return 1;
}

CMD:prescribe(playerid, params[])
{
	new
		drug_name[15],
		amount;
	if(sscanf(params,"s[15]d",drug_name, amount) || amount <= 0) return SendUsage(playerid, "/prescribe [narkotikas] [kiekis]") ,
																		SendUsage(playerid, "Marijuana, Kokainas, Heroinas, MDMA, Xanax"); // Krekas Metamfetaminas
	enum LOCAL_DRUG_DATA
	{
		_drugName[15],
		_drugId
	}
	new drug_array[MAX_DRUG_TYPES][LOCAL_DRUG_DATA] = {
		{"Marijuana", ITEM_MARIJUANA},
		{"Kokainas", ITEM_COCAINE},
		{"Heroinas", ITEM_HEROINE},
		{"MDMA", ITEM_MDMA},
		{"Krekas", ITEM_CRACK},
		{"Metamfetaminas", ITEM_METHAMPHETAMINE},
		{"Xanax", ITEM_XANAX}
	};

	for(new a = 0; a < sizeof drug_array; a++)
	{
		if(isequal(drug_name,drug_array[a][_drugName],true))
		{
			new
				free_slot = GetPlayerFreeInventorySlot(playerid),
				o_drug_slot = GetItemSlotInPlayerInventory(playerid, drug_array[a][_drugId], INVENTORY_AMOUNT_GREATER, amount);
			if(o_drug_slot != -1)
			{
				if(free_slot != -1)
				{
					InventoryInfo[playerid][o_drug_slot][invAmount] -= amount;
					GivePlayerInventoryItem(playerid, drug_array[a][_drugId], amount, InventoryInfo[playerid][o_drug_slot][invExtraId], free_slot);
					MsgSuccess(playerid, "NARKOTIKAI", "Narkotikai sëkmingai perskirti.");
					return 1;
				}
				else return SendWarning(playerid, "Neturite pakankamai vietos inventoriuje.");
			}
			else return SendWarning(playerid, "Neturite pakankamai ðio narkotiko.");
		}
	}
	SendWarning(playerid, "Neteisingai ávestas narkotikas.");
	return 1;
}

alias:rolldice("dice", "kauliukas");
CMD:rolldice(playerid, params[])
{
	if(!IsItemInPlayerInventory(playerid, ITEM_DICE)) return SendWarning(playerid, "Neturite kauliukø.");
	new rand = 1+random(6),
		string[86];
	format(string, sizeof string, "** %s iðridena kauliukà ir jis iðkrenta ant %d.", GetPlayerNameEx(playerid, true), rand);
	ProxDetector(11.0, playerid, string, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA);
	return 1;
}
alias:inventory("inv","inventorius","backpack");
CMD:inventory(playerid, params[])
{
	if(PlayerExtra[playerid][peCuffed] >= 1) return SendWarning(playerid, "Esate surakintas.");

	Inventory_ShowItems(playerid, INVENTORY_TYPE_PLAYER);//INVENTORY_PAGE_MAIN, INVENTORY_TYPE_PLAYER, 0, true);
	return 1;
}
CMD:invweapon(playerid, params[])
{
	new weaponid = GetPlayerWeapon(playerid);
	// if(IsPlayerInAnyVehicle(playerid)) return SendWarning(playerid, "Negalite padëti ginklo tr. priemonëje.");
	if(weaponid == 0) return SendError(playerid, "Neturite ginklo rankose.");

	new wepslot = FAC_GetWeaponSlot(weaponid);
	if(ret_GetSlotWeaponGiveType(playerid, wepslot) != WEAPON_GIVE_TYPE_NORMAL)
	{
		SendWarning(playerid, "Ðio ginklo pasidëti á inventoriø negalima.");
		return 1;
	}
	if(PlayerHasWeaponInSlot(playerid, wepslot))
	{
		new slot = GetPlayerFreeInventorySlot(playerid);
		if(slot != -1)
		{
			new unused, ammo;
			GetPlayerWeaponData(playerid, wepslot, unused, ammo);
			GivePlayerInventoryItem(playerid, weaponid, ammo, ret_GetSlotWeaponUniqueId(playerid, wepslot), .slotid = slot);

			log_init(true);
			log_set_table("logs_inventory");
			log_set_keys("`OwnerId`,`OwnerName`,`ReceiverId`,`ActionText`,`ItemId`,`ItemAmount`,`ItemExtra`");
			log_set_values("'%d','%e','-1','Padejo ginkla i inventoriu','%d','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), weaponid, ammo, ret_GetSlotWeaponUniqueId(playerid, wepslot));
			log_commit();

			RemovePlayerWeaponInSlot(playerid, wepslot);
			SendFormat(playerid, 0xBABABAFF, "Ginklas padëtas á inventoriø.");
		}
		else
		{
			SendWarning(playerid, "Nëra vietos inventoriuje.");
		}
	}
	return 1;
}


stock IsPlayerSpectatedBy(who, adminid)
{
	if(SpectateOn[adminid] == who) return true;
	return false;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if(!vel_x && !vel_y && vel_z == 400.000000)	BanPlayer(playerid, "Sistema", "TrollBoss");
	return 1;
}

CMD:setspawn(playerid, params[])
{
	new type[24];
	if(sscanf(params,"s[24]",type))
	{
		SendUsage(playerid, "/setspawn [pasirinkimas]");
		MsgInfo(playerid, "Variantai", "[Default]  [Jefferson]  [East LS]  [West LS]  [Namas]  [Verslas]  [Frakcija]");
		return 1;
	}
	
	if(!strcmp(type,"joks",true) || !strcmp(type,"none",true) || !strcmp(type,"default",true))
	{
		SaveAccountIntEx(playerid, "SpawnType", 0);
		SaveAccountIntEx(playerid, "SpawnId", SPAWN_TYPE_DEFAULT_ID_DEFAULT);
		MsgSuccess(playerid, "SERVERIS", "Sëkmingai pakeitëte SPAWN vietà á paprastà (Pizza Stack).");
	}
	else if(strfind(type,"Jefferson") != -1)
	{
		SaveAccountIntEx(playerid, "SpawnType", 0);
		SaveAccountIntEx(playerid, "SpawnId", SPAWN_TYPE_DEFAULT_ID_JEFFERSON);
		MsgSuccess(playerid, "SERVERIS", "Sëkmingai pakeitëte SPAWN vietà á Jefferson.");
	}
	else if(strfind(type,"East") != -1)
	{
		SaveAccountIntEx(playerid, "SpawnType", 0);
		SaveAccountIntEx(playerid, "SpawnId", SPAWN_TYPE_DEFAULT_ID_EAST_LS);
		MsgSuccess(playerid, "SERVERIS", "Sëkmingai pakeitëte SPAWN vietà á East Los Santos.");
	}
	else if(strfind(type,"West") != -1)
	{
		SaveAccountIntEx(playerid, "SpawnType", 0);
		SaveAccountIntEx(playerid, "SpawnId", SPAWN_TYPE_DEFAULT_ID_WEST_LS);
		MsgSuccess(playerid, "SERVERIS", "Sëkmingai pakeitëte SPAWN vietà á West Los Santos.");
	}
	else if(!strcmp(type,"namas",true))
	{
		// namas
		new houseid = INVALID_HOUSE_ID;
		if((houseid = GetClosestHouse(playerid, 5.0, CHECK_TYPE_OUTSIDE)) != INVALID_HOUSE_ID)
		{
			if(HaveHouseKey(playerid, houseid))
			{
				SaveAccountIntEx(playerid, "SpawnType", 1);
				SaveAccountIntEx(playerid, "SpawnId", HouseInfo[houseid][hId]);
				MsgSuccess(playerid, "SERVERIS", "Sëkmingai pakeitëte SPAWN vietà á namus.");
			}
			else return InfoBox(playerid, IB_NO_HOUSE_KEYS);
		}
		else
		{
			return MsgError(playerid, "KLAIDA", "Ásitikinkite, jog esate prie namo áëjimo.");
		}
	}
	else if(!strcmp(type,"verslas",true))
	{
		new businessid = INVALID_BUSINESS_ID;
		if((businessid = GetClosestBusiness(playerid, 5.0, CHECK_TYPE_OUTSIDE)) != INVALID_BUSINESS_ID)
		{
			if(HaveBusinessKey(playerid, businessid))
			{
				SaveAccountIntEx(playerid, "SpawnType", 2);
				SaveAccountIntEx(playerid, "SpawnId", BusinessInfo[businessid][bId]);
				MsgSuccess(playerid, "SERVERIS", "Sëkmingai pakeitëte SPAWN vietà á verslà.");
			}
			else return InfoBox(playerid, IB_NO_BUSINESS_KEYS);
		}
		else return MsgError(playerid, "KLAIDA", "Ásitikinkite, jog esate prie verslo áëjimo.");
	}
	else if(!strcmp(type,"frakcija",true))
	{
		new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
		if(factionid <= -1)
		{
			return MsgError(playerid, "KLAIDA", "Jûs nesate jokioje frakcijoje.");
		}
		else
		{
			SaveAccountIntEx(playerid, "SpawnType", 3);
			MsgSuccess(playerid, "SERVERIS", "Sëkmingai pakeitëte SPAWN vietà á frakcijos.");
		}
	}
	else pc_cmd_setspawn(playerid, "");
	return 1;
}

alias:leavejob("paliktidarba");
CMD:leavejob(playerid, params[])
{
	new index;
	if(PlayerInfo[playerid][pJobContract] != 0)
	{
		if((index = GetJobArrayIndexById(PlayerInfo[playerid][pJob])) != -1 && PlayerInfo[playerid][pDonator] <= 0)
		{
			return SendWarning(playerid, "Jûs dar nesate iðdirbæs darbe %s %d valandø.", Jobs[index][jobName], PlayerInfo[playerid][pJobContract]);
		}
		else
		{
			new string[20];
			format(string, sizeof string, "%d,%d", PlayerInfo[playerid][pJob], PlayerInfo[playerid][pJobContract]);
			SendCriticalError(playerid, "Jûsø darbas buvo nuimtas dël serverio klaidos.", string);
			return 1;
		}
	}
	else
	{
		if(PlayerInfo[playerid][pJob] > 0)
		{
			SendFormat(playerid, 0xA1FD8DFF, "Sëkmingai palikote darbo vietà.");
		}
		else return InfoBox(playerid, IB_NO_JOB);
	}
	if(PlayerInfo[playerid][pJobDuty] > 0 && PlayerInfo[playerid][pJob] == JOB_MECHANIC)
	{
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	}
	PlayerInfo[playerid][pJob] =
	PlayerInfo[playerid][pJobLevel] =
	PlayerInfo[playerid][pJobXP] =
	PlayerInfo[playerid][pJobDuty] =
	PlayerInfo[playerid][pJobContract] = 0;
	return 1;
}

CMD:leavefaction(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] > 0)
	{
		PlayerInfo[playerid][pFaction] =
		PlayerInfo[playerid][pJobLevel] =
		PlayerInfo[playerid][pJobXP] =
		PlayerInfo[playerid][pRadioChannel] =
		PlayerInfo[playerid][pPoliceBadge] = 0;

		HideInfoBar(playerid);

		for(new i = 0; i < 3; i++)
		{
			PlayerInfo[playerid][pFactionPermissions][i] = 0;
		}
		
		new channel = PlayerInfo[playerid][pRadioChannel];
  		if((900 <= channel < 950) || (950 <= channel < 1000) || (1000 <= channel < 1050)) PlayerInfo[playerid][pRadioChannel] = 0;
		MsgSuccess(playerid, "FRAKCIJA", "Sëkmingai palikote frakcijà.");
		if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][pePoliceBadgeText]))
		{
			DestroyDynamic3DTextLabel(PlayerExtra[playerid][pePoliceBadgeText]);
		}
		PlayerExtra[playerid][pePoliceBadgeText] = INVALID_3DTEXT_ID;

		ResetServerSidedWeapons(playerid);
	}
	else
	{
		SendError(playerid, "Nesate frakcijoje.");
	}
	return 1;
}

stock ResetServerSidedWeapons(playerid)
{
	new
		data[13][4];

	for(new i = 0; i < 13; i++)
	{
		GetPlayerWeaponData(playerid, i, data[i][0], data[i][1]);
		GetPlayerWeaponExtraData(playerid, i, data[i][2], data[i][3]);
	}

	ResetPlayerWeapons(playerid);

	for(new i = 0; i < 13; i++)
	{
		if(data[i][0] > 0 && data[i][1] > 0 && data[i][2] != WEAPON_GIVE_TYPE_NO_INVENTORY) // GiveType
		{	
			GivePlayerWeapon(playerid, data[i][0], data[i][1], WEAPON_GIVE_TYPE_NORMAL, data[i][3]);
		}
	}
	return 1;
}

alias:takejob("isidarbinti");
CMD:takejob(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != 0)
	{
		SendWarning(playerid, "Jûs esate frakcijoje. Naudokite /leavefaction.");
		return 1;
	}
	if(PlayerInfo[playerid][pJob] != 0)
	{
		SendWarning(playerid, "Jûs jau turite darbà. Naudokite /leavejob.");
		return 1;
	}
	if(PlayerInfo[playerid][pBankCard] <= 0) return SendWarning(playerid, "Neturite banko kortelës.");
	for(new i = 0; i < sizeof Jobs; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Jobs[i][jobX], Jobs[i][jobY], Jobs[i][jobZ]))
		{
			PlayerInfo[playerid][pJobContract] = Jobs[i][jobContract];
			PlayerInfo[playerid][pJob] = Jobs[i][jobId];
			PlayerInfo[playerid][pJobLevel] = 1;
			PlayerInfo[playerid][pJobXP] = 1;
			SendFormat(playerid, 0xA7CE9EFF, "\
				Sëkmingai ásidarbinote á {66D94D}%s{A7CE9E}. Informacijà rasite {66D94D}/help{A7CE9E}. Darbà pradëti gali su {66D94D}/duty", Jobs[i][jobName]);
			log_init(true);
			log_set_table("logs_jobs");
			log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
			log_set_values("'%d','%e','Isidarbino','%e'", LogPlayerId(playerid), LogPlayerName(playerid), Jobs[i][jobName]);
			log_commit();
			SaveAccountIntEx(playerid, "Job", PlayerInfo[playerid][pJob]);
			return 1;
		}
	}
	SendError(playerid, "Nesate ðalia jokios darbo vietos.");
	return 1;
}

CMD:ddo(playerid, params[])
{
	new string[256],
		text[128],
		bool:done;
	if(sscanf(params,"s[128]",text)) return SendUsage(playerid, "/ddo [tekstas]");
	new player_vw = GetPlayerVirtualWorld(playerid),
		player_int = GetPlayerInterior(playerid);
	foreach(new houseid : House)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ]) && player_vw == HouseInfo[houseid][hOutVW] && player_int == HouseInfo[houseid][hExterior])
		{
			// lauke
			rp_do(playerid, text);
			format(string, sizeof string, "* %s (( %s ))", text, GetPlayerNameEx(playerid, true));
			ProxDetectorCoords(25.0, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ], string, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, HouseInfo[houseid][hVW]);
			done = true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]) && player_vw == HouseInfo[houseid][hVW] && player_int == HouseInfo[houseid][hInterior])
		{
			// viduj
			rp_do(playerid, text);
			format(string, sizeof string, "* %s (( %s ))", text, GetPlayerNameEx(playerid, true));
			ProxDetectorCoords(25.0, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ], string, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, HouseInfo[houseid][hOutVW]);
			done = true;
		}
	}
	foreach(new businessid : Business)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ]) && player_vw == BusinessInfo[businessid][bOutVW] && player_int == BusinessInfo[businessid][bExterior])
		{
			// lauke
			rp_do(playerid, text);
			format(string, sizeof string, "* %s (( %s ))", text, GetPlayerNameEx(playerid, true));
			ProxDetectorCoords(25.0, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ], string, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, BusinessInfo[businessid][bVW]);
			done = true;

		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ]) && player_vw == BusinessInfo[businessid][bVW] && player_int == BusinessInfo[businessid][bInterior])
		{
			// viduj
			rp_do(playerid, text);
			format(string, sizeof string, "* %s (( %s ))", text, GetPlayerNameEx(playerid, true));
			ProxDetectorCoords(25.0, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ], string, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, BusinessInfo[businessid][bOutVW]);
			done = true;
		}
	}
	foreach(new garageid : Garage)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ]) && player_vw == GarageInfo[garageid][gOutVW] && player_int == GarageInfo[garageid][gExterior])
		{
			// lauke
			rp_do(playerid, text);
			format(string, sizeof string, "* %s (( %s ))", text, GetPlayerNameEx(playerid, true));
			ProxDetectorCoords(25.0, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ], string, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, GarageInfo[garageid][gVW]);
			done = true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]) && player_vw == GarageInfo[garageid][gVW] && player_int == GarageInfo[garageid][gInterior])
		{
			// viduj
			rp_do(playerid, text);
			format(string, sizeof string, "* %s (( %s ))", text, GetPlayerNameEx(playerid, true));
			ProxDetectorCoords(25.0, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ], string, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, GarageInfo[garageid][gOutVW]);
			done = true;
		}
	}
	if(!done) return SendWarning(playerid, "Nesate prie namo, verslo ar garaþo durø.");
	else
	{
		log_init(true);
		log_set_table("logs_do");
		log_set_keys("`PlayerId`,`PlayerName`,`Text`,`ExtraString`");
		log_set_values("'%d','%e','%e','I duris'", LogPlayerId(playerid), LogPlayerName(playerid), text);
		log_commit();
	}
	return 1;
}

flags:msm(CMD_TYPE_ADMIN);
CMD:msm(playerid, params[])
{
	new text[128],
		string[256];
	if(sscanf(params, "s[128]", text)) return SendUsage(playerid, "/msm [tekstas]");
	format(string, sizeof string, "%s á mikrofonà: %s", GetPlayerNameEx(playerid, true), text);
	ProxDetector(80.0, playerid, string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF);
	return 1;
}

flags:s(CMD_TYPE_MUTABLE);
CMD:s(playerid, params[])
{
	new text[128],
		string[256];
	if(PlayerExtra[playerid][peDeath] > 0)
	{
		SendWarning(playerid, "Jûs esate komos bûsenoje.");
		return 0;
	}
	if(sscanf(params, "s[128]", text)) return SendUsage(playerid, "/shout [tekstas]");
	format(string, sizeof string, "%s ðaukia: %s", GetPlayerNameEx(playerid, true), text);
	ProxDetector(20.0, playerid, string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF);
	log_init(true);
	log_set_table("logs_chat");
	log_set_keys("`PlayerId`,`PlayerName`,`Text`,`ActionText`");
	log_set_values("'%d','%e','%e','/shout'", LogPlayerId(playerid), LogPlayerName(playerid), text);
	log_commit();
	return 1;
}

flags:low(CMD_TYPE_MUTABLE);
CMD:low(playerid, params[])
{
	new string[256],
		text[128];
	if(sscanf(params,"s[128]",text)) return SendUsage(playerid, "/low [tekstas]");
	new	vehicleid = INVALID_VEHICLE_ID,
		receiverid = INVALID_PLAYER_ID;
	format(string, sizeof string, "%s sako (tyliai)", GetPlayerNameEx(playerid, true));
	if((vehicleid = GetPlayerVehicleID(playerid)) != INVALID_VEHICLE_ID && VehicleHaveWindows(GetVehicleModel(vehicleid)) && IsPlayerInAnyVehicle(playerid))
	{
		format(string, sizeof string, "%s (%s)", string, IsWindowOpened(vehicleid) ? ("langas atidarytas") : ("langas uþdarytas"));
	}
	if((receiverid = PhoneInfo[playerid][phoneTalkingTo]) != INVALID_PLAYER_ID)
	{
		format(string, sizeof string, "%s (%s)", string, PhoneInfo[playerid][phoneRingType] == 0 ? ("telefonu") : ("taksofonu"));
		new to_receiver[256];
		format(to_receiver, sizeof to_receiver, "Paðnekovas %s sako (tyliai): %s", GetNumberFromContacts(receiverid, PhoneInfo[playerid][phoneRingType] == 0 ? (PlayerInfo[playerid][pPhoneNumber]) : (GetPayPhoneNumber(PhoneInfo[playerid][phoneRingType]-1))), text);
		SendChatMessage(receiverid, 0xF7FF7BFF, to_receiver);
	}
	format(string, sizeof string, "%s: %s", string, text);
	ProxDetector(3.5, playerid, string, 0xE9E9E9FF, 0xDADADAFF, 0xC7C7C7FF, 0xABABABFF, 0x929292FF);
	log_init(true);
	log_set_table("logs_chat");
	log_set_keys("`PlayerId`,`PlayerName`,`Text`,`ActionText`");
	log_set_values("'%d','%e','%e','/low'", LogPlayerId(playerid), LogPlayerName(playerid), text);
	log_commit();
	return 1;
}

alias:whisper("w");
CMD:whisper(playerid, params[])
{
	new receiver_mask[24], receiverid,
		text[128], string[256];
	if(sscanf(params,"p< >s[24]s[128]", receiver_mask, text)) return SendUsage(playerid, "/whisper [þaidëjas] [tekstas]");
	sscanf_mask(receiver_mask, receiverid);
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0) || IsPlayerSpectatedBy(playerid, receiverid)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	format(string, sizeof string, "%s ðnabþda: %s", GetPlayerNameEx(playerid, true), text);
	SendChatMessage(receiverid, 0xFF6F6FFF, string);
	format(string, sizeof string, "Paðnabþdëjote %s: %s", GetPlayerNameEx(receiverid, true), text);
	SendChatMessage(playerid, 0xE46565FF, string);
	rp_me(playerid, _, "paðnabþda á %s ausá.", GetPlayerNameEx(receiverid, true));
	log_init(true);
	log_set_table("logs_chat");
	log_set_keys("`PlayerId`,`PlayerName`,`Text`,`ActionText`,`ExtraString`,`ExtraId`");
	log_set_values("'%d','%e','%e','/low','%e','%d'", LogPlayerId(playerid), LogPlayerName(playerid), text, LogPlayerName(receiverid), LogPlayerId(receiverid));
	log_commit();
	return 1;
}

CMD:pay(playerid, params[])
{
	new receiver_mask[24],
		receiverid,
		amount;
	if(sscanf(params,"s[24]d", receiver_mask, amount) || amount < 0) return SendUsage(playerid, "/pay [þaidëjas] [kiekis]");
	sscanf_mask(receiver_mask, receiverid);
	if(!CheckPlayerid(receiverid) || playerid == receiverid) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0) || IsPlayerSpectatedBy(playerid, receiverid)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	if(PlayerInfo[playerid][pHoursPlayed] < 2 || PlayerInfo[receiverid][pHoursPlayed] < 2) return SendWarning(playerid, "Jûs arba þaidëjas nesate praþaidæs 2.");
	if(GetPlayerMoney(playerid) < amount) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, amount);
	GivePlayerMoney(receiverid, amount);
	GivePlayerMoney(playerid, -amount);
	SendFormat(playerid, 0x1EC600FF, "Padavëte %s $%d", GetPlayerNameEx(receiverid, true), amount);
	SendFormat(receiverid, 0x1EC600FF, "Gavote $%d ið %s", amount, GetPlayerNameEx(playerid, true));
	SaveAccountIntEx(receiverid, "Money", GetPlayerMoney(receiverid));
	SaveAccountIntEx(playerid, "Money", GetPlayerMoney(playerid));
	ApplyAnimation_Single(playerid, "DEALER", "shop_pay", 4.0, false, true, true, true, false);
	log_init(true);
	log_set_table("logs_money");
	log_set_keys("`PlayerId`,`PlayerName`,`ExtraId`,`ExtraString`,`ActionText`,`Amount`");
	log_set_values("'%d','%e','%d','%e','Perdave pinigus','%d'", LogPlayerId(playerid), LogPlayerName(playerid), LogPlayerId(receiverid), LogPlayerName(receiverid), amount);
	log_commit();
	return 1;
}


CMD:cw(playerid, params[])
{
	new text[128],
		string[256];
	if(sscanf(params,"s[128]",text)) return SendUsage(playerid, "/cw [tekstas]");
	if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	new vehicleid = GetPlayerVehicleID(playerid);
	format(string, sizeof string, "%s %s: %s", GetPlayerVehicleSeat(playerid) == 0 ? ("Vairuotojas") : ("Keleivis"), GetPlayerNameEx(playerid, true), text);
	foreach(new receiverid : Player)
	{
		if(GetPlayerVehicleID(receiverid) == vehicleid)
		{
			SendChatMessage(receiverid, 0xEEDB2EFF, string);
		}
	}
	log_init(true);
	log_set_table("logs_chat");
	log_set_keys("`PlayerId`,`PlayerName`,`Text`,`ActionText`");
	log_set_values("'%d','%e','%e','/cw'", LogPlayerId(playerid), LogPlayerName(playerid), text);
	log_commit();
	return 1;
}

flags:ds(CMD_TYPE_MUTABLE);
CMD:ds(playerid, params[])
{
	new string[256],
		text[128];
	if(sscanf(params,"s[128]",text)) return SendUsage(playerid, "/ds [tekstas]");
	new player_vw = GetPlayerVirtualWorld(playerid),
		player_int = GetPlayerInterior(playerid),
		bool:done = false;
	foreach(new houseid : House)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ]) && player_vw == HouseInfo[houseid][hOutVW] && player_int == HouseInfo[houseid][hExterior])
		{
			// lauke
			format(string, sizeof string, "%s ðaukia (á duris): %s", GetPlayerNameEx(playerid, true), text);
			ProxDetector(15.0, playerid, string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF);
			format(string, sizeof string, "%s ðaukia (pro duris): %s", GetPlayerNameEx(playerid, true), text);
			ProxDetectorCoords(25.0, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ], string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF, HouseInfo[houseid][hVW]);
			done = true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]) && player_vw == HouseInfo[houseid][hVW] && player_int == HouseInfo[houseid][hInterior])
		{
			// viduj
			format(string, sizeof string, "%s ðaukia (á duris): %s", GetPlayerNameEx(playerid, true), string);
			ProxDetector(15.0, playerid, string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF);
			format(string, 1, "");
			format(string, sizeof string, "%s ðaukia (pro duris): %s", GetPlayerNameEx(playerid, true), string);
			ProxDetectorCoords(25.0, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ], string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF, HouseInfo[houseid][hOutVW]);
			done = true;
		}
	}
	foreach(new businessid : Business)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ]) && player_vw == BusinessInfo[businessid][bOutVW] && player_int == BusinessInfo[businessid][bExterior])
		{
			// lauke
			format(string, sizeof string, "%s ðaukia (á duris): %s", GetPlayerNameEx(playerid, true), text);
			ProxDetector(15.0, playerid, string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF);
			format(string, sizeof string, "%s ðaukia (pro duris): %s", GetPlayerNameEx(playerid, true), text);
			ProxDetectorCoords(25.0, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ], string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF, BusinessInfo[businessid][bVW]);
			done = true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ]) && player_vw == BusinessInfo[businessid][bVW] && player_int == BusinessInfo[businessid][bInterior])
		{
			// viduj
			format(string, sizeof string, "%s ðaukia (á duris): %s", GetPlayerNameEx(playerid, true), text);
			ProxDetector(15.0, playerid, string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF);
			format(string, sizeof string, "%s ðaukia (pro duris): %s", GetPlayerNameEx(playerid, true), text);
			ProxDetectorCoords(25.0, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ], string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF, BusinessInfo[businessid][bOutVW]);
			done = true;
		}
	}
	foreach(new garageid : Garage)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ]) && player_vw == GarageInfo[garageid][gOutVW] && player_int == GarageInfo[garageid][gExterior])
		{
			// lauke
			format(string, sizeof string, "%s ðaukia (á duris): %s", GetPlayerNameEx(playerid, true), text);
			ProxDetector(15.0, playerid, string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF);
			format(string, sizeof string, "%s ðaukia (pro duris): %s", GetPlayerNameEx(playerid, true), text);
			ProxDetectorCoords(25.0, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ], string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF, GarageInfo[garageid][gVW]);
			done = true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]) && player_vw == GarageInfo[garageid][gVW] && player_int == GarageInfo[garageid][gInterior])
		{
			// viduj
			format(string, sizeof string, "%s ðaukia (á duris): %s", GetPlayerNameEx(playerid, true), text);
			ProxDetector(15.0, playerid, string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF);
			format(string, sizeof string, "%s ðaukia (pro duris): %s", GetPlayerNameEx(playerid, true), text);
			ProxDetectorCoords(25.0, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ], string, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xE9E9E9FF, 0xDADADAFF, GarageInfo[garageid][gOutVW]);
			done = true;
		}
	}
	if(!done) return SendWarning(playerid, "Nesate prie namo, verslo ar garaþo durø.");
	else
	{
		log_init(true);
		log_set_table("logs_chat");
		log_set_keys("`PlayerId`,`PlayerName`,`Text`,`ActionText`");
		log_set_values("'%d','%e','%e','/dshout'", LogPlayerId(playerid), LogPlayerName(playerid), text);
		log_commit();
	}
	return 1;
}

CMD:knock(playerid, params[])
{
	new player_vw = GetPlayerVirtualWorld(playerid),
		player_int = GetPlayerInterior(playerid);
	foreach(new houseid : House)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ]) && player_vw == HouseInfo[houseid][hOutVW] && player_int == HouseInfo[houseid][hExterior])
		{
			rp_me(playerid, _, "beldþiasi á namo duris.");
			ProxDetectorCoords(20.0, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ], "* Kaþkas beldþiasi á namo duris", 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, HouseInfo[houseid][hVW]);
			return 1;
		}
	}
	foreach(new businessid : Business)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ]) && player_vw == BusinessInfo[businessid][bOutVW] && player_int == BusinessInfo[businessid][bExterior])
		{
			rp_me(playerid, _, "beldþiasi á namo duris.");
			ProxDetectorCoords(20.0, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ], "* Kaþkas beldþiasi á namo duris", 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, BusinessInfo[businessid][bVW]);
			return 1;
		}
	}
	foreach(new garageid : Garage)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, GarageInfo[garageid][gEnterX], GarageInfo[garageid][gEnterY], GarageInfo[garageid][gEnterZ]) && player_vw == GarageInfo[garageid][gOutVW] && player_int == GarageInfo[garageid][gExterior])
		{
			rp_me(playerid, _, "beldþiasi á namo duris.");
			ProxDetectorCoords(20.0, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ], "* Kaþkas beldþiasi á namo duris", 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, GarageInfo[garageid][gVW]);
			return 1;
		}
	}
	SendWarning(playerid, "Nesate prie namo, verslo ar garaþo durø.");
	return 1;
}


CMD:lic(playerid, params[])
{
	new
		receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/lic [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0) || IsPlayerSpectatedBy(playerid, receiverid)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	rp_me(playerid, _, "parodo savo licencijas %s.", GetPlayerNameEx(receiverid, true));
	SendFormat(receiverid, 0xFFF6F6FF, " _________________________________________________");
	SendFormat(receiverid, 0xFFF6F6FF, "|");
	SendFormat(receiverid, 0xFFF6F6FF, "| Automobilio teisës: %s, motociklo teisës: %s", PlayerInfo[playerid][pCarLic] > 0 ? ("yra") : ("nëra"), PlayerInfo[playerid][pMotoLic] > 0 ? ("yra") : ("nëra"));
	SendFormat(receiverid, 0xFFF6F6FF, "| Laivo teisës: %s, lëktuvo teisës: %s", PlayerInfo[playerid][pBoatLic] > 0 ? ("yra") : ("nëra"), PlayerInfo[playerid][pFlyLic] > 0 ? ("yra") : ("nëra"));
	SendFormat(receiverid, 0xFFF6F6FF, "|_________________________________________________");
	return 1;
}
CMD:id(playerid, params[])
{
	new input[24];
	if(sscanf(params,"s[24]",input) || strlen(input) < 2) return SendUsage(playerid, "/id [vardas/ID]");
	foreach(new receiverid : Player)
	{
		if(strfind(GetPlayerNameEx(receiverid, false),input,true) != -1)
		{
			SendFormat(playerid, 0xABABABFF, "[%d] %s", receiverid, GetPlayerNameEx(receiverid));
		}
	}
	return 1;
}
CMD:sid(playerid, params[])
{
	new
		receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/sid [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0) || IsPlayerSpectatedBy(playerid, receiverid)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	rp_me(playerid, _, "parodo savo dokumentus %s.", GetPlayerNameEx(receiverid, true));
	SendFormat(receiverid, 0xFFF6F6FF, " _________________________________________________");
	SendFormat(receiverid, 0xFFF6F6FF, "|");
	SendFormat(receiverid, 0xFFF6F6FF, "| Vardas, Pavardë: %s", GetPlayerNameEx(playerid, true, true));
	SendFormat(receiverid, 0xFFF6F6FF, "| Tautybë: %s, Lytis: %s, gimimo data: %d", PlayerInfo[playerid][pOrigin], PlayerInfo[playerid][pGender] == 1 ? ("vyras") : ("moteris"), PlayerInfo[playerid][pBirthDate]);
	SendFormat(receiverid, 0xFFF6F6FF, "| Asmens kodas: %d000000%d", PlayerInfo[playerid][pUcpUser], PlayerInfo[playerid][pId]);
	SendFormat(receiverid, 0xFFF6F6FF, "|_________________________________________________");
	return 1;
}
flags:me(CMD_TYPE_ALLOW_NEWBIE);
CMD:me(playerid, params[])
{
	new string[128];
	if(sscanf(params, "s[128]", string)) return SendUsage(playerid, "/me [veiksmas]");
	rp_me(playerid, _, string);
	log_init(true);
	log_set_table("logs_me");
	log_set_keys("`PlayerId`,`PlayerName`,`Text`");
	log_set_values("'%d','%e','%e'", LogPlayerId(playerid), LogPlayerName(playerid), string);
	log_commit();
	return 1;
}
flags:try(CMD_TYPE_ALLOW_NEWBIE);
CMD:try(playerid, params[])
{
	new string[256];
	if(sscanf(params, "s[128]", string)) return SendUsage(playerid, "/try [veiksmas]");
	new rand = random(2)+1;
	format(string, sizeof string, "** %s bando %s ir %s.", GetPlayerNameEx(playerid, true), string, rand == 1 ? ("pavyksta") : ("nepavyksta"));
	ProxDetector(11.0, playerid, string, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA);
	return 1;
}

stock rp_me(playerid, Float:distance = 11.0, str[], va_args<>)
{
	new 
		final[256];

	va_format(final, 256, str, va_start<3>);

	//format(string, sizeof string, "* %s %s", GetPlayerNameEx(playerid, true), final);
	strins(final, " ", 0);
	strins(final, GetPlayerNameEx(playerid, true), 0);
	strins(final, "* ", 0);
    ProxDetector(distance, playerid, final, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA);
    return 1;
}


CMD:ame(playerid, params[])
{
	new string[128];
	if(sscanf(params, "s[128]", string)) return SendUsage(playerid, "/ame [veiksmas]");
	rp_ame(playerid, string);
	log_init(true);
	log_set_table("logs_ame");
	log_set_keys("`PlayerId`,`PlayerName`,`Text`");
	log_set_values("'%d','%e','%e'", LogPlayerId(playerid), LogPlayerName(playerid), string);
	log_commit();
	return 1;
}

stock rp_ame(playerid, str[], time = 10000)
{
	new string[128];
	format(string, sizeof string, "%s %s", GetPlayerNameEx(playerid, true), str);
	SetPlayerChatBubble(playerid, string, 0xC2A2DAAA, 20.0, time);
	SendFormat(playerid, 0xC2A2DAAA, "> %s", string);
	return 1;
}
flags:do(CMD_TYPE_ALLOW_NEWBIE);
CMD:do(playerid, params[])
{
	new string[128];
	if(sscanf(params, "s[128]", string)) return SendUsage(playerid, "/do [veiksmas]");
	rp_do(playerid, string);
	log_init(true);
	log_set_table("logs_do");
	log_set_keys("`PlayerId`,`PlayerName`,`Text`");
	log_set_values("'%d','%e','%e'", LogPlayerId(playerid), LogPlayerName(playerid), string);
	log_commit();
	return 1;
}

stock rp_do(playerid, str[], va_args<>)
{
	new 
		string[256];

	SetPlayerChatBubble(playerid, str, 0xC2A2DAAA, 20.0, 10000);
	va_format(string, 256, str, va_start<2>);//"* %s (( %s ))", str, GetPlayerNameEx(playerid, true));

	strins(string, "* ", 0);
	strcat(string, " (( ");
	strcat(string, GetPlayerNameEx(playerid, true));
	strcat(string, " ))");

	ProxDetector(15.0, playerid, string, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA, 0xC2A2DAAA);
	return 1;
}

CMD:mask(playerid, params[])
{
	if(CountDutyAdmins() <= 0) return SendWarning(playerid, "Nëra prisijungusiø administratoriø.");
	if(!IsItemInPlayerInventory(playerid, ITEM_MASK)) return SendWarning(playerid, "Neturite kaukës.");
	PlayerExtra[playerid][peMask] = !PlayerExtra[playerid][peMask];
	if(PlayerExtra[playerid][peMask] > 0)
	{
		// uzsidejo kauke
		new string[46];
		format(string, sizeof string, "Kaukëtasis [%d]", GetPlayerMaskNumber(playerid));
		if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peMaskLabel])) DestroyDynamic3DTextLabel(PlayerExtra[playerid][peMaskLabel]);
		PlayerExtra[playerid][peMaskLabel] = CreateDynamic3DTextLabel(string, 0xD3D3D3FF, 0.0, 0.0, 0.2, 4.0, playerid, INVALID_VEHICLE_ID, 1);
		rp_me(playerid, _, "uþsideda kaukæ.");
		foreach(new receiverid : Player)
		{
			ShowPlayerNameTagForPlayer(receiverid, playerid, false);
		}
	}
	else
	{
		// nusieme
		if(IsValidDynamic3DTextLabel(PlayerExtra[playerid][peMaskLabel])) DestroyDynamic3DTextLabel(PlayerExtra[playerid][peMaskLabel]);
		PlayerExtra[playerid][peMaskLabel] = INVALID_3DTEXT_ID;
		rp_me(playerid, _, "nusiima kaukæ.");
		foreach(new receiverid : Player)
		{
			ShowPlayerNameTagForPlayer(receiverid, playerid, true);
		}
	}
	return 1;
}



flags:masked(CMD_TYPE_ADMIN);
CMD:masked(playerid, params[])
{
	SendFormat(playerid, 0x31C9A3FF, "_______________ Þaidëjai su kaukëmis _______________");
	foreach(new receiverid : Player)
	{
		if(PlayerExtra[receiverid][peMask] > 0)
		{
			SendFormat(playerid, 0xF5F5F5FF, "%d. %s (kaukës numeris: %d, MySQL: %d)", receiverid, GetPlayerNameEx(receiverid, false, true), GetPlayerMaskNumber(receiverid), PlayerInfo[receiverid][pId]);
		}
	}
	return 1;
}

thread(VehicleParked);
CMD:exit(playerid, params[])
{
	new player_vw = GetPlayerVirtualWorld(playerid),
		player_int = GetPlayerInterior(playerid);
	foreach(new houseid : House)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.5, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]) && player_vw == HouseInfo[houseid][hVW] && player_int == HouseInfo[houseid][hInterior])
		{
			if(HouseInfo[houseid][hLocked] != 1)
			{
				if(IsPlayerInAnyVehicle(playerid)) return 1;
				SetPlayerInterior(playerid, HouseInfo[houseid][hExterior]);
				SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hOutVW]);
				SetPlayerPos(playerid, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ]);
				PlayerEnteredBuilding(playerid);
				return 1;
			}
			else return InfoBox(playerid, "NAMAS", "UZRAKINTAS");
		}
		for(new i = 0; i < MAX_HOUSE_EXTRA_ENTERS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[houseid][hExtraExitX][i], HouseInfo[houseid][hExtraExitY][i], HouseInfo[houseid][hExtraExitZ][i]) && player_vw == HouseInfo[houseid][hExtraVW][i] && player_int == HouseInfo[houseid][hExtraInterior][i])
			{
				if(IsPlayerInAnyVehicle(playerid)) return 1;
				SetPlayerInterior(playerid, HouseInfo[houseid][hExtraExterior][i]);
				SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hExtraOutVW][i]);
				SetPlayerPos(playerid, HouseInfo[houseid][hExtraEnterX][i], HouseInfo[houseid][hExtraEnterY][i], HouseInfo[houseid][hExtraEnterZ][i]);
				PlayerEnteredBuilding(playerid);
				return 1;
			}
		}
	}
	foreach(new businessid : Business)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.5, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ]) && player_vw == BusinessInfo[businessid][bVW] && player_int == BusinessInfo[businessid][bInterior])
		{
			if(BusinessInfo[businessid][bLocked] != 1)
			{
				if(IsPlayerInAnyVehicle(playerid)) return 1;
				SetPlayerInterior(playerid, BusinessInfo[businessid][bExterior]);
				SetPlayerVirtualWorld(playerid, BusinessInfo[businessid][bOutVW]);
				SetPlayerPos(playerid, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ]);
				PlayerEnteredBuilding(playerid);
				return 1;
			}
			else return InfoBox(playerid, "VERSLAS", "UZRAKINTAS");
		}
		for(new i = 0; i < MAX_BUSINESS_EXTRA_ENTERS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, BusinessInfo[businessid][bExtraExitX][i], BusinessInfo[businessid][bExtraExitY][i], BusinessInfo[businessid][bExtraExitZ][i]) && player_vw == BusinessInfo[businessid][bExtraVW][i] && player_int == BusinessInfo[businessid][bExtraInterior][i])
			{
				if(IsPlayerInAnyVehicle(playerid)) return 1;
				SetPlayerInterior(playerid, BusinessInfo[businessid][bExtraExterior][i]);
				SetPlayerVirtualWorld(playerid, BusinessInfo[businessid][bExtraOutVW][i]);
				SetPlayerPos(playerid, BusinessInfo[businessid][bExtraEnterX][i], BusinessInfo[businessid][bExtraEnterY][i], BusinessInfo[businessid][bExtraEnterZ][i]);
				PlayerEnteredBuilding(playerid);
				return 1;
			}
		}
	}
	foreach(new ee : EnterExit)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, EntersExits[ee][eeExitX], EntersExits[ee][eeExitY], EntersExits[ee][eeExitZ]) && player_vw == EntersExits[ee][eeExitVW] && player_int == EntersExits[ee][eeExitInt])
		{
			if(IsPlayerInAnyVehicle(playerid)) return 1;
			SetPlayerInterior(playerid, EntersExits[ee][eeEnterInt]);
			SetPlayerVirtualWorld(playerid, EntersExits[ee][eeEnterVW]);
			SetPlayerPos(playerid, EntersExits[ee][eeEnterX], EntersExits[ee][eeEnterY], EntersExits[ee][eeEnterZ]);
			PlayerEnteredBuilding(playerid);
		}
	}
	if(GetPlayerVehicleSeat(playerid) == 0)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		foreach(new garage : Garage)
		{
			if(IsPlayerInRangeOfPoint(playerid, 9.0, GarageInfo[garage][gCarExitX], GarageInfo[garage][gCarExitY], GarageInfo[garage][gCarExitZ]) && player_int == GarageInfo[garage][gInterior] && player_vw == GarageInfo[garage][gVW])
			{
				if(GarageInfo[garage][gLocked] == 0)
				{
					LinkVehicleToInterior(vehicleid, GarageInfo[garage][gExterior]);
					SetVehicleVirtualWorld(vehicleid, GarageInfo[garage][gOutVW]);
					SetVehiclePos(vehicleid, GarageInfo[garage][gCarEnterX], GarageInfo[garage][gCarEnterY], GarageInfo[garage][gCarEnterZ]);
					SetVehicleZAngle(vehicleid, GarageInfo[garage][gCarEnterA]);

					foreach(new passenger : Player)
					{
						if(GetPlayerVehicleID(passenger) == vehicleid)
						{
							new 
								seat = GetPlayerVehicleSeat(passenger);
							SetPlayerInterior(passenger, GarageInfo[garage][gExterior]);
							SetPlayerVirtualWorld(passenger, GarageInfo[garage][gOutVW]);
							PutPlayerInVehicle(passenger, vehicleid, seat == -1 ? 0 : seat);
						}
					}
					return 1;
				}
				else InfoBox(playerid, "GARAZAS", "UZRAKINTAS");
			}
		}
	}
	else if(!IsPlayerInAnyVehicle(playerid))
	{
		foreach(new garage : Garage)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, GarageInfo[garage][gExitX], GarageInfo[garage][gExitY], GarageInfo[garage][gExitZ]) && player_int == GarageInfo[garage][gInterior] && player_vw == GarageInfo[garage][gVW])
			{
				if(GarageInfo[garage][gLocked] == 0)
				{
					SetPlayerPos(playerid, GarageInfo[garage][gEnterX], GarageInfo[garage][gEnterY], GarageInfo[garage][gEnterZ]);
					SetPlayerInterior(playerid, GarageInfo[garage][gExterior]);
					SetPlayerVirtualWorld(playerid, GarageInfo[garage][gOutVW]);
					return 1;
				}
				else InfoBox(playerid, "GARAZAS", "UZRAKINTAS");
			}
		}
	}
	foreach(new houseid : DealerHouse)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, DealerHouseInfo[houseid][dealerHouseExitX], DealerHouseInfo[houseid][dealerHouseExitY], DealerHouseInfo[houseid][dealerHouseExitZ]) && player_vw == DealerHouseInfo[houseid][dealerHouseVW] && player_int == DealerHouseInfo[houseid][dealerHouseInterior])
		{
			if(DealerHouseInfo[houseid][dealerHouseLocked] != 1)
			{
				if(IsPlayerInAnyVehicle(playerid)) return 1;
				SetPlayerInterior(playerid, DealerHouseInfo[houseid][dealerHouseExterior]);
				SetPlayerVirtualWorld(playerid, DealerHouseInfo[houseid][dealerHouseOutVW]);
				SetPlayerPos(playerid, DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY], DealerHouseInfo[houseid][dealerHouseEnterZ]);
				PlayerEnteredBuilding(playerid);
				return 1;
			}
			else return InfoBox(playerid, "UZRAKINTAS", "NAMAS");
		}
	}
	foreach(new parking : Parking)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, ParkingInfo[parking][parkingExitX], ParkingInfo[parking][parkingExitY], ParkingInfo[parking][parkingExitZ]) && player_vw == ParkingInfo[parking][parkingVW] && player_int == ParkingInfo[parking][parkingInterior])
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid != INVALID_VEHICLE_ID && GetPlayerVehicleSeat(playerid) == 0  && IsPlayerInAnyVehicle(playerid))
			{
				LinkVehicleToInterior(vehicleid, ParkingInfo[parking][parkingExterior]);
				SetVehicleVirtualWorld(vehicleid, ParkingInfo[parking][parkingOutVW]);
				SetVehiclePos(vehicleid, ParkingInfo[parking][parkingEnterX], ParkingInfo[parking][parkingEnterY], ParkingInfo[parking][parkingEnterZ]);				

				SetPlayerInterior(playerid, ParkingInfo[parking][parkingExterior]);
				SetPlayerVirtualWorld(playerid, ParkingInfo[parking][parkingOutVW]);
				
				PutPlayerInVehicle(playerid, vehicleid, 0);
				return 1;
			}
			else
			{
				SetPlayerPos(playerid, ParkingInfo[parking][parkingEnterX], ParkingInfo[parking][parkingEnterY], ParkingInfo[parking][parkingEnterZ]);
				SetPlayerInterior(playerid, ParkingInfo[parking][parkingExterior]);
				SetPlayerVirtualWorld(playerid, ParkingInfo[parking][parkingOutVW]);
				return 1;
			}
		}
	}
	return 1;
}
CMD:enter(playerid, params[])
{
	new player_vw = GetPlayerVirtualWorld(playerid),
		player_int = GetPlayerInterior(playerid);
	foreach(new houseid : House)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[houseid][hEnterX], HouseInfo[houseid][hEnterY], HouseInfo[houseid][hEnterZ]) && player_vw == HouseInfo[houseid][hOutVW] && player_int == HouseInfo[houseid][hExterior])
		{
			if(HouseInfo[houseid][hLocked] != 1)
			{
				if(IsPlayerInAnyVehicle(playerid)) return 1;
				SetPlayerInterior(playerid, HouseInfo[houseid][hInterior]);
				SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hVW]);
				SetPlayerPos(playerid, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]);
				PlayerEnteredBuilding(playerid);
				return 1;
			}
			else return InfoBox(playerid, "UZRAKINTAS", "NAMAS");
		}
		for(new i = 0; i < MAX_HOUSE_EXTRA_ENTERS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[houseid][hExtraEnterX][i], HouseInfo[houseid][hExtraEnterY][i], HouseInfo[houseid][hExtraEnterZ][i]) && player_vw == HouseInfo[houseid][hExtraOutVW][i] && player_int == HouseInfo[houseid][hExtraExterior][i])
			{
				if(IsPlayerInAnyVehicle(playerid)) return 1;
				SetPlayerInterior(playerid, HouseInfo[houseid][hExtraInterior][i]);
				SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hExtraVW][i]);
				SetPlayerPos(playerid, HouseInfo[houseid][hExtraExitX][i], HouseInfo[houseid][hExtraExitY][i], HouseInfo[houseid][hExtraExitZ][i]);
				PlayerEnteredBuilding(playerid);
				return 1;
			}
		}
	}
	foreach(new businessid : Business)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[businessid][bEnterX], BusinessInfo[businessid][bEnterY], BusinessInfo[businessid][bEnterZ]) && player_vw == BusinessInfo[businessid][bOutVW] && player_int == BusinessInfo[businessid][bExterior])
		{
			if(BusinessInfo[businessid][bLocked] != 1)
			{
				if(IsPlayerInAnyVehicle(playerid)) return 1;
				SetPlayerInterior(playerid, BusinessInfo[businessid][bInterior]);
				SetPlayerVirtualWorld(playerid, BusinessInfo[businessid][bVW]);
				SetPlayerPos(playerid, BusinessInfo[businessid][bExitX], BusinessInfo[businessid][bExitY], BusinessInfo[businessid][bExitZ]);
				PlayerEnteredBuilding(playerid);
				switch(BusinessInfo[businessid][bType])
				{
					case BUSINESS_TYPE_FUEL: SendFormat(playerid, 0xFFD688FF, "Áëjote á degalinës parduotuvæ. Raðykite /buy");
					case BUSINESS_TYPE_SHOP: SendFormat(playerid, 0xFFD688FF, "Áëjote á 24/7 parduotuvæ. Raðykite /buy");
					case BUSINESS_TYPE_CLOTHES: SendFormat(playerid, 0xFFD688FF, "Áëjote á drabuþiø parduotuvæ. Raðykite /buyclothes");
					case BUSINESS_TYPE_BAR: SendFormat(playerid, 0xFFD688FF, "Áëjote á barà/restoranà. Raðykite /buyfood");
					case BUSINESS_TYPE_WEAPONS: SendFormat(playerid, 0xFFD688FF, "Áëjote á ginklø parduotuvæ. Raðykite /buyweapons");
				}		
				if(BusinessInfo[businessid][bEnterPrice] > 0 && PlayerNoEnterPriceBusiness[playerid][businessid] <= 0)
				{
					GivePlayerMoney(playerid, -BusinessInfo[businessid][bEnterPrice]);
					BusinessInfo[businessid][bBudget] += BusinessInfo[businessid][bEnterPrice];
					PlayerNoEnterPriceBusiness[playerid][businessid] = 10;
					SendFormat(playerid, 0xFFD688FF, "Sumokëjote áëjimo mokestá $%d. 10 minuèiø á verslà galësite áeiti nemokamai.", BusinessInfo[businessid][bEnterPrice]);
				}	
				if(strlen(BusinessInfo[businessid][bSlogan]) > 0)
				{
					SendFormat(playerid, 0xecbf3eFF, "* %s *", BusinessInfo[businessid][bSlogan]);
				}
				return 1;
			}
			else return InfoBox(playerid, "UZRAKINTAS", "VERSLAS");
		}
		for(new i = 0; i < MAX_BUSINESS_EXTRA_ENTERS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, BusinessInfo[businessid][bExtraEnterX][i], BusinessInfo[businessid][bExtraEnterY][i], BusinessInfo[businessid][bExtraEnterZ][i]) && player_vw == BusinessInfo[businessid][bExtraOutVW][i] && player_int == BusinessInfo[businessid][bExtraExterior][i])
			{
				if(IsPlayerInAnyVehicle(playerid)) return 1;
				SetPlayerInterior(playerid, BusinessInfo[businessid][bExtraInterior][i]);
				SetPlayerVirtualWorld(playerid, BusinessInfo[businessid][bExtraVW][i]);
				SetPlayerPos(playerid, BusinessInfo[businessid][bExtraExitX][i], BusinessInfo[businessid][bExtraExitY][i], BusinessInfo[businessid][bExtraExitZ][i]);
				PlayerEnteredBuilding(playerid);
				return 1;
			}
		}
	}
	foreach(new ee : EnterExit)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, EntersExits[ee][eeEnterX], EntersExits[ee][eeEnterY], EntersExits[ee][eeEnterZ]) && player_vw == EntersExits[ee][eeEnterVW] && player_int == EntersExits[ee][eeEnterInt])
		{
			if(IsPlayerInAnyVehicle(playerid)) return 1;
			SetPlayerInterior(playerid, EntersExits[ee][eeExitInt]);
			SetPlayerVirtualWorld(playerid, EntersExits[ee][eeExitVW]);
			SetPlayerPos(playerid, EntersExits[ee][eeExitX], EntersExits[ee][eeExitY], EntersExits[ee][eeExitZ]);
			PlayerEnteredBuilding(playerid);
			return 1;
		}
	}
	if(GetPlayerVehicleSeat(playerid) == 0)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		foreach(new garage : Garage)
		{
			if(IsPlayerInRangeOfPoint(playerid, 9.0, GarageInfo[garage][gCarEnterX], GarageInfo[garage][gCarEnterY], GarageInfo[garage][gCarEnterZ]) && player_int == GarageInfo[garage][gExterior] && player_vw == GarageInfo[garage][gOutVW])
			{
				if(GarageInfo[garage][gLocked] == 0)
				{
					if(IsValidVehicle(vehicleid))
					{
						LinkVehicleToInterior(vehicleid, GarageInfo[garage][gInterior]);
						SetVehicleVirtualWorld(vehicleid, GarageInfo[garage][gVW]);
						SetVehiclePos(vehicleid, GarageInfo[garage][gCarExitX], GarageInfo[garage][gCarExitY], GarageInfo[garage][gCarExitZ]);
						SetVehicleZAngle(vehicleid, GarageInfo[garage][gCarExitA]);

						foreach(new passenger : Player)
						{
							if(GetPlayerVehicleID(passenger) == vehicleid)
							{
								new 
									seat = GetPlayerVehicleSeat(passenger);
								SetPlayerInterior(passenger, GarageInfo[garage][gInterior]);
								SetPlayerVirtualWorld(passenger, GarageInfo[garage][gVW]);
								PutPlayerInVehicle(passenger, vehicleid, seat == -1 ? 0 : seat);
							}
						}
						return 1;
					}
				}
				else InfoBox(playerid, "GARAZAS", "UZRAKINTAS");
			}
		}
	}
	else if(!IsPlayerInAnyVehicle(playerid))
	{
		foreach(new garage : Garage)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, GarageInfo[garage][gEnterX], GarageInfo[garage][gEnterY], GarageInfo[garage][gEnterZ]) && player_int == GarageInfo[garage][gExterior] && player_vw == GarageInfo[garage][gOutVW])
			{
				if(GarageInfo[garage][gLocked] == 0)
				{
					SetPlayerPos(playerid, GarageInfo[garage][gExitX], GarageInfo[garage][gExitY], GarageInfo[garage][gExitZ]);
					SetPlayerInterior(playerid, GarageInfo[garage][gInterior]);
					SetPlayerVirtualWorld(playerid, GarageInfo[garage][gVW]);
				}
				else InfoBox(playerid, "GARAZAS", "UZRAKINTAS");
			}
		}
	}
	foreach(new houseid : DealerHouse)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY], DealerHouseInfo[houseid][dealerHouseEnterZ]) && player_vw == DealerHouseInfo[houseid][dealerHouseOutVW] && player_int == DealerHouseInfo[houseid][dealerHouseExterior])
		{
			if(DealerHouseInfo[houseid][dealerHouseLocked] != 1)
			{
				if(IsPlayerInAnyVehicle(playerid)) return 1;
				SetPlayerInterior(playerid, DealerHouseInfo[houseid][dealerHouseInterior]);
				SetPlayerVirtualWorld(playerid, DealerHouseInfo[houseid][dealerHouseVW]);
				SetPlayerPos(playerid, DealerHouseInfo[houseid][dealerHouseExitX], DealerHouseInfo[houseid][dealerHouseExitY], DealerHouseInfo[houseid][dealerHouseExitZ]);
				PlayerEnteredBuilding(playerid);
				return 1;
			}
			else return InfoBox(playerid, "UZRAKINTAS", "NAMAS");
		}
	}
	foreach(new parking : Parking)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, ParkingInfo[parking][parkingEnterX], ParkingInfo[parking][parkingEnterY], ParkingInfo[parking][parkingEnterZ]) && player_vw == ParkingInfo[parking][parkingOutVW] && player_int == ParkingInfo[parking][parkingExterior])
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid != INVALID_VEHICLE_ID && GetPlayerVehicleSeat(playerid) == 0 && IsPlayerInAnyVehicle(playerid))
			{
				LinkVehicleToInterior(vehicleid, ParkingInfo[parking][parkingInterior]);
				SetVehicleVirtualWorld(vehicleid, ParkingInfo[parking][parkingVW]);
				SetVehiclePos(vehicleid, ParkingInfo[parking][parkingExitX], ParkingInfo[parking][parkingExitY], ParkingInfo[parking][parkingExitZ]);				

				SetPlayerInterior(playerid, ParkingInfo[parking][parkingInterior]);
				SetPlayerVirtualWorld(playerid, ParkingInfo[parking][parkingVW]);
			
				PutPlayerInVehicle(playerid, vehicleid, 0);
				return 1;
			}
			else
			{
				SetPlayerPos(playerid, ParkingInfo[parking][parkingExitX], ParkingInfo[parking][parkingExitY], ParkingInfo[parking][parkingExitZ]);
				SetPlayerInterior(playerid, ParkingInfo[parking][parkingInterior]);
				SetPlayerVirtualWorld(playerid, ParkingInfo[parking][parkingVW]);
				return 1;
			}
		}
	}
	return 1;
}
CMD:trunko(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if((vehicleid = GetClosestVehicle(playerid, 5.0)) != INVALID_VEHICLE_ID) // && HaveVehicleKey(playerid, vehicleid, .check_only_owner = false, .canbejob = true))
	{
		if(IsModelBike(GetVehicleModel(vehicleid)) || IsModelPlane(GetVehicleModel(vehicleid)) || IsModelBoat(GetVehicleModel(vehicleid))) return SendWarning(playerid, "Tr. priemonë bagaþinës neturi.");
		if(VehicleInfo[vehicleid][vLocked] == 1 && !IsVehicleServer(vehicleid)) return InfoBox(playerid, IB_VEHICLE_LOCKED);
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot == 0 ? 1 : 0, objective);
	}
	else InfoBox(playerid, IB_NOT_IN_VEHICLE);
	return 1;
}
CMD:trunk(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_GET_OUT_VEHICLE);
	if((vehicleid = GetClosestVehicle(playerid, 5.0)) == INVALID_VEHICLE_ID) return InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
	new un, boot;
	GetVehicleParamsEx(vehicleid, un, un, un, un, un, boot, un);
	if(IsModelPedal(GetVehicleModel(vehicleid))) return SendWarning(playerid, "Tr. priemonë bagaþinës neturi.");
	else
	{
		if(boot == 0) return SendWarning(playerid, "Tr. priemonës bagaþinë uþdaryta (/trunko)");
	}
	if(VehicleTrunkSpace[GetVehicleModel(vehicleid)-400] <= 0) return SendError(playerid, "Tr. priemonë neturi bagaþinës.");
	Inventory_ShowItems(playerid, INVENTORY_TYPE_VEHICLE, vehicleid);
	return 1;
}
alias:bonnet("hood","kapotas");
CMD:bonnet(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet == 0 ? 1 : 0, boot, objective);
	}
	else InfoBox(playerid, IB_NOT_IN_VEHICLE);
	return 1;
}

alias:rollwindow("rollwindows","rw","windows","window");
CMD:rollwindow(playerid, params[])
{
	new which[15];
	if(sscanf(params,"s[15]",which)) return SendUsage(playerid, "/rollwindow [rr(rear right), rl(rear left), fr(front right), fl(front left), all]");
	if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!VehicleHaveWindows(GetVehicleModel(vehicleid))) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(!strcmp(which,"rr",true) || !strcmp(which,"rearright",true) || !strcmp(which,"rear right") || !strcmp(which,"r r"))
	{
		GetVehicleParamsCarWindows(vehicleid, which[0], which[1], which[2], which[3]);
		SetVehicleParamsCarWindows(vehicleid, which[0], which[1], which[2], (which[3] == 0 ? 1 : 0));
		which[3] != 0 && rp_ame(playerid, "atidaro galiná langà.") || rp_ame(playerid, "uþdaro galiná langà");
	}
	else if(!strcmp(which,"rl",true) || !strcmp(which,"rearleft",true) || !strcmp(which,"rear left") || !strcmp(which,"r l"))
	{
		GetVehicleParamsCarWindows(vehicleid, which[0], which[1], which[3], which[2]);
		SetVehicleParamsCarWindows(vehicleid, which[0], which[1], (which[3] == 0 ? 1 : 0), which[2]);
		which[3] != 0 && rp_ame(playerid, "atidaro galiná langà.") || rp_ame(playerid, "uþdaro galiná langà");
	}
	else if(!strcmp(which,"fr",true) || !strcmp(which,"frontright",true) || !strcmp(which,"front right") || !strcmp(which,"f r"))
	{
		GetVehicleParamsCarWindows(vehicleid, which[0], which[3], which[1], which[2]);
		SetVehicleParamsCarWindows(vehicleid, which[0], (which[3] == 0 ? 1 : 0), which[1], which[2]);
		which[3] != 0 && rp_ame(playerid, "atidaro priekiná langà.") || rp_ame(playerid, "uþdaro priekiná langà");
	}
	else if(!strcmp(which,"fl",true) || !strcmp(which,"frontleft",true) || !strcmp(which,"front left") || !strcmp(which,"f l"))
	{
		GetVehicleParamsCarWindows(vehicleid, which[3], which[0], which[1], which[2]);
		SetVehicleParamsCarWindows(vehicleid, (which[3] == 0 ? 1 : 0), which[0], which[1], which[2]);
		which[3] != 0 && rp_ame(playerid, "atidaro priekiná langà.") || rp_ame(playerid, "uþdaro priekiná langà");
	}
	else if(!strcmp(which,"all",true))
	{
		GetVehicleParamsCarWindows(vehicleid, which[0], which[1], which[2], which[3]);
		if(which[0] == 0) SetVehicleParamsCarWindows(vehicleid, 1, 1, 1, 1);
		else SetVehicleParamsCarWindows(vehicleid, 0, 0, 0, 0);
	}
	else return SendUsage(playerid, "/rollwindow [rr(rear right), rl(rear left), fr(front right), fl(front left), all]");
	return 1;
}
/*flags:afurniture(CMD_TYPE_ADMIN);
CMD:afurniture(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_AFURNITURE_MAIN, DIALOG_STYLE_LIST, "In-game mapinimas", "Pridëti objektà\nÞiûrëti visus", "Tæsti", "Atðaukti");
	return 1;
}*/

CMD:furniture(playerid, params[])
{
	new itterid;
	tmpType_Salon[playerid] = 0;
	if((itterid = GetClosestHouse(playerid, 70.0, CHECK_TYPE_INSIDE)) != INVALID_HOUSE_ID && HaveHouseKey(playerid, itterid, "P_FurnitureControl"))
	{
		tmpType_Salon[playerid] = 1;
		tmpIter[playerid] = itterid;
	}
	else if((itterid = GetClosestBusiness(playerid, 70.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID && HaveBusinessKey(playerid, itterid, "P_FurnitureControl"))
	{
		tmpType_Salon[playerid] = 2;
		tmpIter[playerid] = itterid;
	}
	else if((itterid = GetClosestGarage(playerid, 70.0, CHECK_TYPE_INSIDE)) != INVALID_GARAGE_ID && GarageInfo[itterid][gOwner] == PlayerInfo[playerid][pId])
	{
		tmpType_Salon[playerid] = 3;
		tmpIter[playerid] = itterid;
	}
	if(tmpType_Salon[playerid] != 0)
	{
		tmpFurniturePage[playerid] = 0;
		ShowPlayerDialog(playerid, DIALOG_FURNITURE_MAIN, DIALOG_STYLE_LIST, "Baldai", "Perþiûrëti esamus baldus\nPirkti baldus", "Tæsti", "Atðaukti");
	}
	else InfoBox(playerid, "NESATE", "NAME ARBA VERSLE ARBA GARAZE");
	return 1;
}

alias:screen("options","textdraws");
CMD:screen(playerid, params[])
{
	new string[256];
	format(string, sizeof string, "{BABABA}Pasirinkimas\t{BABABA}Dabartinë reikðmë\nSpidometras\t%s\n{FFFFFF}Kalëjimo laikas\t%s\n{FFFFFF}Racijos informacija\t%s",
		!TextdrawDisabled_Speedo{playerid} ? ("{36D33B}ájungtas") : ("{E9413B}iðjungtas"),
		!TextdrawDisabled_JailTimer{playerid} ? ("{36D33B}ájungtas") : ("{E9413B}iðjungtas"),
		!TextdrawDisabled_InfoBar{playerid} ? ("{36D33B}ájungtas") : ("{E9413B}iðjungtas"));

	ShowPlayerDialog(playerid, DIALOG_PLAYER_OPTIONS, DIALOG_STYLE_TABLIST_HEADERS, "Textdraw valdymas", string, "Keisti", "Atðaukti");
	return 1;
}

#if defined BETA_TEST_MODE
	CMD:endbugreport(playerid, params[])
	{
		if(!CollectingReportBugData[playerid]) return SendWarning(playerid, "Jûs nesate pradëjæs /reportbug");
		CollectingReportBugData[playerid] = false;
		new
			len = strlen(CollectedReportBugData[playerid]),
			string[1224];
		if(len <= 0) return SendWarning(playerid, "Neávedëte jokio teksto.");
		format(string, sizeof string, "------------------------------------------------------------ %s:\n%s\n------------------------------------------------------------", GetPlayerNameEx(playerid), CollectedReportBugData[playerid]);
		if(ThreadW("scriptfiles/bugs.txt", string))
		{
			SendFormat(playerid, 0xFCFCFCFF, "Aèiû uþ praneðtà klaidà. Tekstas iðsiøstas á registrà.");
			SendFormat(playerid, 0xFCFCFCFF, "Apie naujà klaidà galite vël praneðti naudodami /reportbug.");
			format(CollectedReportBugData[playerid], 2, "");
			CollectedReportBugData[playerid][0] = EOS;
		}
		return 1;
	}
	CMD:reportbug(playerid, params[])
	{
		if(CollectingReportBugData[playerid]) return SendWarning(playerid, "Jûs jau esate pradëjæs rinkti tekstà, naudokite /endreportbug");
		CollectingReportBugData[playerid] = true;
		SendFormat(playerid, 0xFCFCFCFF, "Ájungëte praneðimo raðymà apie klaidà.");
		SendFormat(playerid, 0xFCFCFCFF, "Apie klaidà raðykite á teksto laukelá (paspaudæ raidæ T).");
		SendFormat(playerid, 0xFCFCFCFF, "Praneðimo tekstà galite raðyti ilgà, todël stenkitës bûti informatyvûs.");
		SendFormat(playerid, 0xFCFCFCFF, "Baigus raðyti tekstà apie klaidà, panaudokite /endbugreport. Tuomet");
		SendFormat(playerid, 0xFCFCFCFF, "visi ávesti tekstai nuo /reportbug pradþios bus sujungti ir áraðyti á registrà.");
		return 1;
	}
#endif

alias:report("pranesti","re");
CMD:report(playerid, params[])
{
	new receiverid, reason[128];
	if(sscanf(params,"us[128]", receiverid, reason) || !strlen(reason)) return SendUsage(playerid, "/report [þaidëjas] [prieþastis]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	new string[256];
	mysql_format(chandler, string, 86, "SELECT NULL FROM `players_reports` WHERE ReporterId = '%d' AND `Valid` = '1'", PlayerInfo[playerid][pId]);
	new Cache:result = mysql_query(chandler, string, true);
	if(cache_num_rows())
	{
		MsgWarning(playerid, "PERSPËJIMAS", "Jûs jau esatæ praneðæs apie nusiþengimà.");
		cache_delete(result);
		return 1;
	}
	else
	{
		SendFormat(playerid, 0xDDDDDDFF, "Sëkmingai iðsiuntëte praneðimà administratoriams.");
		mysql_format(chandler, string, sizeof string, "INSERT INTO `players_reports` (ReporterId,CheaterId,Reason,Valid) VALUES ('%d','%d','%e','1')", PlayerInfo[playerid][pId], PlayerInfo[receiverid][pId], reason);
		mysql_tquery(chandler, string, "ReportAdded", "dds", playerid, receiverid, reason);
		cache_delete(result);
	}
	return 1;
}
forward ReportAdded(playerid, cheaterid, reason[]);
public ReportAdded(playerid, cheaterid, reason[])
{
	new string[186];
	format(string, sizeof string, "%s[%d] praneða apie %s[%d]. Informacijà rasite /reports",
		GetPlayerNameEx(playerid), playerid,
		GetPlayerNameEx(cheaterid), cheaterid);
	SendAdminMessage(0x40EE7DFF, true, string);

	CallRemoteFunction("OnReportAdded", "ddddds", CountDutyAdmins(), playerid, PlayerInfo[playerid][pUserId], cheaterid, PlayerInfo[cheaterid][pUserId], reason);
	return 1;
}

flags:reports(CMD_TYPE_ADMIN);
CMD:reports(playerid, params[])
{
	mysql_tquery(chandler, "SELECT * FROM `players_reports` WHERE Valid = '1' ORDER BY Date DESC LIMIT 10", "ReportsLoaded", "dd", playerid, 1);
	return 1;
}
forward ReportsLoaded(playerid, internal);
public ReportsLoaded(playerid, internal)
{
	new string[1024] = "Praneðëjas\tNusiþengëlis\tNusiþengimas\n",
		line[100],
		reason[128],
		reporterid,
		cheaterid;
	if(!cache_num_rows())
	{
		internal > 0 && SendWarning(playerid, "Praneðimø nëra.");
		return 1;
	}
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name(i, "Reason", reason);
		cache_get_value_name_int(i, "ReporterId", reporterid);
		cache_get_value_name_int(i, "CheaterId", cheaterid);
		format(line, sizeof line, "%s%s\t%s%s\t{FFFFFF}%.40s\n", (FindPlayerBySql(reporterid) == INVALID_PLAYER_ID ? ("{E76C6C}") : ("{93D26F}")), GetNameBySql(reporterid), (FindPlayerBySql(cheaterid) == INVALID_PLAYER_ID ? ("{E76C6C}") : ("{93D26F}")), GetNameBySql(cheaterid), reason);
		strcat(string, line);
		cache_get_value_name_int(i, "id", cheaterid);
		tmpArray[playerid][i] = cheaterid;
	}
	ShowPlayerDialog(playerid, DIALOG_REPORTS_LIST, DIALOG_STYLE_TABLIST_HEADERS, "Praneðimai", string, "Tæsti", "Atðaukti");
	return 1;
}
CMD:savings(playerid, params[])
{
	return MsgInfo(playerid, "INFORMACIJA", "Ði funkcija perkelta á pagrindiná banko langà.");
}
CMD:atm(playerid, params[])
{
	if(PlayerInfo[playerid][pBankCard] <= 0) return SendWarning(playerid, "Neturite banko kortelës.");
	if(!IsPlayerInAnyVehicle(playerid))
	{
		new atmid = -1;
		if((atmid = GetClosestATM(playerid, 1.8)) != -1)
		{
			tmpSelected[playerid] = atmid;
			GetESCType(playerid) = ESC_TYPE_ATM;
			SendFormat(playerid, 0xEEFFB2FF, "Jûsø sàskaitos numeris: {DCFF64}"#DEFAULT_IBAN_PREFIX"%d", GetPlayerIBAN(PlayerInfo[playerid][pId]));
			ShowPlayerATM(playerid, atmid);
			SelectTextDraw(playerid, 0xAA929292);
		}
		else
		{
			InfoBox(playerid, "NESATE", "PRIE BANKOMATO");
		}
	}
	else return InfoBox(playerid, IB_GET_OUT_VEHICLE);
	return 1;
}

flags:astats(CMD_TYPE_ADMIN);
CMD:astats(playerid, params[])
{
	new receiverid = INVALID_PLAYER_ID;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/astats [þaidëjas]");
	if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
	ShowPlayerStats(receiverid, playerid);
	return 1;
}

alias:stats("info");
CMD:stats(playerid, params[])
{
	ShowPlayerStats(playerid, playerid);
	return 1;
}

flags:givepayday(CMD_TYPE_ADMIN);
CMD:givepayday(playerid, params[])
{
	new 
		receiverid;
	if(sscanf(params,"u",receiverid)) return SendUsage(playerid, "/givepayday [þaidëjas]");

	if(IsPlayerConnected(receiverid))
	{
		PayDay(receiverid);
		MsgSuccess(playerid, "PAY DAY", "Payday suteiktas þaidëjui %s", GetPlayerNameEx(receiverid));
		return 1;
	}
	else SendError(playerid, "Payday suteikti nepavyko.");
	return 1;
}


CMD:help(playerid, params[])
{
	//if(CallLocalFunction(command_name, "dsd", playerid, "\r", 1) == 0)
	new detailed[12];
	if(sscanf(params,"s[12]",detailed))
	{
		SendFormat(playerid, 0xECAE50FF, " ______________________ www."#PROJECT_NAME"."#PROJECT_DOMAIN" ______________________ ");
		SendFormat(playerid, 0xD7D7D7FF, "| ROLEPLAY KOMANDOS :: {F5F5F5}/me /try /do /ddo /ds /s /cw /low /knock /ame /textdraws /blockpm /togglepm /sid /lic");
		SendFormat(playerid, 0xD7D7D7FF, "| ROLEPLAY KOMANDOS :: {F5F5F5}/graffiti /anims");
		SendFormat(playerid, 0xD7D7D7FF, "| PAGALBOS KOMANDOS :: {F5F5F5}/help /ask /report");
		SendFormat(playerid, 0xD7D7D7FF, "| VERSLØ, NAMØ KOMANDOS :: {F5F5F5}/help business, /help house");
		SendFormat(playerid, 0xD7D7D7FF, "| BENDRAVIMO KOMANDOS :: {F5F5F5}/help phone /help radio");
		SendFormat(playerid, 0xD7D7D7FF, "| GARAÞO KOMANDOS :: {F5F5F5}/help garage");
		SendFormat(playerid, 0xD7D7D7FF, "| BANKO KOMANDOS :: {F5F5F5}/atm /bank");
		SendFormat(playerid, 0xD7D7D7FF, "| DARBO KOMANDOS :: {F5F5F5}/help job  /help taxi %s%s", (PlayerInfo[playerid][pDealer] >= 0 ? ("/dealermenu ") : (" ")), (PlayerInfo[playerid][pSideJob] > 0 ? ("/help sidejob") : (" ")));
		if(PlayerInfo[playerid][pFaction] != 0) SendFormat(playerid, 0xD7D7D7FF, "| FRAKCIJOS KOMANDOS :: {F5F5F5}/help faction");
		if(IsPlayerInAnyAdminGroup(playerid)) SendFormat(playerid, 0xD7D7D7FF, "| ADMINISTRAVIMO KOMANDOS :: {F5F5F5}/help admin");
		SendFormat(playerid, 0xD7D7D7FF, "| TR. PRIEMONIØ KOMANDOS :: {F5F5F5}/help vehicle");
	}
	else
	{
		if(!strcmp(detailed, "house") || !strcmp(detailed, "houses") || !strcmp(detailed, "namai") || !strcmp(detailed, "namas") || !strcmp(detailed, "namu")) // /help house
		{
			SendFormat(playerid, 0xEBEBEBFF, "  Namø sistemos komandos:");
			SendFormat(playerid, 0xD2D2D2FF, "/hmenu /lock /buyhouse /hinv /dhinv");
			SendFormat(playerid, 0xD2D2D2FF, "/changeclothes /eat /furniture /enter /exit");
		}
		else if(!strcmp(detailed, "garage") || !strcmp(detailed, "garages") || !strcmp(detailed, "garazai") || !strcmp(detailed, "garazas")) // /help garage
		{
			SendFormat(playerid, 0xEBEBEBFF, "  Garaþø sistemos komandos:");
			SendFormat(playerid, 0xD2D2D2FF, "/gmenu /lock /enter /exit");
		}
		else if(!strcmp(detailed, "radio") || !strcmp(detailed, "racija") || !strcmp(detailed, "racijos")) // /help radio
		{
			SendFormat(playerid, 0xEBEBEBFF, "  Racijos komandos:");
			SendFormat(playerid, 0xD2D2D2FF, "/setchannel /r");
		}
		else if(!strcmp(detailed, "vehicle") || !strcmp(detailed, "vehicles") || !strcmp(detailed, "transportas")) // /help vehicle
		{
			SendFormat(playerid, 0xEBEBEBFF, "  Tr. priemoniø sistemos komandos:");
			SendFormat(playerid, 0xD2D2D2FF, "/v [lock, list, buyinsurance, buylock, buy, park, sellto, accept]");
			SendFormat(playerid, 0xD2D2D2FF, "/v [buypark, register]");
			SendFormat(playerid, 0xD2D2D2FF, "/trunk /trunko /bonnet /checkcar /seatbelt /maxspeed /vradio");
		}
		else if(!strcmp(detailed, "sidejob"))
		{
			SendFormat(playerid, 0xEBEBEBFF, "  Sidejob sistemos komandos:");
			switch(PlayerInfo[playerid][pSideJob])
			{
				case SIDE_JOB_THIEF:
				{
					SendFormat(playerid, 0xD2D2D2FF, "/removespotmark /thiefspots /thiefcarlist /sellcar");
				}
			}
		}
		else if(!strcmp(detailed, "job") || !strcmp(detailed, "darbas") || !strcmp(detailed, "darbo")) // /help job
		{
			SendFormat(playerid, 0xEBEBEBFF, "  Darbo sistemos komandos:");
			SendFormat(playerid, 0xD2D2D2FF, "/duty /jobstats /takejob /leavejob");
			if(PlayerInfo[playerid][pJob] == JOB_TRUCKER)
			{
			}
			else if(PlayerInfo[playerid][pJob] == JOB_MECHANIC)
			{
				SendFormat(playerid, 0xD2D2D2FF, "/repaint /repair /addwheels /checkcar /repairengine");
				SendFormat(playerid, 0xD2D2D2FF, "/changeengine /repairbattery /changebattery");
			}
		}
		else if(!strcmp(detailed, "taxi")) // /help taxi
		{
			SendFormat(playerid, 0xEBEBEBFF, "  Taxi sistemos komandos:");
			SendFormat(playerid, 0xD2D2D2FF, "/taxiduty /taxiprice /taxilicense");
		}
		else if(!strcmp(detailed, "admin")) // /help admin
		{
			SendFormat(playerid, 0xEBEBEBFF, " Visos administravimo komandos:");
			new CmdArray:array = PC_GetCommandArray(),
				name[24],
				line[126],
				check;
			for(new i = 0; i < PC_GetArraySize(array); i++)
			{
				PC_GetCommandName(array, i, name, sizeof name);
				if(PC_GetFlags(name) & CMD_TYPE_ADMIN)
				{
					if(check >= 8)
					{
						// po 5 cmd per eilute
						SendClientMessage(playerid, 0xF3F3F3FF, line);
						check = 0;
						format(line, 1, "");
					}
					else
					{
						format(line, sizeof line, "%s /%s", line, name);
						check++;
					}
				}
			}
		}
		else if(!strcmp(detailed, "phone") || !strcmp(detailed, "telefonas") || !strcmp(detailed, "telefonu") || !strcmp(detailed, "telefono") || !strcmp(detailed, "phones"))
		{
			SendFormat(playerid, 0xEBEBEBFF, "  Telefono sistemos komandos: /phone (N) /call /sms /hang /h(angup) /p(ickup)");

		}
		else if(!strcmp(detailed, "business") || !strcmp(detailed, "businesses") || !strcmp(detailed, "verslas") || !strcmp(detailed, "verslai") || !strcmp(detailed, "verslo"))
		{
			SendFormat(playerid, 0xEBEBEBFF, "  Verslø sistemos komandos:");
			SendFormat(playerid, 0xD2D2D2FF, "/bmenu /buybusiness /lock /bslogan");
			SendFormat(playerid, 0xD2D2D2FF, "/buy /buyclothes /buyfood /fill");
		}
		else if(!strcmp(detailed, "faction") || !strcmp(detailed, "frakcija") || !strcmp(detailed, "frakciju") || !strcmp(detailed, "frakcijos") || !strcmp(detailed, "factions")) // /help faction
		{
			SendFormat(playerid, 0xEBEBEBFF, "  Frakcijø sistemos komandos:");
			SendFormat(playerid, 0xD2D2D2FF, "/flist /f %s", PlayerInfo[playerid][pFactionLeader] > 0 ? ("/allowf /fmenu /gov /respawncars") : (""));
			new factionid = GetFactionArrayIndexById(PlayerInfo[playerid][pFaction]);
			if(factionid != -1)
			{
				switch(FactionInfo[factionid][fType])
				{
					case FACTION_TYPE_POLICE:
					{
						if(PlayerInfo[playerid][pFactionLeader] > 0)
						{
							SendFormat(playerid, 0xD2D2D2FF, "/givebadge /takebadge");
						}
						SendFormat(playerid, 0xD2D2D2FF, "/wepstore /mdc /cuff /frisk /ramdoor /ramcardoor /weptrunk /trunkweapon");
						SendFormat(playerid, 0xD2D2D2FF, "/pdclothes /duty /vest /badge /rb /rrb /arrest /prison /open /lightbulb");
						SendFormat(playerid, 0xD2D2D2FF, "/takeweapons /takedrugs /takelic /arrestcar /delarrestcar /fine /ticket /tracenumber");
					}
					case FACTION_TYPE_GOVERNMENT:
					{
						SendFormat(playerid, 0xD2D2D2FF, "/checkbusiness");
					}
					case FACTION_TYPE_FIRE:
					{
						SendFormat(playerid, 0xD2D2D2FF, "/mdclothes /heal /weptrunk /items /rb /rrb");
					}
					case FACTION_TYPE_SAN_NEWS:
					{
						SendFormat(playerid, 0xD2D2D2FF, "/createbroadcast /invitetobroadcast /kickfrombroadcast /setbroadcastanonimous");
						SendFormat(playerid, 0xD2D2D2FF, "/startbroadcast /setbroadcastrole /endbroadcast /items");
					}
				}
			}
		}
		else
		{
			SendFormat(playerid, 0xBABABAFF, "Ávesta sistema neatrasta mûsø sistemoje. Galimos sistemos:");
			SendFormat(playerid, 0xBABABAFF, "house, business, vehicle, job, admin, faction, radio, garage");
		}
	}
	return 1;
}
alias:p("pickup","pick");
CMD:p(playerid, params[])
{
	if(PhoneInfo[playerid][phoneRinging] != INVALID_PLAYER_ID && PhoneInfo[playerid][phoneCallOwner] == 0 && PhoneInfo[playerid][phoneTalkingTo] == INVALID_PLAYER_ID)
	{
		PlayerPhonePickup(playerid);
	}
	else MsgWarning(playerid, "TELEFONAS", "Jums niekas neskambina.");
	return 1;
}
alias:h("hangup","hang");
CMD:h(playerid, params[])
{
	if(PhoneInfo[playerid][phoneTalkingTo] != INVALID_PLAYER_ID || PhoneInfo[playerid][phoneRinging] != INVALID_PLAYER_ID)
	{
		// jau kalba su kazkuo
		PlayerPhoneHangup(playerid);
	}
	else MsgWarning(playerid, "TELEFONAS", "Jûs su niekuo nekalbate ir jums niekas neskambina.");
	return 1;
}
alias:ucall("pcall");
CMD:ucall(playerid, params[])
{
	if(GetESCType(playerid) != ESC_TYPE_NONE && GetESCType(playerid) != ESC_TYPE_PAYPHONE) return SendWarning(playerid, "Praðome uþdaryti kitus langus (%d)", GetESCType(playerid));
	if(IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_GET_OUT_VEHICLE);
	if(PhoneInfo[playerid][phoneTalkingTo] != INVALID_PLAYER_ID || PhoneInfo[playerid][phoneRingingTime] > 0) return SendWarning(playerid, "Jûs jau su kaþkuo kalbate.");
	foreach(new payphone : PayPhone)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, PayPhoneInfo[payphone][payPhoneX], PayPhoneInfo[payphone][payPhoneY], PayPhoneInfo[payphone][payPhoneZ]))
		{
			PayPhoneTD_Prepare(playerid);
			PayPhoneTD_Show(playerid);
			SelectTextDraw(playerid, 0xFFFFFF99);
			PhoneInfo[playerid][phoneRingType] = payphone + 1;
			return 1;
		}
	}
	SendWarning(playerid, "Nesate prie taksofono.");
	return 1;
}
CMD:call(playerid, params[])
{
	new 
		receiver_name[24],
		receiver_number = -1;
	if(!IsItemInPlayerInventory(playerid, ITEM_PHONE)) return SendWarning(playerid, "Neturite telefono.");
	if(sscanf(params,"s[24]",receiver_name)) return SendUsage(playerid, "/call [numeris/kontakto vardas] (911, "#DEFAULT_TAXI_NUMBER" - taxi, "#DEFAULT_MECHANIC_NUMBER" - mech)");
	
	if(IsNumeric(receiver_name)) receiver_number = strval(receiver_name);
	else
	{
			for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
			{
				if(PlayerContacts[playerid][i][contactNumber] != 0)
				{
					if(strfind(PlayerContacts[playerid][i][contactName], receiver_name, true) == 0)
					{
						receiver_number = PlayerContacts[playerid][i][contactNumber];
						break;
					}
				}
			}
	}
	if(receiver_number != -1)
	{
		PlayerPhoneCall(playerid, receiver_number);
	}
	else SendWarning(playerid, "Kontaktas arba numeris nerastas!");
	return 1;
}
CMD:sms(playerid, params[])
{
	new 
		receiver_name[24],
		receiver_number = -1, 
		text[256];
	if(!IsItemInPlayerInventory(playerid, ITEM_PHONE)) return SendWarning(playerid, "Neturite telefono.");
	if(sscanf(params,"s[24]s[128]",receiver_name,text)) return SendUsage(playerid, "/sms [numeris/kontakto vardas] [tekstas]");
	if(IsNumeric(receiver_name)) receiver_number = strval(receiver_name);
	else
	{
		for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
		{
			if(PlayerContacts[playerid][i][contactNumber] != 0)
			{
				if(strfind(PlayerContacts[playerid][i][contactName], receiver_name, true) == 0)
				{
					receiver_number = PlayerContacts[playerid][i][contactNumber];
					break;
				}
			}
		}
	}
	if(receiver_number != -1)
	{
		PlayerPhoneSMS(playerid, receiver_number, text);
	}
	else SendWarning(playerid, "Kontaktas arba numeris nerastas!");
	return 1;
}
CMD:phone(playerid, params[])
{
	if(IsItemInPlayerInventory(playerid, ITEM_PHONE))
	{
		if(GetESCType(playerid) != ESC_TYPE_NONE && GetESCType(playerid) != ESC_TYPE_PHONE) return SendWarning(playerid, "Praðome uþdaryti kitus langus (%d)", GetESCType(playerid));
		if(tmpPhone_InventoryPage[playerid] == PHONE_PAGE_CALLING || tmpPhone_InventoryPage[playerid] == PHONE_PAGE_CALL)
		{
			SelectTextDraw(playerid, 0x7E8A95FF);
		}
		else PhoneTD_Show(playerid, PHONE_PAGE_MAIN);
	}
	else SendError(playerid, "Neturite mob. telefono.");
	return 1;
}

alias:addwheels("tuning", "addtuning", "changewheels", "addhidraulic");
CMD:addwheels(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC) return InfoBox(playerid, "NESATE", "MECHANIKAS");
	if(PlayerInfo[playerid][pJobDuty] == 0) return InfoBox(playerid, IB_NOT_ON_JOB_DUTY);
	if((vehicleid = GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID || !IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(vehicleid, DEFAULT_MECHANIC_REPAIR_SPOT) && MECHANIC_REPAINT_ZONE_RADIUS <= GetVehicleDistanceFromPoint(vehicleid, DEFAULT_MECHANIC_REPAINT_SPOT)) return InfoBox(playerid, IB_NOT_IN_MECHANICS);
	ShowESCTextdraw(playerid, ESC_TYPE_MECHTUNE);
	tmpSelected[playerid] = 0;
	ShowPlayerMechTune(playerid);
	SelectTextDraw(playerid, 0xBABABAFF);
	return 1;
}


CMD:repairengine(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC) return InfoBox(playerid, "NESATE", "MECHANIKAS");
	if(PlayerInfo[playerid][pJobDuty] == 0) return InfoBox(playerid, IB_NOT_ON_JOB_DUTY);
	if((vehicleid = GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID || !IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(vehicleid, DEFAULT_MECHANIC_REPAIR_SPOT)) return InfoBox(playerid, IB_NOT_IN_MECHANICS);
	if(VehicleInfo[vehicleid][vEngineStatus] <= 50.0) return SendWarning(playerid, "Ðio variklio sutvarkyti negalima, jam bûtinas keitimas (/changeengine)");
	if(VehicleInfo[vehicleid][vEngineStatus] >= 100.0) return SendWarning(playerid, "Ðis variklis yra pilnai sveikas.");
	PlayerInfo[playerid][pJobVehicle] = vehicleid,
	PlayerInfo[playerid][pJobActionTime] = 30,
	PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TAKE_ENGINE_REPAIR;
	JobGUI_Show(playerid);
	new string[126];
	format(string, sizeof string, "~n~~n~TVARKOMA TR. PRIEMONE: %s", strtoupper(GetModelName(GetVehicleModel(vehicleid))));
	JobGUI_Update(playerid, .bottext = string);
	new spot = PlayerInfo[playerid][pJobDestination] = random(sizeof MechanicPartSpots);
	SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_ENGINE, MechanicPartSpots[spot][0], MechanicPartSpots[spot][1], MechanicPartSpots[spot][2], 2.3);
	return 1;
}
CMD:changeengine(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC) return InfoBox(playerid, "NESATE", "MECHANIKAS");
	if(PlayerInfo[playerid][pJobDuty] == 0) return InfoBox(playerid, IB_NOT_ON_JOB_DUTY);
	if((vehicleid = GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID || !IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(vehicleid, DEFAULT_MECHANIC_REPAIR_SPOT)) return InfoBox(playerid, IB_NOT_IN_MECHANICS);
	if(VehicleInfo[vehicleid][vEngineStatus] >= 100.0) return SendWarning(playerid, "Ðis variklis yra pilnai sveikas.");
	PlayerInfo[playerid][pJobVehicle] = vehicleid,
	PlayerInfo[playerid][pJobActionTime] = 30,
	PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TAKE_ENGINE;
	JobGUI_Show(playerid);
	new string[126];
	format(string, sizeof string, "~n~~n~TVARKOMA TR. PRIEMONE: %s", strtoupper(GetModelName(GetVehicleModel(vehicleid))));
	JobGUI_Update(playerid, .bottext = string);
	new spot = PlayerInfo[playerid][pJobDestination] = random(sizeof MechanicPartSpots);
	SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_ENGINE, MechanicPartSpots[spot][0], MechanicPartSpots[spot][1], MechanicPartSpots[spot][2], 2.3);
	return 1;
}

CMD:repairbattery(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC) return InfoBox(playerid, "NESATE", "MECHANIKAS");
	if(PlayerInfo[playerid][pJobDuty] == 0) return InfoBox(playerid, IB_NOT_ON_JOB_DUTY);
	if((vehicleid = GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID || !IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(vehicleid, DEFAULT_MECHANIC_REPAIR_SPOT)) return InfoBox(playerid, IB_NOT_IN_MECHANICS);
	if(VehicleInfo[vehicleid][vBatteryStatus] <= 40.0) return SendWarning(playerid, "Ðio akumuliatoriaus sutvarkyti negalima, jam bûtinas keitimas (/changebattery)");
	if(VehicleInfo[vehicleid][vBatteryStatus] >= 100.0) return SendWarning(playerid, "Ðis akumuliatorius yra pilnai sveikas.");
	PlayerInfo[playerid][pJobVehicle] = vehicleid,
	PlayerInfo[playerid][pJobActionTime] = 30,
	PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TAKE_BATTERY_REPAIR;
	JobGUI_Show(playerid);
	new string[126];
	format(string, sizeof string, "~n~~n~TVARKOMA TR. PRIEMONE: %s", strtoupper(GetModelName(GetVehicleModel(vehicleid))));
	JobGUI_Update(playerid, .bottext = string);
	new spot = PlayerInfo[playerid][pJobDestination] = random(sizeof MechanicPartSpots);
	SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_BATTERY, MechanicPartSpots[spot][0], MechanicPartSpots[spot][1], MechanicPartSpots[spot][2], 2.3);
	return 1;
}
CMD:changebattery(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC) return InfoBox(playerid, "NESATE", "MECHANIKAS");
	if(PlayerInfo[playerid][pJobDuty] == 0) return InfoBox(playerid, IB_NOT_ON_JOB_DUTY);
	if((vehicleid = GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID || !IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(vehicleid, DEFAULT_MECHANIC_REPAIR_SPOT)) return InfoBox(playerid, IB_NOT_IN_MECHANICS);
	if(VehicleInfo[vehicleid][vBatteryStatus] >= 100.0) return SendWarning(playerid, "Ðis akumuliatorius yra pilnai sveikas.");
	PlayerInfo[playerid][pJobVehicle] = vehicleid,
	PlayerInfo[playerid][pJobActionTime] = 30,
	PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TAKE_BATTERY;
	JobGUI_Show(playerid);
	new string[126];
	format(string, sizeof string, "~n~~n~TVARKOMA TR. PRIEMONE: %s", strtoupper(GetModelName(GetVehicleModel(vehicleid))));
	JobGUI_Update(playerid, .bottext = string);
	new spot = PlayerInfo[playerid][pJobDestination] = random(sizeof MechanicPartSpots);
	SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_BATTERY, MechanicPartSpots[spot][0], MechanicPartSpots[spot][1], MechanicPartSpots[spot][2], 2.3);
	return 1;
}

CMD:checkcar(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_GET_OUT_VEHICLE);
	if((vehicleid = GetClosestVehicle(playerid, 5.0)) == INVALID_VEHICLE_ID) return InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
	if(GetVehicleBonnet(vehicleid) != 1 && !IsModelBike(GetVehicleModel(vehicleid))) return SendWarning(playerid, "Atidarykite kapotà (/bonnet)");
	if(PlayerInfo[playerid][pJob] == JOB_MECHANIC && MECHANIC_REPAIR_ZONE_RADIUS >= GetVehicleDistanceFromPoint(vehicleid, DEFAULT_MECHANIC_REPAIR_SPOT))
	{
		// servise mechanikas tikrina
		new Float:engine = VehicleInfo[vehicleid][vEngineStatus],
			Float:battery = VehicleInfo[vehicleid][vBatteryStatus];
		SendFormat(playerid, 0xF8F8F8FF, "%s variklio bûklë: {%s}%0.1f{F8F8F8}proc, akumuliatoriaus likutis: {%s}%0.1f{F8F8F8}proc", GetModelName(GetVehicleModel(vehicleid)), engine >= 70.0 ? ("46C648") : (engine >= 50.0 ? ("ECDC60") : ("C55656")), engine, battery >= 70.0 ? ("46C648") : (battery >= 50.0 ? ("ECDC60") : ("C55656")), battery);
	}
	else
	{
		// +-
		new approx_engine[40],
			approx_battery[40];
		if(VehicleInfo[vehicleid][vEngineStatus] >= 90.0) strcat(approx_engine, "variklis nereikalauja taisymo");
		else if(VehicleInfo[vehicleid][vEngineStatus] >= 70.0) strcat(approx_engine, "varikliui reiktø mechaniko patikrinimo");
		else if(VehicleInfo[vehicleid][vEngineStatus] >= 50.0) strcat(approx_engine, "varikliui reikia tvarkymo");
		else if(VehicleInfo[vehicleid][vEngineStatus] >= 10.0) strcat(approx_engine, "variklis yra prastos bûklës");
		else strcat(approx_engine, "variklis yra nepataisomai sugadintas");

		if(VehicleInfo[vehicleid][vBatteryStatus] >= 80.0) strcat(approx_battery, "akumuliatorius visiðkai naujas.");
		else if(VehicleInfo[vehicleid][vBatteryStatus] >= 40.0) strcat(approx_battery, "akumuliatorius normalus.");
		else strcat(approx_battery, "akumuliatoriaus keitimas bûtinas.");

		rp_me(playerid, _, "patikrina %s variklio bûklæ.", GetModelName(GetVehicleModel(vehicleid)));
		rp_do(playerid, "Panaðu, kad %s, o %s", approx_engine, approx_battery);
	}
	return 1;
}
alias:repair("taisyti");
CMD:repair(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC) return InfoBox(playerid, "NESATE", "MECHANIKAS");
	if(PlayerInfo[playerid][pJobDuty] == 0) return InfoBox(playerid, IB_NOT_ON_JOB_DUTY);
	if((vehicleid = GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID || !IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(MECHANIC_REPAIR_ZONE_RADIUS <= GetVehicleDistanceFromPoint(vehicleid, DEFAULT_MECHANIC_REPAIR_SPOT)) return InfoBox(playerid, IB_NOT_IN_MECHANICS);
	if(VehicleInfo[vehicleid][vFaction] == -1) return SendWarning(playerid, "Ðios tr. priemonës negalite tvarkyti.");
	if(GetPlayerMoney(playerid) < DEFAULT_REPAIR_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_REPAIR_PRICE);
	PlayerInfo[playerid][pJobVehicle] = vehicleid;
	PlayerInfo[playerid][pJobActionIndex] = 0;
	PlayerInfo[playerid][pJobCurrentType] = 3;
	PlayerInfo[playerid][pJobDestination] = 0;
	PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TAKE_REPAIR;
	PlayerInfo[playerid][pJobActionTime] = 30;
	JobGUI_Show(playerid);
	new string[126];
	format(string, sizeof string, "~n~~n~TVARKOMA TR. PRIEMONE: %s", strtoupper(GetModelName(GetVehicleModel(vehicleid))));
	JobGUI_Update(playerid, .bottext = string);
	new spot = PlayerInfo[playerid][pJobDestination] = random(sizeof MechanicPartSpots);
	SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_REPAIR, MechanicPartSpots[spot][0], MechanicPartSpots[spot][1], MechanicPartSpots[spot][2], 2.3);
	return 1;
}

alias:repaint("respray","paint");
CMD:repaint(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC) return InfoBox(playerid, "NESATE", "MECHANIKAS");
	if(PlayerInfo[playerid][pJobDuty] == 0) return InfoBox(playerid, IB_NOT_ON_JOB_DUTY);
	if((vehicleid = GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID || !IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(MECHANIC_REPAINT_ZONE_RADIUS <= GetVehicleDistanceFromPoint(vehicleid, DEFAULT_MECHANIC_REPAINT_SPOT)) return InfoBox(playerid, IB_NOT_IN_MECHANICS);
	if(GetPlayerMoney(playerid) < DEFAULT_REPAINT_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_REPAINT_PRICE);
	PlayerInfo[playerid][pJobVehicle] = vehicleid;
	PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_TAKE_REPAINT;
	PlayerInfo[playerid][pJobActionTime] = 30;
	JobGUI_Show(playerid);
	new string[126];
	format(string, sizeof string, "~n~~n~PERDAZOMA TR. PRIEMONE: %s", strtoupper(GetModelName(GetVehicleModel(vehicleid))));
	JobGUI_Update(playerid, .bottext = string);
	new spot = PlayerInfo[playerid][pJobDestination] = random(sizeof MechanicPartSpots);
	SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_TAKE_REPAINT, MechanicPartSpots[spot][0], MechanicPartSpots[spot][1], MechanicPartSpots[spot][2], 2.3);
	return 1;
}

CMD:jobstats(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 0)
	{
		return InfoBox(playerid, IB_NO_JOB);
	}
	new
		jobid = GetJobArrayIndexById(PlayerInfo[playerid][pJob]);
	if(jobid != -1)
	{
		new	nextxp,
			minimal_payday = Jobs[jobid][jobPayDay],
			aprox;
		switch(PlayerInfo[playerid][pJob])
		{
			case JOB_TRUCKER:
			{
				minimal_payday += 100*PlayerInfo[playerid][pJobLevel];
				switch(PlayerInfo[playerid][pJobLevel])
				{
					case 1: nextxp = DEFAULT_JOB_TRUCKER_XP_TO_LVL2;
					case 2: nextxp = DEFAULT_JOB_TRUCKER_XP_TO_LVL3;
					case 3: nextxp = DEFAULT_JOB_TRUCKER_XP_TO_LVL4;
					default: nextxp = PlayerInfo[playerid][pJobLevel];
				}
			}
			case JOB_MECHANIC, JOB_FARMER:
			{
				nextxp = 0;
			}
		}
		aprox = minimal_payday + PlayerInfo[playerid][pPayCheck];
		SendFormat(playerid, 0xF1F1F1ff, "[Minimali alga: $%d] [Sukauptas uþdarbis: $%d] [Galima alga: $%d] [Maksimali alga: $%d %s]",
			minimal_payday,
			PlayerInfo[playerid][pPayCheck],
			aprox > Jobs[jobid][jobMaxPayout] ? Jobs[jobid][jobMaxPayout] : aprox, Jobs[jobid][jobMaxPayout],
			(aprox > Jobs[jobid][jobMaxPayout] ? ("(surinkote maksimalià algà)") : (""))
		);
		SendFormat(playerid, 0xF1F1F1ff, "[Darbo lygis: %d] [Darbo patirtis: %d/%d %s]", PlayerInfo[playerid][pJobLevel], PlayerInfo[playerid][pJobXP], nextxp, nextxp == 0 ? ("(jûsø darbe nereikalinga)") : (nextxp == -1 ? ("(maksimalus lygis)") : ("")));
	}
	return 1;
}

CMD:duty(playerid, params[])
{
	new
		job = PlayerInfo[playerid][pJob],
		faction = PlayerInfo[playerid][pFaction];
	log_init(true);
	if(job != 0 || faction != 0)
	{
		// patikrinam ar tam darbui reikalingas /duty
		if(PlayerInfo[playerid][pJobDuty] == 1)
		{
			PlayerInfo[playerid][pJobDuty] = 0;
			PlayerInfo[playerid][pJobActionTime] = 0;
			PlayerInfo[playerid][pJobCurrentAction] = 0;
			PlayerInfo[playerid][pJobDestination] = 0;
			if(job != 0)
			{
				ResetPlayerJobTask(playerid);
				KillTimer(PlayerInfo[playerid][pJobTimer]);
				if(job == JOB_MECHANIC)
				{
					ResetServerSidedWeapons(playerid);
					SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
				}
				RemovePlayerAttachedObject(playerid, 9);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				if(InArray(Checkpoint[playerid],
					CHECKPOINT_TYPE_JOB,
					CHECKPOINT_TYPE_TAKE_REPAIR,
					CHECKPOINT_TYPE_TAKE_REPAINT,
					CHECKPOINT_TYPE_TAKE_WHEELS,
					CHECKPOINT_TYPE_FARMER_TAKE_BAG,
					CHECKPOINT_TYPE_FARMER_PUT_BAG,
					CHECKPOINT_TYPE_FARMER_SPOT,
					CHECKPOINT_TYPE_CARGO_CRATES_TAKE,
					CHECKPOINT_TYPE_CARGO_UNLOAD,
					CHECKPOINT_TYPE_CARGO_LOAD,
					CHECKPOINT_TYPE_CARGO_CRATES_TAKE,
					CHECKPOINT_TYPE_CARGO_CRATES_PUT,
					CHECKPOINT_TYPE_PUT_PARTS_VEHICLE,
					CHECKPOINT_TYPE_TAKE_ENGINE,
					CHECKPOINT_TYPE_TAKE_BATTERY,
					CHECKPOINT_TYPE_PUT_WHEELS,
					CHECKPOINT_TYPE_PUT_ENGINE_VEHICLE,
					CHECKPOINT_TYPE_PUT_BATTERY_VEHICLE)) DisablePlayerCheckpointEx(playerid);
				if(GetPlayerVehicleSeat(playerid) == 0)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					switch(VehicleInfo[vehicleid][vJob])
					{
						case JOB_FARMER:
						{
							RemovePlayerFromVehicle(playerid);
							SetVehicleToRespawn(vehicleid);
						}
					}
				}
				PlayerInfo[playerid][pJobVehicle] = INVALID_VEHICLE_ID;
				log_set_table("logs_jobs");
			}
			else if(faction != 0)
			{
				new factionid = GetFactionArrayIndexById(faction);
				if(PlayerInfo[playerid][pAdminDuty] <= 0) SetPlayerColor(playerid, DEFAULT_PLAYER_COLOR);
				if(factionid != -1)
				{
					switch(FactionInfo[factionid][fType])
					{
						default:
						{
							ResetServerSidedWeapons(playerid);
						}
					}
				}
				log_set_table("logs_factions");
			}
			SendFormat(playerid, 0xA2C5EDFF, "Baigëte darbà.");
			log_set_keys("`PlayerId`,`PlayerName`,`ActionText`");
			log_set_values("'%d','%e','Baige darba %s'", LogPlayerId(playerid), LogPlayerName(playerid), job != 0 ? (GetJobName(job)) : (GetFactionName(faction)));
			log_commit();
			return 1;
		}
		else
		{
			new
				vehicleid = INVALID_VEHICLE_ID,
				jobid = GetJobArrayIndexById(job);
			// pradeda darba
			if(job != 0)
			{
				switch(job)
				{
					case JOB_TRUCKER:
					{
						if(PlayerExtra[playerid][peJobDutyCooldown]+180 > gettime())
						{
							return SendWarning(playerid, "/duty galite naudoti kas 3 minutes.");
						}
						if((vehicleid = GetPlayerVehicleID(playerid)) != INVALID_VEHICLE_ID && (VehicleInfo[vehicleid][vJob] == JOB_TRUCKER || IsModelForTrucking(GetVehicleModel(vehicleid))))
						{
							if(IsModelTruck(GetVehicleModel(vehicleid)))
							{
								if(GetVehicleTrailer(vehicleid) == 0)
								{
									return SendWarning(playerid, "Turite bûti su priekaba.");
								}
							}
							new string[256];
							mysql_format(chandler, string, sizeof string, "SELECT * FROM `business_orders` WHERE `Status` = '1' ORDER BY OrderDate ASC", VehicleInfo[GetPlayerVehicleID(playerid)][vRequiredLevel]); // pirmiausia kur ordersize = masinos lygis, jei nera rows ordersize < masinos lygis
							mysql_tquery(chandler, string, "TruckerOrdersLoad", "d", playerid); // VIDUJ duty cooldownas
						}
						else
						{
							SendWarning(playerid, "Nesate kroviniø iðveþiotojo tr. priemonëje.");
							return 1;
						}
					}
					case JOB_FARMER:
					{
						if(PlayerInfo[playerid][pPayCheck]+Jobs[jobid][jobPayDay] >= Jobs[jobid][jobMaxPayout])
						{
							// pasieke limita ismokejimo, tegu nebedirba.
							SendFormat(playerid, 0xEB7C6EFF, "Jûs jau pasiekæs uþdarbio limità, todël atlygis uþ darbà nebus priskaièiuojamas.");
						}
						ShowPlayerDialog(playerid, DIALOG_FARMER_SELECT_JOB, DIALOG_STYLE_LIST, "Fermeris", "Rinkti derliø kombainu\nNeðioti maiðus", "Tæsti", "Atðaukti");
						PlayerInfo[playerid][pJobDuty] = 1;
					}
					case JOB_MECHANIC:
					{
						if(!IsPlayerInRangeOfPoint(playerid, 50.0, Jobs[jobid][jobX], Jobs[jobid][jobY], Jobs[jobid][jobZ])) return InfoBox(playerid, IB_NOT_IN_MECHANICS);
						PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);
						SetPlayerSkin(playerid, 50);
						SendFormat(playerid, 0xBABABAFF, "Pradëjote darbà, komandas rasite /help job.");
						PlayerInfo[playerid][pJobDuty] = 1;
					}
				}
			}
			else if(faction != 0)
			{
				new factionid = GetFactionArrayIndexById(faction);
				if(factionid != -1)
				{
					switch(FactionInfo[factionid][fType])
					{
						case FACTION_TYPE_POLICE:
						{
							if(PlayerInfo[playerid][pPoliceBadge] <= 0) return SendWarning(playerid, "Neturite þenklelio.");
							else
							{
								if(!IsPlayerInPD(playerid)) return SendWarning(playerid, "Nesate policijos departamente.");
								SendFormat(playerid, 0xF1F1F1FF, "Persirengimui galite naudoti /pdclothes, ginklams /wepstore");
								SetPlayerColor(playerid, 0x4435E6FF);
								PlayerInfo[playerid][pJobDuty] = 1;
								SetPlayerArmour(playerid, 100.0);
								//SendFormatToAll(0x4435E6FF, "Pareigûnas %s pradëjo darbà (/call 911).", GetPlayerNameEx(playerid, true));
							}
						}
						case FACTION_TYPE_FIRE:
						{
							if(!IsPlayerInMD(playerid)) return SendWarning(playerid, "Nesate medicinos departamente.");
							SendFormat(playerid, 0xF1F1F1FF, "Persirengimui galite naudoti /mdclothes");
							SetPlayerColor(playerid, 0xC12323FF);
							PlayerInfo[playerid][pJobDuty] = 1;
							//SendFormatToAll(0xC12323FF, "Medikas %s pradëjo darbà (/call 911).", GetPlayerNameEx(playerid, true));
						}
					}
				}
			}

			if(job != 0)
			{
				log_set_table("logs_jobs");
			}
			else if(faction != 0)
			{
				log_set_table("logs_factions");
			}
			log_set_keys("`PlayerId`,`PlayerName`,`ActionText`");
			log_set_values("'%d','%e','Pradejo darba %e'", LogPlayerId(playerid), LogPlayerName(playerid), job != 0 ? (GetJobName(job)) : (GetFactionName(faction)));
			log_commit();
		}
	}
	else return InfoBox(playerid, IB_NO_JOB);
	return 1;
}
CMD:changeclothes(playerid, params[])
{
	new itter = INVALID_HOUSE_ID;
	if((itter = GetClosestHouse(playerid, 60.0, CHECK_TYPE_INSIDE)) == INVALID_HOUSE_ID) return InfoBox(playerid, IB_NOT_IN_HOUSE_OR_BUSINESS);
	if(!HaveHouseKey(playerid, itter)) return InfoBox(playerid, IB_NOT_IN_HOUSE_OR_BUSINESS);
	if(HouseInfo[itter][hUpdateClothes] <= 0) return SendWarning(playerid, "Neturite tinkamos árangos.");
	else ShowModelSelectionMenu(playerid, clskinslist, "Apranga");
	return 1;
}
CMD:eat(playerid, params[])
{
	new itter = -1;
	if((itter = GetClosestHouse(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_HOUSE_ID)
	{
		if(HouseInfo[itter][hUpdateEat] > 0)
		{
			SetPlayerHealth(playerid, GetPlayerMaxHealth(playerid));
			rp_ame(playerid, "pavalgo.");
			log_init(true);
			log_set_table("logs_houses");
			log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`");
			log_set_values("'%d','%e','%d','Pavalge name'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[itter][hId]);
			log_commit();
		}
		else
		{
			SendWarning(playerid, "Namas neturi ðio atnaujinimo.");
		}
	}
	else if((itter = GetClosestBusiness(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID)
	{
		if(BusinessInfo[itter][bUpdateEat] > 0)
		{
			SetPlayerHealth(playerid, GetPlayerMaxHealth(playerid));
			rp_ame(playerid, "pavalgo.");
			log_init(true);
			log_set_table("logs_business");
			log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`");
			log_set_values("'%d','%e','%d','Pavalge versle'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[itter][bId]);
			log_commit();
		}
		else
		{
			SendWarning(playerid, "Verslas neturi ðio atnaujinimo.");
		}
	}
	else InfoBox(playerid, IB_NOT_IN_HOUSE_OR_BUSINESS);
	return 1;
}
alias:hmenu("house","namas");
CMD:hmenu(playerid, params[])
{
	new houseid = INVALID_HOUSE_ID;
	if((houseid = GetClosestHouse(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_HOUSE_ID && HaveHouseKey(playerid, houseid, .check_only_owner = true))
	{
		tmpIter[playerid] = houseid;
		new string[256];
		format(string, sizeof string, "Raktø valdymas\nNuomos valdymas\nAtnaujinimai\nSeifas\n%s", HouseInfo[houseid][hSale] > 0 ? ("Nutraukti pardavinëjimà") : ("Parduoti namà"));
		ShowPlayerDialog(playerid, DIALOG_HM_MAIN, DIALOG_STYLE_LIST, "Namo valdymas", string, "Tæsti", "Atðaukti");
	}
	else InfoBox(playerid, "NESATE", "NAME");
	return 1;
}
alias:gmenu("garage", "garazas");
CMD:gmenu(playerid, params[])
{
	new garageid = INVALID_GARAGE_ID;
	if((garageid = GetClosestGarage(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_GARAGE_ID && GarageInfo[garageid][gOwner] == PlayerInfo[playerid][pId])
	{
		tmpIter[playerid] = garageid;
		new string[256];
		format(string, sizeof string, "%s", GarageInfo[garageid][gSale] > 0 ? ("Nutraukti pardavinëjimà") : ("Parduoti garaþà"));
		ShowPlayerDialog(playerid, DIALOG_GM_MAIN, DIALOG_STYLE_LIST, "Garaþo valdymas", string, "Tæsti", "Atðaukti");
	}
	else InfoBox(playerid, "NESATE", "GARAZE");
	return 1;
}
CMD:buydealerhouse(playerid, params[])
{
	if(PlayerInfo[playerid][pDealer] >= 0)
	{
		new player_vw = GetPlayerVirtualWorld(playerid),
			player_int = GetPlayerInterior(playerid);
		foreach(new houseid : DealerHouse)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, DealerHouseInfo[houseid][dealerHouseEnterX], DealerHouseInfo[houseid][dealerHouseEnterY], DealerHouseInfo[houseid][dealerHouseEnterZ]) && player_vw == DealerHouseInfo[houseid][dealerHouseOutVW] && player_int == DealerHouseInfo[houseid][dealerHouseExterior])
			{
				if(DealerHouseInfo[houseid][dealerHouseOwner] > 0) return SendWarning(playerid, "Ðis konspiracinis namas jau uþimtas.");
				if(DealerHouseInfo[houseid][dealerHouseType] == PlayerInfo[playerid][pDealer] || PlayerInfo[playerid][pDealer] == 2 || DealerHouseInfo[houseid][dealerHouseType] == 2)
				{
					if(GetPlayerMoney(playerid) < DealerHouseInfo[houseid][dealerHousePrice]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DealerHouseInfo[houseid][dealerHousePrice]);
					new string[126];
					mysql_format(chandler, string, sizeof string, "UPDATE `dealers_houses_data` SET Owner = '%d' WHERE id = '%d'", PlayerInfo[playerid][pId], DealerHouseInfo[houseid][dealerHouseId]);
					mysql_fquery(chandler, string, "DealerHouseSaved");
					DealerHouseInfo[houseid][dealerHouseOwner] = PlayerInfo[playerid][pId];
					GivePlayerMoney(playerid, -DealerHouseInfo[houseid][dealerHousePrice]);
					MsgSuccess(playerid, "KONSPIRACINIAI NAMAI", "Sëkmingai nusipirkote konspiraciná namà uþ $%d", DealerHouseInfo[houseid][dealerHousePrice]);
					log_init(true);
					log_set_table("logs_dealer_houses");
					log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`Amount`");
					log_set_values("'%d','%e','%d','Nusipirko konspiracini nama','%d'", LogPlayerId(playerid), LogPlayerName(playerid), DealerHouseInfo[houseid][dealerHouseId], DealerHouseInfo[houseid][dealerHousePrice]);
					log_commit();
					return 1;
				}
			}
		}
		SendWarning(playerid, "Nesate ðalia jokio konspiracinio namo.");
	}
	else SendWarning(playerid, "Neturite jokio tiekëjo statuso.");
	return 1;
}
thread(DealerHouseSaved);
CMD:rentcancel(playerid, params[])
{
	new string[126];
	mysql_format(chandler, string, sizeof string, "SELECT HouseId FROM `houses_dubkeys` WHERE PlayerId = '%d' AND Valid = '1' AND Type = '1'", PlayerInfo[playerid][pId]);
	new Cache:result = mysql_query(chandler, string, true);
	if(cache_num_rows())
	{
		new houseid;
		cache_get_value_name_int(0, "HouseId", houseid);
		cache_delete(result);
		mysql_format(chandler, string, sizeof string, "UPDATE `houses_dubkeys` SET Valid = '0' WHERE PlayerId = '%d' AND Valid = '1' AND Type = '1' AND HouseId = '%d'", PlayerInfo[playerid][pId], houseid);
		mysql_fquery(chandler, string, "HouseSaved");
		MsgInfo(playerid, "NAMO NUOMA", "Atðaukëte namo nuomà.");
		log_init(true);
		log_set_table("logs_houses");
		log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`");
		log_set_values("'%d','%e','%d','Baige nuomotis nama'", LogPlayerId(playerid), LogPlayerName(playerid), houseid);
		log_commit();
	}
	else SendWarning(playerid, "Nenuomojate jokio namo.");
	if(cache_is_valid(result)) cache_delete(result);
	return 1;
}
CMD:renthouse(playerid, params[])
{
	new string[126];
	mysql_format(chandler, string, sizeof string, "SELECT HouseId FROM `houses_dubkeys` WHERE PlayerId = '%d' AND Valid = '1' AND Type = '1'", PlayerInfo[playerid][pId]);
	new Cache:result = mysql_query(chandler, string, true);
	if(cache_num_rows())
	{
		new houseid;
		cache_get_value_name_int(0, "HouseId", houseid);
		cache_delete(result);
		if(FindHouseBySql(houseid) == INVALID_HOUSE_ID)
		{
			mysql_format(chandler, string, sizeof string, "UPDATE `houses_dubkeys` SET Valid = '0' WHERE PlayerId = '%d' AND Type = '1' AND Valid = '1'", PlayerInfo[playerid][pId]);
			mysql_fquery(chandler, string, "PlayerSavedEx");
			return pc_cmd_renthouse(playerid, params);
		}
		else
		{
			return SendWarning(playerid, "Jûs jau nuomojatës namà, kurio numeris: %d. Norëdami atðaukti nuomà, raðykite /rentcancel", houseid);
		}
	}
	else
	{
		cache_delete(result);
		new houseid;
		if((houseid = GetClosestHouse(playerid, 5.0, CHECK_TYPE_OUTSIDE)) != INVALID_HOUSE_ID)
		{
			if(HouseInfo[houseid][hOwner] == PlayerInfo[playerid][pId]) return SendError(playerid, "Ðio namo savininkas esate jûs.");
			if(HouseInfo[houseid][hRent] > 0)
			{
				if(GetPlayerMoney(playerid) < HouseInfo[houseid][hRentPrice]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, HouseInfo[houseid][hRentPrice]);
				mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `houses_dubkeys` WHERE HouseId = '%d' AND Valid = '1' AND Type = '1'", HouseInfo[houseid][hId]);
				result = mysql_query(chandler, string, true);
				if(cache_num_rows() >= HouseInfo[houseid][hRentLimit])
				{
					cache_delete(result);
					return SendError(playerid, "Nebëra vietos nuomininkams.");
				}
				else
				{
					// rentinam
					cache_delete(result);
					mysql_format(chandler, string, sizeof string, "INSERT INTO `houses_dubkeys` (`HouseId`,`PlayerId`,`Type`,`Valid`) VALUES ('%d','%d','1','1')", HouseInfo[houseid][hId], PlayerInfo[playerid][pId]);
					mysql_fquery(chandler, string, "HouseSaved");
					MsgSuccess(playerid, "NAMO NUOMA", "Sëkmingai iðsinuomojote bûstà. Naudokite /rentcancel norëdami atðaukt nuomà.");
					log_init(true);
					log_set_table("logs_houses");
					log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`Amount`");
					log_set_values("'%d','%e','%d','Issinuomavo nama','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[houseid][hId], HouseInfo[houseid][hRentPrice]);
					log_commit();
				}
			}
		}
		else InfoBox(playerid, IB_NOT_IN_HOUSE_OR_BUSINESS);
	}
	return 1;
}
CMD:buyhouse(playerid, params[])
{
	new houseid = INVALID_HOUSE_ID;
	if(PlayerInfo[playerid][pLevel] < 3) return SendWarning(playerid, "Jûsø lygis nëra 3");
	if((houseid = GetClosestHouse(playerid, 4.0, CHECK_TYPE_OUTSIDE)) != INVALID_HOUSE_ID)
	{
		if(HouseInfo[houseid][hOwner] > 0 && HouseInfo[houseid][hSale] == 0) return SendError(playerid, "Ðis namas turi savininkà ir nëra parduodamas.");
		if(HouseInfo[houseid][hOwner] == PlayerInfo[playerid][pId]) return 1; // pats savininkas
		// perkam
		log_init(true);
		if(HouseInfo[houseid][hOwner] > 0 && HouseInfo[houseid][hSale] > 0)
		{
			if(GetPlayerMoney(playerid) < HouseInfo[houseid][hSale]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, HouseInfo[houseid][hSale]);
			GivePlayerMoney(playerid, -HouseInfo[houseid][hSale]);
			SaveAccountIntEx(playerid, "Money", GetPlayerMoney(playerid));
			// pardavineja savininkas
			new oldowner = INVALID_PLAYER_ID;
			if((oldowner = FindPlayerBySql(HouseInfo[houseid][hOwner])) != INVALID_PLAYER_ID)
			{
				SendFormat(oldowner, 0xFFCD6EFF, "------------------------------------------------------------------------");
				SendFormat(oldowner, 0xFFCD6EFF, "%s nupirko Jûsø namà uþ $%d", GetPlayerNameEx(playerid, .roleplay = true, .ignoremask = true), HouseInfo[houseid][hSale]);
				GivePlayerMoney(oldowner, HouseInfo[houseid][hSale]);
				SaveAccountIntEx(oldowner, "Money", GetPlayerMoney(oldowner));
			}
			else
			{
				new string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET Money = Money+%d WHERE id = '%d'", HouseInfo[houseid][hSale], HouseInfo[houseid][hOwner]);
				mysql_fquery(chandler, string, "PlayerSavedEx");
				format(string, sizeof string, "Nupirko Jûsø namà");
				AddPlayerLoginNote(HouseInfo[houseid][hOwner], PlayerInfo[playerid][pId], string);
			}
			MsgSuccess(playerid, "NAMAS", "Sëkmingai nusipirkote namà uþ $%d", HouseInfo[houseid][hSale]);
			log_set_table("logs_houses");
			log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`Amount`");
			log_set_values("'%d','%e','%d','Nusipirko nama','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[houseid][hId], HouseInfo[houseid][hSale]);
		}
		else if(HouseInfo[houseid][hOwner] <= 0)
		{
			if(GetPlayerMoney(playerid) < HouseInfo[houseid][hPrice]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, HouseInfo[houseid][hPrice]);
			GivePlayerMoney(playerid, -HouseInfo[houseid][hPrice]);
			SaveAccountIntEx(playerid, "Money", GetPlayerMoney(playerid));
			MsgSuccess(playerid, "NAMAS", "Sëkmingai nusipirkote namà uþ $%d", HouseInfo[houseid][hPrice]);
			log_set_table("logs_houses");
			log_set_keys("`PlayerId`,`PlayerName`,`HouseId`,`ActionText`,`Amount`");
			log_set_values("'%d','%e','%d','Nusipirko nama','%d'", LogPlayerId(playerid), LogPlayerName(playerid), HouseInfo[houseid][hId], HouseInfo[houseid][hPrice]);
		}
		log_commit();
		HouseInfo[houseid][hSale] = 0;
		HouseInfo[houseid][hOwner] = PlayerInfo[playerid][pId];
		SaveHouseIntEx(houseid, "Owner", PlayerInfo[playerid][pId]);
		House_FixLabels(houseid, GetGVarInt("EnabledHouseLabels"));
		
		House_CreatePickup(houseid);
		// CreateDynamicPickup(modelid, type, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_PICKUP_SD, STREAMER_TAG_AREA areaid = STREAMER_TAG_AREA -1)
	}
	else SendWarning(playerid, "Ásitikinkite, kad esate lauke prie namo.");
	return 1;
}
alias:buybusiness("buybiz");
CMD:buybusiness(playerid, params[])
{
	new businessid = INVALID_BUSINESS_ID,
		count = CountPlayerBusiness(playerid);
	if(PlayerInfo[playerid][pLevel] < 3) return SendWarning(playerid, "Jûsø lygis nëra 3");
	if((PlayerInfo[playerid][pDonator] == DONATOR_NONE && count >= MAX_BUSINESS_FOR_PLAYER) ||
		(PlayerInfo[playerid][pDonator] == DONATOR_BRONZE && count >= MAX_BUSINESS_FOR_PLAYER_BRONZE) ||
		(PlayerInfo[playerid][pDonator] == DONATOR_SILVER && count >= MAX_BUSINESS_FOR_PLAYER_SILVER) || 
		(PlayerInfo[playerid][pDonator] == DONATOR_GOLD && count >= MAX_BUSINESS_FOR_PLAYER_GOLD))
	{
		SendWarning(playerid, "Jûs negalite turëti daugiau verslø! (Jau turite %d)", count);
		return 1;
	}
	if((businessid = GetClosestBusiness(playerid, 4.0, CHECK_TYPE_OUTSIDE)) != INVALID_BUSINESS_ID)
	{
		if(BusinessInfo[businessid][bOwner] > 0 && BusinessInfo[businessid][bSale] == 0) return SendError(playerid, "Ðis verslas turi savininkà ir nëra parduodamas.");
		if(BusinessInfo[businessid][bOwner] == PlayerInfo[playerid][pId]) return 1; // pats savininkas
		// perkam
		log_init(true);
		if(BusinessInfo[businessid][bOwner] > 0 && BusinessInfo[businessid][bSale] > 0)
		{
			if(GetPlayerMoney(playerid) < BusinessInfo[businessid][bSale]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, BusinessInfo[businessid][bSale]);
			GivePlayerMoney(playerid, -BusinessInfo[businessid][bSale]);
			SaveAccountIntEx(playerid, "Money", GetPlayerMoney(playerid));
			// pardavineja senas savininkas
			new oldowner = INVALID_PLAYER_ID;
			if((oldowner = FindPlayerBySql(BusinessInfo[businessid][bOwner])) != INVALID_PLAYER_ID)
			{
				SendFormat(oldowner, 0xFFCD6EFF, "------------------------------------------------------------------------");
				SendFormat(oldowner, 0xFFCD6EFF, "%s nupirko Jûsø verslà \"%s\" uþ $%d", GetPlayerNameEx(playerid, .roleplay = true, .ignoremask = true), BusinessInfo[businessid][bName], BusinessInfo[businessid][bSale]);
				GivePlayerMoney(oldowner, BusinessInfo[businessid][bSale]);
				SaveAccountIntEx(oldowner, "Money", GetPlayerMoney(oldowner));
			}
			else
			{
				new string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET Money = Money+%d WHERE id = '%d'", BusinessInfo[businessid][bSale], BusinessInfo[businessid][bOwner]);
				mysql_fquery(chandler, string, "PlayerSavedEx");
				format(string, sizeof string, "Nupirko Jûsø verslà \"%s\"", BusinessInfo[businessid][bName]);
				AddPlayerLoginNote(BusinessInfo[businessid][bOwner], PlayerInfo[playerid][pId], string);
			}
			MsgSuccess(playerid, "VERSLAS", "Sëkmingai nusipirkote verslà uþ $%d", BusinessInfo[businessid][bSale]);
			log_set_table("logs_business");
			log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`,`Amount`");
			log_set_values("'%d','%e','%d','Nusipirko versla','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[businessid][bId], BusinessInfo[businessid][bSale]);
		}
		else if(BusinessInfo[businessid][bOwner] <= 0)
		{
			if(GetPlayerMoney(playerid) < BusinessInfo[businessid][bPrice]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, BusinessInfo[businessid][bPrice]);
			GivePlayerMoney(playerid, -BusinessInfo[businessid][bPrice]);
			SaveAccountIntEx(playerid, "Money", GetPlayerMoney(playerid));
			MsgSuccess(playerid, "VERSLAS", "Sëkmingai nusipirkote verslà uþ $%d", BusinessInfo[businessid][bPrice]);
			log_set_table("logs_business");
			log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`,`Amount`");
			log_set_values("'%d','%e','%d','Nusipirko versla','%d'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[businessid][bId], BusinessInfo[businessid][bPrice]);
		}
		log_commit();
		BusinessInfo[businessid][bSale] = 0;
		BusinessInfo[businessid][bOwner] = PlayerInfo[playerid][pId];
		SaveBusinessIntEx(businessid, "Owner", PlayerInfo[playerid][pId]);
		
		Business_FixLabels(businessid, GetGVarInt("EnabledBusinessLabels"));
		Business_CreatePickup(businessid);
	}
	else SendWarning(playerid, "Ásitikinkite, kad esate lauke prie verslo.");
	return 1;
}
CMD:buygarage(playerid, params[])
{
	new garageid = INVALID_GARAGE_ID;
	if(PlayerInfo[playerid][pLevel] < 3) return SendWarning(playerid, "Jûsø lygis nëra 3");
	if((garageid = GetClosestGarage(playerid, 4.0, CHECK_TYPE_OUTSIDE)) != INVALID_GARAGE_ID)
	{
		if(GarageInfo[garageid][gOwner] > 0 && GarageInfo[garageid][gSale] == 0) return SendError(playerid, "Ðis garaþas turi savininkà ir nëra parduodamas.");
		if(GarageInfo[garageid][gOwner] == PlayerInfo[playerid][pId]) return 1; // pats savininkas
		// perkam
		log_init(true);
		if(GarageInfo[garageid][gOwner] > 0 && GarageInfo[garageid][gSale] > 0)
		{
			if(GetPlayerMoney(playerid) < GarageInfo[garageid][gSale]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, GarageInfo[garageid][gSale]);
			GivePlayerMoney(playerid, -GarageInfo[garageid][gSale]);
			SaveAccountIntEx(playerid, "Money", GetPlayerMoney(playerid));
			// pardavineja senas savininkas
			new oldowner = INVALID_PLAYER_ID;
			if((oldowner = FindPlayerBySql(GarageInfo[garageid][gOwner])) != INVALID_PLAYER_ID)
			{
				SendFormat(oldowner, 0xFFCD6EFF, "------------------------------------------------------------------------");
				SendFormat(oldowner, 0xFFCD6EFF, "%s nupirko Jûsø garaþà uþ $%d", GetPlayerNameEx(playerid, .roleplay = true, .ignoremask = true), GarageInfo[garageid][gSale]);
				GivePlayerMoney(oldowner, GarageInfo[garageid][gSale]);
				SaveAccountIntEx(oldowner, "Money", GetPlayerMoney(oldowner));
			}
			else
			{
				new string[126];
				mysql_format(chandler, string, sizeof string, "UPDATE `players_data` SET Money = Money+%d WHERE id = '%d'", GarageInfo[garageid][gSale], GarageInfo[garageid][gOwner]);
				mysql_fquery(chandler, string, "PlayerSavedEx");
				AddPlayerLoginNote(GarageInfo[garageid][gOwner], PlayerInfo[playerid][pId], "Nupirko Jûsø garaþà");
			}
			MsgSuccess(playerid, "GARAÞAS", "Sëkmingai nusipirkote garaþà uþ $%d", GarageInfo[garageid][gSale]);
			log_set_table("logs_garages");
			log_set_keys("`PlayerId`,`PlayerName`,`GarageId`,`ActionText`,`Amount`");
			log_set_values("'%d','%e','%d','Nusipirko garaza','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[garageid][gId], GarageInfo[garageid][gSale]);
		}
		else if(GarageInfo[garageid][gOwner] <= 0)
		{
			if(GetPlayerMoney(playerid) < GarageInfo[garageid][gPrice]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, GarageInfo[garageid][gPrice]);
			GivePlayerMoney(playerid, -GarageInfo[garageid][gPrice]);
			SaveAccountIntEx(playerid, "Money", GetPlayerMoney(playerid));
			MsgSuccess(playerid, "GARAÞAS", "Sëkmingai nusipirkote garaþà uþ $%d", GarageInfo[garageid][gPrice]);
			log_set_table("logs_garages");
			log_set_keys("`PlayerId`,`PlayerName`,`GarageId`,`ActionText`,`Amount`");
			log_set_values("'%d','%e','%d','Nusipirko garaza','%d'", LogPlayerId(playerid), LogPlayerName(playerid), GarageInfo[garageid][gId], GarageInfo[garageid][gPrice]);
		}
		log_commit();
		GarageInfo[garageid][gSale] = 0;
		GarageInfo[garageid][gOwner] = PlayerInfo[playerid][pId];
		SaveGarageIntEx(garageid, "Owner", PlayerInfo[playerid][pId]);
		FixGarageLabels(garageid);
	}
	else SendWarning(playerid, "Ásitikinkite, kad esate lauke prie garaþo.");
	return 1;
}

alias:buy("shop");
CMD:buy(playerid, params[])
{
	// versle
	new businessid = INVALID_BUSINESS_ID;
	if((businessid = GetClosestBusiness(playerid, 60.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID)
	{
		if(InArray(BusinessInfo[businessid][bType], BUSINESS_TYPE_FUEL, BUSINESS_TYPE_SHOP))
		{
			new string[1024] = "{BABABA}Prekë\t{BABABA}Kaina\n",
				line[56];
			tmpIter[playerid] = businessid;
			for(new i = 0; i < MAX_BUSINESS_WARES; i++)
			{
				if(BusinessWares[businessid][i][bWareId] <= 0) { continue; }
				if(BusinessWares[businessid][i][bWareAmount] > 0 || BusinessInfo[businessid][bOwner] <= 0)
				{
					// prekes yra, normaliai arba nera savininko
					format(line, sizeof line, "{F6F6F6}%s\t{6DB652}$%d\n", GetInventoryItemName(BusinessWares[businessid][i][bWareId]), BusinessWares[businessid][i][bWarePrice]);
				}
				else
				{
					// prekes nera, rodom raudonai
					format(line, sizeof line, "{AF4646}%s\t{AF4646}$%d\n", GetInventoryItemName(BusinessWares[businessid][i][bWareId]), BusinessWares[businessid][i][bWarePrice]);
				}
				strcat(string, line);
			}
			ShowPlayerDialog(playerid, DIALOG_BUY_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "Prekiø pirkimas", string, "Tæsti", "Atðaukti");
		}
	}
	else InfoBox(playerid, "NESATE", "PARDUOTUVEJE");
	return 1;
}
alias:buyfood("food","buydrink");
CMD:buyfood(playerid, params[])
{
	new businessid = INVALID_BUSINESS_ID;
	if((businessid = GetClosestBusiness(playerid, 60.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID)
	{
		if(InArray(BusinessInfo[businessid][bType], BUSINESS_TYPE_BAR))
		{
			new food;
			if(sscanf(params,"d",food)) return SendUsage(playerid, "/buyfood [patiekalas]") ,
										SendUsage(playerid, "1. Kepsnys("#DEFAULT_BAR_STEAK_PRICE"$)  2. Uþkandëlë("#DEFAULT_BAR_SNACK_PRICE"$)  3. Sumuðtinis("#DEFAULT_BAR_SANDWICH_PRICE"$)  4. Pica("#DEFAULT_BAR_PIZZA_PRICE"$)  5. Blynai("#DEFAULT_BAR_PANCAKES_PRICE"$)") ,
										SendUsage(playerid, "6. Alus("#DEFAULT_BAR_BEER_PRICE"$)  7. Sultys("#DEFAULT_BAR_JUICE_PRICE"$)  8. Vynas("#DEFAULT_BAR_WINE_PRICE"$)");
			new Float:add = 0.0,
				foodname[25];
			switch(food)
			{
				case 1:
				{
					if(GetPlayerMoney(playerid) < DEFAULT_BAR_STEAK_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_BAR_STEAK_PRICE);
					add = 45.0;
					strcat(foodname, "kepsná");
					GivePlayerMoney(playerid, -DEFAULT_BAR_STEAK_PRICE);
					BusinessInfo[businessid][bBudget] += DEFAULT_BAR_STEAK_PRICE;
				}
				case 2:
				{
					if(GetPlayerMoney(playerid) < DEFAULT_BAR_SNACK_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_BAR_SNACK_PRICE);
					add = 15.0;
					strcat(foodname, "uþkandëlæ");
					GivePlayerMoney(playerid, -DEFAULT_BAR_SNACK_PRICE);
					BusinessInfo[businessid][bBudget] += DEFAULT_BAR_SNACK_PRICE;
				}
				case 3:
				{
					if(GetPlayerMoney(playerid) < DEFAULT_BAR_SANDWICH_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_BAR_SANDWICH_PRICE);
					add = 15.0;
					strcat(foodname, "sumuðtiná");
					GivePlayerMoney(playerid, -DEFAULT_BAR_SANDWICH_PRICE);
					BusinessInfo[businessid][bBudget] += DEFAULT_BAR_SANDWICH_PRICE;
				}
				case 4:
				{
					if(GetPlayerMoney(playerid) < DEFAULT_BAR_PIZZA_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_BAR_PIZZA_PRICE);
					add = 25.0;
					strcat(foodname, "picà");
					GivePlayerMoney(playerid, -DEFAULT_BAR_PIZZA_PRICE);
					BusinessInfo[businessid][bBudget] += DEFAULT_BAR_PIZZA_PRICE;
				}
				case 5:
				{
					if(GetPlayerMoney(playerid) < DEFAULT_BAR_PANCAKES_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_BAR_PANCAKES_PRICE);
					add = 20.0;
					strcat(foodname, "blynø");
					GivePlayerMoney(playerid, -DEFAULT_BAR_PANCAKES_PRICE);
					BusinessInfo[businessid][bBudget] += DEFAULT_BAR_PANCAKES_PRICE;
				}
				case 6:
				{
					if(GetPlayerMoney(playerid) < DEFAULT_BAR_BEER_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_BAR_BEER_PRICE);
					add = 0.01;
					strcat(foodname, "alaus");
					GivePlayerMoney(playerid, -DEFAULT_BAR_BEER_PRICE);
					BusinessInfo[businessid][bBudget] += DEFAULT_BAR_BEER_PRICE;
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				}
				case 7:
				{
					if(GetPlayerMoney(playerid) < DEFAULT_BAR_JUICE_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_BAR_JUICE_PRICE);
					add = 2.0;
					strcat(foodname, "sulèiø");
					GivePlayerMoney(playerid, -DEFAULT_BAR_JUICE_PRICE);
					BusinessInfo[businessid][bBudget] += DEFAULT_BAR_JUICE_PRICE;
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				}
				case 8:
				{
					if(GetPlayerMoney(playerid) < DEFAULT_BAR_WINE_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_BAR_WINE_PRICE);
					add = 0.5;
					strcat(foodname, "vyno");
					GivePlayerMoney(playerid, -DEFAULT_BAR_WINE_PRICE);
					BusinessInfo[businessid][bBudget] += DEFAULT_BAR_WINE_PRICE;
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
				}
				default: SendWarning(playerid, "Tokio patiekalo neturime.");
			}
			if(add > 0.0)
			{
				new Float:health = 0.0;
				GetPlayerHealth(playerid, health);
				if(health < float(GetPlayerMaxHealth(playerid)))
				{
					SetPlayerHealth(playerid, health + add);
				}
				rp_me(playerid, _, "uþsisako %s.", foodname);
				if(1 <= food <= 5) rp_do(playerid, "Padavëja atneða patiekalà.");
				else rp_do(playerid, "Padavëjas atneða gërimus.");
			}
		}
	}
	else InfoBox(playerid, "NESATE", "VALGYKLOJE");
	return 1;
}
CMD:buyweapons(playerid, params[])
{
	new businessid = INVALID_BUSINESS_ID;
	if((businessid = GetClosestBusiness(playerid, 60.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID)
	{
		if(InArray(BusinessInfo[businessid][bType], BUSINESS_TYPE_WEAPONS))
		{
			new string[512];
			tmpIter[playerid] = businessid;
			for(new i = 0; i < sizeof AvailableWeaponsShop; i++)
			{
				format(string, sizeof string, "%s%s\t$%d\n", string, GetInventoryItemName(AvailableWeaponsShop[i][0]), AvailableWeaponsShop[i][2]);
			}
			ShowPlayerDialog(playerid, DIALOG_BUY_WEAPONS_MAIN, DIALOG_STYLE_TABLIST, "Ginklø pirkimas", string, "Tæsti", "Atðaukti");
		}
	}
	else InfoBox(playerid, "NESATE", "PARDUOTUVEJE");
	return 1;
}
CMD:buyclothes(playerid, params[])
{
	new businessid = INVALID_BUSINESS_ID;
	if((businessid = GetClosestBusiness(playerid, 60.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID)
	{
		if(GetFreeClothesSlot(playerid) == -1) return SendWarning(playerid, "Nëra vietos drabuþiø inventoriuje.");
		if(InArray(BusinessInfo[businessid][bType], BUSINESS_TYPE_CLOTHES))
		{
			new string[512];
			tmpIter[playerid] = businessid;
			for(new i = 0; i < sizeof ClothesListNames; i++)
			{
				format(string, sizeof string, "%s%s\n", string, ClothesListNames[i]);
			}
			strcat(string, "Aprangos");
			ShowPlayerDialog(playerid, DIALOG_BUY_CLOTHES_MAIN, DIALOG_STYLE_LIST, "Drabuþiø pirkimas", string, "Tæsti", "Atðaukti");
		}
	}
	else InfoBox(playerid, "NESATE", "PARDUOTUVEJE");
	return 1;
}

CMD:dealermenu(playerid, params[])
{
	if(PlayerInfo[playerid][pDealer] < 0) return InfoBox(playerid, IB_NOT_DEALER);
	tmpPassword[playerid][0] = 0;
	ShowPlayerDialog(playerid, DIALOG_DM_MAIN, DIALOG_STYLE_LIST, "Ginklø ir narkotikø tiekimas", "Konspiraciniai namai\nGinklø uþsakymas\nNarkotikø uþsakymas\nTr. priemoniø pirkimas", "Tæsti", "Atðaukti");
	return 1;
}

CMD:ad(playerid, params[])
{
	new string[256];
	if(sscanf(params,"s[256]",string)) return SendUsage(playerid, "/ad [tekstas]");
	if(GetPlayerMoney(playerid) < DEFAULT_AD_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_AD_PRICE);
	if(PlayerExtra[playerid][peAdCooldown]+60 > gettime() && PlayerInfo[playerid][pDonator] <= 0) return SendWarning(playerid, "/ad galite naudoti kas minutæ.");
	if(IsPlayerInRangeOfPoint(playerid, 10.0, GetGVarFloat("AdX"), GetGVarFloat("AdY"), GetGVarFloat("AdZ")) && GetPlayerVirtualWorld(playerid) == GetGVarInt("AdVW") && GetPlayerInterior(playerid) == GetGVarInt("AdInt"))
	{
		format(string, sizeof string, "[Ad] %s; Kontaktai: %d", string, PlayerInfo[playerid][pPhoneNumber]);
		PlayerExtra[playerid][peAdCooldown] = gettime();
		SendChatMessageToAll(0x2BBE1EFF, string);
		format(string, sizeof string, "[Áspëjimas] /ad paraðæs þaidëjas: %s(%d)", GetPlayerNameEx(playerid), playerid);
		SendAdminMessage(0xFA7575FF, false, string);
		new factionid = GetFactionArrayIndexByType(FACTION_TYPE_SAN_NEWS);
		if(factionid != -1)
		{
			FactionInfo[factionid][fBudget] += DEFAULT_AD_PRICE;
		}
		GivePlayerMoney(playerid, -DEFAULT_AD_PRICE);
	}
	else SendWarning(playerid, "Nesate /ad vietoje.");
	return 1;
}

CMD:cad(playerid, params[])
{
	new 
		string[256],
		businessid;
	if(sscanf(params,"s[256]",string)) return SendUsage(playerid, "/cad [tekstas]");
	if(GetPlayerMoney(playerid) < DEFAULT_AD_PRICE*2) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, DEFAULT_AD_PRICE);
	if(PlayerExtra[playerid][peAdCooldown]+60 > gettime() && PlayerInfo[playerid][pDonator] <= 0) return SendWarning(playerid, "/cad galite naudoti kas minutæ.");
	if((businessid = GetClosestBusiness(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID)
	{
		if(HaveBusinessKey(playerid, businessid))
		{
			format(string, sizeof string, "[Verslo Ad] %s.", string);
			PlayerExtra[playerid][peAdCooldown] = gettime();
			SendChatMessageToAll(0x2BBE1EFF, string);
			format(string, sizeof string, "[Áspëjimas] /cad paraðæs þaidëjas: %s(%d)", GetPlayerNameEx(playerid), playerid);
			SendAdminMessage(0xFA7575FF, false, string);
			new factionid = GetFactionArrayIndexByType(FACTION_TYPE_SAN_NEWS);
			if(factionid != -1)
			{
				FactionInfo[factionid][fBudget] += DEFAULT_AD_PRICE*2;
			}
			GivePlayerMoney(playerid, -DEFAULT_AD_PRICE*2);
		}
		else return InfoBox(playerid, IB_NO_BUSINESS_KEYS);
	}
	else InfoBox(playerid, "NESATE", "VERSLE");

	return 1;
}

CMD:bslogan(playerid, params[])
{
	new businessid = INVALID_BUSINESS_ID;
	if((businessid = GetClosestBusiness(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID)
	{
		if(HaveBusinessKey(playerid, businessid))
		{
			new 
				string[128];
			if(sscanf(params,"s[128]",string)) return SendUsage(playerid, "/bslogan [tekstas]");
			format(BusinessInfo[businessid][bSlogan], 128, string);

			SaveBusinessEx(businessid, "Slogan", string);

			SendFormat(playerid, 0xBABABAFF, "Pakeitëte verslo tekstà: %s", string);

			log_init(true);
			log_set_table("logs_business");
			log_set_keys("`PlayerId`,`PlayerName`,`BusinessId`,`ActionText`");
			log_set_values("'%d','%e','%d','/bslogan: %s'", LogPlayerId(playerid), LogPlayerName(playerid), BusinessInfo[tmpIter[playerid]], string);
			log_commit();

		}
		else return InfoBox(playerid, IB_NO_BUSINESS_KEYS);
	}
	else InfoBox(playerid, "NESATE", "VERSLE");
	return 1;
}

alias:bmenu("business","verslas");
CMD:bmenu(playerid, params[])
{
	new businessid = INVALID_BUSINESS_ID;
	if((businessid = GetClosestBusiness(playerid, 50.0, CHECK_TYPE_INSIDE)) != INVALID_BUSINESS_ID)
	{
		if(HaveBusinessKey(playerid, businessid))
		{
			tmpIter[playerid] = businessid;
			new string[512];
			format(string, sizeof string, "{%s}Prekiø valdymas\n{%s}Darbuotojø valdymas\n{%s}Biudþetas\n", TOS(HaveBusinessKey(playerid, businessid, "P_WaresControl"), "FFFFFF", "D7D7D7"), TOS(HaveBusinessKey(playerid, businessid, "P_WorkersControl"), "FFFFFF", "D7D7D7"), TOS(HaveBusinessKey(playerid, businessid, "P_BudgetControl"), "FFFFFF", "D7D7D7"));
			format(string, sizeof string, "%s{%s}%s\n{%s}Keisti áëjimo kainà\t$%d", string, TOS(HaveBusinessKey(playerid, businessid, .check_only_owner = true), "FFFFFF", "D7D7D7"), BusinessInfo[businessid][bSale] > 0 ? ("Nutraukti pardavinëjimà") : ("Parduoti verslà"), TOS(HaveBusinessKey(playerid, businessid, .check_only_owner = true), "FFFFFF", "D7D7D7"), BusinessInfo[businessid][bEnterPrice]);
			if(BusinessInfo[businessid][bType] == BUSINESS_TYPE_FUEL)
			{
				strcat(string, "\nDegalai");
			}
			ShowPlayerDialog(playerid, DIALOG_BM_MAIN, DIALOG_STYLE_LIST, "Verslo valdymas", string, "Tæsti", "Atðaukti");
		}
		else return InfoBox(playerid, IB_NO_BUSINESS_KEYS);
	}
	else InfoBox(playerid, "NESATE", "VERSLE");
	return 1;
}

CMD:lock(playerid, params[])
{
	new itterid;
	if((itterid = GetClosestHouse(playerid, 4.0)) != INVALID_HOUSE_ID && HaveHouseKey(playerid, itterid))
	{
		HouseInfo[itterid][hLocked] = !HouseInfo[itterid][hLocked];
		SaveHouseIntEx(itterid, "Locked", HouseInfo[itterid][hLocked]);
		if(HouseInfo[itterid][hLocked] == 0) InfoBox(playerid, "~g~ATRAKINOTE", "NAMA");
		else InfoBox(playerid, "UZRAKINOTE", "NAMA");
		return 1;
	}
	else if((itterid = GetClosestVehicle(playerid, 4.0)) != INVALID_VEHICLE_ID && HaveVehicleKey(playerid, itterid))
	{
		pc_cmd_v(playerid, "lock");
		return 1;
	}
	else if((itterid = GetClosestBusiness(playerid, 4.0)) != INVALID_BUSINESS_ID && HaveBusinessKey(playerid, itterid))
	{
		BusinessInfo[itterid][bLocked] = !BusinessInfo[itterid][bLocked];
		SaveBusinessIntEx(itterid, "Locked", BusinessInfo[itterid][bLocked]);
		if(BusinessInfo[itterid][bLocked] == 0) InfoBox(playerid, "~g~ATRAKINOTE", "VERSLA");
		else InfoBox(playerid, "UZRAKINOTE", "VERSLA");
		return 1;
	}
	else if((itterid = GetClosestGarage(playerid, 4.0)) != INVALID_GARAGE_ID && GarageInfo[itterid][gOwner] == PlayerInfo[playerid][pId])
	{
		GarageInfo[itterid][gLocked] = !GarageInfo[itterid][gLocked];
		SaveGarageIntEx(itterid, "Locked", GarageInfo[itterid][gLocked]);
		if(GarageInfo[itterid][gLocked] == 0) InfoBox(playerid, "~g~ATRAKINOTE", "GARAZA");
		else InfoBox(playerid, "UZRAKINOTE", "GARAZA");
		return 1;
	}
	else if((itterid = GetClosestDealerHouse(playerid, 4.0)) != INVALID_HOUSE_ID && DealerHouseInfo[itterid][dealerHouseOwner] == PlayerInfo[playerid][pId])
	{
		DealerHouseInfo[itterid][dealerHouseLocked] = !DealerHouseInfo[itterid][dealerHouseLocked];
		SaveDealerHouseIntEx(itterid, "Locked", DealerHouseInfo[itterid][dealerHouseLocked]);
		if(DealerHouseInfo[itterid][dealerHouseLocked] == 0) InfoBox(playerid, "~g~ATRAKINOTE", "NAMA");
		else InfoBox(playerid, "UZRAKINOTE", "NAMA");
		return 1;
	}
	return 1;
}
CMD:fill(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	new vehicleid = GetPlayerVehicleID(playerid),
		max_fuel = VehicleFuelCapacityList[GetVehicleModel(vehicleid)-400];
	if(GetVehicleEngine(vehicleid) == 1) return SendWarning(playerid, "Uþgesinkite tr. priemonës variklá.");
	if(floatround(VehicleInfo[vehicleid][vFuel], floatround_ceil) >= max_fuel) return SendError(playerid, "Degalø bakas pilnas.");
	if(PlayerExtra[playerid][peFilling] > 0 && PlayerExtra[playerid][peFillingAt] > 0)
	{
		PayForFuel(playerid, PlayerExtra[playerid][peFillingAt]);
	}
	else
	{
		foreach(new businessid : Business)
		{
			if(BusinessInfo[businessid][bType] == BUSINESS_TYPE_FUEL)
			{
				new Float:fillX, Float:fillY, Float:fillZ;
				if(	(fillX = BusinessInfo[businessid][bExtraX]) != 0.0 && 
					(fillY = BusinessInfo[businessid][bExtraY]) != 0.0 && 
					(fillZ = BusinessInfo[businessid][bExtraZ]) != 0.0)
				{
					if(IsVehicleInRangeOfPoint(vehicleid, 10.0, fillX, fillY, fillZ))
					{
						// fillinam
						if(BusinessInfo[businessid][bFuel] > 0 || BusinessInfo[businessid][bOwner] == 0)
						{
							PlayerExtra[playerid][peFillingAt] = businessid,
							PlayerExtra[playerid][peFilling] = 0,
							PlayerExtra[playerid][peFillTimer] = SetTimerEx("FillUp", 200, false, "ddd", playerid, vehicleid);
							SendFormat(playerid, 0xBABABAFF, "Pradëjote pilimà.");
							return 1;
						}
						else
						{
							SendWarning(playerid, "Degalø nebëra.");
							return 1;
						}
					}
				}
			}
		}
		SendWarning(playerid, "Nesate degalinëje.");
	}
	return 1;
}

stock PayForFuel(playerid, businessid)
{
	#pragma unused businessid
	KillTimer(PlayerExtra[playerid][peFillTimer]);
	new string[126];
	if(PlayerInfo[playerid][pBankCard] <= 0)
	{
		SendFormat(playerid, 0xBABABAFF, "Kadangi banko kortelës neturite, apmokate grynais.");
		GivePlayerMoney(playerid, -PlayerExtra[playerid][peFilling]);
		PlayerExtra[playerid][peFilling] =
		PlayerExtra[playerid][peFillingAt] = 0;
	}
	else
	{
		format(string, sizeof string, "{F1F1F1}Turite susimokëti uþ degalus: {6AD058}$%d\n{F1F1F1}Kaip norite mokëti?", PlayerExtra[playerid][peFilling]);
		ShowPlayerDialog(playerid, DIALOG_PAY_FOR_FUEL, DIALOG_STYLE_MSGBOX, "Degalinë", string, "Grynaisiais", "Banku");
	}
	log_init(true);
	log_set_table("logs_money");
	log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`PlaceType`,`PlaceId`,`Amount`");
	log_set_values("'%d','%e','Sumokejo uz degalus','%d','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), PLACE_TYPE_BUSINESS, BusinessInfo[businessid][bId], PlayerExtra[playerid][peFilling]);
	log_commit();
	return 1;
}
forward FillUp(playerid, vehicleid);
public FillUp(playerid, vehicleid)
{
	new max_fuel = VehicleFuelCapacityList[GetVehicleModel(vehicleid)-400],
		businessid = PlayerExtra[playerid][peFillingAt];
	
	VehicleInfo[vehicleid][vFuel] += 1;
	PlayerExtra[playerid][peFilling] += BusinessInfo[businessid][bFuelPrice];
	BusinessInfo[businessid][bBudget] += BusinessInfo[businessid][bFuelPrice];
	if(BusinessInfo[businessid][bOwner] > 0) BusinessInfo[businessid][bFuel]--;
	if(VehicleInfo[vehicleid][vFuel] >= max_fuel || (BusinessInfo[businessid][bFuel] <= 0 && BusinessInfo[businessid][bOwner] > 0))
	{
		// end
		PayForFuel(playerid, businessid);
		return 1;
	}
	else
	{
		new percent = floatround(VehicleInfo[vehicleid][vFuel]/max_fuel*100),
			string[8];
		format(string, sizeof string, "%d/100", percent);
		GameTextForPlayer(playerid, string, 200, 4);
		PlayerExtra[playerid][peFillTimer] = SetTimerEx("FillUp", 200, false, "dd", playerid, vehicleid);
	}

	return 1;
}
CMD:detachtrailer(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new 
			vehicleid = GetPlayerVehicleID(playerid);
		if(IsTrailerAttachedToVehicle(vehicleid))
		{
			//new trailerid = GetVehicleTrailer(vehicleid);
			DetachTrailerFromVehicle(vehicleid);
		}
	}
	else return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	return 1;
}
CMD:maxspeed(playerid, params[])
{
	new speed;
	if(GetPlayerVehicleSeat(playerid) != 0) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
	if(sscanf(params,"d",speed)) return SendUsage(playerid, "/maxspeed [greitis]");
	if(speed < 30)
	{
		PlayerExtra[playerid][peSpeedLimit] = 0;
		MsgSuccess(playerid, "RIBOTUVAS", "Iðjungëte greièio ribotuvà.");
	}
	else if(30 <= speed <= 150)
	{
		PlayerExtra[playerid][peSpeedLimit] = speed;
		MsgSuccess(playerid, "RIBOTUVAS", "Nustatëte greièio ribotuvà %d.", speed);
	}
	return 1;
}
CMD:engine(playerid, params[])
{
	return pc_cmd_v(playerid, "engine");
}

hook OnLoadBarEnd(playerid, type[])
{
	if(isequal(type, "TurnEngine", true))
    {
        if(OldVehicle[playerid] != GetPlayerVehicleID(playerid)) return 0;
        if(	VehicleInfo[OldVehicle[playerid]][vFuel] <= 0.0 || 
			VehicleInfo[OldVehicle[playerid]][vEngineStatus] <= 0.0 || 
			VehicleInfo[OldVehicle[playerid]][vBatteryStatus] <= 0.0)
        {
            return GameTextForPlayer(playerid, "UZVEDIMAS ~r~NEPAVYKO", 3000, 5);
        }
        new
            chance = 100 - floatround(((100-VehicleInfo[OldVehicle[playerid]][vEngineStatus])*0.2))-floatround(((100-VehicleInfo[OldVehicle[playerid]][vBatteryStatus])*0.2));
        if(chance >= random(100))
        {
            ChangeVehicleEngineStatus(playerid, OldVehicle[playerid]);
        }
        else
        {
            GameTextForPlayer(playerid, "UZVEDIMAS ~r~NEPAVYKO", 3000, 5);
        }
    }
	return 1;
}

CMD:v(playerid, params[])
{
	new input[56];
	if(sscanf(params,"s[56]",input)) return SendUsage(playerid, "/v [komanda]"),
											SendCommands(playerid, "list, find, givedubkey, takedubkey, removedubkeys"),
											SendCommands(playerid, "buyinsurance, buypark, buylock, buy"),
											SendCommands(playerid, "park sellto register documents scrap");
	if(!strcmp(input, "find", true) || !strcmp(input, "get", true) || !strcmp(input, "list", true)) // /v get /v find /v list
	{
		new string[86];
		for(new i = 0; i < sizeof tmpArray[]; i++) tmpArray[playerid][i] = 0;
		mysql_format(chandler, string, sizeof string, "SELECT `id` FROM `vehicles_data` WHERE Owner = '%d'", PlayerInfo[playerid][pId]);
		mysql_tquery(chandler, string, "VehicleDataGet", "ddd", playerid, 1, 1);
		return 1;
	}
	else if(!strcmp(input, "removedubkeys", true)) // /v removedubkeys
	{
		if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!HaveVehicleKey(playerid, vehicleid, .check_only_owner = true, .ignore_admin_perm = true)) return SendWarning(playerid, "Nesate savo tr. priemonëje.");
		if(VehicleInfo[vehicleid][vDealer] > 0) return SendError(playerid, "Ðios tr. priemonës raktø dalinti negalite.");
		new string[126];
		mysql_format(chandler, string, sizeof string, "DELETE FROM `vehicles_dubkeys` WHERE VehicleId = '%d'", VehicleInfo[vehicleid][vId]);
		mysql_fquery(chandler, string, "DubkeysRemovedAll");
		SendFormat(playerid, 0xBABABAFF, "Visi dublikuoti raktai paðalinti.");
		log_init(true);
		log_set_table("logs_vehicles");
		log_set_keys("`PlayerId`,`PlayerName`,`VehicleId`,`VehicleName`,`ActionText`");
		log_set_values("'%d','%e','%d','%e','Pasalino visus dubkey'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId], GetModelName(GetVehicleModel(vehicleid)));
		log_commit();
		return 1;
	}
	else if(strfind(input, "takedubkey", true) == 0) // /v takedubkey
	{
		/* cia tiesiog UPDATE `vehicles_dubkeys` SET Valid = 0 */
		new string[128], receiverid;
		if(sscanf(input, "s[10]u", string, receiverid)) return SendUsage(playerid, "/v takedubkey [þaidëjas]");
		if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!HaveVehicleKey(playerid, vehicleid, .check_only_owner = true, .ignore_admin_perm = true)) return SendWarning(playerid, "Nesate savo tr. priemonëje.");
		if(VehicleInfo[vehicleid][vDealer] > 0) return SendError(playerid, "Ðios tr. priemonës raktø dalinti negalite.");
		if(!CheckPlayerid(receiverid) || playerid == receiverid) return InfoBox(playerid, IB_WRONG_PLAYER);
		if(IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0))
		{
			mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `vehicles_dubkeys` WHERE Valid = '1' AND PlayerId = '%d' AND VehicleId = '%d'", PlayerInfo[receiverid][pId], VehicleInfo[vehicleid][vId]);
			new Cache:result = mysql_query(chandler, string, true);
			if(!cache_num_rows())
			{
				SendFormat(playerid, 0xBABABAFF, "Þaidëjas %s neturi rakto nuo ðios tr. priemonës.", GetPlayerNameEx(receiverid));
			}
			else
			{
				mysql_format(chandler, string, sizeof string, "DELETE FROM `vehicles_dubkeys` WHERE VehicleId = '%d' AND PlayerId = '%d'", VehicleInfo[vehicleid][vId], PlayerInfo[receiverid][pId]);
				mysql_tquery(chandler, string, "DubkeyRemoved", "ddd", playerid, receiverid, vehicleid);
				log_init(true);
				log_set_table("logs_vehicles");
				log_set_keys("`PlayerId`,`PlayerName`,`VehicleId`,`VehicleName`,`ActionText`,`ExtraId`");
				log_set_values("'%d','%e','%d','%e','Ateme dubkey','%d'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId], GetModelName(GetVehicleModel(vehicleid)), PlayerInfo[receiverid][pId]);
				log_commit();
			}
			cache_delete(result);
		}
		else InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	}
	else if(strfind(input, "documents", true) == 0) // /v documents
	{
		new
			string[128],
			receiverid,
			vehicleid;
		if(sscanf(input,"s[10]u", string, receiverid)) return SendUsage(playerid, "/v documents [þaidëjas]");
		if(!IsPlayerInAnyVehicle(playerid) || (vehicleid = GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
		if(!CheckPlayerid(receiverid)) return InfoBox(playerid, IB_WRONG_PLAYER);
		if(!IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0)) return InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
		if(!HaveVehicleKey(playerid, vehicleid, .check_only_owner = false, .canbejob = false, .ignore_admin_perm = true)) return SendWarning(playerid, "Neturite ðios tr. priemonës rakteliø.");
		rp_me(playerid, _, "parodo tr. priemonës dokumentus %s.", GetPlayerNameEx(receiverid, true));
		SendFormat(receiverid, 0xEBBEF0FF, " _________________________________________________");
		SendFormat(receiverid, 0xEBBEF0FF, "|");
		SendFormat(receiverid, 0xEBBEF0FF, "| Modelis: %s, savininkas: %s", GetModelName(GetVehicleModel(vehicleid)), GetNameBySql(VehicleInfo[vehicleid][vOwner]));
		SendFormat(receiverid, 0xEBBEF0FF, "| Numeriai: %s, bauda: $%d", VehicleInfo[vehicleid][vNumbers], VehicleInfo[vehicleid][vTicket]);
		SendFormat(receiverid, 0xEBBEF0FF, "|_________________________________________________");
	}
	else if(strfind(input, "accept", true) == 0) // /v accept
	{
		if(Offer[playerid][0] == OFFER_TYPE_VEHICLE_BUY)
		{
			new str[8], owner;
			if(sscanf(input,"s[8]d", str, owner)) return SendUsage(playerid, "/v accept [id]");
			if(CheckPlayerid(owner) && owner != playerid && Offer[playerid][1] == owner)
			{
				if(IsValidVehicle(Offer[playerid][2]))
				{
					if(!IsPlayerInRangeOfVehicle(playerid, 5.0, Offer[playerid][2])) return InfoBox(playerid, IB_NOT_CLOSE_VEHICLE);
					if(GetPlayerMoney(playerid) < Offer[playerid][3]) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, Offer[playerid][3]);
					new string[126];
					GivePlayerMoney(owner, Offer[playerid][3]);
					GivePlayerMoney(playerid, -Offer[playerid][3]);
					mysql_format(chandler, string, sizeof string, "UPDATE `vehicles_data` SET Owner = '%d' WHERE id = '%d'", PlayerInfo[playerid][pId], VehicleInfo[Offer[playerid][2]][vId]);
					mysql_fquery(chandler, string, "VehicleSavedEx");
					VehicleInfo[Offer[playerid][2]][vOwner] = PlayerInfo[playerid][pId];
					SendFormat(playerid, 0xFF6347AA, "Nupirkote tr. priemonæ ið %s", GetPlayerNameEx(owner, .roleplay = true, .ignoremask = false));
					SendFormat(owner, 0xFF6347AA, "%s nupirko Jûsø tr. priemonæ", GetPlayerNameEx(playerid, .roleplay = true, .ignoremask = false));
					PlayerInfo[owner][pCarsSpawned]--;

					log_init(true);
					log_set_table("logs_vehicles");
					log_set_keys("`PlayerId`,`PlayerName`,`VehicleId`,`VehicleName`,`ActionText`,`ExtraId`,`Amount`");
					log_set_values("'%d','%e','%d','%e','Nupirko zaidejo tr. priemone','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[Offer[playerid][2]][vId], GetModelName(GetVehicleModel(Offer[playerid][2])), PlayerInfo[owner][pId], Offer[playerid][3]);
					log_commit();

					ParkVehicle(Offer[playerid][2]);
				}
				Offer[playerid][0] = 0, // type
				Offer[playerid][1] = INVALID_PLAYER_ID,
				Offer[playerid][2] = INVALID_VEHICLE_ID,
				Offer[playerid][3] = 0;
			}
			else return SendWarning(playerid, "Neteisingas ID");
		}
		else return SendWarning(playerid, "Jums nesiûlo pirkti tr. priemonës.");
	}
	else if(strfind(input, "sellto", true) == 0)
	{
		new vehicleid = INVALID_VEHICLE_ID;
		if((vehicleid = GetClosestVehicle(playerid, 5.0)) != INVALID_VEHICLE_ID)
		{
			if(HaveVehicleKey(playerid, vehicleid, .check_only_owner = true, .canbejob = false, .ignore_admin_perm = true))
			{
				new str[8], receiverid, price;
				if(VehicleInfo[vehicleid][vDealer] > 0) return SendError(playerid, "Ðios tr. priemonës parduoti negalite.");
				if(sscanf(input,"s[8]ud", str, receiverid, price)) return SendUsage(playerid, "/v sellto [þaidëjas] [kaina]");
				if(!CheckPlayerid(receiverid) || receiverid == playerid) return InfoBox(playerid, IB_WRONG_PLAYER);
				if(PlayerInfo[playerid][pLevel] < 2 || PlayerInfo[receiverid][pLevel] < 2) return SendWarning(playerid, "Nesate arba þaidëjas nëra 2 lygio.");
				if(IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0))
				{
					Offer[receiverid][0] = OFFER_TYPE_VEHICLE_BUY, // type
					Offer[receiverid][1] = playerid,
					Offer[receiverid][2] = vehicleid,
					Offer[receiverid][3] = price;
					SendFormat(playerid, 0xB4E6B4FF, "Pasiûlëte %s pirkti %s uþ $%d", GetPlayerNameEx(receiverid, .roleplay = true, .ignoremask = false), GetModelName(GetVehicleModel(vehicleid)), price);
					SendFormat(receiverid, 0xB4E6B4FF, "%s siûlo pirkti %s uþ $%d (/v accept %d)", GetPlayerNameEx(playerid, .roleplay = true, .ignoremask = false), GetModelName(GetVehicleModel(vehicleid)), price, playerid);
				}
				else InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
			}
			else SendWarning(playerid, "Neturite tr. priemonës rakteliø.");
		}
	}
	else if(strfind(input, "givedubkey", true) == 0) // /v givedubkey
	{
		new string[128], receiverid;
		if(sscanf(input, "s[14]u", string, receiverid)) return SendUsage(playerid, "/v givedubkey [þaidëjas]");
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!HaveVehicleKey(playerid, vehicleid, .check_only_owner = true, .ignore_admin_perm = true) || vehicleid == INVALID_VEHICLE_ID) return SendWarning(playerid, "Nesate savo tr. priemonëje.");
		if(VehicleInfo[vehicleid][vDealer] > 0) return SendError(playerid, "Ðios tr. priemonës raktø dalinti negalite.");
		if(!CheckPlayerid(receiverid) || playerid == receiverid) return InfoBox(playerid, IB_WRONG_PLAYER);
		if(IsPlayerInRangeOfPlayer(playerid, receiverid, 5.0))
		{
			mysql_format(chandler, string, sizeof string, "SELECT NULL FROM `vehicles_dubkeys` WHERE Valid = '1' AND PlayerId = '%d' AND VehicleId = '%d'", PlayerInfo[receiverid][pId], VehicleInfo[vehicleid][vId]);
			new Cache:result = mysql_query(chandler, string, true);
			if(cache_num_rows())
			{
				SendFormat(playerid, 0xBABABAFF, "Þaidëjas %s jau turi raktà nuo ðios tr. priemonës.", GetPlayerNameEx(receiverid));
			}
			else
			{
				mysql_format(chandler, string, sizeof string, "INSERT INTO `vehicles_dubkeys` (Valid,PlayerId,VehicleId,Added) VALUES ('1','%d','%d','%d')", PlayerInfo[receiverid][pId], VehicleInfo[vehicleid][vId], PlayerInfo[playerid][pId]);
				mysql_tquery(chandler, string, "DubkeyAdded", "ddd", playerid, receiverid, vehicleid);
				log_init(true);
				log_set_table("logs_vehicles");
				log_set_keys("`PlayerId`,`PlayerName`,`VehicleId`,`VehicleName`,`ActionText`,`ExtraId`");
				log_set_values("'%d','%e','%d','%e','Dave dubkey','%d'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId], GetModelName(GetVehicleModel(vehicleid)), PlayerInfo[receiverid][pId]);
				log_commit();
			}
			cache_delete(result);
		}
		else InfoBox(playerid, IB_NOT_CLOSE_PLAYER);
	}
	else if(!strcmp(input, "engine", true)) // /engine /v engine
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(IsPlayerInAnyVehicle(playerid) && VehicleHaveEngine(GetVehicleModel(vehicleid)))
		{
			EngineTurning(playerid);
		}
		return 1;
	}
	else if(!strcmp(input, "register", true)) // /v register
	{
		if(GetPlayerMoney(playerid) < VEHICLE_REGISTER_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, VEHICLE_REGISTER_PRICE);
		if(!IsPlayerInAnyVehicle(playerid)) return InfoBox(playerid, IB_NOT_IN_VEHICLE);
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!HaveVehicleKey(playerid, vehicleid, .check_only_owner = true, .ignore_admin_perm = true)) return SendWarning(playerid, "Nesate savo tr. priemonëje.");
		if(strlen(VehicleInfo[vehicleid][vNumbers]) > 1) return SendWarning(playerid, "Tr. priemonë jau priregistruota.");
		format(VehicleInfo[vehicleid][vNumbers], 24, "%c%c%c%c%d%d%d", 65+random(25), 65+random(25), 65+random(25), 65+random(25), random(9), random(8)+1, random(9));
		SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vNumbers]);
		SaveVehicleEx(vehicleid, "Numbers", VehicleInfo[vehicleid][vNumbers]);
		log_init(true);
		log_set_table("logs_vehicles");
		log_set_keys("`PlayerId`,`PlayerName`,`VehicleId`,`VehicleName`,`ActionText`,`Amount`,`ExtraString`");
		log_set_values("'%d','%e','%d','%e','Priregistravo tr. priemone','%d','%e'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId], GetModelName(GetVehicleModel(vehicleid)), VEHICLE_REGISTER_PRICE, VehicleInfo[vehicleid][vNumbers]);
		log_commit();
		SendFormat(playerid, 0xBABABAFF, "Tr. priemonë sëkmingai priregistruota, numeriai atsiras ið naujo priparkavus.");
		GivePlayerMoney(playerid, -VEHICLE_REGISTER_PRICE);
		return 1;
	}
	else if(strfind(input, "buylock", true) == 0) // /v buylock
	{
		new str[8], level;
		if(sscanf(input,"s[8]d", str, level))
			return 	SendUsage(playerid, "/v buylock [lygis]. Lygiai:") ,
					SendFormat(playerid, 0xBABABAFF, "[1 500$]: Paprastas uþraktas") ,
					SendFormat(playerid, 0xBABABAFF, "[2 4000$]: + Signalizacija") ,
					SendFormat(playerid, 0xBABABAFF, "[3 9000$]: Praneðimas policijai + Signalizacija + GPS") ,
					SendFormat(playerid, 0xBABABAFF, "[4 30000$]: Titaninis uþraktas + GPS + Praneðimas policijai + Signalizacija + GPS");
		if(level >= 1 && level <= 4)
		{
			new 
				money;
			switch(level)
			{
				case 1:
				{
					money = 500;
				}
				case 2:
				{
					money = 2000;
				}
				case 3:
				{
					money = 9000;
				}
				case 4:
				{
					money = 30000;
				}
			}

			new vehicleid = GetPlayerVehicleID(playerid);
			if(!HaveVehicleKey(playerid, vehicleid, .check_only_owner = true, .canbejob = false, .ignore_admin_perm = true) || vehicleid == INVALID_VEHICLE_ID) return SendWarning(playerid, "nesate savo tr. priemonëje.");
			if(level == VehicleInfo[vehicleid][vLock]) return SendError(playerid, "Jûs jau turite %d-à uþrakto lygá.", level);
			
			if(GetPlayerMoney(playerid) < money) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, money);
			VehicleInfo[vehicleid][vLock] = level;
			GivePlayerMoney(playerid, -money);
			SaveVehicleIntEx(vehicleid, "Lock", level);
			SendFormat(playerid, 0xBABABAFF, "Sëkmingai ádiegëte {1162E5}%d{BABABA} lygio uþrakto sistemà.", level);
			log_init(true);
			log_set_table("logs_vehicles");
			log_set_keys("`PlayerId`,`PlayerName`,`VehicleId`,`VehicleName`,`ActionText`,`Amount`,`ExtraId`");
			log_set_values("'%d','%e','%d','%e','Nupirko tr. priemones uzrakta','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId], GetModelName(GetVehicleModel(vehicleid)), level*150, VehicleInfo[vehicleid][vLock]);
			log_commit();
		}
		return 1;
	}
	else if(!strcmp(input, "scrap", true)) // /v scrap
	{
		new vehicleid = INVALID_VEHICLE_ID;
		if((vehicleid = GetClosestVehicle(playerid, 5.0)) != INVALID_VEHICLE_ID)
		{
			if(HaveVehicleKey(playerid, vehicleid, .check_only_owner = true, .canbejob = false, .ignore_admin_perm = true))
			{
				// delete
				new money = floatround(VehicleInfo[vehicleid][vPrice]/2.5);
				new string[256];
				tmpIter[playerid] = vehicleid;
				format(string, sizeof string, "{FFFFFF}Gausite $%d. Ar tikrai norite parduoti tr. priemonæ?", money);
				ShowPlayerDialog(playerid, DIALOG_VEHICLE_SCRAP, DIALOG_STYLE_MSGBOX, "Tr. priemonës", string, "Tæsti", "Atðaukti");
			}
			else SendWarning(playerid, "Neturite tr. priemonës rakteliø.");
		}
		else SendWarning(playerid, "Nesate prie tr. priemonës.");
		return 1;
	}
	else if(!strcmp(input, "lock", true)) // /v lock
	{
		new vehicleid = INVALID_VEHICLE_ID;
		if((vehicleid = GetClosestVehicle(playerid, 5.0)) != INVALID_VEHICLE_ID)
		{
			if(HaveVehicleKey(playerid, vehicleid, .canbejob = false))
			{
				new engine, lights, alarm, doors, bonnet, boot, objective;
				VehicleInfo[vehicleid][vLocked] = !VehicleInfo[vehicleid][vLocked];
				SaveVehicleIntEx(vehicleid, "Locked", VehicleInfo[vehicleid][vLocked]);
				
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, VehicleInfo[vehicleid][vLocked], bonnet, boot, objective);

				if(VehicleInfo[vehicleid][vLocked] == 0) InfoBox(playerid, "~g~ATRAKINOTE", "TR. PRIEMONE");
				else InfoBox(playerid, "UZRAKINOTE", "TR. PRIEMONE");
			}
			else SendWarning(playerid, "Neturite tr. priemonës rakteliø.");
		}
		else SendWarning(playerid, "Nesate prie tr. priemonës.");
		return 1;
	}
	else if(!strcmp(input, "buyinsurance", true)) // /v buyinsurance
	{
		new vehicleid = INVALID_VEHICLE_ID;
		if((vehicleid = GetPlayerVehicleID(playerid)) != INVALID_VEHICLE_ID && IsPlayerInAnyVehicle(playerid) && HaveVehicleKey(playerid, vehicleid, .ignore_admin_perm = true))
		{
			if(VehicleInfo[vehicleid][vInsurance] < MAX_INSURANCE_LEVEL)
			{
				new price = floatround(VehicleInfo[vehicleid][vPrice]*0.10);
				if(GetPlayerMoney(playerid) < price) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, price);
				VehicleInfo[vehicleid][vInsurance]++;
				SendFormat(playerid, 0xD9D9D9FF, "Tr. priemonës draudimas pratæstas. Jis kainavo {5FCE48}$%d", price);
				SaveVehicleIntEx(vehicleid, "Insurance", VehicleInfo[vehicleid][vInsurance]);
				GivePlayerMoney(playerid, -price);
				log_init(true);
				log_set_table("logs_vehicles");
				log_set_keys("`PlayerId`,`PlayerName`,`VehicleId`,`VehicleName`,`ActionText`,`Amount`,`ExtraId`");
				log_set_values("'%d','%e','%d','%e','Nupirko draudima tr. priemonei','%d','%d'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId], GetModelName(GetVehicleModel(vehicleid)), price, VehicleInfo[vehicleid][vInsurance]);
				log_commit();
				return 1;
			}
			else
			{
				SendWarning(playerid, "Pasiektas draudimo("#MAX_INSURANCE_LEVEL") limitas.");
				return 1;
			}
		}
		else
		{
			SendWarning(playerid, "Turite sedëti savo tr. priemonëje.");
		}
		return 1;
	}
	else if(!strcmp(input, "buypark", true)) // /v buypark
	{
		new vehicleid = INVALID_VEHICLE_ID;
		if((vehicleid = GetPlayerVehicleID(playerid)) != INVALID_VEHICLE_ID && IsPlayerInAnyVehicle(playerid) && HaveVehicleKey(playerid, vehicleid, .canbejob = false, .ignore_admin_perm = true))
		{
			if(GetPlayerMoney(playerid) < VEHICLE_BUY_PARK_PRICE) return InfoBox(playerid, IB_NOT_ENOUGH_MONEY, VEHICLE_BUY_PARK_PRICE);
			new
				Float:x,
				Float:y,
				Float:z,
				Float:a,
				string[30];

			GetVehiclePos(vehicleid, x, y, z);
			GetVehicleZAngle(vehicleid, a);

			VehicleInfo[vehicleid][vSyncX] = x,
			VehicleInfo[vehicleid][vSyncY] = y,
			VehicleInfo[vehicleid][vSyncZ] = z,
			VehicleInfo[vehicleid][vSyncA] = a;

			log_init(true);
			log_set_table("logs_vehicles");
			log_set_keys("`PlayerId`,`PlayerName`,`VehicleId`,`VehicleName`,`ActionText`");
			log_set_values("'%d','%e','%d','%e','Nupirko parkavimo vieta'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId], GetModelName(GetVehicleModel(vehicleid)));
			log_commit();

			SaveVehicleFloatEx(vehicleid, "X", x);
			SaveVehicleFloatEx(vehicleid, "Y", y);
			SaveVehicleFloatEx(vehicleid, "Z", z);
			SaveVehicleFloatEx(vehicleid, "A", a);

			GivePlayerMoney(playerid, -VEHICLE_BUY_PARK_PRICE);
			SendFormat(playerid, 0xD9D9D9FF, "Tr. priemonës parkavimo vieta nupirkta.");

			format(string, sizeof string, "%0.1f, %0.1f, %0.1f, %0.1f", x, y, z, a);

			PlayerInfo[playerid][pCarsSpawned]--;
			ParkVehicle(vehicleid);
			return 1;
		}
		else SendWarning(playerid, "Turite sedëti savo tr. priemonëje.");
		return 1;
	}
	else if(!strcmp(input, "park", true)) // /v park
	{
		new vehicleid = INVALID_VEHICLE_ID;
		if((IsPlayerInAnyVehicle(playerid) && (vehicleid = GetPlayerVehicleID(playerid))) || ((vehicleid = GetClosestVehicle(playerid, 5.0)) != INVALID_PLAYER_ID))
		{
			if(!HaveVehicleKey(playerid, vehicleid, .canbejob = false)) return SendWarning(playerid, "Nesate prie savo tr. priemonës.");
			if(GetVehicleDistanceFromPoint(vehicleid, VehicleInfo[vehicleid][vSyncX], VehicleInfo[vehicleid][vSyncY], VehicleInfo[vehicleid][vSyncZ]) > 15.0)
			{
				SendWarning(playerid, "Nesate prie parkavimo vietos.");
				return 1;
			}
			new
				Float:health;

			GetVehicleHealth(vehicleid, health);
			if(health < 400.0) return SendWarning(playerid, "Tr. priemonë per daug sudauþyta.");

			log_init(true);
			log_set_table("logs_vehicles");
			log_set_keys("`PlayerId`,`PlayerName`,`VehicleId`,`VehicleName`,`ActionText`");
			log_set_values("'%d','%e','%d','%e','Priparkavo tr. priemone'", LogPlayerId(playerid), LogPlayerName(playerid), VehicleInfo[vehicleid][vId], GetModelName(GetVehicleModel(vehicleid)));
			log_commit();

			if(VehicleInfo[vehicleid][vSpawnedBy] == PlayerInfo[playerid][pId])
			{
				PlayerInfo[playerid][pCarsSpawned]--;
			}
			ParkVehicle(vehicleid, health);

			SendFormat(playerid, 0xD9D9D9FF, "Tr. priemonë sëkmingai priparkuota.");
			PreparePlayerVehicles(playerid);
		}
		else
		{
			SendWarning(playerid, "Nesate prie tr. priemonës.");
		}
		return 1;
	}
	else if(!strcmp(input,"buy",true)) // /v buy
	{
		new int = GetPlayerInterior(playerid),
			vw = GetPlayerVirtualWorld(playerid);
		foreach(new salonid : Salon)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, SalonData[salonid][salonX], SalonData[salonid][salonY], SalonData[salonid][salonZ]) && vw == SalonData[salonid][salonVW] && int == SalonData[salonid][salonInterior])
			{
				new array;
				for(new i = 0; i < sizeof tmpArray[]; i++) tmpArray[playerid][i] = -1;
				foreach(new sellvehicleid : SellVehicle)
				{
					if(SellVehicleData[sellvehicleid][sellvehicleSalon] == SalonData[salonid][salonId] && SellVehicleData[sellvehicleid][sellvehicleModel] != 0)
					{
						tmpArray[playerid][array] = sellvehicleid;
						array++;
					}
				}
				if(array == 0) return SendError(playerid, "Parduodamø modeliø nëra.");
				GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
				tmpType_Salon[playerid] = salonid;
				tmpPage_Object[playerid] = 1;
				ShowVehicleShop(playerid, true, (tmpArray[playerid][0] != -1 ? (SellVehicleData[tmpArray[playerid][0]][sellvehicleModel]) : (0)), (tmpArray[playerid][1] != -1 ? (SellVehicleData[tmpArray[playerid][1]][sellvehicleModel]) : (0)), (tmpArray[playerid][2] != -1 ? (SellVehicleData[tmpArray[playerid][2]][sellvehicleModel]) : (0)));
				return 1;
			}
		}
		SendClientMessage(playerid, 0xBABABAFF, "Jûs nesate salone.");
	}
	else pc_cmd_v(playerid, "");
	return 1;
}

forward BusinessWorkersLoad(playerid, businessid);
public BusinessWorkersLoad(playerid, businessid)
{
	new tmp,
		salary,
		real,
		line[86],
		string[512] = "{BABABA}Nr.\t{BABABA}Vardas\t{BABABA}Alga\n";
	if(cache_num_rows() == 0) return SendWarning(playerid, "Darbuotojø nëra.");
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	{
		cache_get_value_name_int(i, "PlayerId", tmp);
		cache_get_value_name_int(i, "Salary", salary);
		if(tmp != PlayerInfo[playerid][pId] && tmp != BusinessInfo[businessid][bOwner])
		{
			tmpArray[playerid][real] = tmp;
			format(line, sizeof line, "%d.\t%s\t$%d\n", real + 1, GetNameBySql(tmp), salary);
			real++;
		}
		strcat(string, line);
	}
	ShowPlayerDialog(playerid, DIALOG_BM_WORKERS_ALL, DIALOG_STYLE_TABLIST_HEADERS, "Verslo darbuotojai", string, "Valdyti", "Atðaukti");
	return 1;
}


forward GroupsPermissionsListLoad(playerid, id, page);
public GroupsPermissionsListLoad(playerid, id, page)
{
	new exists,
		string[6000] = "{BABABA}Pavadinimas\t{BABABA}Apraðymas\t{BABABA}Turi teisæ\n",
		line[90],
		permission_name[30],
		comment[50],
		rows = cache_num_rows();
	for(new i = 0; i < rows; i++)
	{
		if(i >= ADMIN_PERMISSIONS_PER_PAGE) // kadangi ADMIN_PERMISSIONS_PER_PAGE+1 traukiam
		{
			break;
		}
		else
		{
			cache_get_value_name(i, "Permission", permission_name);
			cache_get_value_name(i, "Comment", comment);
			cache_get_value_name_int(i, "HavePermission", exists);
			format(line, sizeof line, "%s\t%s\t%s\n", permission_name, comment, (exists > 0 ? ("+") : (" ")));
			strcat(string, line);
		}
	}
	tmpTexture_MarkStart_CP[playerid] = (rows >= ADMIN_PERMISSIONS_PER_PAGE ? (ADMIN_PERMISSIONS_PER_PAGE) : (rows));
	tmpPage_Object[playerid] = page;
	if(page > 0) strcat(string, "{D28989}<<<");
	if(rows > ADMIN_PERMISSIONS_PER_PAGE) strcat(string, "\n{B0DCA8}>>>"); // kadangi tikrinom ADMIN_PERMISSIONS_PER_PAGE+1, gali but 1 daugiau
	ShowPlayerDialog(playerid, DIALOG_AM_GROUP_EDIT_PRIVILEGES, DIALOG_STYLE_TABLIST_HEADERS, "Teisës", string, "Tæsti", "Atðaukti");
	return 1;
}


thread(InteriorDeleted);

forward InteriorsSelectedLoad(playerid, type);
public InteriorsSelectedLoad(playerid, type)
{
	// types: 0 = teleport, 1 = delete
	if(type == 0)
	{
		new Float:x, Float:y, Float:z, int;
		cache_get_value_name_float(0, "X", x);
		cache_get_value_name_float(0, "Y", y);
		cache_get_value_name_float(0, "Z", z);
		cache_get_value_name_int(0, "Interior", int);
		SetPlayerPos(playerid, x, y, z);
		SetPlayerInterior(playerid, int);
		MsgInfo(playerid, "INTERJERAI", "Buvote nuteleportuotas á interjerà.");
	}
	else if(type == 1)
	{
		new id,
			string[86],
			name[32];
		cache_get_value_name_int(0, "id", id);
		cache_get_value_name(0, "Name", name);
		mysql_format(chandler, string, sizeof string, "DELETE FROM `interiors` WHERE id = '%d'", id);
		mysql_fquery(chandler, string, "InteriorDeleted");
		MsgSuccess(playerid, "INTERJERAI", "Interjeras iðtrintas.");
		log_init(true);
		log_set_table("logs_admins");
		log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
		log_set_values("'%d','%e','Istryne interjera','%e'", LogPlayerId(playerid), LogPlayerName(playerid), name);
		log_commit();
		ShowPlayerAdminMenu(playerid);
	}
	return 1;
}

 // "SELECT * FROM `interiors` LIMIT 100 OFFSET 0"

static 
	player_InteriorPage[MAX_PLAYERS];

forward InteriorsMenuLoad(playerid, page);
public InteriorsMenuLoad(playerid, page)
{
	new 
		offset = 100 * page,
		string[2024] = "Nr.\tPavadinimas\n",
		line[126],
		rows = cache_num_rows(),
		real_rows = rows >= 51 ? 50 : rows;


	player_InteriorPage[playerid] = page;
	for(new i = 0; i < real_rows; i++)
	{
		cache_get_value_name(i, "Name", line, 24);
		format(line, sizeof line, "%d.\t%.14s\n", offset + i + 1, line);
		strcat(string, line);
	}

	tmpTexture_MarkStart_CP[playerid] = rows;

	if(page > 0) strcat(string, "{BABABA}<<< ATGAL\n");
	if(rows >= 51) strcat(string, "{BABABA}>>> KITAS\n");

	strcat(string, "PRIDËTI");
	// Dialog_Show(playerid, Dialog_Am_Interiors, DIALOG_STYLE_TABLIST_HEADERS, "Interjerø meniu", string, "Tæsti", "Atðaukti");
	return 1;
}

Dialog:Dialog_Am_Interiors(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(strfind(inputtext, "<<< ATGAL") != -1)
		{
			new 
				string[126];
			mysql_format(chandler, string, sizeof string, "SELECT * FROM `interiors` LIMIT 50 OFFSET %d", (player_InteriorPage[playerid]-1) * 100);
			mysql_tquery(chandler, string, "InteriorsMenuLoad", "dd", playerid, player_InteriorPage[playerid] - 1);
		}
		else if(strfind(inputtext, ">>> KITAS") != -1)
		{
			new 
				string[126];
			mysql_format(chandler, string, sizeof string, "SELECT * FROM `interiors` LIMIT 50 OFFSET %d", (player_InteriorPage[playerid]+1) * 100);
			mysql_tquery(chandler, string, "InteriorsMenuLoad", "dd", playerid, player_InteriorPage[playerid] + 1);
		}
		else if(strfind(inputtext, "PRIDËTI") != -1)
		{
			// prideti
			// Dialog_Show(playerid, Dialog_Am_InteriorAdd, DIALOG_STYLE_INPUT, "Interjerø menu", "{FFFFFF}Áveskite naujojo interjero pavadinimà.", "Pridëti", "Atðaukti");
		}
		else
		{
			tmpSelected[playerid] = listitem;
			// Dialog_Show(playerid, Dialog_Am_InteriorEdit, DIALOG_STYLE_LIST, "Interjerø menu", "Teleportuotis\n{C60000}Iðtrinti", "Tæsti", "Atðaukti");
		}
	}
}

Dialog:Dialog_Am_InteriorAdd(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new name[24];
		if(sscanf(inputtext,"s[24]",name)) return OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 13, "");
		new string[156],
			Float:x,
			Float:y,
			Float:z;
		GetPlayerPos(playerid, x, y, z);
		mysql_format(chandler, string, sizeof string, "INSERT INTO `interiors` (`Name`,`X`,`Y`,`Z`,`Interior`) VALUES ('%e','%f','%f','%f','%d')", name, x, y, z, GetPlayerInterior(playerid));
		mysql_fquery(chandler, string, "InteriorAdded");
		MsgSuccess(playerid, "INTERJERAI", "Sëkmingai pridëjote interjerà.");
		ShowPlayerAdminMenu(playerid);
		log_init(true);
		log_set_table("logs_admins");
		log_set_keys("`PlayerId`,`PlayerName`,`ActionText`,`ExtraString`");
		log_set_values("'%d','%e','(AM) Pridejo nauja interjera','%e'", LogPlayerId(playerid), LogPlayerName(playerid), name);
		log_commit();
	}
	else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 13, "");
	return 1;
}

Dialog:Dialog_Am_InteriorEdit(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new 
			string[126];
		mysql_format(chandler, string, sizeof string, "SELECT * FROM `interiors` LIMIT 1 OFFSET %d", player_InteriorPage[playerid] * 100 + tmpSelected[playerid]);
		mysql_tquery(chandler, string, "InteriorsSelectedLoad", "dd", playerid, listitem);
	}
	else OnDialogResponse(playerid, DIALOG_AM_MAIN, 1, 13, "");
}

forward TruckerOrdersLoad(playerid);
public TruckerOrdersLoad(playerid)
{
	new businessid,
		bool:foundorders = false,
		rows = cache_num_rows(),
		string[256],
		unload[28],
		load[28],
		Float:unloadX, // kad galetume iskrovimo vieta nustatyt stringe
		Float:unloadY,
		price,
		cargo = random(sizeof CargoList);
	if(rows)
	{
		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "BusinessId", businessid);
			cache_get_value_name_int(i, "Price", price);
			if((businessid = FindBusinessBySql(businessid)) != INVALID_BUSINESS_ID)
			{
				PlayerInfo[playerid][pJobDestination] = businessid;
				PlayerInfo[playerid][pJobCurrentType] = 1;
				PlayerInfo[playerid][pJobActionTime] = -1; // unlimited
				unloadX = BusinessInfo[businessid][bWaresX],
				unloadY = BusinessInfo[businessid][bWaresY];
				JobGUI_Show(playerid);
				foundorders = true;
				UpdateWaresOrderStatus(BusinessInfo[businessid][bId], 2);
				break;
			}
		}
	}
	if(!foundorders)
	{
		// neradom uzsakymu, random.
		PlayerInfo[playerid][pJobDestination] = random(sizeof CargoList);
		PlayerInfo[playerid][pJobCurrentType] = 2;
		PlayerInfo[playerid][pJobActionTime] = CargoList[cargo][cargoTime];
		unloadX = CargoList[cargo][cargoUnloadX],
		unloadY = CargoList[cargo][cargoUnloadY];
		JobGUI_Show(playerid);
	}
	GetCoords2DZone(unload, 28, unloadX, unloadY);
	GetCoords2DZone(load, 28, CargoList[cargo][cargoLoadX], CargoList[cargo][cargoLoadY]);
	// nustatome paemimo vieta i random, nesvarbu kad veza i versla. Paimt is sandelio vistiek reik
	format(string, sizeof string, "KROVINYS:_%s~n~PAEMIMO_VIETA:_%s~n~ISKROVIMO_VIETA:_%s", (PlayerInfo[playerid][pJobCurrentType] == 1 ? ("IVAIRIOS_PREKES") : (strtoupper(CargoList[cargo][cargoName]))), strtoupper(load), strtoupper(unload));
	JobGUI_Update(playerid, .bottext = string);
	SetPlayerCheckpointEx(playerid, CHECKPOINT_TYPE_CARGO_LOAD,
									CargoList[cargo][cargoLoadX],
									CargoList[cargo][cargoLoadY],
									CargoList[cargo][cargoLoadZ], 2.3);
	PlayerInfo[playerid][pJobDuty] = 1;
	PlayerInfo[playerid][pJobCurrentAction] = JOB_ACTION_LOAD_CARGO;
	PlayerExtra[playerid][peJobDutyCooldown] = gettime();
	return 1;
}

forward DubkeyAdded(playerid, receiverid, vehicleid);
public DubkeyAdded(playerid, receiverid, vehicleid)
{
	SendFormat(playerid, 0xE6E6E6FF, "Davëte þaidëjui {FF8400}%s{E6E6E6} raktus nuo {FF8400}\"%s\"{E6E6E6} tr. priemonës.", GetPlayerNameEx(receiverid), GetModelName(GetVehicleModel(vehicleid)));
	SendFormat(receiverid, 0xE6E6E6FF, "Gavote tr. priemonës {FF8400}\"%s\" {E6E6E6}raktus ið {E6E6E6}%s{E6E6E6}.", GetModelName(GetVehicleModel(vehicleid)), GetPlayerNameEx(playerid));
	return 1;
}

forward DubkeyRemoved(playerid, receiverid, vehicleid);
public DubkeyRemoved(playerid, receiverid, vehicleid)
{
	SendFormat(playerid, 0xE6E6E6FF, "Atëmëte þaidëjo {FF8400}%s{E6E6E6} raktus nuo {FF8400}\"%s\"{E6E6E6} tr. priemonës.", GetPlayerNameEx(receiverid), GetModelName(GetVehicleModel(vehicleid)));
	SendFormat(receiverid, 0xE6E6E6FF, "{E6E6E6}%s{E6E6E6} atëmë ið jûsø raktus nuo {FF8400}\"%s\"{E6E6E6} tr. priemonës.", GetPlayerNameEx(playerid), GetModelName(GetVehicleModel(vehicleid)));
	return 1;
}

stock StartBroadcast()
{
	broadcast_Timer = SetTimer("BroadcastTimer", 2000, false);
}

forward BroadcastTimer();
public BroadcastTimer()
{
	new 
		Float:owner_x, Float:owner_y, Float:owner_z;
	GetPlayerPos(broadcast_Owner, owner_x, owner_y, owner_z);
	foreach(new playerid : Player)
	{
		if(player_Broadcast[playerid])
		{
			if(GetPlayerDistanceFromPoint(playerid, owner_x, owner_y, owner_z) > MAX_DISTANCE_BETWEEN_BROADCASTERS)
			{
				SendToBroadcasters(0xD98364FF, "[STUDIJA]: %s atsijungë nuo pokalbio.", GetPlayerNameEx(playerid));
				KickFromBroadcast(playerid);
			}
		}
	}
	return 1;
}

stock EndBroadcast()
{
	KillTimer(broadcast_Timer);
	broadcast_Status = 0;
	foreach(new playerid : Player)
	{
		if(player_Broadcast[playerid])
		{
			KickFromBroadcast(playerid);
		}
		if(player_InviteToBroadcast[playerid])
		{
			player_InviteToBroadcast[playerid] = false;
		}
	}
	return 1;
}

stock KickFromBroadcast(playerid)
{
	player_Broadcast[playerid] = false;
	player_BroadcastAnonimous[playerid] = false;
	player_BroadcastRole[playerid] = 0;
	player_InviteToBroadcast[playerid] = false;
	format(player_BroadcastAnonimousStr[playerid], 1, "");
	return 1;
}

new Float:wAreas[MAX_WATER_AREAS][6] =
{
        {-1584.00000, -1826.00000, -1360.00000, -1642.00000, -69.0, 0.0},
        {-3000.00000, 354.00000, -2832.00000, 2942.00000, -69.0, 0.0},
        {-2832.00000, 1296.00000, -2704.00000, 2192.00000, -69.0, 0.0},
        {-2704.00000, 1360.00000, -2240.00000, 2224.00000, -69.0, 0.0},
        {-2240.00000, 1432.00000, -2000.00000, 2224.00000, -69.0, 0.0},
        {-2064.00000, 1312.00000, -2000.00000, 1432.00000, -69.0, 0.0},
        {-2000.00000, 1392.00000, -1712.00000, 1792.00000, -69.0, 0.0},
        {-2000.00000, 1792.00000, -1724.00000, 2016.00000, -69.0, 0.0},
        {-2000.00000, 2016.00000, -1836.00000, 2176.00000, -69.0, 0.0},
        {-2000.00000, 2176.00000, -1920.00000, 2224.00000, -69.0, 0.0},
        {-2208.00000, 2224.00000, -2000.00000, 2432.00000, -69.0, 0.0},
        {-2208.00000, 2432.00000, -2000.00000, 2576.00000, -69.0, 0.0},
        {-2352.00000, 2448.00000, -2208.00000, 2576.00000, -69.0, 0.0},
        {-2312.00000, 2344.00000, -2208.00000, 2448.00000, -69.0, 0.0},
        {-1712.00000, 1360.00000, -1600.00000, 1792.00000, -69.0, 0.0},
        {-1664.00000, 1280.00000, -1600.00000, 1360.00000, -69.0, 0.0},
        {-1600.00000, 1280.00000, -1440.00000, 1696.00000, -69.0, 0.0},
        {-1600.00000, 1696.00000, -1488.00000, 1744.00000, -69.0, 0.0},
        {-1440.00000, 1440.00000, -1232.00000, 1696.00000, -69.0, 0.0},
        {-1232.00000, 1440.00000, -1136.00000, 1616.00000, -69.0, 0.0},
        {-1440.00000, 1280.00000, -1136.00000, 1440.00000, -69.0, 0.0},
        {-1136.00000, 1248.00000, -1104.00000, 1424.00000, -69.0, 0.0},
        {-1520.00000, 1104.00000, -1104.00000, 1248.00000, -69.0, 0.0},
        {-1520.00000, 1248.00000, -1136.00000, 1280.00000, -69.0, 0.0},
        {-1600.00000, 1200.00000, -1520.00000, 1280.00000, -69.0, 0.0},
        {-1104.00000, 944.00000, -932.00000, 1136.00000, -69.0, 0.0},
        {-1424.00000, 944.00000, -1104.00000, 1104.00000, -69.0, 0.0},
        {-1520.00000, 1008.00000, -1424.00000, 1104.00000, -69.0, 0.0},
        {-1424.00000, 784.00000, -896.00000, 944.00000, -69.0, 0.0},
        {-1488.00000, 560.00000, -896.00000, 784.00000, -69.0, 0.0},
        {-1536.00000, 560.00000, -1488.00000, 672.00000, -69.0, 0.0},
        {-896.00000, 208.00000, -768.00000, 732.00000, -69.0, 0.0},
        {-1600.00000, 208.00000, -896.00000, 560.00000, -69.0, 0.0},
        {-992.00000, -144.00000, -912.00000, 208.00000, -69.0, 0.0},
        {-1748.00000, -816.00000, -1180.00000, -592.00000, -69.0, 0.0},
        {-1458.00000, -592.00000, -1054.00000, -432.00000, -69.0, 0.0},
        {-3000.00000, -1186.00000, -2880.00000, -822.00000, -69.0, 0.0},
        {-2880.00000, -1168.00000, -2768.00000, -896.00000, -69.0, 0.0},
        {-2768.00000, -1106.00000, -2656.00000, -830.00000, -69.0, 0.0},
        {-2656.00000, -1024.00000, -2512.00000, -816.00000, -69.0, 0.0},
        {-2512.00000, -976.00000, -2400.00000, -816.00000, -69.0, 0.0},
        {-2400.00000, -1056.00000, -2256.00000, -864.00000, -69.0, 0.0},
        {-2256.00000, -1198.00000, -2144.00000, -950.00000, -69.0, 0.0},
        {-2144.00000, -1408.00000, -2000.00000, -1072.00000, -69.0, 0.0},
        {-2000.00000, -1536.00000, -1856.00000, -1280.00000, -69.0, 0.0},
        {-1856.00000, -1648.00000, -1728.00000, -1440.00000, -69.0, 0.0},
        {-1728.00000, -1728.00000, -1584.00000, -1520.00000, -69.0, 0.0},
        {-1360.00000, -2052.00000, -1216.00000, -1696.00000, -69.0, 0.0},
        {-1440.00000, -2110.00000, -1360.00000, -1950.00000, -69.0, 0.0},
        {-1484.00000, -2180.00000, -1440.00000, -2036.00000, -69.0, 0.0},
        {-1572.00000, -2352.00000, -1484.00000, -2096.00000, -69.0, 0.0},
        {-1216.00000, -2208.00000, -1104.00000, -1864.00000, -69.0, 0.0},
        {-1232.00000, -2304.00000, -1120.00000, -2208.00000, -69.0, 0.0},
        {-1270.00000, -2480.00000, -1178.00000, -2304.00000, -69.0, 0.0},
        {-1260.00000, -2560.00000, -1188.00000, -2480.00000, -69.0, 0.0},
        {-1262.00000, -2640.00000, -1146.00000, -2560.00000, -69.0, 0.0},
        {-1216.00000, -2752.00000, -1080.00000, -2640.00000, -69.0, 0.0},
        {-1200.00000, -2896.00000, -928.00000, -2752.00000, -69.0, 0.0},
        {-2016.00000, -3000.00000, -1520.00000, -2704.00000, -69.0, 0.0},
        {-1520.00000, -3000.00000, -1376.00000, -2894.00000, -69.0, 0.0},
        {-2256.00000, -3000.00000, -2016.00000, -2772.00000, -69.0, 0.0},
        {-2448.00000, -3000.00000, -2256.00000, -2704.00000, -69.0, 0.0},
        {-3000.00000, -3000.00000, -2448.00000, -2704.00000, -69.0, 0.0},
        {-3000.00000, -2704.00000, -2516.00000, -2576.00000, -69.0, 0.0},
        {-3000.00000, -2576.00000, -2600.00000, -2448.00000, -69.0, 0.0},
        {-3000.00000, -2448.00000, -2628.00000, -2144.00000, -69.0, 0.0},
        {-3000.00000, -2144.00000, -2670.00000, -2032.00000, -69.0, 0.0},
        {-3000.00000, -2032.00000, -2802.00000, -1904.00000, -69.0, 0.0},
        {-3000.00000, -1904.00000, -2920.00000, -1376.00000, -69.0, 0.0},
        {-3000.00000, -1376.00000, -2936.00000, -1186.00000, -69.0, 0.0},
        {-768.00000, 208.00000, -720.00000, 672.00000, -69.0, 0.0},
        {-720.00000, 256.00000, -656.00000, 672.00000, -69.0, 0.0},
        {-656.00000, 276.00000, -496.00000, 576.00000, -69.0, 0.0},
        {-496.00000, 298.00000, -384.00000, 566.00000, -69.0, 0.0},
        {-384.00000, 254.00000, -224.00000, 530.00000, -69.0, 0.0},
        {-224.00000, 212.00000, -64.00000, 528.00000, -69.0, 0.0},
        {-64.00000, 140.00000, 64.00000, 544.00000, -69.0, 0.0},
        {64.00000, 140.00000, 304.00000, 544.00000, -69.0, 0.0},
        {120.00000, 544.00000, 304.00000, 648.00000, -69.0, 0.0},
        {304.00000, 164.00000, 384.00000, 608.00000, -69.0, 0.0},
        {384.00000, 222.00000, 464.00000, 630.00000, -69.0, 0.0},
        {464.00000, 304.00000, 544.00000, 656.00000, -69.0, 0.0},
        {544.00000, 362.00000, 800.00000, 646.00000, -69.0, 0.0},
        {800.00000, 432.00000, 944.00000, 704.00000, -69.0, 0.0},
        {944.00000, 480.00000, 976.00000, 720.00000, -69.0, 0.0},
        {976.00000, 528.00000, 1040.00000, 704.00000, -69.0, 0.0},
        {1040.00000, 560.00000, 1280.00000, 672.00000, -69.0, 0.0},
        {1280.00000, 480.00000, 1472.00000, 640.00000, -69.0, 0.0},
        {1472.00000, 432.00000, 1616.00000, 640.00000, -69.0, 0.0},
        {1616.00000, 416.00000, 1824.00000, 608.00000, -69.0, 0.0},
        {1824.00000, 400.00000, 2160.00000, 576.00000, -69.0, 0.0},
        {2160.00000, 400.00000, 2432.00000, 512.00000, -69.0, 0.0},
        {2432.00000, 368.00000, 2560.00000, 544.00000, -69.0, 0.0},
        {2560.00000, 336.00000, 2720.00000, 576.00000, -69.0, 0.0},
        {2720.00000, 196.00000, 2816.00000, 560.00000, -69.0, 0.0},
        {2816.00000, 160.00000, 3000.00000, 576.00000, -69.0, 0.0},
        {2860.00000, -80.00000, 3000.00000, 160.00000, -69.0, 0.0},
        {-1376.00000, -3000.00000, -544.00000, -2896.00000, -69.0, 0.0},
        {-928.00000, -2896.00000, -544.00000, -2800.00000, -69.0, 0.0},
        {-544.00000, -3000.00000, -320.00000, -2824.00000, -69.0, 0.0},
        {-320.00000, -3000.00000, -192.00000, -2876.00000, -69.0, 0.0},
        {-192.00000, -3000.00000, 160.00000, -2920.00000, -69.0, 0.0},
        {-128.00000, -2920.00000, 160.00000, -2872.00000, -69.0, 0.0},
        {-60.00000, -2872.00000, 160.00000, -2816.00000, -69.0, 0.0},
        {-4.00000, -2816.00000, 160.00000, -2672.00000, -69.0, 0.0},
        {40.00000, -2672.00000, 160.00000, -2256.00000, -69.0, 0.0},
        {16.00000, -2560.00000, 40.00000, -2256.00000, -69.0, 0.0},
        {-32.00000, -2440.00000, 16.00000, -2256.00000, -69.0, 0.0},
        {-32.00000, -2488.00000, 16.00000, -2440.00000, -69.0, 0.0},
        {-96.00000, -2440.00000, -32.00000, -2256.00000, -69.0, 0.0},
        {-168.00000, -2384.00000, -96.00000, -2256.00000, -69.0, 0.0},
        {-224.00000, -2256.00000, 160.00000, -2080.00000, -69.0, 0.0},
        {-248.00000, -2080.00000, 160.00000, -1968.00000, -69.0, 0.0},
        {-280.00000, -1968.00000, -128.00000, -1824.00000, -69.0, 0.0},
        {-264.00000, -2016.00000, -248.00000, -1968.00000, -69.0, 0.0},
        {-264.00000, -1824.00000, -128.00000, -1640.00000, -69.0, 0.0},
        {-128.00000, -1768.00000, 124.00000, -1648.00000, -69.0, 0.0},
        {-128.00000, -1792.00000, 140.00000, -1768.00000, -69.0, 0.0},
        {-128.00000, -1968.00000, 148.00000, -1792.00000, -69.0, 0.0},
        {160.00000, -2128.00000, 592.00000, -1976.00000, -69.0, 0.0},
        {480.00000, -1976.00000, 592.00000, -1896.00000, -69.0, 0.0},
        {352.00000, -1976.00000, 480.00000, -1896.00000, -69.0, 0.0},
        {232.00000, -1976.00000, 352.00000, -1880.00000, -69.0, 0.0},
        {160.00000, -1976.00000, 232.00000, -1872.00000, -69.0, 0.0},
        {160.00000, -2784.00000, 592.00000, -2128.00000, -69.0, 0.0},
        {160.00000, -3000.00000, 592.00000, -2784.00000, -69.0, 0.0},
        {352.00000, -1896.00000, 544.00000, -1864.00000, -69.0, 0.0},
        {592.00000, -2112.00000, 976.00000, -1896.00000, -69.0, 0.0},
        {736.00000, -1896.00000, 904.00000, -1864.00000, -69.0, 0.0},
        {704.00000, -1896.00000, 736.00000, -1728.00000, -69.0, 0.0},
        {736.00000, -1864.00000, 752.00000, -1728.00000, -69.0, 0.0},
        {688.00000, -1728.00000, 752.00000, -1480.00000, -69.0, 0.0},
        {592.00000, -2192.00000, 976.00000, -2112.00000, -69.0, 0.0},
        {592.00000, -2328.00000, 1008.00000, -2192.00000, -69.0, 0.0},
        {592.00000, -3000.00000, 1008.00000, -2328.00000, -69.0, 0.0},
        {1008.00000, -3000.00000, 1072.00000, -2368.00000, -69.0, 0.0},
        {1008.00000, -2368.00000, 1064.00000, -2320.00000, -69.0, 0.0},
        {1072.00000, -2672.00000, 1288.00000, -2412.00000, -69.0, 0.0},
        {1072.00000, -2768.00000, 1288.00000, -2672.00000, -69.0, 0.0},
        {1072.00000, -3000.00000, 1288.00000, -2768.00000, -69.0, 0.0},
        {1288.00000, -3000.00000, 1448.00000, -2760.00000, -69.0, 0.0},
        {1288.00000, -2760.00000, 1392.00000, -2688.00000, -69.0, 0.0},
        {1448.00000, -3000.00000, 1720.00000, -2754.00000, -69.0, 0.0},
        {1720.00000, -3000.00000, 2064.00000, -2740.00000, -69.0, 0.0},
        {2064.00000, -3000.00000, 2144.00000, -2742.00000, -69.0, 0.0},
        {2144.00000, -3000.00000, 2208.00000, -2700.00000, -69.0, 0.0},
        {2208.00000, -3000.00000, 2272.00000, -2684.00000, -69.0, 0.0},
        {2272.00000, -3000.00000, 2376.00000, -2312.00000, -69.0, 0.0},
        {2376.00000, -2480.00000, 2472.00000, -2240.00000, -69.0, 0.0},
        {2472.00000, -2376.00000, 2776.00000, -2240.00000, -69.0, 0.0},
        {2776.00000, -2336.00000, 2856.00000, -2192.00000, -69.0, 0.0},
        {2808.00000, -2560.00000, 3000.00000, -2336.00000, -69.0, 0.0},
        {2856.00000, -2336.00000, 3000.00000, -2136.00000, -69.0, 0.0},
        {2888.00000, -2136.00000, 3000.00000, -1840.00000, -69.0, 0.0},
        {2872.00000, -1880.00000, 2888.00000, -1840.00000, -69.0, 0.0},
        {2864.00000, -1840.00000, 3000.00000, -1720.00000, -69.0, 0.0},
        {2888.00000, -1720.00000, 3000.00000, -1664.00000, -69.0, 0.0},
        {2896.00000, -1664.00000, 3000.00000, -1592.00000, -69.0, 0.0},
        {2920.00000, -1592.00000, 3000.00000, -1504.00000, -69.0, 0.0},
        {2940.00000, -1504.00000, 3000.00000, -1344.00000, -69.0, 0.0},
        {2908.00000, -1344.00000, 3000.00000, -1096.00000, -69.0, 0.0},
        {2912.00000, -1096.00000, 3000.00000, -800.00000, -69.0, 0.0},
        {2918.00000, -800.00000, 3000.00000, -472.00000, -69.0, 0.0},
        {2872.00000, -472.00000, 3000.00000, -376.00000, -69.0, 0.0},
        {2912.00000, -376.00000, 3000.00000, -80.00000, -69.0, 0.0},
        {2864.00000, -376.00000, 2912.00000, -80.00000, -69.0, 0.0},
        {2560.00000, -2560.00000, 2680.00000, -2456.00000, -69.0, 0.0},
        {-992.00000, -422.00000, -848.00000, -238.00000, -69.0, 0.0},
        {-848.00000, -384.00000, -512.00000, -256.00000, -69.0, 0.0},
        {-512.00000, -400.00000, -320.00000, -272.00000, -69.0, 0.0},
        {-320.00000, -400.00000, -208.00000, -304.00000, -69.0, 0.0},
        {-384.00000, -528.00000, -100.00000, -460.00000, -69.0, 0.0},
        {-384.00000, -704.00000, -64.00000, -528.00000, -69.0, 0.0},
        {-336.00000, -816.00000, -80.00000, -704.00000, -69.0, 0.0},
        {-208.00000, -936.00000, -48.00000, -816.00000, -69.0, 0.0},
        {-48.00000, -936.00000, 144.00000, -874.00000, -69.0, 0.0},
        {32.00000, -1024.00000, 128.00000, -936.00000, -69.0, 0.0},
        {-16.00000, -1104.00000, 96.00000, -1024.00000, -69.0, 0.0},
        {0.00000, -1200.00000, 144.00000, -1104.00000, -69.0, 0.0},
        {-16.00000, -1296.00000, 128.00000, -1200.00000, -69.0, 0.0},
        {-16.00000, -1440.00000, 112.00000, -1296.00000, -69.0, 0.0},
        {0.00000, -1552.00000, 96.00000, -1440.00000, -69.0, 0.0},
        {-128.00000, -1648.00000, 96.00000, -1552.00000, -69.0, 0.0},
        {-64.00000, -672.00000, 32.00000, -576.00000, -69.0, 0.0},
        {-64.00000, -576.00000, 96.00000, -496.00000, -69.0, 0.0},
        {16.00000, -496.00000, 144.00000, -392.00000, -69.0, 0.0},
        {144.00000, -448.00000, 240.00000, -384.00000, -69.0, 0.0},
        {240.00000, -432.00000, 304.00000, -320.00000, -69.0, 0.0},
        {304.00000, -384.00000, 352.00000, -288.00000, -69.0, 0.0},
        {352.00000, -332.00000, 400.00000, -252.00000, -69.0, 0.0},
        {400.00000, -298.00000, 464.00000, -234.00000, -69.0, 0.0},
        {464.00000, -288.00000, 576.00000, -208.00000, -69.0, 0.0},
        {576.00000, -272.00000, 688.00000, -192.00000, -69.0, 0.0},
        {688.00000, -256.00000, 768.00000, -144.00000, -69.0, 0.0},
        {768.00000, -212.00000, 800.00000, -124.00000, -69.0, 0.0},
        {800.00000, -180.00000, 976.00000, -92.00000, -69.0, 0.0},
        {976.00000, -160.00000, 1200.00000, -64.00000, -69.0, 0.0},
        {1200.00000, -244.00000, 1264.00000, -108.00000, -69.0, 0.0},
        {1264.00000, -330.00000, 1344.00000, -158.00000, -69.0, 0.0},
        {1344.00000, -320.00000, 1456.00000, -208.00000, -69.0, 0.0},
        {1456.00000, -282.00000, 1520.00000, -198.00000, -69.0, 0.0},
        {1520.00000, -208.00000, 1648.00000, -80.00000, -69.0, 0.0},
        {1568.00000, -80.00000, 1648.00000, 16.00000, -69.0, 0.0},
        {1648.00000, -64.00000, 1792.00000, 16.00000, -69.0, 0.0},
        {1792.00000, -128.00000, 1888.00000, 0.00000, -69.0, 0.0},
        {1888.00000, -268.00000, 2016.00000, -20.00000, -69.0, 0.0},
        {2016.00000, -256.00000, 2144.00000, -16.00000, -69.0, 0.0},
        {2144.00000, -272.00000, 2224.00000, -96.00000, -69.0, 0.0},
        {2224.00000, -272.00000, 2288.00000, -144.00000, -69.0, 0.0},
        {2048.00000, -16.00000, 2144.00000, 112.00000, -69.0, 0.0},
        {2096.00000, 112.00000, 2224.00000, 240.00000, -69.0, 0.0},
        {2098.00000, 240.00000, 2242.00000, 400.00000, -69.0, 0.0},
        {2160.00000, 512.00000, 2432.00000, 576.00000, -69.0, 0.0},
        {2432.00000, 544.00000, 2560.00000, 592.00000, -69.0, 0.0},
        {2560.00000, 576.00000, 2720.00000, 608.00000, -69.0, 0.0},
        {2720.00000, 560.00000, 2816.00000, 608.00000, -69.0, 0.0},
        {2816.00000, 576.00000, 3000.00000, 752.00000, -69.0, 0.0},
        {-656.00000, 576.00000, -496.00000, 672.00000, -69.0, 0.0},
        {-740.00000, 672.00000, -484.00000, 784.00000, -69.0, 0.0},
        {-720.00000, 784.00000, -384.00000, 1008.00000, -69.0, 0.0},
        {-640.00000, 1008.00000, -400.00000, 1216.00000, -69.0, 0.0},
        {-880.00000, 1296.00000, -688.00000, 1408.00000, -69.0, 0.0},
        {-688.00000, 1216.00000, -400.00000, 1424.00000, -69.0, 0.0},
        {-672.00000, 1424.00000, -448.00000, 1616.00000, -69.0, 0.0},
        {-832.00000, 1616.00000, -512.00000, 1728.00000, -69.0, 0.0},
        {-984.00000, 1632.00000, -832.00000, 1712.00000, -69.0, 0.0},
        {-832.00000, 1728.00000, -576.00000, 2032.00000, -69.0, 0.0},
        {-1248.00000, 2536.00000, -1088.00000, 2824.00000, -69.0, 40.5}, // not by default
        {-1088.00000, 2544.00000, -1040.00000, 2800.00000, -69.0, 40.5}, // not by default
        {-1040.00000, 2544.00000, -832.00000, 2760.00000, -69.0, 40.5}, // not by default
        {-1088.00000, 2416.00000, -832.00000, 2544.00000, -69.0, 40.5}, // not by default
        {-1040.00000, 2304.00000, -864.00000, 2416.00000, -69.0, 40.5}, // not by default
        {-1024.00000, 2144.00000, -864.00000, 2304.00000, -69.0, 40.5}, // not by default
        {-1072.00000, 2152.00000, -1024.00000, 2264.00000, -69.0, 40.5}, // not by default
        {-1200.00000, 2114.00000, -1072.00000, 2242.00000, -69.0, 40.5}, // not by default
        {-976.00000, 2016.00000, -848.00000, 2144.00000, -69.0, 40.5}, // not by default
        {-864.00000, 2144.00000, -448.00000, 2272.00000, -69.0, 40.5}, // not by default
        {-700.00000, 2272.00000, -484.00000, 2320.00000, -69.0, 40.5}, // not by default
        {-608.00000, 2320.00000, -528.00000, 2352.00000, -69.0, 40.5}, // not by default
        {-848.00000, 2044.00000, -816.00000, 2144.00000, -69.0, 40.5}, // not by default
        {-816.00000, 2060.00000, -496.00000, 2144.00000, -69.0, 40.5}, // not by default
        {-604.00000, 2036.00000, -484.00000, 2060.00000, -69.0, 40.5}, // not by default
        {2376.00000, -3000.00000, 3000.00000, -2688.00000, -69.0, 0.0},
        {2520.00000, -2688.00000, 3000.00000, -2560.00000, -69.0, 0.0},
        {-1328.00000, 2082.00000, -1200.00000, 2210.00000, -69.0, 40.5}, // not by default
        {-1400.00000, 2074.00000, -1328.00000, 2150.00000, -69.0, 40.5}, // not by default
        {-1248.00000, -144.00000, -992.00000, 208.00000, -69.0, 0.0},
        {-1176.00000, -432.00000, -992.00000, -144.00000, -69.0, 0.0},
        {-1792.00000, -592.00000, -1728.00000, -144.00000, -69.0, 0.0},
        {-1792.00000, 170.00000, -1600.00000, 274.00000, -69.0, 0.0},
        {-1600.00000, 168.00000, -1256.00000, 208.00000, -69.0, 0.0},
        {-1574.00000, -44.00000, -1550.00000, 108.00000, -69.0, 0.0},
        {1928.00000, -1222.00000, 2012.00000, -1178.00000, 16.0, 17.81}, // not by default
        {-464.00000, -1908.00000, -280.00000, -1832.00000, -69.0, 0.0},
        {2248.00000, -1182.00000, 2260.00000, -1170.00000, -99.0, -99.0}, // not used | interior
        {2292.00000, -1432.00000, 2328.00000, -1400.00000, 20.0, 21.97}, // not by default
        {1888.00000, 1468.00000, 2036.00000, 1700.00000, 0.0, 8.4}, // not by default
        {2090.00000, 1670.00000, 2146.00000, 1694.00000, -99.0, -99.0}, // not used
        {2110.00000, 1234.00000, 2178.00000, 1330.00000, 6.5, 7.64}, // not by default
        {2108.00000, 1084.00000, 2180.00000, 1172.00000, 6.5, 7.64}, // not by default
        {2506.00000, 1546.00000, 2554.00000, 1586.00000, 6.5, 8.77}, // not by default
        {1270.00000, -812.00000, 1290.00000, -800.00000, 85.0, 86.48}, // not by default
        {1084.00000, -684.00000, 1104.00000, -660.00000, 110.0, 111.81}, // not by default
        {502.00000, -1114.00000, 522.00000, -1098.00000, -99.0, -99.0}, // not used
        {214.00000, -1208.00000, 246.00000, -1180.00000, 72.0, 73.81}, // not by default
        {218.00000, -1180.00000, 238.00000, -1172.00000, 72.0, 73.81}, // not by default
        {178.00000, -1244.00000, 206.00000, -1216.00000, 76.0, 76.86}, // not by default
        {1744.00000, 2780.00000, 1792.00000, 2868.00000, -99.0, -99.0}, // not used
        {-2832.00000, 2888.00000, 3000.00000, 3000.00000, -69.0, 0.0},
        {-2778.00000, -522.00000, -2662.00000, -414.00000, -23.0, 2.6}, // not by default
        {1520.00000, -252.00000, 1572.00000, -208.00000, -69.0, 0.0},
        {2922.00000, 752.00000, 3000.00000, 2888.00000, -69.0, 0.0},
        {-3000.00000, -446.00000, -2910.00000, 354.00000, -69.0, 0.0},
        {-2434.00000, 2224.00000, -2294.00000, 2340.00000, -69.0, 0.0},
        {-2294.00000, 2224.00000, -2208.00000, 2312.00000, -69.0, 0.0},
        {2058.00000, 1868.00000, 2110.00000, 1964.00000, 7.4, 9.43}, // not by default
        {-3000.00000, 2942.00000, -2832.00000, 3000.00000, -69.0, 0.0},
        {-550.00000, 2004.00000, -494.00000, 2036.00000, -69.0, 40.5}, // not by default
        {-896.00000, 842.00000, -776.00000, 954.00000, -69.0, 0.0},
        {-2240.00000, 1336.00000, -2088.00000, 1432.00000, -69.0, 0.0},
        {-3000.00000, -822.00000, -2930.00000, -446.00000, -69.0, 0.0},
        {-2660.00000, 2224.00000, -2520.00000, 2264.00000, -69.0, 0.0},
        {-378.00000, -460.00000, -138.00000, -400.00000, -69.0, 0.0},
        {1836.00000, 1468.00000, 1888.00000, 1568.00000, 7.1, 8.4}, // not by default
        {890.00000, -1106.00000, 902.00000, -1098.00000, -99.0, -99.0}, // not used
        {1202.00000, -2414.00000, 1278.00000, -2334.00000, 0.0, 8.67}, // not by default
        {1072.00000, -2412.00000, 1128.00000, -2372.00000, -69.0, 0.0},
        {-848.00000, -2082.00000, -664.00000, -1866.00000, 2.2, 5.08}, // not by default
        {-664.00000, -1924.00000, -464.00000, -1864.00000, 2.2, 5.08}, // not by default
        {-1484.00000, 784.00000, -1424.00000, 840.00000, -69.0, 0.0},
        {-496.00000, 566.00000, -432.00000, 642.00000, -69.0, 0.0},
        {250.00000, 2808.00000, 818.00000, 2888.00000, -69.0, 0.0},
        {2502.00000, -2240.00000, 2670.00000, -2120.00000, -69.0, 0.0},
        {1270.00000, -780.00000, 1290.00000, -768.00000, -99.0, -99.0}, // not used | interior
        {88.00000, 544.00000, 120.00000, 572.00000, -69.0, 0.0},
        {1856.00000, -202.00000, 1888.00000, -158.00000, -69.0, 0.0},
        {-2048.00000, -962.00000, -2004.00000, -758.00000, -99.0, -99.0}, // not used
        {2564.00000, 2370.00000, 2604.00000, 2398.00000, 15.6, 16.2}, // not by default
        {-2522.00000, -310.00000, -2382.00000, -234.00000, -99.0, -99.0}, // not used
        {2872.00000, -2136.00000, 2888.00000, -2120.00000, -69.0, 0.0},
        {2760.00000, -2240.00000, 2776.00000, -2232.00000, -69.0, 0.0},
        {-912.00000, -150.02799, -717.08660, 208.00000, -69.0, 0.0},
        {-1728.00000, -222.00000, -1361.66967, 170.00000, -69.0, 0.0}
};

stock IsPlayerInWater(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(CoordsInWater(x, y, z) > 0) return true;
	return false;
}

stock CoordsInWater(Float:x, Float:y, Float:z)
{
	for(new w; w < MAX_WATER_AREAS; w++)
	{
		if(!(wAreas[w][4] == -99.0 && wAreas[w][5] == -99.0))
		{
			if((wAreas[w][0] <= x <= wAreas[w][2]) && (wAreas[w][1] <= y <= wAreas[w][3]) && (wAreas[w][4] <= z <= wAreas[w][5])) return 1;
		}
	}
    return 0;
}